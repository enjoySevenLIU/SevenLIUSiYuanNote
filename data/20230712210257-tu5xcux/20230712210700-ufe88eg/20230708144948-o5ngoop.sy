{"ID":"20230708144948-o5ngoop","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230708144948-o5ngoop","name":"生命周期函数","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230708144948-o5ngoop\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230708162620-myzdag1\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230708153044-h0l4h8t\u0026quot;,\u0026quot;scrollTop\u0026quot;:4177.33349609375\u0026#125;","title":"U1L2——生命周期函数","type":"doc","updated":"20240926144001"},"Children":[{"ID":"20230708162620-myzdag1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230708162620-myzdag1","updated":"20230708162620"},"Children":[{"Type":"NodeText","Data":"本章代码关键字"}]},{"ID":"20230708162620-toctuyd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230708162620-toctuyd","updated":"20230708162959"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"MonoBehaviour\t\t//脚本内继承该类且脚本与继承该类的类名一致才能使脚本挂载到一些对象上，注意这种类不能new出来，也不再建议写构造函数\nAwake() { } \t\t//当一个对象被创建了，awake()会立刻执行\nOnEnable() { }\t\t//想要当一个对象被激活的时候，进行一些逻辑处理就可以写这个函数\nStart() { }\t\t//与awake一样，都是对象在被创建出来后只会调用一次的函数，区别在于运行时机不同\nFixedUpdate() { }\t//主要用于进行物理更新的函数\nUpdate() { }\t\t//主要用于处理游戏核心逻辑更新的函数\nLateUpdate() { }\t//一般是用来处理摄像机位置更新相关内容的函数\nOnDisable() { }\t\t//如果希望在一个对象每次失活时做一些处理 就可以在该函数中写逻辑\nOnDestroy() { }\t\t//对象被销毁时调用 依附的GameObject对象被删除时（该组件被移除也会调用，只会调用一次）\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230708145058-nkfj28m","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230708145058-nkfj28m","updated":"20240926144001"},"Children":[{"Type":"NodeText","Data":"生命周期函数的概念"}]},{"ID":"20230708145216-zvvf6n9","Type":"NodeParagraph","Properties":{"id":"20230708145216-zvvf6n9","updated":"20240321162319"},"Children":[{"Type":"NodeText","Data":"所有继承"},{"Type":"NodeTextMark","TextMarkType":"block-ref code","TextMarkBlockRefID":"20230708163049-sje2nzo","TextMarkBlockRefSubtype":"d","TextMarkTextContent":"MonoBehaviour"},{"Type":"NodeText","Data":"​的脚本(类) 最终都会挂载到GameObject游戏对象上。\n生命周期函数 就是该脚本对象依附的GameObject对象从出生到消亡的整个生命周期中，会通过反射自动调用的一些特殊函数。\nUnity帮助我们记录了应该GameObject对象依附了哪些脚本，会自动的得到这些对象，通过反射去执行一些固定名字的函数。"}]},{"ID":"20230708152050-s4rjrv5","Type":"NodeParagraph","Properties":{"id":"20230708152050-s4rjrv5","updated":"20230708152057"},"Children":[{"Type":"NodeText","Data":"Unity中所有对象上挂载的生命周期函数都是在一个主线程中按先后执行的\nUnity会主动把场景上的对象，对象上挂载的脚本都统统记录下来，\n在主线程的死循环中，按顺序按时机的通过反射，执行记录的对象身上挂载的脚本的对应生命周期函数"}]},{"ID":"20240926143927-sx0h16i","Type":"NodeBlockquote","Properties":{"id":"20240926143927-sx0h16i","style":"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);","updated":"20240926144001"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20230708145327-vo3rva6","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230708145327-vo3rva6","updated":"20240926144001"},"Children":[{"Type":"NodeText","Data":"注意！"}]},{"ID":"20230708145355-x8yd7uk","Type":"NodeParagraph","Properties":{"id":"20230708145355-x8yd7uk","updated":"20240926144001"},"Children":[{"Type":"NodeText","Data":"生命周期函数的访问修饰符一般为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"private"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"protected"},{"Type":"NodeText","Data":"​\n因为不需要在外部调用生命周期函数 都是 Unity 自己帮我们调用的"}]},{"ID":"20230708144948-sg0bl4a","Type":"NodeParagraph","Properties":{"id":"20230708144948-sg0bl4a","updated":"20240321162330"},"Children":[{"Type":"NodeText","Data":"当对象（自己这个类的对象，也就是脚本）被创建时 才会调用该生命周期函数\n接下来所说的生成，激活，失活，销毁，是相对于挂载到unity对象上的脚本对象说的\n类似于构造函数的存在 我们可以在一个类对象 刚创建时进行一些初始化操作"}]},{"ID":"20240926143947-u80psl6","Type":"NodeParagraph","Properties":{"id":"20240926143947-u80psl6","updated":"20240926143947"},"Children":[{"Type":"NodeText","Data":"这些生命周期函数 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果我们不打算在其中写逻辑 那就不需要再写出该生命周期函数"},{"Type":"NodeText","Data":"！（因为脚本由反射得到代码执行，多余的生命周期函数会有性能上的开销）\n这些脚本可以挂载到任意的对象上，但是"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"不同的对象挂载相同的脚本 实例化的是不同的对象"},{"Type":"NodeText","Data":"，这是"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"各管各而不是共享的"},{"Type":"NodeText","Data":"！\n哪怕是一个对象挂载了重复的同一个脚本，也是实例化出不同的对象"}]}]},{"ID":"20230708151654-8nlskrb","Type":"NodeParagraph","Properties":{"id":"20230708151654-8nlskrb","updated":"20230708151700"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"},"TextMarkType":"text strong u","TextMarkTextContent":"切记！！继承MonoBehaviour的脚本不要new，不要new，不要new！！"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"}]},{"ID":"20230708215654-u1jvijp","Type":"NodeThematicBreak","Properties":{"id":"20230708215654-u1jvijp"}},{"ID":"20230708145514-42154v6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230708145514-42154v6","updated":"20230708145528"},"Children":[{"Type":"NodeText","Data":"生命周期函数"}]},{"ID":"20230708145530-xodtyh0","Type":"NodeParagraph","Properties":{"id":"20230708145530-xodtyh0","updated":"20230708145635"},"Children":[{"Type":"NodeText","Data":"生命周期函数按照执行顺序依次有："}]},{"ID":"20230708145617-gfitl5z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230708145617-gfitl5z","updated":"20230708150840"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"Awake() { } \t\t//当一个对象被创建了，awake()会立刻执行\nOnEnable() { }\t\t//想要当一个对象被激活的时候，进行一些逻辑处理就可以写这个函数\nStart() { }\t\t//与awake一样，都是对象在被创建出来后只会调用一次的函数，区别在于运行时机不同\nFixedUpdate() { }\t//主要用于进行物理更新的函数\nUpdate() { }\t\t//主要用于处理游戏核心逻辑更新的函数\nLateUpdate() { }\t//一般是用来处理摄像机位置更新相关内容的函数\nOnDisable() { }\t\t//如果希望在一个对象每次失活时做一些处理 就可以在该函数中写逻辑\nOnDestroy() { }\t\t//对象被销毁时调用 依附的GameObject对象被删除时（该组件被移除也会调用，只会调用一次）\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230708145704-g8qlq01","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230708145704-g8qlq01","name":"Awake()","updated":"20230708151915"},"Children":[{"Type":"NodeText","Data":"Awake()"}]},{"ID":"20230708150341-3qcxwqa","Type":"NodeParagraph","Properties":{"id":"20230708150341-3qcxwqa","updated":"20230708150432"},"Children":[{"Type":"NodeText","Data":"当对象（自己这个类的对象，也就是脚本）被创建时 才会调用该生命周期函数\n接下来所说的生成，激活，失活，销毁，是相对于挂载到unity对象上的脚本对象说的\n类似于构造函数的存在 我们可以在一个类对象 刚创建时进行一些初始化操作"}]},{"ID":"20230708150447-am817x2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230708150447-am817x2","updated":"20230708150600"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"protected virtual void Awake()\n{\n    //在Unity中打印信息的两种方式\n    //1、当没有继承MonoBehaviour类时\n    Debug.Log(\"Start!!!\");\n    //Debug.LogError(\"出错了\");\n    //Debug.LogWarning(\"警告\");\n    //2、当继承了MonoBehaviour 有一个线程的方法可以使用\n    print(\"Awake\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230708150548-io2tonz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230708150548-io2tonz","name":"OnEnable()","updated":"20230708151925"},"Children":[{"Type":"NodeText","Data":"OnEnable()"}]},{"ID":"20230708150659-yhjos17","Type":"NodeParagraph","Properties":{"id":"20230708150659-yhjos17","updated":"20230708150905"},"Children":[{"Type":"NodeText","Data":"想要当一个对象被激活（从失活恢复到激活状态也会触发）的时候，进行一些逻辑处理，就可以写这个函数"}]},{"ID":"20230708150759-z44ilzw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230708150759-z44ilzw","updated":"20230708150812"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"void OnEnable()\n{\n    print(\"OnEnable\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230708150816-ui1dwxh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230708150816-ui1dwxh","name":"Start()","updated":"20230708151938"},"Children":[{"Type":"NodeText","Data":"Start()"}]},{"ID":"20230708150842-b7p6n8i","Type":"NodeParagraph","Properties":{"id":"20230708150842-b7p6n8i","updated":"20240321162419"},"Children":[{"Type":"NodeText","Data":"与"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"awake()"},{"Type":"NodeText","Data":"​一样，都是对象在被创建出来后只会调用一次的函数，但是，两者仍有区别，区别在于两者的执行时机不同\n例如，如果在帧更新时，一个对象被创建了，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"awake()"},{"Type":"NodeText","Data":"​会立刻执行，而"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"start()"},{"Type":"NodeText","Data":"​则会在本帧循环结束后，下一帧开始前执行，\n也就是该对象第一次帧更新之前执行"}]},{"ID":"20230708150909-1mg3rxh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230708150909-1mg3rxh","updated":"20230708150925"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"void Start()\n{\n    print(\"Start\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230708150925-wqb083p","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230708150925-wqb083p","name":"FixedUpdate()","updated":"20230708151947"},"Children":[{"Type":"NodeText","Data":"FixedUpdate()"}]},{"ID":"20230708151024-0kssyqe","Type":"NodeParagraph","Properties":{"id":"20230708151024-0kssyqe","updated":"20240321162556"},"Children":[{"Type":"NodeText","Data":"这个主要用于 进行物理更新，它是每一帧的执行的 但是 这里的物理帧 和 游戏帧 有点不同\n它的时间间隔 是可以在Project Setting中的Time里去设置的"}]},{"ID":"20240321162616-d6y5q2z","Type":"NodeParagraph","Properties":{"id":"20240321162616-d6y5q2z","updated":"20240321162616"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"width: 726px;","style":"width: 716px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240321162616-5wjffa4.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 716px;\" parent-style=\"width: 726px;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20230708151034-yjwwglx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230708151034-yjwwglx","updated":"20230708151042"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"void FixedUpdate()\n{\n    print(\"FixedUpdate\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230708150946-fi9ybwn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230708150946-fi9ybwn","name":"Update()","updated":"20230708151957"},"Children":[{"Type":"NodeText","Data":"Update()"}]},{"ID":"20230708151044-m307v1v","Type":"NodeParagraph","Properties":{"id":"20230708151044-m307v1v","updated":"20230708151052"},"Children":[{"Type":"NodeText","Data":"主要用于处理游戏核心逻辑更新的函数"}]},{"ID":"20230708151053-vndxuux","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230708151053-vndxuux","updated":"20230708151104"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"void Update()\n{\n    print(\"Update\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230708150954-t2fbdtv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230708150954-t2fbdtv","name":"LateUpdate()","updated":"20230708152007"},"Children":[{"Type":"NodeText","Data":"LateUpdate()"}]},{"ID":"20230708151126-2oqz3k6","Type":"NodeParagraph","Properties":{"id":"20230708151126-2oqz3k6","updated":"20240321162632"},"Children":[{"Type":"NodeText","Data":"一般这个更新是用来处理 摄像机位置更新相关内容的\n​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Update"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LateUpdate"},{"Type":"NodeText","Data":"​之间，Unity进行了一些处理 处理动画相关的更新"}]},{"ID":"20230708151106-fglwi9j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230708151106-fglwi9j","updated":"20230708151124"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"void LateUpdate()\n{\n    print(\"LateUpdate\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230708151003-7mx9fh6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230708151003-7mx9fh6","name":"OnDisable()","updated":"20230708152018"},"Children":[{"Type":"NodeText","Data":"OnDisable()"}]},{"ID":"20230708151141-n7x4cvp","Type":"NodeParagraph","Properties":{"id":"20230708151141-n7x4cvp","updated":"20230708151149"},"Children":[{"Type":"NodeText","Data":"如果我们希望在一个对象每次失活时做一些处理 就可以在该函数中写逻辑"}]},{"ID":"20230708151150-hnn6ikl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230708151150-hnn6ikl","updated":"20230708151159"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"void OnDisable()\n{\n    print(\"OnDisable\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230708151011-urczphz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230708151011-urczphz","name":"OnDestroy()","updated":"20230708152026"},"Children":[{"Type":"NodeText","Data":"OnDestroy()"}]},{"ID":"20230708151200-g6cak8s","Type":"NodeParagraph","Properties":{"id":"20230708151200-g6cak8s","updated":"20230708151207"},"Children":[{"Type":"NodeText","Data":"对象被销毁时调用 依附的GameObject对象被删除时（该组件被移除也会调用，只会调用一次）"}]},{"ID":"20230708151208-gntbipu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230708151208-gntbipu","updated":"20230708215705"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"void OnDestroy()\n{\n    print(\"OnDestroy\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230709222249-1llcycm","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230709222249-1llcycm","updated":"20231102210640"},"Children":[{"Type":"NodeText","Data":"此外、还有"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20230709221108-3pj56u1","TextMarkBlockRefSubtype":"d","TextMarkTextContent":"碰撞检测函数"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20230710023954-v0doqqs","TextMarkBlockRefSubtype":"d","TextMarkTextContent":"OnGUI()"},{"Type":"NodeText","Data":"等这种特殊的生命周期函数"}]},{"ID":"20230708215707-gqap1cd","Type":"NodeThematicBreak","Properties":{"id":"20230708215707-gqap1cd"}},{"ID":"20230708151000-3bzx07e","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230708151000-3bzx07e","updated":"20230708151247"},"Children":[{"Type":"NodeText","Data":"生命周期函数支持多态"}]},{"ID":"20230708151254-rhxjhmn","Type":"NodeParagraph","Properties":{"id":"20230708151254-rhxjhmn","updated":"20230708151258"},"Children":[{"Type":"NodeText","Data":"类可以继承，且遵循多态，可以vob重写"}]},{"ID":"20230708151316-dmc2uf0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230708151316-dmc2uf0","updated":"20230708151358"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"public class Lesson1 : MonoBehaviour\n{\n    protected virtual void Awake()\n    {\n    \t//在Unity中打印信息的两种方式\n    \t//1、当没有继承MonoBehaviour类时\n    \tDebug.Log(\"Start!!!\");\n    \t//Debug.LogError(\"出错了\");\n    \t//Debug.LogWarning(\"警告\");\n    \t//2、当继承了MonoBehaviour 有一个线程的方法可以使用\n    \tprint(\"Awake\");\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230708151259-9pqwg8v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230708151259-9pqwg8v","updated":"20230708151313"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"public class Lesson1Son : Lesson1\n{\n    protected override void Awake()\n    {\n        base.Awake();\n        print(\"子类的Awake\");   \n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230708215714-eu73wz6","Type":"NodeThematicBreak","Properties":{"id":"20230708215714-eu73wz6"}},{"ID":"20230708151421-dlzlixl","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230708151421-dlzlixl","updated":"20230708151751"},"Children":[{"Type":"NodeText","Data":"关于MonoBehaviour的类中的构造函数"}]},{"ID":"20231204111721-pfwmrgw","Type":"NodeParagraph","Properties":{"id":"20231204111721-pfwmrgw","updated":"20240321162652"},"Children":[{"Type":"NodeText","Data":"我们要知道，虽然建议大家不在继承"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MonoBehaviour"},{"Type":"NodeText","Data":"​的类中写构造函数\n但是不意味着我们不能写，当我们在继承"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MonoBehaviour"},{"Type":"NodeText","Data":"​的类中写无参构造函数时，\n你会发现在编辑模式下或者运行后，只要该脚本挂载在场景中，那么该无参构造函数是会被自动执行的。"}]},{"ID":"20240321162655-2xf6j8s","Type":"NodeParagraph","Properties":{"id":"20240321162655-2xf6j8s","updated":"20240321162708"},"Children":[{"Type":"NodeText","Data":"因为Unity的工作原理中提到的反射机制，Unity实际上通过反射帮助我们实例化了该脚本对象，既然要实例化那么肯定是需要"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"new"},{"Type":"NodeText","Data":"​的，\n只不过Unity中不需要我们自己"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"new"},{"Type":"NodeText","Data":"​继承了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MonoBehaviour"},{"Type":"NodeText","Data":"​的类，只要挂载后Unity帮助我们做了这件事。\n那么为什么不建议大家写构造函数呢？"}]},{"ID":"20230708151621-z7b7o9c","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20230708151621-z7b7o9c","updated":"20240321162714"},"Children":[{"ID":"20231204111721-fg60vot","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20231204111721-fg60vot","updated":"20240321162711"},"Children":[{"ID":"20231204111721-q7b4y95","Type":"NodeParagraph","Properties":{"id":"20231204111721-q7b4y95","updated":"20240321162711"},"Children":[{"Type":"NodeText","Data":"Unity的规则就是，继承MonoBehaviour的脚本不能"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"new"},{"Type":"NodeText","Data":"​只能挂载"}]}]},{"ID":"20231204111721-n98o30j","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20231204111721-n98o30j","updated":"20240321162714"},"Children":[{"ID":"20231204111721-711p78e","Type":"NodeParagraph","Properties":{"id":"20231204111721-711p78e","updated":"20240321162714"},"Children":[{"Type":"NodeText","Data":"生命周期函数的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Awake"},{"Type":"NodeText","Data":"​是类似构造函数的存在，当对象出生就会自动调用"}]}]},{"ID":"20231204111721-aoo7f2w","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20231204111721-aoo7f2w","updated":"20231204111721"},"Children":[{"ID":"20231204111721-vah6t0o","Type":"NodeParagraph","Properties":{"id":"20231204111721-vah6t0o","updated":"20231204111721"},"Children":[{"Type":"NodeText","Data":"写构造函数反而在结构上会破坏Unity设计上的规范"}]}]}]},{"ID":"20231204111706-13q130b","Type":"NodeParagraph","Properties":{"id":"20231204111706-13q130b","updated":"20240321162724"},"Children":[{"Type":"NodeText","Data":"总结：\n如果继承"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MonoBehaviour"},{"Type":"NodeText","Data":"​的脚本想要进行初始化相关，可以在Awake或者Start中进行，\n搞清这两个生命周期函数的执行时机，根据需求选择在哪里进行初始化。\n"},{"Type":"NodeTextMark","Properties":{"style":"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"},"TextMarkType":"text strong","TextMarkTextContent":"切记！！继承MonoBehaviour的脚本不要new，不要new，不要new！！"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"}]},{"ID":"20230708153044-h0l4h8t","Type":"NodeParagraph","Properties":{"id":"20230708153044-h0l4h8t"}}]}