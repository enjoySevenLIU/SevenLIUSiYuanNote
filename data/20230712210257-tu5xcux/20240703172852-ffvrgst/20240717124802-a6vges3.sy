{
	"ID": "20240717124802-a6vges3",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240717124802-a6vges3",
		"title": "MIL2——模拟面试题",
		"type": "doc",
		"updated": "20240717131235"
	},
	"Children": [
		{
			"ID": "20240717124813-m4qyvv7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240717124813-m4qyvv7",
				"updated": "20240717125802"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "问题"
				}
			]
		},
		{
			"ID": "20240717124813-dwxdo9v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240717124813-dwxdo9v",
				"updated": "20240717124813"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "C#"
				}
			]
		},
		{
			"ID": "20240717124813-fpgzwy2",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240717124813-fpgzwy2",
				"updated": "20240717125646"
			},
			"Children": [
				{
					"ID": "20240717124813-y9ta4kr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240717124813-y9ta4kr",
						"updated": "20240717124813"
					},
					"Children": [
						{
							"ID": "20240717124813-tkj013m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717124813-tkj013m",
								"updated": "20240717124830"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "请说说你认为 C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 中 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "=="
								},
								{
									"Type": "NodeText",
									"Data": "​ 和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Equals"
								},
								{
									"Type": "NodeText",
									"Data": "​ 的区别是什么？"
								}
							]
						}
					]
				},
				{
					"ID": "20240717124813-gfr804p",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240717124813-gfr804p",
						"updated": "20240717124813"
					},
					"Children": [
						{
							"ID": "20240717124813-jalwf1w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717124813-jalwf1w",
								"updated": "20240717124842"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "浅拷贝和深拷贝的区别？ 可以举例说明"
								}
							]
						}
					]
				},
				{
					"ID": "20240717124813-5b9xomx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240717124813-5b9xomx",
						"updated": "20240717124813"
					},
					"Children": [
						{
							"ID": "20240717124813-qoq77yi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717124813-qoq77yi",
								"updated": "20240717125102"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "下面两种获取10000个数的方式，哪种效率更高？为什么"
								}
							]
						},
						{
							"ID": "20240717124851-iciy21v",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240717124851-iciy21v",
								"style": "line-height: 22px;",
								"updated": "20240717125052"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "List\u003cint\u003e list = new List\u003cint\u003e();\nfor (int i = 0; i \u003c 10000; i++)\n{\n    list.Add(i);\n}\nfloat[] array = new float[10000];\nfor (int i = 0; i \u003c 10000; i++)\n{\n    array[i] = i;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240717124813-xyg0jz4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240717124813-xyg0jz4",
						"updated": "20240717124813"
					},
					"Children": [
						{
							"ID": "20240717124813-swa6yo4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717124813-swa6yo4",
								"updated": "20240717125439"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "现在有如下代码："
								}
							]
						},
						{
							"ID": "20240717125143-5t2z1gr",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240717125143-5t2z1gr",
								"style": "line-height: 22px;",
								"updated": "20240717125410"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "static void Main(string[] args)\n{\n    int i = GetInt();\n    Console.WriteLine($\"第A处 i = {i}\");\n}\n\nstatic int GetInt()\n{\n    int i = 10;\n    try\n    {\n        return i;\n    }\n    finally\n    {\n        i = 11;\n        Console.WriteLine($\"第B处 i = {i}\");\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240717125135-muqutij",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20240717125135-muqutij",
								"updated": "20240717125137"
							},
							"Children": [
								{
									"ID": "20240717125137-bdvoovy",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20240717125137-bdvoovy",
										"updated": "20240717125137"
									},
									"Children": [
										{
											"ID": "20240717125137-wjas19x",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717125137-wjas19x",
												"updated": "20240717125141"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "A处和B处谁先打印？"
												}
											]
										}
									]
								},
								{
									"ID": "20240717125141-g8tgxwr",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20240717125141-g8tgxwr"
									},
									"Children": [
										{
											"ID": "20240717125141-6jv5tum",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717125141-6jv5tum"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "A、B出打印的i值分别是多少？"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240717124813-fr5smh7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20240717124813-fr5smh7",
						"updated": "20240717125646"
					},
					"Children": [
						{
							"ID": "20240717124813-zyzbcxu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717124813-zyzbcxu",
								"updated": "20240717125451"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "请问如下代码中，A、B两处 i 的值为多少？"
								}
							]
						},
						{
							"ID": "20240717125453-9siyiol",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240717125453-9siyiol",
								"style": "line-height: 22px;",
								"updated": "20240717125551"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "class Test\n{\n    public int i = 10;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240717125553-4xp6x27",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240717125553-4xp6x27",
								"style": "line-height: 22px;",
								"updated": "20240717125646"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "static void Main(string[] args)\n{\n    Test t = GetObj();\n    Console.WriteLine($\"第A处 i = {t.i}\");\n}\n\nstatic Test GetObj()\n{\n    Test t = new Test();\n    try\n    {\n        return t;\n    }\n    finally\n    {\n        t.i = 11;\n        Console.WriteLine($\"第B处 i = {t.i}\");\n    }\n}\n\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240717124813-fxm1ri7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240717124813-fxm1ri7",
				"updated": "20240717124813"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Unity"
				}
			]
		},
		{
			"ID": "20240717124813-6fku70w",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240717124813-6fku70w",
				"updated": "20240717125754"
			},
			"Children": [
				{
					"ID": "20240717124813-1sxvlqu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240717124813-1sxvlqu",
						"updated": "20240717125726"
					},
					"Children": [
						{
							"ID": "20240717124813-sv1usng",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717124813-sv1usng",
								"updated": "20240717125726"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unity中当一个细小高速物体撞击另一个较大物体时 会出现什么情况？如何避免？"
								}
							]
						}
					]
				},
				{
					"ID": "20240717124813-9zo59fy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240717124813-9zo59fy",
						"updated": "20240717125736"
					},
					"Children": [
						{
							"ID": "20240717124813-hcjv8ay",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717124813-hcjv8ay",
								"updated": "20240717125736"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "请简述一下Prefab（预制体）的本质是什么？"
								}
							]
						}
					]
				},
				{
					"ID": "20240717124813-y16idnf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240717124813-y16idnf",
						"updated": "20240717125746"
					},
					"Children": [
						{
							"ID": "20240717124813-7aal2w1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717124813-7aal2w1",
								"updated": "20240717125746"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unity是否支持写成多线程程序？ 如果支持的话需要注意什么？"
								}
							]
						}
					]
				},
				{
					"ID": "20240717124813-qy4yd5o",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240717124813-qy4yd5o",
						"updated": "20240717125751"
					},
					"Children": [
						{
							"ID": "20240717124813-u4ovfmq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717124813-u4ovfmq",
								"updated": "20240717125751"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "请简述一下对象池，在游戏开发中我们什么时候会用到它？"
								}
							]
						}
					]
				},
				{
					"ID": "20240717124813-vx1kk32",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20240717124813-vx1kk32",
						"updated": "20240717125754"
					},
					"Children": [
						{
							"ID": "20240717124813-rq28bmi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717124813-rq28bmi",
								"updated": "20240717125754"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "什么是DrawCall？ DrawCall为什么会影响游戏运行效率？ 如何减少DrawCall？"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240717125802-a1nm59h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240717125802-a1nm59h",
				"updated": "20240717131235"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "答案"
				}
			]
		},
		{
			"ID": "20240717125810-byktkrf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240717125810-byktkrf",
				"updated": "20240717125810"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "C#"
				}
			]
		},
		{
			"ID": "20240717125810-21jm6wj",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240717125810-21jm6wj",
				"updated": "20240717130341"
			},
			"Children": [
				{
					"ID": "20240717125810-scu0qgd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240717125810-scu0qgd",
						"updated": "20240717125810"
					},
					"Children": [
						{
							"ID": "20240717125810-o9n40h4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717125810-o9n40h4",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "请说说你认为 C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 中 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "=="
								},
								{
									"Type": "NodeText",
									"Data": "​ 和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Equals"
								},
								{
									"Type": "NodeText",
									"Data": "​ 的区别是什么？"
								}
							]
						},
						{
							"ID": "20240717125813-k8gwtrd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717125813-k8gwtrd",
								"updated": "20240717125835"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "答案："
								}
							]
						},
						{
							"ID": "20240717125835-dl0e1ap",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20240717125835-dl0e1ap",
								"updated": "20240717125835"
							},
							"Children": [
								{
									"ID": "20240717125835-2057oz1",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20240717125835-2057oz1",
										"updated": "20240717125835"
									},
									"Children": [
										{
											"ID": "20240717125835-zxhiomf",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717125835-zxhiomf",
												"updated": "20240717125846"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "=="
												},
												{
													"Type": "NodeText",
													"Data": "​ 是运算符，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Equals"
												},
												{
													"Type": "NodeText",
													"Data": "​ 是万物之父 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Object"
												},
												{
													"Type": "NodeText",
													"Data": "​ 中的虚方法，子类可重写 "
												}
											]
										}
									]
								},
								{
									"ID": "20240717125849-b0nmre8",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20240717125849-b0nmre8"
									},
									"Children": [
										{
											"ID": "20240717125849-i66a0xj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717125849-i66a0xj",
												"updated": "20240717125939"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Equals"
												},
												{
													"Type": "NodeText",
													"Data": "​ 一般在子类中重写后"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "用于比较两个对象中内容是否相同"
												},
												{
													"Type": "NodeText",
													"Data": " "
												}
											]
										}
									]
								},
								{
									"ID": "20240717125940-esw14p5",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20240717125940-esw14p5"
									},
									"Children": [
										{
											"ID": "20240717125940-csoqjt6",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717125940-csoqjt6",
												"updated": "20240717125952"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "=="
												},
												{
													"Type": "NodeText",
													"Data": "​ 在"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "没有运算符重载的前提下时，引用类型用于比较地址；值类型用于比较值是否相同"
												}
											]
										}
									]
								},
								{
									"ID": "20240717125911-53eznru",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20240717125911-53eznru"
									},
									"Children": [
										{
											"ID": "20240717125911-0n6lvst",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717125911-0n6lvst",
												"updated": "20240717125927"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "运算效率不同，一般 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Equals"
												},
												{
													"Type": "NodeText",
													"Data": "​ 没有 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "=="
												},
												{
													"Type": "NodeText",
													"Data": "​ 效率高，因为一般 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Equals"
												},
												{
													"Type": "NodeText",
													"Data": "​ 比较的内容比 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "=="
												},
												{
													"Type": "NodeText",
													"Data": "​ 多"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240717125810-g0ghdp3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240717125810-g0ghdp3",
						"updated": "20240717125810"
					},
					"Children": [
						{
							"ID": "20240717125810-f7kexnk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717125810-f7kexnk",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "浅拷贝和深拷贝的区别？ 可以举例说明"
								}
							]
						},
						{
							"ID": "20240717130003-vdvxfrr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717130003-vdvxfrr",
								"updated": "20240717130009"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "答案： "
								}
							]
						},
						{
							"ID": "20240717130011-tb1tuu2",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20240717130011-tb1tuu2",
								"updated": "20240717130015"
							},
							"Children": [
								{
									"ID": "20240717130015-xoq2cqu",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240717130015-xoq2cqu",
										"updated": "20240717130015"
									},
									"Children": [
										{
											"ID": "20240717130015-kt3x9ey",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717130015-kt3x9ey",
												"updated": "20240717130019"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "浅拷贝： 只复制对象的引用地址 两个对象指向同一内存地址，修改其中一个另一个也会随之变化"
												}
											]
										}
									]
								},
								{
									"ID": "20240717130019-hmcnloy",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240717130019-hmcnloy"
									},
									"Children": [
										{
											"ID": "20240717130019-rzfq2ss",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717130019-rzfq2ss",
												"updated": "20240717130022"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "深拷贝： 将对象和值赋值过来，两个对象修改其中任意值都不会影响对方  "
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20240717130023-2f2wbks",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717130023-2f2wbks",
								"updated": "20240717130024"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "举例： "
								}
							]
						},
						{
							"ID": "20240717130027-k4tb2sc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717130027-k4tb2sc",
								"updated": "20240717130044"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "比如 引用对象A 和 引用对象B\n让 A "
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "="
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " B，就是浅拷贝，此时A、B的引用地址相同，改A中内容，B也变\n如果想要深拷贝，简单处理就是 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "new"
								},
								{
									"Type": "NodeText",
									"Data": "​（包括对象中的成员）"
								}
							]
						}
					]
				},
				{
					"ID": "20240717125810-59jdvo5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240717125810-59jdvo5",
						"updated": "20240717125810"
					},
					"Children": [
						{
							"ID": "20240717125810-ukkiba6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717125810-ukkiba6",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "下面两种获取10000个数的方式，哪种效率更高？为什么"
								}
							]
						},
						{
							"ID": "20240717125810-aaq9cgr",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240717125810-aaq9cgr",
								"style": "line-height: 22px;",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "List\u003cint\u003e list = new List\u003cint\u003e();\nfor (int i = 0; i \u003c 10000; i++)\n{\n    list.Add(i);\n}\nfloat[] array = new float[10000];\nfor (int i = 0; i \u003c 10000; i++)\n{\n    array[i] = i;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240717130051-5v7em5o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717130051-5v7em5o",
								"updated": "20240717130140"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "答案："
								}
							]
						},
						{
							"ID": "20240717130148-jypmury",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717130148-jypmury",
								"updated": "20240717130148"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方式2的效率更高，因为 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "List"
								},
								{
									"Type": "NodeText",
									"Data": "​ 本质是数组，我们通过 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Add"
								},
								{
									"Type": "NodeText",
									"Data": "​ 往 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "List"
								},
								{
									"Type": "NodeText",
									"Data": "​ 中添加元素时，会不断的触发扩容，扩容会带来内存和性能上的消耗"
								}
							]
						},
						{
							"ID": "20240717130137-qeaju69",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20240717130137-qeaju69",
								"updated": "20240717130137"
							},
							"Children": [
								{
									"ID": "20240717130137-rwkxfkf",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240717130137-rwkxfkf",
										"updated": "20240717130137"
									},
									"Children": [
										{
											"ID": "20240717130137-8qft96a",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717130137-8qft96a",
												"updated": "20240717130137"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "内存方面：每次扩容会产生垃圾，还会造成GC的触发\n"
												}
											]
										}
									]
								},
								{
									"ID": "20240717130138-ifv0gp3",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240717130138-ifv0gp3"
									},
									"Children": [
										{
											"ID": "20240717130138-z4qsid3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717130138-z4qsid3"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "性能方面：每次扩容会进行“搬家”（老数组中内容存入新数组中）"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240717125810-7ilqvc7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240717125810-7ilqvc7",
						"updated": "20240717125810"
					},
					"Children": [
						{
							"ID": "20240717125810-5o40uj0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717125810-5o40uj0",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "现在有如下代码："
								}
							]
						},
						{
							"ID": "20240717125810-363xnpl",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240717125810-363xnpl",
								"style": "line-height: 22px;",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "static void Main(string[] args)\n{\n    int i = GetInt();\n    Console.WriteLine($\"第A处 i = {i}\");\n}\n\nstatic int GetInt()\n{\n    int i = 10;\n    try\n    {\n        return i;\n    }\n    finally\n    {\n        i = 11;\n        Console.WriteLine($\"第B处 i = {i}\");\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240717125810-emd4myl",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20240717125810-emd4myl",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"ID": "20240717125810-e5p50dk",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20240717125810-e5p50dk",
										"updated": "20240717125810"
									},
									"Children": [
										{
											"ID": "20240717125810-6qaynf1",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717125810-6qaynf1",
												"updated": "20240717125810"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "A处和B处谁先打印？"
												}
											]
										}
									]
								},
								{
									"ID": "20240717125810-r6znowz",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20240717125810-r6znowz",
										"updated": "20240717125810"
									},
									"Children": [
										{
											"ID": "20240717125810-06agcdx",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717125810-06agcdx",
												"updated": "20240717125810"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "A、B出打印的i值分别是多少？"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20240717130159-dujhhz4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717130159-dujhhz4",
								"updated": "20240717130200"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "答案： "
								}
							]
						},
						{
							"ID": "20240717130203-v5ur7ys",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20240717130203-v5ur7ys",
								"updated": "20240717130219"
							},
							"Children": [
								{
									"ID": "20240717130219-bk532or",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20240717130219-bk532or",
										"updated": "20240717130219"
									},
									"Children": [
										{
											"ID": "20240717130219-51gt6ov",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717130219-51gt6ov",
												"updated": "20240717130219"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "B处先打印，A处后打印"
												}
											]
										}
									]
								},
								{
									"ID": "20240717130219-2yiblsn",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20240717130219-2yiblsn",
										"updated": "20240717130219"
									},
									"Children": [
										{
											"ID": "20240717130219-ls37xx3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717130219-ls37xx3",
												"updated": "20240717130227"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "A处 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "i = 10"
												},
												{
													"Type": "NodeText",
													"Data": "​，B处 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "i = 11"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20240717130210-bmrsy0l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717130210-bmrsy0l",
								"updated": "20240717130313"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "考点：finally的执行顺序（finally内的代码无论如何都会执行，哪怕是 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "return"
								},
								{
									"Type": "NodeText",
									"Data": "​ 或者 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "throw"
								},
								{
									"Type": "NodeText",
									"Data": "​ ），值类型和引用类型的区别"
								}
							]
						}
					]
				},
				{
					"ID": "20240717125810-j035mt2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20240717125810-j035mt2",
						"updated": "20240717130341"
					},
					"Children": [
						{
							"ID": "20240717125810-cem26dm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717125810-cem26dm",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "请问如下代码中，A、B两处 i 的值为多少？"
								}
							]
						},
						{
							"ID": "20240717125810-7nlujrc",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240717125810-7nlujrc",
								"style": "line-height: 22px;",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "class Test\n{\n    public int i = 10;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240717125810-drq8vej",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240717125810-drq8vej",
								"style": "line-height: 22px;",
								"updated": "20240717130322"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "static void Main(string[] args)\n{\n    Test t = GetObj();\n    Console.WriteLine($\"第A处 i = {t.i}\");\n}\n\nstatic Test GetObj()\n{\n    Test t = new Test();\n    try\n    {\n        return t;\n    }\n    finally\n    {\n        t.i = 11;\n        Console.WriteLine($\"第B处 i = {t.i}\");\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240717130322-1v07lc3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717130322-1v07lc3",
								"updated": "20240717130330"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "答案： A、B两处都为11 "
								}
							]
						},
						{
							"ID": "20240717130334-4u8bl8r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717130334-4u8bl8r",
								"updated": "20240717130341"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "考点： finally的执行顺序（finally内的代码无论如何都会执行，哪怕是 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "return"
								},
								{
									"Type": "NodeText",
									"Data": "​ 或者 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "throw"
								},
								{
									"Type": "NodeText",
									"Data": "​ ），值类型和引用类型的区别"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240717125810-qdf58zh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240717125810-qdf58zh",
				"updated": "20240717125810"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Unity"
				}
			]
		},
		{
			"ID": "20240717125810-dih1r6s",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240717125810-dih1r6s",
				"updated": "20240717131235"
			},
			"Children": [
				{
					"ID": "20240717125810-3ygmib5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240717125810-3ygmib5",
						"updated": "20240717125810"
					},
					"Children": [
						{
							"ID": "20240717125810-tb8abtt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717125810-tb8abtt",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unity中当一个细小高速物体撞击另一个较大物体时 会出现什么情况？如何避免？"
								}
							]
						},
						{
							"ID": "20240717130400-168wsci",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717130400-168wsci",
								"updated": "20240717130408"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "答案："
								}
							]
						},
						{
							"ID": "20240717130423-hzrj0vb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717130423-hzrj0vb",
								"updated": "20240717130610"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有可能会直接穿过物体，而不触发碰撞检测"
								}
							]
						},
						{
							"ID": "20240717130408-rd4cd4z",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20240717130408-rd4cd4z",
								"updated": "20240717130408"
							},
							"Children": [
								{
									"ID": "20240717130408-5t68cgk",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20240717130408-5t68cgk",
										"updated": "20240717130408"
									},
									"Children": [
										{
											"ID": "20240717130408-dkwqfju",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717130408-dkwqfju",
												"updated": "20240717130408"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "我们可以尽量用射线检测来替代细小物体的物理系统碰撞\n因为传统的FPS游戏都是通过射线检测加模拟计算来判断伤害的"
												}
											]
										}
									]
								},
								{
									"ID": "20240717130408-trvtytv",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20240717130408-trvtytv",
										"updated": "20240717130408"
									},
									"Children": [
										{
											"ID": "20240717130408-4qtext5",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717130408-4qtext5",
												"updated": "20240717130420"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "修改 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Rigidbody"
												},
												{
													"Type": "NodeText",
													"Data": "​ 刚体中的 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Interpolate"
												},
												{
													"Type": "NodeText",
													"Data": "​（插值）和 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "CollisionDetection"
												},
												{
													"Type": "NodeText",
													"Data": "​（碰撞检测）两个参数，来提高碰撞检测的准确性"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240717125810-m7k0e3u",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240717125810-m7k0e3u",
						"updated": "20240717125810"
					},
					"Children": [
						{
							"ID": "20240717125810-ec6mtgm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717125810-ec6mtgm",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "请简述一下Prefab（预制体）的本质是什么？"
								}
							]
						},
						{
							"ID": "20240717130638-t1of7pi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717130638-t1of7pi",
								"updated": "20240717130758"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "答案：\nPrefab的本质就是一个YAML配置文件\n其中记录了一个GameObject对象上挂载的脚本信息\n并且记录了脚本信息中的可配置的属性信息"
								}
							]
						}
					]
				},
				{
					"ID": "20240717125810-bz6yp5u",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240717125810-bz6yp5u",
						"updated": "20240717125810"
					},
					"Children": [
						{
							"ID": "20240717125810-brumb9z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717125810-brumb9z",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unity是否支持写成多线程程序？ 如果支持的话需要注意什么？"
								}
							]
						},
						{
							"ID": "20240717131120-pnlr7hh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717131120-pnlr7hh",
								"updated": "20240717131133"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "答案：支持\n注意："
								}
							]
						},
						{
							"ID": "20240717131133-zrwy1bw",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20240717131133-zrwy1bw",
								"updated": "20240717131133"
							},
							"Children": [
								{
									"ID": "20240717131133-4lg1zlj",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20240717131133-4lg1zlj",
										"updated": "20240717131133"
									},
									"Children": [
										{
											"ID": "20240717131133-w46s7l9",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717131133-w46s7l9",
												"updated": "20240717131145"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "只能从主线程访问Unity相关组件、对象以及 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "UnityEngine"
												},
												{
													"Type": "NodeText",
													"Data": "​ 命名空间中的绝大部分内容"
												}
											]
										}
									]
								},
								{
									"ID": "20240717131133-hkzcmfx",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20240717131133-hkzcmfx",
										"updated": "20240717131133"
									},
									"Children": [
										{
											"ID": "20240717131133-u537xdg",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717131133-u537xdg",
												"updated": "20240717131140"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果多线程中要和Unity主线程同时修改一些数据\n可以通过 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "lock"
												},
												{
													"Type": "NodeText",
													"Data": "​ 关键词加锁"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240717125810-hruyay8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240717125810-hruyay8",
						"updated": "20240717125810"
					},
					"Children": [
						{
							"ID": "20240717125810-ncp2j71",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717125810-ncp2j71",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "请简述一下对象池，在游戏开发中我们什么时候会用到它？"
								}
							]
						},
						{
							"ID": "20240717131155-vu9rim6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717131155-vu9rim6",
								"updated": "20240717131209"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "答案："
								}
							]
						},
						{
							"ID": "20240717131209-vv55sop",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20240717131209-vv55sop",
								"updated": "20240717131209"
							},
							"Children": [
								{
									"ID": "20240717131209-gjqiw57",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20240717131209-gjqiw57",
										"updated": "20240717131209"
									},
									"Children": [
										{
											"ID": "20240717131209-vjgzmvg",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717131209-vjgzmvg",
												"updated": "20240717131216"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "对象池的主要作用是 避免大量创建对象再释放对象时造成的内存消耗，可以有效降低GC发生的频率。\n我们把不用的对象放入对象池中而不是让它直接变为垃圾，下次需要用到对象时再从对象池中获取，\n我们通过占用内存来避免更多的内存消耗和GC的发生"
												}
											]
										}
									]
								},
								{
									"ID": "20240717131209-8rjnp0y",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20240717131209-8rjnp0y",
										"updated": "20240717131209"
									},
									"Children": [
										{
											"ID": "20240717131209-a4sr899",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717131209-a4sr899",
												"updated": "20240717131209"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在游戏中频繁创建对象、实例化对象的地方，都可以用到对象池。\n比如前端开发中，游戏中的子弹、伤害字体、特效等等\n比如后端开发中线程池等等"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240717125810-zn9yzgw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20240717125810-zn9yzgw",
						"updated": "20240717131235"
					},
					"Children": [
						{
							"ID": "20240717125810-l19al6n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717125810-l19al6n",
								"updated": "20240717125810"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "什么是DrawCall？ DrawCall为什么会影响游戏运行效率？ 如何减少DrawCall？"
								}
							]
						},
						{
							"ID": "20240717131225-47xsusr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240717131225-47xsusr",
								"updated": "20240717131235"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "答案："
								}
							]
						},
						{
							"ID": "20240717131235-v3bl11b",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20240717131235-v3bl11b",
								"updated": "20240717131235"
							},
							"Children": [
								{
									"ID": "20240717131235-ai1193g",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20240717131235-ai1193g",
										"updated": "20240717131235"
									},
									"Children": [
										{
											"ID": "20240717131235-72kiq35",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717131235-72kiq35",
												"updated": "20240717131235"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "什么是DrawCall？\n"
												}
											]
										},
										{
											"ID": "20240717131255-5nm0x3n",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717131255-5nm0x3n"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "每次CPU准备渲染相关数据并通知GPU的过程称为一次DrawCall"
												}
											]
										}
									]
								},
								{
									"ID": "20240717131235-0d049hn",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20240717131235-0d049hn",
										"updated": "20240717131235"
									},
									"Children": [
										{
											"ID": "20240717131235-9cqa6p3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717131235-9cqa6p3",
												"updated": "20240717131235"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "DrawCall为什么会影响游戏运行效率？\n"
												}
											]
										},
										{
											"ID": "20240717131256-az8n2u0",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717131256-az8n2u0"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果DrawCall次数较高，意味着CPU会花费更多的时间准备渲染数据，这会进行更多的计算，进而影响游戏的运行效率"
												}
											]
										}
									]
								},
								{
									"ID": "20240717131235-d4911fu",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20240717131235-d4911fu",
										"updated": "20240717131235"
									},
									"Children": [
										{
											"ID": "20240717131235-kcxyxop",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717131235-kcxyxop",
												"updated": "20240717131235"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如何减少DrawCall？"
												}
											]
										},
										{
											"ID": "20240717131246-e9bst8s",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20240717131246-e9bst8s",
												"updated": "20240717131246"
											},
											"Children": [
												{
													"ID": "20240717131246-91u2hch",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20240717131246-91u2hch",
														"updated": "20240717131246"
													},
													"Children": [
														{
															"ID": "20240717131246-kkja5cw",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20240717131246-kkja5cw",
																"updated": "20240717131246"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "2D和UI层面：打图集，并且注意面板中不同图集图片的层级不要穿插\n"
																}
															]
														}
													]
												},
												{
													"ID": "20240717131247-qxg36x5",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20240717131247-qxg36x5"
													},
													"Children": [
														{
															"ID": "20240717131247-dljnc3s",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20240717131247-dljnc3s"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "3D模型层面：利用动态批处理和静态批处理，尽量不使用实时光照和实时阴影"
																}
															]
														}
													]
												}
											]
										},
										{
											"ID": "20240717131240-mbvu6ti",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240717131240-mbvu6ti"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "等等"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	]
}