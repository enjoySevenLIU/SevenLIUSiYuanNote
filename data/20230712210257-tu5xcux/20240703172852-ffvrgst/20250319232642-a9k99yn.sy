{
	"ID": "20250319232642-a9k99yn",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20250319232642-a9k99yn",
		"title": "MIL15——模拟面试题",
		"type": "doc",
		"updated": "20250319234235"
	},
	"Children": [
		{
			"ID": "20250319232650-nivepv7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250319232650-nivepv7",
				"updated": "20250319232650"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "C#"
				}
			]
		},
		{
			"ID": "20250319232650-zxky9sb",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20250319232650-zxky9sb",
				"updated": "20250319232915"
			},
			"Children": [
				{
					"ID": "20250319232726-6kcgq92",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20250319232726-6kcgq92",
						"updated": "20250319232726"
					},
					"Children": [
						{
							"ID": "20250319232726-m90b13m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319232726-m90b13m",
								"updated": "20250319232726"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "抽象类中的虚函数和抽象函数，是否必须在子类中重写？"
								}
							]
						}
					]
				},
				{
					"ID": "20250319232726-5o97prw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20250319232726-5o97prw",
						"updated": "20250319232726"
					},
					"Children": [
						{
							"ID": "20250319232726-dbi1kj6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319232726-dbi1kj6",
								"updated": "20250319232731"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当我们使用里式替换原则，用父类容器装载子类对象时，我们通过该父类容器调用其中的一个虚函数，执行的逻辑是父类中的还是子类中的逻辑呢？"
								}
							]
						}
					]
				},
				{
					"ID": "20250319232726-cmtdgdp",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20250319232726-cmtdgdp",
						"updated": "20250319232726"
					},
					"Children": [
						{
							"ID": "20250319232726-grt7e62",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319232726-grt7e62",
								"updated": "20250319232726"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们在游戏开发时，想要获取系统时间，应该如何获取？"
								}
							]
						}
					]
				},
				{
					"ID": "20250319232726-1ow712f",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20250319232726-1ow712f",
						"updated": "20250319232726"
					},
					"Children": [
						{
							"ID": "20250319232726-u6lutgy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319232726-u6lutgy",
								"updated": "20250319232749"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C# 使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "var"
								},
								{
									"Type": "NodeText",
									"Data": "​ 声明临时变量相比用指定变量类型声明临时变量，在最终执行时是否会增加性能消耗？"
								}
							]
						}
					]
				},
				{
					"ID": "20250319232726-urm38v7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20250319232726-urm38v7",
						"updated": "20250319232915"
					},
					"Children": [
						{
							"ID": "20250319232726-vvz05u0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319232726-vvz05u0",
								"updated": "20250319232915"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们知道，下面的代码 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "b"
								},
								{
									"Type": "NodeText",
									"Data": "​ 改为 20 后，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "a"
								},
								{
									"Type": "NodeText",
									"Data": "​ 还是 10。（值类型的特点）"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "我们是否可以简单修改以上代码，让 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "b"
								},
								{
									"Type": "NodeText",
									"Data": "​ 变成 20 后，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "a"
								},
								{
									"Type": "NodeText",
									"Data": "​ 跟着一起变。请说出修改方案"
								}
							]
						},
						{
							"ID": "20250319232833-bhcwuwp",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20250319232833-bhcwuwp",
								"style": "line-height: 22px;",
								"updated": "20250319232850"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "int a = 10;\nint b = a;\nb = 20;\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20250319232650-n7dnhgd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250319232650-n7dnhgd",
				"updated": "20250319232650"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Unity"
				}
			]
		},
		{
			"ID": "20250319232650-vsc4p45",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20250319232650-vsc4p45",
				"updated": "20250319233141"
			},
			"Children": [
				{
					"ID": "20250319232956-mu75po5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20250319232956-mu75po5",
						"updated": "20250319233024"
					},
					"Children": [
						{
							"ID": "20250319232956-7ppl8qp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319232956-7ppl8qp",
								"updated": "20250319233024"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unity 中摄像机组件中的投影（Projection）参数    其中的两个选项：透视投影（Perspective）和 正交投影（Orthographic）有什么区别？"
								}
							]
						}
					]
				},
				{
					"ID": "20250319232956-7zh42da",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20250319232956-7zh42da",
						"updated": "20250319233138"
					},
					"Children": [
						{
							"ID": "20250319232956-l38lzu5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319232956-l38lzu5",
								"updated": "20250319233138"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "FSM 和 BT 指什么？他们是用来处理什么的？"
								}
							]
						}
					]
				},
				{
					"ID": "20250319232956-h9vymdg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20250319232956-h9vymdg",
						"updated": "20250319233141"
					},
					"Children": [
						{
							"ID": "20250319232956-sg5xhkm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319232956-sg5xhkm",
								"updated": "20250319233141"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "10000 个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Monobehaviour"
								},
								{
									"Type": "NodeText",
									"Data": "​，每个各自执行 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Update"
								},
								{
									"Type": "NodeText",
									"Data": "​，和放到一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Update"
								},
								{
									"Type": "NodeText",
									"Data": "​ 里执行，哪个效率更高？为什么？"
								}
							]
						}
					]
				},
				{
					"ID": "20250319232956-xpydgl6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20250319232956-xpydgl6",
						"updated": "20250319233101"
					},
					"Children": [
						{
							"ID": "20250319232956-mml3qfa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319232956-mml3qfa",
								"updated": "20250319233101"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们在编写代码时，有什么常用的优化代码性能的手段？至少说出 3 点"
								}
							]
						}
					]
				},
				{
					"ID": "20250319232956-mknkedd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20250319232956-mknkedd",
						"updated": "20250319233113"
					},
					"Children": [
						{
							"ID": "20250319232956-t8qoxi8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319232956-t8qoxi8",
								"updated": "20250319233113"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "OpenGL 和 DirectX 的最大区别是什么？"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20250319233207-8jo59ig",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20250319233207-8jo59ig",
				"updated": "20250319234235"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "答案"
				}
			]
		},
		{
			"ID": "20250319233214-ywpuqnn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250319233214-ywpuqnn",
				"updated": "20250319233214"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "C#"
				}
			]
		},
		{
			"ID": "20250319233214-pdc2sf8",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20250319233214-pdc2sf8",
				"updated": "20250319233506"
			},
			"Children": [
				{
					"ID": "20250319233214-afmvx6l",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20250319233214-afmvx6l",
						"updated": "20250319233214"
					},
					"Children": [
						{
							"ID": "20250319233214-loitrhu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233214-loitrhu",
								"updated": "20250319233214"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "抽象类中的虚函数和抽象函数，是否必须在子类中重写？"
								}
							]
						},
						{
							"ID": "20250319233219-5em9h1n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233219-5em9h1n",
								"updated": "20250319233225"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "子类中虚函数的重写是可选的，当需要在子类中修改逻辑时可以选择重写，抽象函数必须重写"
								}
							]
						}
					]
				},
				{
					"ID": "20250319233214-v2u3bht",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20250319233214-v2u3bht",
						"updated": "20250319233214"
					},
					"Children": [
						{
							"ID": "20250319233214-6e8cltw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233214-6e8cltw",
								"updated": "20250319233214"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当我们使用里式替换原则，用父类容器装载子类对象时，我们通过该父类容器调用其中的一个虚函数，执行的逻辑是父类中的还是子类中的逻辑呢？"
								}
							]
						},
						{
							"ID": "20250319233228-4c61mmu",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20250319233228-4c61mmu",
								"updated": "20250319233239"
							},
							"Children": [
								{
									"ID": "20250319233239-1b6o77h",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20250319233239-1b6o77h",
										"updated": "20250319233239"
									},
									"Children": [
										{
											"ID": "20250319233239-uuz5cb6",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319233239-uuz5cb6",
												"updated": "20250319233239"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "若子类没有重写虚函数，那么执行的逻辑会是父类中的逻辑"
												}
											]
										}
									]
								},
								{
									"ID": "20250319233242-gr0b6hy",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20250319233242-gr0b6hy",
										"updated": "20250319233242"
									},
									"Children": [
										{
											"ID": "20250319233242-lontirv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319233242-lontirv",
												"updated": "20250319233246"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "若子类重写了虚函数，那么执行的逻辑会是子类中的逻辑（是否执行父类中逻辑，主要看子类重写时是否利用了 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "base"
												},
												{
													"Type": "NodeText",
													"Data": "​ 执行父类逻辑）"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20250319233214-sc7zu64",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20250319233214-sc7zu64",
						"updated": "20250319233214"
					},
					"Children": [
						{
							"ID": "20250319233214-iclcvkv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233214-iclcvkv",
								"updated": "20250319233214"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们在游戏开发时，想要获取系统时间，应该如何获取？"
								}
							]
						},
						{
							"ID": "20250319233249-wl7lsij",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233249-wl7lsij",
								"updated": "20250319233321"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "利用 C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 中提供的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "DateTime"
								},
								{
									"Type": "NodeText",
									"Data": "​ 类（"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "System"
								},
								{
									"Type": "NodeText",
									"Data": "​ 命名空间中），"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "DateTime"
								},
								{
									"Type": "NodeText",
									"Data": "​ 中的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "DateTime.Now"
								},
								{
									"Type": "NodeText",
									"Data": "​ 静态成员可以获取到当前的系统时间"
								}
							]
						}
					]
				},
				{
					"ID": "20250319233214-cd54r55",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20250319233214-cd54r55",
						"updated": "20250319233214"
					},
					"Children": [
						{
							"ID": "20250319233214-6bmic0z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233214-6bmic0z",
								"updated": "20250319233214"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C# 使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "var"
								},
								{
									"Type": "NodeText",
									"Data": "​ 声明临时变量相比用指定变量类型声明临时变量，在最终执行时是否会增加性能消耗？"
								}
							]
						},
						{
							"ID": "20250319233324-4mf1bfs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233324-4mf1bfs",
								"updated": "20250319233350"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不会，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "var"
								},
								{
									"Type": "NodeText",
									"Data": "​ 在编译时会被推断为正确的类型，所以在运行时不会引入额外的性能开销。\n相当于在编译阶段 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "var"
								},
								{
									"Type": "NodeText",
									"Data": "​ 就会被翻译为指定的类型。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "var"
								},
								{
									"Type": "NodeText",
									"Data": "​ 声明临时变量只会影响代码的可读性和可维护性（双刃剑）"
								}
							]
						}
					]
				},
				{
					"ID": "20250319233214-omiz9rn",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20250319233214-omiz9rn",
						"updated": "20250319233506"
					},
					"Children": [
						{
							"ID": "20250319233214-91u9gyw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233214-91u9gyw",
								"updated": "20250319233214"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们知道，下面的代码 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "b"
								},
								{
									"Type": "NodeText",
									"Data": "​ 改为 20 后，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "a"
								},
								{
									"Type": "NodeText",
									"Data": "​ 还是 10。（值类型的特点）"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeText",
									"Data": "我们是否可以简单修改以上代码，让 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "b"
								},
								{
									"Type": "NodeText",
									"Data": "​ 变成 20 后，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "a"
								},
								{
									"Type": "NodeText",
									"Data": "​ 跟着一起变。请说出修改方案"
								}
							]
						},
						{
							"ID": "20250319233214-zn4b6o0",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20250319233214-zn4b6o0",
								"style": "line-height: 22px;",
								"updated": "20250319233214"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "int a = 10;\nint b = a;\nb = 20;\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20250319233425-0ipikjr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233425-0ipikjr",
								"updated": "20250319233456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 7 中加入了 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ref"
								},
								{
									"Type": "NodeText",
									"Data": "​ 的新用法，使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ref"
								},
								{
									"Type": "NodeText",
									"Data": "​ 修饰临时变量和函数返回值，可以让赋值变为引用传递，Unity 2018.3 及其以上版本支持 C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 7\n"
								}
							]
						},
						{
							"ID": "20250319233456-4jc0fui",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20250319233456-4jc0fui",
								"style": "line-height: 22px;",
								"updated": "20250319233506"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "int a = 10;\nref int b = ref a;\nb = 20;\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20250319233214-dfhorjm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250319233214-dfhorjm",
				"updated": "20250319233214"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Unity"
				}
			]
		},
		{
			"ID": "20250319233214-4veboad",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20250319233214-4veboad",
				"updated": "20250319234235"
			},
			"Children": [
				{
					"ID": "20250319233214-hrnueg3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20250319233214-hrnueg3",
						"updated": "20250319233214"
					},
					"Children": [
						{
							"ID": "20250319233214-1h1guv0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233214-1h1guv0",
								"updated": "20250319233214"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unity 中摄像机组件中的投影（Projection）参数    其中的两个选项：透视投影（Perspective）和 正交投影（Orthographic）有什么区别？"
								}
							]
						},
						{
							"ID": "20250319233523-09v8so7",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20250319233523-09v8so7",
								"updated": "20250319233527"
							},
							"Children": [
								{
									"ID": "20250319233527-t69s74k",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319233527-t69s74k",
										"updated": "20250319233527"
									},
									"Children": [
										{
											"ID": "20250319233527-syr13sj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319233527-syr13sj",
												"updated": "20250319233538"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "透视投影：模拟人眼看世界的方式，近大远小，并呈现出显示世界中的景深和透视效果，通常用于制作3D游戏"
												}
											]
										}
									]
								},
								{
									"ID": "20250319233534-yd0xhf9",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319233534-yd0xhf9",
										"updated": "20250319233534"
									},
									"Children": [
										{
											"ID": "20250319233534-6flry7a",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319233534-6flry7a",
												"updated": "20250319233541"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "正交投影：不考虑对象到摄像机的距离，所有对象无论在场景中任何位置，都以相同大小显示，通常用于制作2D游戏"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20250319233214-xnobtfx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20250319233214-xnobtfx",
						"updated": "20250319233214"
					},
					"Children": [
						{
							"ID": "20250319233214-tzpejqg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233214-tzpejqg",
								"updated": "20250319233214"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "FSM 和 BT 指什么？他们是用来处理什么的？"
								}
							]
						},
						{
							"ID": "20250319233542-n4w6r0p",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20250319233542-n4w6r0p",
								"updated": "20250319233632"
							},
							"Children": [
								{
									"ID": "20250319233632-mn9zv6d",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319233632-mn9zv6d",
										"updated": "20250319233632"
									},
									"Children": [
										{
											"ID": "20250319233632-w6cervq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319233632-w6cervq",
												"updated": "20250319233635"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "FSM（finite state machine）：有限状态机"
												}
											]
										}
									]
								},
								{
									"ID": "20250319233635-ksrqgdh",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319233635-ksrqgdh",
										"updated": "20250319233635"
									},
									"Children": [
										{
											"ID": "20250319233635-stnguk9",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319233635-stnguk9",
												"updated": "20250319233635"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "BT（Behavior Tree）：行为树"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20250319233638-2h9t4rb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233638-2h9t4rb",
								"updated": "20250319233643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "他们都是用来制作游戏中AI功能的设计方案"
								}
							]
						}
					]
				},
				{
					"ID": "20250319233214-vcvz8we",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20250319233214-vcvz8we",
						"updated": "20250319233214"
					},
					"Children": [
						{
							"ID": "20250319233214-2ddl3wc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233214-2ddl3wc",
								"updated": "20250319233214"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "10000 个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Monobehaviour"
								},
								{
									"Type": "NodeText",
									"Data": "​，每个各自执行 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Update"
								},
								{
									"Type": "NodeText",
									"Data": "​，和放到一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Update"
								},
								{
									"Type": "NodeText",
									"Data": "​ 里执行，哪个效率更高？为什么？"
								}
							]
						},
						{
							"ID": "20250319233655-chsy9xr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233655-chsy9xr",
								"updated": "20250319233736"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "放在一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Update"
								},
								{
									"Type": "NodeText",
									"Data": "​ 中执行效率较高，原因："
								}
							]
						},
						{
							"ID": "20250319233702-546knln",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20250319233702-546knln",
								"updated": "20250319233706"
							},
							"Children": [
								{
									"ID": "20250319233706-pd4nq3r",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20250319233706-pd4nq3r",
										"updated": "20250319233706"
									},
									"Children": [
										{
											"ID": "20250319233706-n0g2vuo",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319233706-n0g2vuo",
												"updated": "20250319233729"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "因为每调用一次 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Update"
												},
												{
													"Type": "NodeText",
													"Data": "​，相当于就是执行了一次方法，而每一次方法的调用在底层是有开销的，当在一帧里进行过多的方法调用自然会增加额外的开销"
												}
											]
										}
									]
								},
								{
									"ID": "20250319233721-s7hsci2",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20250319233721-s7hsci2",
										"updated": "20250319233721"
									},
									"Children": [
										{
											"ID": "20250319233721-zwqc0ma",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319233721-zwqc0ma",
												"updated": "20250319233722"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Unity 内部对生命周期函数采用了引用和查找机制，每次调用 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Update"
												},
												{
													"Type": "NodeText",
													"Data": "​ 时，也会存在查找相关操作，也会增加部分开销"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20250319233214-2ku7sgl",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20250319233214-2ku7sgl",
						"updated": "20250319233214"
					},
					"Children": [
						{
							"ID": "20250319233214-7h1vhj3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233214-7h1vhj3",
								"updated": "20250319233214"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们在编写代码时，有什么常用的优化代码性能的手段？至少说出 3 点"
								}
							]
						},
						{
							"ID": "20250319233745-fc9ny0i",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20250319233745-fc9ny0i",
								"updated": "20250319234004"
							},
							"Children": [
								{
									"ID": "20250319234004-z8b7ml6",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20250319234004-z8b7ml6",
										"updated": "20250319234004"
									},
									"Children": [
										{
											"ID": "20250319234004-jtk8uh2",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319234004-jtk8uh2",
												"updated": "20250319234012"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "间隔几帧执行一次逻辑（自己手动间隔、协同程序分时分步）"
												}
											]
										}
									]
								},
								{
									"ID": "20250319234008-3l50vip",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20250319234008-3l50vip",
										"updated": "20250319234008"
									},
									"Children": [
										{
											"ID": "20250319234008-qhiatxp",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319234008-qhiatxp",
												"updated": "20250319234023"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在帧更新函数中尽量少用临时变量（比如 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Update"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "OnGUI"
												},
												{
													"Type": "NodeText",
													"Data": "​ 等每帧执行的生命周期函数中)"
												}
											]
										}
									]
								},
								{
									"ID": "20250319234024-jdas5gy",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20250319234024-jdas5gy",
										"updated": "20250319234024"
									},
									"Children": [
										{
											"ID": "20250319234024-4tnfa0z",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319234024-4tnfa0z",
												"updated": "20250319234024"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "定时进行手动垃圾回收（GC）（比如切换场景时）"
												}
											]
										}
									]
								},
								{
									"ID": "20250319234027-s84ox7f",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20250319234027-s84ox7f",
										"updated": "20250319234027"
									},
									"Children": [
										{
											"ID": "20250319234027-v5hjiqv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319234027-v5hjiqv",
												"updated": "20250319234027"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "优化数学计算，比如尽量少用浮点数，用乘法代替除法等等"
												}
											]
										}
									]
								},
								{
									"ID": "20250319234030-oiwwy0h",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NS4=",
										"Num": 5
									},
									"Properties": {
										"id": "20250319234030-oiwwy0h",
										"updated": "20250319234030"
									},
									"Children": [
										{
											"ID": "20250319234030-qlouuhl",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319234030-qlouuhl",
												"updated": "20250319234033"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "应用缓存池"
												}
											]
										}
									]
								},
								{
									"ID": "20250319234033-iigmt8y",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Ni4=",
										"Num": 6
									},
									"Properties": {
										"id": "20250319234033-iigmt8y",
										"updated": "20250319234033"
									},
									"Children": [
										{
											"ID": "20250319234033-9lcf8ug",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319234033-9lcf8ug",
												"updated": "20250319234039"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "尽量减少 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Update"
												},
												{
													"Type": "NodeText",
													"Data": "​ 生命周期函数的数量"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20250319233214-jyh29b0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20250319233214-jyh29b0",
						"updated": "20250319234235"
					},
					"Children": [
						{
							"ID": "20250319233214-vgsgbuv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319233214-vgsgbuv",
								"updated": "20250319233214"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "OpenGL 和 DirectX 的最大区别是什么？"
								}
							]
						},
						{
							"ID": "20250319234141-rfismvm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319234141-rfismvm",
								"updated": "20250319234151"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "OpenGL 和 DX 的主要区别就是在于："
								}
							]
						},
						{
							"ID": "20250319234152-nej307i",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20250319234152-nej307i",
								"updated": "20250319234153"
							},
							"Children": [
								{
									"ID": "20250319234153-f0f5zuo",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319234153-f0f5zuo",
										"updated": "20250319234153"
									},
									"Children": [
										{
											"ID": "20250319234153-z0b1ydl",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319234153-z0b1ydl",
												"updated": "20250319234203"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "OpenGL 是一个跨平台、跨语言的开放图形库，可以支持各种平台，比如 Windows、Linux、MacOS 等等，\n"
												}
											]
										}
									]
								},
								{
									"ID": "20250319234204-eqy1oma",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319234204-eqy1oma",
										"updated": "20250319234204"
									},
									"Children": [
										{
											"ID": "20250319234204-vtlzouv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319234204-vtlzouv",
												"updated": "20250319234228"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "DirectX 是微软创建的，它不跨平台，只针对微软相关平台，比如 Windows 操作系统，XBOX 主机系"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20250319234228-so232hv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319234228-so232hv",
								"updated": "20250319234235"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "游戏引擎底层就会对图形 API 进行封装，为了适应更多的平台，往往会针对多种图形 API 进行封装"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20250319234111-fhvtal9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250319234111-fhvtal9",
				"updated": "20250319234111"
			}
		}
	]
}