{
	"ID": "20250319224048-fhd115i",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20250319224048-fhd115i",
		"title": "MIL13——模拟面试题",
		"type": "doc",
		"updated": "20250319230151"
	},
	"Children": [
		{
			"ID": "20250319224110-f6mnr4a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250319224110-f6mnr4a",
				"updated": "20250319224110"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "C#"
				}
			]
		},
		{
			"ID": "20250319224110-dc67qot",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20250319224110-dc67qot",
				"updated": "20250319225524"
			},
			"Children": [
				{
					"ID": "20250319224218-zs2qvwd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20250319224218-zs2qvwd",
						"updated": "20250319224218"
					},
					"Children": [
						{
							"ID": "20250319224218-ls3cdvg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319224218-ls3cdvg",
								"updated": "20250319224309"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 中哪些变量类型是值类型（至少说出13种），哪些是引用类型（至少说出5种）"
								}
							]
						},
						{
							"ID": "20250319225010-q0u0y92",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20250319225010-q0u0y92",
								"updated": "20250319225014"
							},
							"Children": [
								{
									"ID": "20250319225014-bv0wpqu",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319225014-bv0wpqu",
										"updated": "20250319225014"
									},
									"Children": [
										{
											"ID": "20250319225014-opgmq9b",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225014-opgmq9b",
												"updated": "20250319225045"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "值类型： "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "int"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "float"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "double"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "byte"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "short"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "long"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "uint"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "ulong"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "uint"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "sbyte"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "decimal"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "char"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "bool"
												},
												{
													"Type": "NodeText",
													"Data": "​、自定义结构体"
												}
											]
										}
									]
								},
								{
									"ID": "20250319225016-lwrx32d",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319225016-lwrx32d",
										"updated": "20250319225016"
									},
									"Children": [
										{
											"ID": "20250319225016-ozy1462",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225016-ozy1462",
												"updated": "20250319225047"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "引用类型： 自定义类、数组、字符串、委托、接口、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "object"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20250319224218-drgyrsx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20250319224218-drgyrsx",
						"updated": "20250319224218"
					},
					"Children": [
						{
							"ID": "20250319224218-tuyg7tc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319224218-tuyg7tc",
								"updated": "20250319224252"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第一个问题：在自定义类中声明的成员变量，类型为 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "int"
								},
								{
									"Type": "NodeText",
									"Data": "​，该 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "int"
								},
								{
									"Type": "NodeText",
									"Data": "​ 变量存储在栈上还是堆上？\n第二个问题：在自定义结构体中声明的成员变量，类型为 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "string"
								},
								{
									"Type": "NodeText",
									"Data": "​，该 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "string"
								},
								{
									"Type": "NodeText",
									"Data": "​ 变量存储在栈上还是堆上？"
								}
							]
						},
						{
							"ID": "20250319225051-n8m6tbz",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20250319225051-n8m6tbz",
								"updated": "20250319225101"
							},
							"Children": [
								{
									"ID": "20250319225101-3frnbnl",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20250319225101-3frnbnl",
										"updated": "20250319225101"
									},
									"Children": [
										{
											"ID": "20250319225101-usftxne",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225101-usftxne",
												"updated": "20250319225101"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "堆上 "
												}
											]
										},
										{
											"ID": "20250319225107-3b278sw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225107-3b278sw",
												"updated": "20250319225112"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "自定义类中声明的成员变量，无论什么类型，都会存储在堆上。\n类（引用类型）的实例本身存储在堆上，而成员变量也存储在该实例所指向的内存区域（堆上）"
												}
											]
										}
									]
								},
								{
									"ID": "20250319225105-t17v3pf",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20250319225105-t17v3pf",
										"updated": "20250319225105"
									},
									"Children": [
										{
											"ID": "20250319225105-76zhwth",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225105-76zhwth",
												"updated": "20250319225118"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "堆上"
												}
											]
										},
										{
											"ID": "20250319225118-pmvaydx",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225118-pmvaydx",
												"updated": "20250319225125"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在结构体变量中的引用类型成员实际上会存储在堆上。\n虽然结构体本身是值类型，存储在栈上，但是如果结构体的成员包含引用类型，\n那么引用类型的对象会存储在堆上，而结构体的实例内部会包含对这些堆上对象的引用。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20250319224218-jjvgq4b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20250319224218-jjvgq4b",
						"updated": "20250319224218"
					},
					"Children": [
						{
							"ID": "20250319224218-kor7nl4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319224218-kor7nl4",
								"updated": "20250319224310"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 中在什么情况下会选择使用接口，什么情况下会选择使用抽象类？"
								}
							]
						},
						{
							"ID": "20250319225128-3nfu0cw",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20250319225128-3nfu0cw",
								"updated": "20250319225145"
							},
							"Children": [
								{
									"ID": "20250319225145-0z2f69o",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319225145-0z2f69o",
										"updated": "20250319225145"
									},
									"Children": [
										{
											"ID": "20250319225145-704c230",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225145-704c230",
												"updated": "20250319225145"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "接口："
												}
											]
										},
										{
											"ID": "20250319225149-jy7zg5c",
											"Type": "NodeList",
											"ListData": {
												"Typ": 1
											},
											"Properties": {
												"id": "20250319225149-jy7zg5c",
												"updated": "20250319225151"
											},
											"Children": [
												{
													"ID": "20250319225151-sfhurok",
													"Type": "NodeListItem",
													"ListData": {
														"Typ": 1,
														"Delimiter": 46,
														"Marker": "MS4=",
														"Num": 1
													},
													"Properties": {
														"id": "20250319225151-sfhurok",
														"updated": "20250319225151"
													},
													"Children": [
														{
															"ID": "20250319225151-cp50et9",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20250319225151-cp50et9",
																"updated": "20250319225151"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "不同对象的共同行为"
																}
															]
														}
													]
												},
												{
													"ID": "20250319225153-1l341t2",
													"Type": "NodeListItem",
													"ListData": {
														"Typ": 1,
														"Delimiter": 46,
														"Marker": "Mi4=",
														"Num": 2
													},
													"Properties": {
														"id": "20250319225153-1l341t2",
														"updated": "20250319225153"
													},
													"Children": [
														{
															"ID": "20250319225153-a3in5vg",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20250319225153-a3in5vg",
																"updated": "20250319225201"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "需要多继承时"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20250319225202-cvvnk4y",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319225202-cvvnk4y",
										"updated": "20250319225202"
									},
									"Children": [
										{
											"ID": "20250319225202-jk633c7",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225202-jk633c7",
												"updated": "20250319225203"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "抽象类："
												}
											]
										},
										{
											"ID": "20250319225207-1nlwr9c",
											"Type": "NodeList",
											"ListData": {
												"Typ": 1
											},
											"Properties": {
												"id": "20250319225207-1nlwr9c",
												"updated": "20250319225210"
											},
											"Children": [
												{
													"ID": "20250319225210-9ck6i92",
													"Type": "NodeListItem",
													"ListData": {
														"Typ": 1,
														"Delimiter": 46,
														"Marker": "MS4=",
														"Num": 1
													},
													"Properties": {
														"id": "20250319225210-9ck6i92",
														"updated": "20250319225210"
													},
													"Children": [
														{
															"ID": "20250319225210-gnxx6rg",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20250319225210-gnxx6rg",
																"updated": "20250319225210"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "同类对象的共同行为"
																}
															]
														}
													]
												},
												{
													"ID": "20250319225213-d2w41qq",
													"Type": "NodeListItem",
													"ListData": {
														"Typ": 1,
														"Delimiter": 46,
														"Marker": "Mi4=",
														"Num": 2
													},
													"Properties": {
														"id": "20250319225213-d2w41qq",
														"updated": "20250319225213"
													},
													"Children": [
														{
															"ID": "20250319225213-zscl5ml",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20250319225213-zscl5ml",
																"updated": "20250319225213"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "共享成员变量"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20250319224218-z7a0c9p",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20250319224218-z7a0c9p",
						"updated": "20250319224218"
					},
					"Children": [
						{
							"ID": "20250319224218-q291vuq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319224218-q291vuq",
								"updated": "20250319224310"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 中什么是托管内存和非托管内存？"
								}
							]
						},
						{
							"ID": "20250319225238-wi34utu",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20250319225238-wi34utu",
								"updated": "20250319225241"
							},
							"Children": [
								{
									"ID": "20250319225241-317l45r",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319225241-317l45r",
										"updated": "20250319225241"
									},
									"Children": [
										{
											"ID": "20250319225241-fdei02f",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225241-fdei02f",
												"updated": "20250319225256"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "托管内存： 托管内存是由 .NET 运行时（CLR，Common Language Runtime）进行管理的内存。"
												}
											]
										},
										{
											"ID": "20250319225257-j5lea3r",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225257-j5lea3r",
												"updated": "20250319225324"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "C"
												},
												{
													"Type": "NodeBackslash",
													"Data": "span",
													"Children": [
														{
															"Type": "NodeText",
															"Data": "#"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": " 中大部分对象都是托管内存，它们的内存分配、回收和资源管理都由 CLR 负责。\nCLR 提供了自动垃圾回收机制（GC），可以自动检测不再使用的对象并释放它们占用的内存，从而避免了内存泄漏问题。\n比如我们平时声明的引用类型的变量都属于托管内存"
												}
											]
										}
									]
								},
								{
									"ID": "20250319225305-kvhi2dw",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319225305-kvhi2dw",
										"updated": "20250319225305"
									},
									"Children": [
										{
											"ID": "20250319225305-mor0f0f",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225305-mor0f0f",
												"updated": "20250319225305"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "非托管内存： 非托管内存是由应用程序自己负责管理的内存，它通常是通过调用本机API或与外部系统进行交互时使用的。"
												}
											]
										},
										{
											"ID": "20250319225310-xgrlnnq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225310-xgrlnnq",
												"updated": "20250319225343"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "非托管内存可能不受 CLR 的管理，这意味着它不会受到垃圾回收的影响。\n但是，这也意味着开发人员需要自己负责内存的分配和释放，否则可能会导致内存泄漏或者访问无效内存的问题。\n比如我们平时声明的 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "unsafe"
												},
												{
													"Type": "NodeText",
													"Data": "​ 语句块中的指针成员，数据库链接对象，Socket 通讯对象，文件流等对象都存在非托管内存，需要我们自己释放"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20250319224218-31yjr2p",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20250319224218-31yjr2p",
						"updated": "20250319225524"
					},
					"Children": [
						{
							"ID": "20250319224218-41828mc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319224218-41828mc",
								"updated": "20250319225524"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "请问什么是线程安全？如何在 C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 中实现线程安全操作？"
								}
							]
						},
						{
							"ID": "20250319225356-20f6nyl",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20250319225356-20f6nyl",
								"updated": "20250319225519"
							},
							"Children": [
								{
									"ID": "20250319225445-fynj9bm",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319225445-fynj9bm",
										"updated": "20250319225514"
									},
									"Children": [
										{
											"ID": "20250319225445-wgrznr4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225445-wgrznr4",
												"updated": "20250319225445"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "线程安全，是指在多线程环境中，对共享资源（如数据、变量、对象等）进行操作时，不会产生不正确的结果或不可预期的行为。"
												}
											]
										},
										{
											"ID": "20250319225452-4udu3b2",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225452-4udu3b2",
												"updated": "20250319225502"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在多线程程序中，由于多个线程可以同时访问和修改共享资源，如果没有适当的同步机制，就可能会导致数据损坏、竞态条件（Race Condition）和其他错误"
												}
											]
										},
										{
											"ID": "20250319225503-4of93xe",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20250319225503-4of93xe",
												"updated": "20250319225514"
											},
											"Children": [
												{
													"ID": "20250319225503-jx8y815",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20250319225503-jx8y815",
														"updated": "20250319225503"
													},
													"Children": [
														{
															"ID": "20250319225503-b739a9i",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20250319225503-b739a9i",
																"updated": "20250319225503"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "数据损坏：数据损坏是指数据在存储、传输或处理过程中发生错误，导致数据的内容或结构出现不一致、不正确或不完整的情况"
																}
															]
														}
													]
												},
												{
													"ID": "20250319225507-p4s88nk",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20250319225507-p4s88nk",
														"updated": "20250319225514"
													},
													"Children": [
														{
															"ID": "20250319225507-hdm66y8",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20250319225507-hdm66y8",
																"updated": "20250319225514"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "竞态条件：多个线程试图同时访问和修改共享资源（如变量、数据结构、文件等），从而导致程序的行为出现不确定性或不正确的结果。\n竞态条件可能会导致程序的运行结果与预期不符，产生难以预测和复现的错误"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20250319225448-wso3ayc",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319225448-wso3ayc",
										"updated": "20250319225519"
									},
									"Children": [
										{
											"ID": "20250319225448-l5dfl0q",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225448-l5dfl0q",
												"updated": "20250319225519"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如何在 C"
												},
												{
													"Type": "NodeBackslash",
													"Data": "span",
													"Children": [
														{
															"Type": "NodeText",
															"Data": "#"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": " 中实现线程安全操作？ 使用锁（Lock）、异步编程（async、await）等方式"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20250319224110-zff6yhl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250319224110-zff6yhl",
				"updated": "20250319224110"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Unity"
				}
			]
		},
		{
			"ID": "20250319224110-j6buqpp",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20250319224110-j6buqpp",
				"updated": "20250319230151"
			},
			"Children": [
				{
					"ID": "20250319224444-fae1klu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20250319224444-fae1klu",
						"updated": "20250319224444"
					},
					"Children": [
						{
							"ID": "20250319224444-7s8wt4t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319224444-7s8wt4t",
								"updated": "20250319224449"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unity 中的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Lerp"
								},
								{
									"Type": "NodeText",
									"Data": "​ 和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Slerp"
								},
								{
									"Type": "NodeText",
									"Data": "​ 分别是什么？"
								}
							]
						},
						{
							"ID": "20250319225535-awd7duf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319225535-awd7duf",
								"updated": "20250319225554"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Lerp"
								},
								{
									"Type": "NodeText",
									"Data": "​ 和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Slerp"
								},
								{
									"Type": "NodeText",
									"Data": "​ 是两个方法，在 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Mathf"
								},
								{
									"Type": "NodeText",
									"Data": "​ 和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Vector"
								},
								{
									"Type": "NodeText",
									"Data": "​ 等类中都提供了对应的方法"
								}
							]
						},
						{
							"ID": "20250319225555-karuk34",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20250319225555-karuk34",
								"updated": "20250319225557"
							},
							"Children": [
								{
									"ID": "20250319225557-usilpoe",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20250319225557-usilpoe",
										"updated": "20250319225557"
									},
									"Children": [
										{
											"ID": "20250319225557-3ndcci5",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225557-3ndcci5",
												"updated": "20250319225647"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Lerp"
												},
												{
													"Type": "NodeText",
													"Data": "​：线性插值函数，接受三个参数，起始值、目标值和插值比例\n​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Lerp"
												},
												{
													"Type": "NodeText",
													"Data": "​ 用于在两个值之间进行平滑的线性插值，适用于直线运动、颜色过渡等场景"
												}
											]
										}
									]
								},
								{
									"ID": "20250319225615-k8rge3r",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20250319225615-k8rge3r",
										"updated": "20250319225615"
									},
									"Children": [
										{
											"ID": "20250319225615-0dgkl2f",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225615-0dgkl2f",
												"updated": "20250319225642"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Slerp"
												},
												{
													"Type": "NodeText",
													"Data": "​：球面插值函数，接受三个参数，起始值、目标值和插值比例\n​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Slerp"
												},
												{
													"Type": "NodeText",
													"Data": "​ 在插值过程中会在两个旋转之间沿着曲线（球面）插值，从而保持较为自然的旋转过渡"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20250319224444-etihuty",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20250319224444-etihuty",
						"updated": "20250319224444"
					},
					"Children": [
						{
							"ID": "20250319224444-fxqj8y9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319224444-fxqj8y9",
								"updated": "20250319224451"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unity 底层是单线程还是多线程"
								}
							]
						},
						{
							"ID": "20250319225636-na2c9ba",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319225636-na2c9ba",
								"updated": "20250319225740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unity 底层实现是基于单线程的，这个线程通常被称为 主线程 或 渲染线程，意味着大部分的游戏逻辑、渲染和更新都在主线程上执行。\n但是 Unity 也支持自定义多线程处理复杂逻辑，并且 Unity 目前的版本也提供了一些多线程技术来改善性能，比如 Job System、DOTS 等"
								}
							]
						}
					]
				},
				{
					"ID": "20250319224444-oh23mie",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20250319224444-oh23mie",
						"updated": "20250319224444"
					},
					"Children": [
						{
							"ID": "20250319224444-hfpsms1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319224444-hfpsms1",
								"updated": "20250319225751"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如何在 Unity 中实现多语言支持？（不同国家的人，看到的游戏内的语言是不一样的）"
								}
							]
						},
						{
							"ID": "20250319225751-4sg22bm",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20250319225751-4sg22bm",
								"updated": "20250319225807"
							},
							"Children": [
								{
									"ID": "20250319225807-lvoqu9l",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20250319225807-lvoqu9l",
										"updated": "20250319225807"
									},
									"Children": [
										{
											"ID": "20250319225807-ejfsgbi",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225807-ejfsgbi",
												"updated": "20250319225830"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "单包：将所有设计多语言的图片、文本通过配置表去配置，当显示这些内容时，根据配置表中的信息去动态的加载，\n所有地区通用一个安装包，只是游戏中进行地区判断或者语言选择"
												}
											]
										}
									]
								},
								{
									"ID": "20250319225811-nsk5izd",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20250319225811-nsk5izd",
										"updated": "20250319225811"
									},
									"Children": [
										{
											"ID": "20250319225811-l82mzj5",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225811-l82mzj5",
												"updated": "20250319225811"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "分包：根据不同地区发布不同的安装包"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20250319224444-8uaehf6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20250319224444-8uaehf6",
						"updated": "20250319224444"
					},
					"Children": [
						{
							"ID": "20250319224444-xvadvhi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319224444-xvadvhi",
								"updated": "20250319224459"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Shader 当中的顶点和片元着色器有什么作用？"
								}
							]
						},
						{
							"ID": "20250319225832-jd1s57b",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20250319225832-jd1s57b",
								"updated": "20250319225932"
							},
							"Children": [
								{
									"ID": "20250319225932-197sdy9",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319225932-197sdy9",
										"updated": "20250319225932"
									},
									"Children": [
										{
											"ID": "20250319225932-y9znpo5",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225932-y9znpo5",
												"updated": "20250319225932"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "顶点着色器： 主要作用是对物体的顶点位置进行变换和投影，从本地坐标系转换到世界坐标系和相机坐标系等。"
												}
											]
										},
										{
											"ID": "20250319225937-rgsjl7m",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225937-rgsjl7m",
												"updated": "20250319225940"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在这个阶段，顶点着色器还可以计算光照的影响、法线的变换，以及传递一些数据供后续阶段使用"
												}
											]
										}
									]
								},
								{
									"ID": "20250319225940-mo4jxoh",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319225940-mo4jxoh",
										"updated": "20250319225940"
									},
									"Children": [
										{
											"ID": "20250319225940-slmmyz5",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225940-slmmyz5",
												"updated": "20250319225940"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "片元着色器： 主要处理像素的颜色、纹理和光照。在顶点着色器之后，渲染管线会对物体进行光栅化，将物体的几何形状转换为像素。"
												}
											]
										},
										{
											"ID": "20250319225943-epyll1d",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319225943-epyll1d",
												"updated": "20250319225957"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在片元着色器中，针对每个像素，会进行插值和纹理采样，以及计算光照、阴影、反射等效果。\n片元着色器最终输出的颜色将决定每个像素的显示效果。"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20250319225949-6nqq7ma",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319225949-6nqq7ma",
								"updated": "20250319225954"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这两个着色器阶段协同工作，将 3D 场景中的几何信息转换为 2D 屏幕上的像素颜色，从而实现图形的渲染和显示。"
								}
							]
						}
					]
				},
				{
					"ID": "20250319224444-9do27v0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20250319224444-9do27v0",
						"updated": "20250319230151"
					},
					"Children": [
						{
							"ID": "20250319224444-5x21caz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319224444-5x21caz",
								"updated": "20250319224502"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unity 目前版本中创建的普通项目、URP 项目、HDRP 项目的区别是什么？"
								}
							]
						},
						{
							"ID": "20250319230009-8ra4p5v",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20250319230009-8ra4p5v",
								"updated": "20250319230017"
							},
							"Children": [
								{
									"ID": "20250319230017-5h6ttz0",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319230017-5h6ttz0",
										"updated": "20250319230017"
									},
									"Children": [
										{
											"ID": "20250319230017-10zwxq6",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319230017-10zwxq6",
												"updated": "20250319230021"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "普通项目： 使用 Unity 默认的渲染管线，也被称为内置渲染管线或标准渲染管线。"
												}
											]
										},
										{
											"ID": "20250319230024-ryeee30",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319230024-ryeee30",
												"updated": "20250319230024"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "这种渲染管线适用于较简单的游戏和应用，具有适中的性能和视觉效果。它不支持一些高级渲染特性，但适用于广泛的平台和设备"
												}
											]
										}
									]
								},
								{
									"ID": "20250319230032-wmave23",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319230032-wmave23",
										"updated": "20250319230032"
									},
									"Children": [
										{
											"ID": "20250319230032-lkb6j3u",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319230032-lkb6j3u",
												"updated": "20250319230050"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "URP 项目： URP 是 Unity 官方提供的一种渲染管线，旨在为轻量级、移动端和跨平台开发提供优化的解决方案。"
												}
											]
										},
										{
											"ID": "20250319230047-tu8u9jt",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319230047-tu8u9jt",
												"updated": "20250319230053"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "URP 在性能和质量之间取得了平衡，适用于移动平台、虚拟现实（VR）和增强现实（AR）应用。\n它提供了一些轻量级的效果和优化，使开发者能够在保持性能的同时实现较好的视觉效果。"
												}
											]
										}
									]
								},
								{
									"ID": "20250319230041-8hw089x",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319230041-8hw089x",
										"updated": "20250319230041"
									},
									"Children": [
										{
											"ID": "20250319230041-9cdqi22",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319230041-9cdqi22",
												"updated": "20250319230057"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "HDRP 项目： HDRP 是 Unity 官方提供的高级渲染管线，专注于提供逼真的图形质量和高度可定制的渲染效果。"
												}
											]
										},
										{
											"ID": "20250319230100-noepruq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319230100-noepruq",
												"updated": "20250319230112"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "HDRP 支持高动态范围（HDR）渲染、物理真实的材质和光照模型，以及其他高级特效。\nHDRP 适用于需要高质量视觉效果的游戏项目，例如逼真的游戏、电影制作等。\n但由于其高级特性，可能会对性能产生较大的负担，因此更适合较强的硬件平台。"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20250319230120-e5wqkjh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250319230120-e5wqkjh",
								"updated": "20250319230121"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主要区别： "
								}
							]
						},
						{
							"ID": "20250319230123-hgxju4x",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20250319230123-hgxju4x",
								"updated": "20250319230151"
							},
							"Children": [
								{
									"ID": "20250319230124-uit58pz",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319230124-uit58pz",
										"updated": "20250319230124"
									},
									"Children": [
										{
											"ID": "20250319230124-on9eo9p",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319230124-on9eo9p",
												"updated": "20250319230129"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "渲染质量和性能：普通项目适用于简单项目，URP 在性能和质量之间取得平衡，HDRP 专注于高质量渲染效果"
												}
											]
										}
									]
								},
								{
									"ID": "20250319230132-rqdrmed",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319230132-rqdrmed",
										"updated": "20250319230132"
									},
									"Children": [
										{
											"ID": "20250319230132-h9ztaf5",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319230132-h9ztaf5",
												"updated": "20250319230143"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "平台适用性：URP 适用于移动端、VR 和 AR 应用，HDRP 适用于较强硬件平台和需要高质量视觉效果的项目。"
												}
											]
										}
									]
								},
								{
									"ID": "20250319230145-olbcvuv",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20250319230145-olbcvuv",
										"updated": "20250319230151"
									},
									"Children": [
										{
											"ID": "20250319230145-46ezssd",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20250319230145-46ezssd",
												"updated": "20250319230151"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "特效和定制性：HDRP 提供了更多的高级渲染特效和自定义选项，允许开发者实现逼真的渲染效果。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	]
}