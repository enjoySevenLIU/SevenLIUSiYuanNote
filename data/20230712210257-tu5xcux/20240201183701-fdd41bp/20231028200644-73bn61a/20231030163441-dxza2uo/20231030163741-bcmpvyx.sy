{
	"ID": "20231030163741-bcmpvyx",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20231030163741-bcmpvyx",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231030163741-bcmpvyx\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231030165128-y7uah72\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231030164614-74ocich\u0026quot;,\u0026quot;scrollTop\u0026quot;:1000,\u0026quot;focusId\u0026quot;:\u0026quot;20231030165128-y7uah72\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;",
		"title": "CS5L7-1——线程和线程池",
		"type": "doc",
		"updated": "20231030212505"
	},
	"Children": [
		{
			"ID": "20231030165128-y7uah72",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231030165128-y7uah72",
				"updated": "20231030165133"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20231030165133-x5q70jw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231030165133-x5q70jw",
				"style": "line-height: 22px;",
				"updated": "20231030172425"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ThreadPool                            //线程池类（静态类）\nThreadPool.GetAvailableThreads()      //获取可用的工作线程数和I/O线程数（应用程序内可开的最大线程数量）\nThreadPool.GetMaxThreads()            //获取线程池中工作线程的最大数目和I/O线程的最大数目（该应用程序最多可用的线程池的线程数量）\nThreadPool.SetMaxThreads()            //设置线程池中可以同时处于活动状态的工作线程的最大数目和I/O线程的最大数目\nThreadPool.GetMinThreads()            //获取线程池中工作线程的最小数目和I/O线程的最小数目（该应用程序线程池内默认存在的线程数量）\nThreadPool.SetMinThreads()            //设置工作线程的最小数目和I/O线程的最小数目\nThreadPool.QueueUserWorkItem()        //将方法排入队列以便执行，当线程池中线程变得可用时执行\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231030163741-i0v3614",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231030163741-i0v3614",
				"updated": "20231030163820"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "回顾知识点——线程"
				}
			]
		},
		{
			"ID": "20231030163857-3rc3j6l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030163857-3rc3j6l",
				"updated": "20231030163952"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于Unity的多线程，具体看这里 ——\u003e "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230712214648-lceyid0",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "Unity是否支持多线程"
				}
			]
		},
		{
			"ID": "20231030163822-zvzlfqw",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231030163822-zvzlfqw",
				"updated": "20231030164240"
			},
			"Children": [
				{
					"ID": "20231030163856-yjiza89",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231030163856-yjiza89",
						"updated": "20231030163856"
					},
					"Children": [
						{
							"ID": "20231030163856-w9wl8mv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030163856-w9wl8mv",
								"updated": "20231030163856"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unity支持多线程"
								}
							]
						}
					]
				},
				{
					"ID": "20231030163856-irrs4ny",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231030163856-irrs4ny",
						"updated": "20231030164013"
					},
					"Children": [
						{
							"ID": "20231030163856-qhdw4fd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030163856-qhdw4fd",
								"updated": "20231030164013"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "Unity中开启的多线程不能使用主线程中的对象"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
								}
							]
						}
					]
				},
				{
					"ID": "20231030163856-2uw2fu4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20231030163856-2uw2fu4",
						"updated": "20231030164240"
					},
					"Children": [
						{
							"ID": "20231030163856-slyqwrx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030163856-slyqwrx",
								"updated": "20231030164240"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "Unity中开启多线程后一定记住关闭"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "（否则会与编辑器共生，直到关闭编辑器）"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231030163838-78t495a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231030163838-78t495a",
				"style": "line-height: 22px;",
				"updated": "20231030164546"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Thread t;\n\nvoid Start()\n{\n    t = new Thread(() =\u003e\n    {\n        while (true)\n        {\n            print(\"123\");\n            Thread.Sleep(1000);\n            //print(this.transform.position);    该操作Unity并不允许！\n        }\n    });\n    t.Start();\n    print(\"主线程执行\");\n}\n\nprivate void OnDestroy()\n{\n    t.Abort();        //目的是在运行结束后停止多线程，否则多线程会与编辑器共生\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231030164553-sfe3lbr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231030164553-sfe3lbr",
				"name": "ThreadPool",
				"updated": "20231030164558"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程池"
				}
			]
		},
		{
			"ID": "20231030164614-ygni49x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030164614-ygni49x",
				"updated": "20231030165027"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程池相当于就是一个专门装线程的缓存池（Unity小框架套课中有对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230822232532-vhstk72",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "缓存池"
				},
				{
					"Type": "NodeText",
					"Data": "的详细讲解）\n"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);"
					},
					"TextMarkType": "text",
					"TextMarkTextContent": "优点：节省开销，减少线程的创建，进而有效减少GC触发"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);\"}"
				},
				{
					"Type": "NodeText"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "text",
					"TextMarkTextContent": "缺点：不能控制线程池中线程的执行顺序，也不能获取线程池内线程取消/异常/完成的通知"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				}
			]
		},
		{
			"ID": "20231030164614-knnkp1h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030164614-knnkp1h",
				"updated": "20231030164644"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "命名空间："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "System.Threading"
				},
				{
					"Type": "NodeText",
					"Data": "​\n类名："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ThreadPool"
				},
				{
					"Type": "NodeText",
					"Data": "​（线程池）"
				}
			]
		},
		{
			"ID": "20231030164614-i1miwcd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030164614-i1miwcd",
				"updated": "20231030165003"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在多线程的应用程序开发中，频繁的创建删除线程会带来性能消耗，产生内存垃圾\n为了避免这种开销C#推出了线程池"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ThreadPool"
				},
				{
					"Type": "NodeText",
					"Data": "​类"
				}
			]
		},
		{
			"ID": "20231030164614-jlo650n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030164614-jlo650n",
				"updated": "20231030164649"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ThreadPool"
				},
				{
					"Type": "NodeText",
					"Data": "​中有若干数量的线程，如果有任务需要处理时，会从线程池中获取一个空闲的线程来执行任务\n任务执行完毕后线程不会销毁，而是被线程池回收以供后续任务使用\n当线程池中所有的线程都在忙碌时，又有新任务要处理时，线程池才会新建一个线程来处理该任务，\n如果线程数量达到设置的最大值，任务会排队，等待其他任务释放线程后再执行\n线程池能减少线程的创建，节省开销，可以减少GC垃圾回收的触发"
				}
			]
		},
		{
			"ID": "20231030164614-gnac0n2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030164614-gnac0n2",
				"updated": "20231030164700"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ThreadPool是一个静态类，里面提供了很多静态成员，其中相对重要的方法有"
				}
			]
		},
		{
			"ID": "20231030164614-74ocich",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231030164614-74ocich",
				"updated": "20231030212505"
			},
			"Children": [
				{
					"ID": "20231030164812-3cswvhl",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231030164812-3cswvhl",
						"name": "ThreadPool.GetAvailableThreads()",
						"updated": "20231030170555"
					},
					"Children": [
						{
							"ID": "20231030164812-jil8izf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030164812-jil8izf",
								"updated": "20231030170555"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取可用的工作线程数和I/O线程数（应用程序内可开的最大线程数量）"
								}
							]
						},
						{
							"ID": "20231030165045-zq7wx7b",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231030165045-zq7wx7b",
								"style": "line-height: 22px;",
								"updated": "20231030165655"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "int workerThreadsNum;\nint completionPortThreads;\nThreadPool.GetAvailableThreads(out workerThreadsNum, out completionPortThreads);\nprint(workerThreadsNum);\nprint(completionPortThreads);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231030164813-wdhev8n",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231030164813-wdhev8n",
						"name": "ThreadPool.GetMaxThreads()",
						"updated": "20231030170602"
					},
					"Children": [
						{
							"ID": "20231030164813-yncm5ru",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030164813-yncm5ru",
								"updated": "20231030170602"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取线程池中工作线程的最大数目和I/O线程的最大数目（该应用程序最多可用的线程池的线程数量）"
								}
							]
						},
						{
							"ID": "20231030165337-5h2az44",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231030165337-5h2az44",
								"style": "line-height: 22px;",
								"updated": "20231030165901"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "ThreadPool.GetMaxThreads(out workerThreadsNum, out completionPortThreads);\nprint(workerThreadsNum);\nprint(completionPortThreads);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231030164820-41nm8br",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20231030164820-41nm8br",
						"name": "ThreadPool.SetMaxThreads()",
						"updated": "20231030171219"
					},
					"Children": [
						{
							"ID": "20231030164820-a5q3glw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030164820-a5q3glw",
								"updated": "20231030171219"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设置线程池中可以同时处于活动状态的工作线程的最大数目和I/O线程的最大数目\n大于设置的次数的添加线程请求将保持排队状态，直到线程池线程变为可用，更改成功返回true，失败返回false"
								}
							]
						},
						{
							"ID": "20231030165345-fp4f14m",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231030165345-fp4f14m",
								"style": "line-height: 22px;",
								"updated": "20231030170213"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "if (ThreadPool.SetMaxThreads(20, 20))\n{\n    print(\"更改成功！\");\n    ThreadPool.GetMaxThreads(out workerThreadsNum, out completionPortThreads);\n    print(workerThreadsNum);\n    print(completionPortThreads);\n}\nelse\n{\n    print(\"更改失败！\");\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231030164829-76dtz3b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20231030164829-76dtz3b",
						"name": "ThreadPool.GetMinThreads()",
						"updated": "20231030171426"
					},
					"Children": [
						{
							"ID": "20231030164829-ruindkg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030164829-ruindkg",
								"updated": "20231030171426"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取线程池中工作线程的最小数目和I/O线程的最小数目（该应用程序线程池内默认存在的线程数量）"
								}
							]
						},
						{
							"ID": "20231030165347-i0k29kj",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231030165347-i0k29kj",
								"style": "line-height: 22px;",
								"updated": "20231030170757"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "ThreadPool.GetMinThreads(out workerThreadsNum, out completionPortThreads);\nprint(workerThreadsNum);\nprint(completionPortThreads);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231030164902-3jc6tkf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20231030164902-3jc6tkf",
						"name": "ThreadPool.SetMinThreads()",
						"updated": "20231030171448"
					},
					"Children": [
						{
							"ID": "20231030164902-rtgu6qb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030164902-rtgu6qb",
								"updated": "20231030171448"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设置 工作线程的最小数目和I/O线程的最小数目\n更改成功返回true，失败返回false"
								}
							]
						},
						{
							"ID": "20231030165349-132lmlu",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231030165349-132lmlu",
								"style": "line-height: 22px;",
								"updated": "20231030170856"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "if (ThreadPool.SetMinThreads(4, 4))\n{\n    print(\"更改成功！\");\n    ThreadPool.GetMinThreads(out workerThreadsNum, out completionPortThreads);\n    print(workerThreadsNum);\n    print(completionPortThreads);\n}\nelse\n{\n    print(\"更改失败！\");\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231030164912-ctn9sjo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20231030164912-ctn9sjo",
						"name": "ThreadPool.QueueUserWorkItem()",
						"updated": "20231030212505"
					},
					"Children": [
						{
							"ID": "20231030164912-trbdor7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030164912-trbdor7",
								"updated": "20231030212457"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将方法排入队列以便执行，当线程池中线程变得可用时执行\n第一个参数就是多线程要执行的方法，方法需要一个object类型参数\n"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "第二个参数就是第一个参数的函数的传入的参数"
								}
							]
						},
						{
							"ID": "20231030165351-97tt3en",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231030165351-97tt3en",
								"style": "line-height: 22px;",
								"updated": "20231030171718"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "ThreadPool.QueueUserWorkItem((obj) =\u003e\n{\n    print(obj);\n    print(\"开启了一个线程\");\n}, \"123456789\");\nprint(\"主线程执行\");\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231030171951-dit1hsc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030171951-dit1hsc",
								"updated": "20231030172011"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "要注意！我们不能控制线程执行的顺序！"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
								}
							]
						},
						{
							"ID": "20231030171807-4wsfapz",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231030171807-4wsfapz",
								"style": "line-height: 22px;",
								"updated": "20231030171940"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "for (int i = 0; i \u003c 10; i++)\n{\n    ThreadPool.QueueUserWorkItem((obj) =\u003e\n    {\n        print(\"第\" + obj + \"个任务\");\n    }, i);\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231030212505-c33amfd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030212505-c33amfd"
							}
						}
					]
				}
			]
		}
	]
}