{
	"ID": "20231030154553-pxxam0h",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20231030154553-pxxam0h",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231030154553-pxxam0h\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231030162917-sssi3ip\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231030160404-8uinx5t\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20231030154647-hnzivq6\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;",
		"title": "CS5L6——CSharp 1~4 功能和语法",
		"type": "doc",
		"updated": "20240715100602"
	},
	"Children": [
		{
			"ID": "20231030162917-sssi3ip",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030162917-sssi3ip",
				"updated": "20231030162950"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C# 1~4版本中的功能和语法，大多数我们已经在C#四部曲中学习完毕\n命名和可选参数可以帮助我们少写一些重载函数\n动态类型可以让我们在某些情况下节约代码量\n但是由于要使用.Net 4.x（.NET Framework），并且IL2CPP不支持，所以不建议使用它，但是如果有特殊需求不得不用，那我们只有退而求其次\n"
				}
			]
		},
		{
			"ID": "20231030162955-2jb2wje",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231030162955-2jb2wje",
				"updated": "20240715100602"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20231030163000-iw04ecw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231030163000-iw04ecw",
				"style": "line-height: 22px;",
				"updated": "20231030163059"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "dynamic    //动态类型，编译时不会检查该对象的类型，与该对象相关的操作都将一起打包，只在运行时进行评估\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231030154553-165g1ol",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231030154553-165g1ol",
				"updated": "20240715100602"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最低支持的C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBackslashContent",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "版本"
				}
			]
		},
		{
			"ID": "20231030154633-p6vfbuh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030154633-p6vfbuh",
				"updated": "20231030154644"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只要是Unity 5.5及以上的版本，就支持C# 4版本"
				}
			]
		},
		{
			"ID": "20231030154647-hnzivq6",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20231030154647-hnzivq6",
				"updated": "20240715100602"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBackslashContent",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 1"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBackslashContent",
							"Data": "~"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "4的功能和语法"
				}
			]
		},
		{
			"ID": "20231030154716-lgdhza6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030154716-lgdhza6",
				"updated": "20231030154739"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：\n在这里不会提及所有的内容\n主要会提及Unity开发中会用到的一些功能和特性\n对于一些不适合在Unity中使用的内容会省略"
				}
			]
		},
		{
			"ID": "20231030154716-yzukfbv",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20231030154716-yzukfbv",
				"updated": "20240715100553"
			},
			"Children": [
				{
					"ID": "20240715100536-o2jbtt9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240715100536-o2jbtt9",
						"updated": "20240715100536"
					},
					"Children": [
						{
							"ID": "20240715100536-5i57eze",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240715100536-5i57eze",
								"updated": "20240715100536"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 1 —— 委托、事件（C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "进阶）\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240715100537-93mf2dy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240715100537-93mf2dy"
					},
					"Children": [
						{
							"ID": "20240715100537-60opwbt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240715100537-60opwbt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 2 —— 泛型、匿名方法、迭代器、可空类型（C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "进阶）\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240715100538-5ijk77n",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240715100538-5ijk77n",
						"updated": "20240715100553"
					},
					"Children": [
						{
							"ID": "20240715100538-rih7bi0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240715100538-rih7bi0",
								"updated": "20240715100553"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 3 —— 隐式类型、对象集合初始化、Lambda表达式、匿名类型（C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "进阶），\n自动实现属性、拓展方法、分部类（C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "核心），Linq相关的表达式树（以后专门讲）"
								}
							]
						}
					]
				},
				{
					"ID": "20240715100539-d5y0ty3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240715100539-d5y0ty3"
					},
					"Children": [
						{
							"ID": "20240715100539-xdhnl5k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240715100539-xdhnl5k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 4 —— 泛型的协变和逆变（C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "进阶）、命名和可选参数、动态类型"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231030154907-43dgjm1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231030154907-43dgjm1",
				"updated": "20240715100602"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "命名和可选参数"
				}
			]
		},
		{
			"ID": "20231030154910-8wxgi4m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030154910-8wxgi4m",
				"updated": "20231030154918"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有了命名参数，我们将不用匹配参数在所调用方法中的顺序\n每个参数可以按照参数名字进行指定"
				}
			]
		},
		{
			"ID": "20231030154921-effrxdd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231030154921-effrxdd",
				"style": "line-height: 22px;",
				"updated": "20231030155750"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public void Test(int i, float f, bool b) { }\n\nprivate void Start\n{\n    Test(1, 1.2f, ture);                //在以前，我们需要按照参数声明顺序分别填入各个参数\n    Test(f: 3.3f, i: 5, b: false);      //而通过指定参数的名字，我们可以不用按照顺序去填入参数\n    Test(b: false, f: 3.4f, i: 3);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231030154953-kqrv466",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030154953-kqrv466",
				"updated": "20231030155538"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "命名参数可以配合可选参数使用，让我们做到跳过其中的默认参数直接赋值后面的默认参数"
				}
			]
		},
		{
			"ID": "20231030155535-4kl1809",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231030155535-4kl1809",
				"style": "line-height: 22px;",
				"updated": "20231030155922"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public void Test2(int i , bool b = true, string s = \"123\") { }\n\nvoid Start()\n{\n    Test2(1, true, \"234\");             //在以前，我们如果想不修改前一个可选参数，而只修改后面的可选参数，我们不得不将前面参数的默认值填上去\n    Test2(1, s: \"234\");                //而通过指定参数的名字，我们可以做到跳过其中的默认参数直接赋值后面的默认参数\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231030155801-3pz8qzy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231030155801-3pz8qzy",
				"name": "dynamic",
				"updated": "20240715100602"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "动态类型"
				}
			]
		},
		{
			"ID": "20231030160025-kigprj9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030160025-kigprj9",
				"updated": "20231030160450"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "关键词："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dynamic"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240715100602-qtpha9f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715100602-qtpha9f",
				"updated": "20240715100602"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "作用："
				},
				{
					"Type": "NodeText",
					"Data": "通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dynamic"
				},
				{
					"Type": "NodeText",
					"Data": "​类型标识变量的使用和对其成员的引用绕过编译时类型检查，改为在运行时解析这些操作。\n在大多数情况下，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dynamic"
				},
				{
					"Type": "NodeText",
					"Data": "​类型和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object"
				},
				{
					"Type": "NodeText",
					"Data": "​类型行为类似，任何非"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Null"
				},
				{
					"Type": "NodeText",
					"Data": "​表达式都可以转换为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dynamic"
				},
				{
					"Type": "NodeText",
					"Data": "​类型。\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dynamic"
				},
				{
					"Type": "NodeText",
					"Data": "​类型和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object"
				},
				{
					"Type": "NodeText",
					"Data": "​类型不同之处在于，编译器不会对包含类型 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dynamic"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的表达式的操作进行解析或类型检查\n编译器将有关该操作信息打包在一起，之后这些信息会用于在运行时评估操作。\n在此过程中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dynamic"
				},
				{
					"Type": "NodeText",
					"Data": "​ 类型的变量会编译为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object"
				},
				{
					"Type": "NodeText",
					"Data": "​ 类型的变量。\n因此，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dynamic"
				},
				{
					"Type": "NodeText",
					"Data": "​ 类型只在编译时存在，在运行时则不存在。"
				}
			]
		},
		{
			"ID": "20231030160112-f05lu32",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030160112-f05lu32",
				"updated": "20231030160116"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "注意："
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				}
			]
		},
		{
			"ID": "20231030160025-s9wabe6",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231030160025-s9wabe6",
				"updated": "20231030160716"
			},
			"Children": [
				{
					"ID": "20231030160112-q8gwqyj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231030160112-q8gwqyj",
						"updated": "20231030160716"
					},
					"Children": [
						{
							"ID": "20231030160112-vpbn0bj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030160112-vpbn0bj",
								"updated": "20231030160716"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "dynamic"
								},
								{
									"Type": "NodeText",
									"Data": "​功能，需要将"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
									},
									"TextMarkType": "text",
									"TextMarkTextContent": "Unity的.Net API兼容级别切换为.Net 4.x"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
								},
								{
									"Type": "NodeText",
									"Data": "（Unity2021版为.NET Framework）"
								}
							]
						}
					]
				},
				{
					"ID": "20231030160112-3ve3jf4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231030160112-3ve3jf4",
						"updated": "20231030160458"
					},
					"Children": [
						{
							"ID": "20231030160112-a95knge",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030160112-a95knge",
								"updated": "20231030160458"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "text",
									"TextMarkTextContent": "IL2CPP 不支持 C# "
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "text code",
									"TextMarkTextContent": "dynamic"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "text",
									"TextMarkTextContent": " 关键字。它需要 JIT 编译，而 IL2CPP 无法实现"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								}
							]
						}
					]
				},
				{
					"ID": "20231030160112-vgcisjd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20231030160112-vgcisjd",
						"updated": "20231030160112"
					},
					"Children": [
						{
							"ID": "20231030160112-z5lsiwd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231030160112-z5lsiwd",
								"updated": "20231030160154"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
									},
									"TextMarkType": "text",
									"TextMarkTextContent": "动态类型是无法自动补全方法的，我们在书写时一定要保证方法的拼写正确性"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231030160202-f8weohn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030160202-f8weohn",
				"updated": "20231030160211"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "该功能我们只做了解，不建议大家使用"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				}
			]
		},
		{
			"ID": "20231030155953-m5qg89s",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231030155953-m5qg89s",
				"style": "line-height: 22px;",
				"updated": "20231030162859"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "dynamic dyn = 1;\nobject obj = 2;\n\ndyn += 2;                    //我们可以在编译前对动态类型变量做任意操作，IDE不会帮我们检查，但该对象真正对应的类型必须真的存在该操作，否则运行会报错\nprint(obj.GetType());        //要注意，IDE可以帮助我们补全.GetType()并标记，因为编译时会类型检查，且该类存在该方法\nprint(dyn.GetType());        //而在这里输入的.GetType()IDE不会自动补全，也不会将其标黄，因为IDE不会在编译时检查类型，你只能自己确保该类型真的有该方法\nprint(dyn);                  //我们也可以将动态类型变量作为某个函数的参数，而IDE也不会帮我们检查该对象是否真的可以作为参数\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231030161744-wzpyswi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231030161744-wzpyswi",
				"updated": "20231030161832"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "好处：\n动态类型可以节约代码量，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "当不确定对象类型，但是确定对象成员时，可以使用动态类型"
				},
				{
					"Type": "NodeText"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "通过反射处理某些功能时，也可以考虑使用动态类型来替换它"
				}
			]
		},
		{
			"ID": "20231030160404-8uinx5t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231030160404-8uinx5t",
				"style": "line-height: 22px;",
				"updated": "20231030162350"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Test1\n{\n    public void TestFunc() { }\n}\n\npublic class Test2\n{\n    public void TestFunc() { }\n}\n\npublic class Lesson3 : MonoBehaviour\n{\n    void Start()\n    {\n        object t = new Test1();    //在以前我们通过object获取到一个对象，或者反射获取到一个不确定类型的对象\n        //t.TestFunc();            //我们是不能直接使用对象原本类里的内部的方法\n        ((Test1)t).TestFunc();     //我们需要通过类型转换或者反射等手段转换成原类型再使用其中的方法\n\n        dynamic tmp = t;           //而当不确定对象类型，但是确定对象成员时，就可以使用动态类型，不需要转换类型\n        tmp.TestFunc();            //动态类型对象编译时不会检查类型，而会将对象与该对象相关的操作进行打包，运行时才会评估操作\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}