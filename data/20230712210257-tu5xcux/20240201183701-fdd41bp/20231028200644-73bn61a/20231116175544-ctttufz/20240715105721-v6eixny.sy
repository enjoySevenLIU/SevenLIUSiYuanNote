{
	"ID": "20240715105721-v6eixny",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240715105721-v6eixny",
		"title": "CS5L13-2——求两个数据集合的交集",
		"type": "doc",
		"updated": "20240716115333"
	},
	"Children": [
		{
			"ID": "20240716115230-r3fbwa8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240716115230-r3fbwa8",
				"updated": "20240716115333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240716115235-9j3sk2c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240716115235-9j3sk2c",
				"style": "line-height: 22px;",
				"updated": "20240716115333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "IEnumerable\u003c\u003e.Intersect()\t\t//传入另一个集合，返回该集合和传入的集合的交集\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240715105807-d90dks8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240715105807-d90dks8",
				"updated": "20240715105909"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "交集"
				}
			]
		},
		{
			"ID": "20240715105807-ubswzw7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715105807-ubswzw7",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设有两个数组，求两个数组的交集"
				}
			]
		},
		{
			"ID": "20240715105807-fnwcqmz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240715105807-fnwcqmz",
				"style": "line-height: 22px;",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//假设有两个数组，求两个数组的交集\nint[] arr1 = new int[] { 1, 2, 3, 4, 5, 6 };\nint[] arr2 = new int[] { 4, 5, 6, 7, 8, 9 };\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240715105807-xeixwrs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715105807-xeixwrs",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不使用LINQ"
				}
			]
		},
		{
			"ID": "20240715105807-q571o4s",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240715105807-q571o4s",
				"style": "line-height: 22px;",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private static void Normal2(int[] arr1, int[] arr2)\n{\n    Console.WriteLine(\"不使用LINQ\");\n    var result = new List\u003cint\u003e();\n    foreach (var i in arr1)\n        if (arr2.Contains(i))\n            result.Add(i);\n    foreach (var i in result)\n        Console.WriteLine(i);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240715105807-z2eu3io",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715105807-z2eu3io",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出结果："
				}
			]
		},
		{
			"ID": "20240715105807-ouhnwm2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240715105807-ouhnwm2",
				"style": "line-height: 22px;",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "4\n5\n6\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240715105807-cqdvy8i",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240715105807-cqdvy8i",
				"name": "IEnumerable\u0026lt;\u0026gt;.Intersect()",
				"updated": "20240715105909"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取一个集合和另一个集合交集"
				}
			]
		},
		{
			"ID": "20240715105807-017hrhf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715105807-017hrhf",
				"updated": "20240715105854"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个方法只有链式表达式有，返回"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "arr1"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "arr2"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的交集"
				}
			]
		},
		{
			"ID": "20240715105807-fdy93hw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240715105807-fdy93hw",
				"style": "line-height: 22px;",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "var result = arr1.Intersect(arr2);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240715105807-hu7zwv7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240715105807-hu7zwv7",
				"updated": "20240715105909"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "LINQ实例"
				}
			]
		},
		{
			"ID": "20240715105807-rqcyrl1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715105807-rqcyrl1",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用LINQ链式表达式"
				}
			]
		},
		{
			"ID": "20240715105807-5m4r35y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240715105807-5m4r35y",
				"style": "line-height: 22px;",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private static void ChainedExpressionLINQ2(int[] arr1, int[] arr2)\n{\n    Console.WriteLine(\"链式表达式LINQ\");\n    var result = arr1.Intersect(arr2);\n    foreach (var i in result)\n        Console.WriteLine(i);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240715105807-xymbo7o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715105807-xymbo7o",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出结果："
				}
			]
		},
		{
			"ID": "20240715105807-gq9ydlr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240715105807-gq9ydlr",
				"style": "line-height: 22px;",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "4\n5\n6\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240715105807-cvzpga3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715105807-cvzpga3",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你愿意在IDE内将鼠标指向方法，你可以看到，这个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Intersect()"
				},
				{
					"Type": "NodeText",
					"Data": "​其实就是一种拓展方法，求两个可迭代类型集合"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IEnumerable\u0026lt;\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​的交集"
				}
			]
		},
		{
			"ID": "20240715105807-grx1kz6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715105807-grx1kz6",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 476px;",
						"style": "width: 466px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20231117115512-s6wth8p.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 466px;\" parent-style=\"width: 476px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240715105807-0j4uenn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715105807-0j4uenn",
				"updated": "20240715105909"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要注意的是，不是所有的链式表达式的方法都可以在查询表达式里找到对应关键字\n因为查询表达式的语法基本就是SQL语句那些关键字，\n例如 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "orderby"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "select"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "join"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "groupby"
				},
				{
					"Type": "NodeText",
					"Data": "​ 等，这些关键字以外的内容可能就没那么好用了"
				}
			]
		},
		{
			"ID": "20240715105807-9u62ced",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715105807-9u62ced",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是也这不代表不能用查询表达式"
				}
			]
		},
		{
			"ID": "20240715105807-rq2svvl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240715105807-rq2svvl",
				"style": "line-height: 22px;",
				"updated": "20240715105808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private static void QueryExpressionLINQ2(int[] arr1, int[] arr2)\n{\n    Console.WriteLine(\"查询表达式LINQ\");\n    var result = from n in arr1\n                 where arr2.Contains(n)        //但有一说一，你说这玩意不就和一般方法的原理一样吗\n                 select n;\n    foreach (var i in result) \n        Console.WriteLine(i);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240715105815-0yrfe6k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715105815-0yrfe6k",
				"updated": "20240715105815"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出结果："
				}
			]
		},
		{
			"ID": "20240715105815-9rbtma6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240715105815-9rbtma6",
				"style": "line-height: 22px;",
				"updated": "20240715105815"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "4\n5\n6\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240715105814-lxrb1d3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240715105814-lxrb1d3"
			}
		}
	]
}