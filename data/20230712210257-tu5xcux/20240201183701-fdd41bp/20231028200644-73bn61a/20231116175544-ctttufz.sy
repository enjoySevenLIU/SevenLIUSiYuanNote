{
	"ID": "20231116175544-ctttufz",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20231116175544-ctttufz",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231116175544-ctttufz\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231116175544-5g3j68w\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231117150911-kfcoyrm\u0026quot;,\u0026quot;scrollTop\u0026quot;:5770.66650390625\u0026#125;",
		"title": "CS5L13——LINQ入门实例",
		"type": "doc",
		"updated": "20240512154613"
	},
	"Children": [
		{
			"ID": "20231116175544-5g3j68w",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20231116175544-5g3j68w",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "LINQ"
				}
			]
		},
		{
			"ID": "20231117105934-3gljx6w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117105934-3gljx6w",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "语言集成查询（Language-Integrated Query），也就是LINQ"
				}
			]
		},
		{
			"ID": "20231117105512-ko8a83r",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20231117105512-ko8a83r",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"ID": "20231117105509-01lp2nn",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20231117105509-01lp2nn",
						"updated": "20240331124329"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "语言集成查询 (LINQ) 是一系列直接将查询功能集成到 C# 语言的技术统称。\n数据查询历来都表示为简单的字符串，没有编译时类型检查或 IntelliSense 支持。\n此外，需要针对每种类型的数据源了解不同的查询语言：SQL 数据库、XML 文档、各种 Web 服务等。\n借助 LINQ，查询成为了最高级的语言构造，就像类、方法和事件一样。"
						}
					]
				},
				{
					"ID": "20231117105506-v61jd7g",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20231117105506-v61jd7g",
						"updated": "20240331124342"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "对于编写查询的开发者来说，LINQ 最明显的“语言集成”部分就是查询表达式。\n查询表达式采用声明性"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "em",
							"TextMarkTextContent": "查询语法"
						},
						{
							"Type": "NodeText",
							"Data": "编写而成。\n使用查询语法，可以用最少的代码对数据源执行筛选、排序和分组操作。\n可使用相同的基本查询表达式模式来查询和转换 SQL 数据库、ADO .NET 数据集、XML 文档和流以及 .NET 集合中的数据。"
						}
					]
				},
				{
					"ID": "20231117105520-5vkf05r",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20231117105520-5vkf05r",
						"updated": "20231117105527"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "——"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "a",
							"TextMarkAHref": "https://learn.microsoft.com/zh-cn/dotnet/csharp/linq/",
							"TextMarkTextContent": "C# 中的语言集成查询 (LINQ) | Microsoft Learn"
						}
					]
				},
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				}
			]
		},
		{
			"ID": "20231117110944-n3z3rwg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20231117110944-n3z3rwg",
				"updated": "20240512154613"
			},
			"Children": [
				{
					"ID": "20231117110944-jozblxc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "LQ=="
					},
					"Properties": {
						"id": "20231117110944-jozblxc",
						"updated": "20240512154613"
					},
					"Children": [
						{
							"ID": "20231117105633-xufoqw8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231117105633-xufoqw8",
								"updated": "20231117135816"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LINQ的常用于以下内容"
								}
							]
						},
						{
							"ID": "20231117105654-0j7nvux",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20231117105654-0j7nvux",
								"updated": "20240512154613"
							},
							"Children": [
								{
									"ID": "20231117105656-wjsillu",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20231117105656-wjsillu",
										"updated": "20231117135812"
									},
									"Children": [
										{
											"ID": "20231117105656-u3809sp",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20231117105656-u3809sp",
												"updated": "20231117135812"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": ".NET 原生集合（"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "List"
												},
												{
													"Type": "NodeText",
													"Data": "​，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Array"
												},
												{
													"Type": "NodeText",
													"Data": "​，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Dictionary"
												},
												{
													"Type": "NodeText",
													"Data": "​，etc.）"
												}
											]
										}
									]
								},
								{
									"ID": "20231117105726-94jedey",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20231117105726-94jedey"
									},
									"Children": [
										{
											"ID": "20231117105726-zcvm1eu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20231117105726-zcvm1eu",
												"updated": "20231117105756"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "SQL 数据库 （尤其是搭配ORM）"
												}
											]
										}
									]
								},
								{
									"ID": "20231117105749-nqtj5qc",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20231117105749-nqtj5qc"
									},
									"Children": [
										{
											"ID": "20231117105749-kbyex3u",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20231117105749-kbyex3u",
												"updated": "20231117105754"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "XML 文档"
												}
											]
										}
									]
								},
								{
									"ID": "20231117105800-t0p5xg1",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20231117105800-t0p5xg1",
										"updated": "20240512154613"
									},
									"Children": [
										{
											"ID": "20231117105800-6u7s06x",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20231117105800-6u7s06x",
												"updated": "20240512154613"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "JSON 文档（需要"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Newtonsoft.Json"
												},
												{
													"Type": "NodeText",
													"Data": "​）"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20231117110953-by08o9e",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231117110953-by08o9e",
						"updated": "20231117135748"
					},
					"Children": [
						{
							"ID": "20231117110958-dd53d4q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231117110958-dd53d4q",
								"updated": "20231117135748"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LINQ的常见功能"
								}
							]
						},
						{
							"ID": "20231117105835-mr6jr98",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20231117105835-mr6jr98",
								"updated": "20231117105837"
							},
							"Children": [
								{
									"ID": "20231117105837-go2gz6q",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20231117105837-go2gz6q",
										"updated": "20231117105837"
									},
									"Children": [
										{
											"ID": "20231117105837-4lfza13",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20231117105837-4lfza13",
												"updated": "20231117105844"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "排序、筛选、选择"
												}
											]
										}
									]
								},
								{
									"ID": "20231117105845-oomq0up",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20231117105845-oomq0up"
									},
									"Children": [
										{
											"ID": "20231117105845-2s7gpsg",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20231117105845-2s7gpsg",
												"updated": "20231117105854"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "分组、聚合、合并"
												}
											]
										}
									]
								},
								{
									"ID": "20231117105855-ztnnsv4",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20231117105855-ztnnsv4"
									},
									"Children": [
										{
											"ID": "20231117105855-grs5yu5",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20231117105855-grs5yu5",
												"updated": "20231117105906"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "最大值、最小值、求和、求平均"
												}
											]
										}
									]
								},
								{
									"ID": "20231117105910-zzbcmhi",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20231117105910-zzbcmhi"
									},
									"Children": [
										{
											"ID": "20231117105910-3yn1b6p",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20231117105910-3yn1b6p",
												"updated": "20231117105913"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "......"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20231117111003-4h9vs11",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231117111003-4h9vs11",
						"updated": "20231117135735"
					},
					"Children": [
						{
							"ID": "20231117111009-ksa7f4q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231117111009-ksa7f4q",
								"updated": "20231117141242"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LINQ语法有两种形式，它们各有各自的适用场景"
								}
							]
						},
						{
							"ID": "20231117105946-42pnubc",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20231117105946-42pnubc",
								"updated": "20231117135735"
							},
							"Children": [
								{
									"ID": "20231117105947-x1fi0wq",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20231117105947-x1fi0wq",
										"updated": "20240331125304"
									},
									"Children": [
										{
											"ID": "20231117105947-pw8o6vs",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20231117105947-pw8o6vs",
												"updated": "20231117110049"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "查询表达式 query expression（类似于SQL语句）"
												}
											]
										},
										{
											"ID": "20231117135623-jd6c7ob",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20231117135623-jd6c7ob",
												"style": "line-height: 22px;",
												"updated": "20240331125304"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YyM="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "//就像这样\nvar result = from x in list \n             /*..LINQ操作..*/\n             select x\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								},
								{
									"ID": "20231117105952-a8dppz5",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20231117105952-a8dppz5",
										"updated": "20231117135735"
									},
									"Children": [
										{
											"ID": "20231117105952-68ay37f",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20231117105952-68ay37f",
												"updated": "20231117135827"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "链式表达式 chained expression（如同对一个对象连续调用方法那样，其实LINQ的本质就是拓展方法）"
												}
											]
										},
										{
											"ID": "20231117135720-awj6ip0",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20231117135720-awj6ip0",
												"style": "line-height: 22px;",
												"updated": "20231117135735"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YyM="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "//就像这样\nlist.Where(n =\u003e n % 2 == 0 \u0026\u0026 n \u003e= 4).OrderBy(n =\u003e n)\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231117135102-ter2fdh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117135102-ter2fdh",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单来说，接下来所展示的LINQ语法，很大程度上可以用来替代一部分通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "for"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "foreach"
				},
				{
					"Type": "NodeText",
					"Data": "​遍历集合来实现的排序查询等操作"
				}
			]
		},
		{
			"ID": "20231117110915-7eylnp1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231117110915-7eylnp1",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "筛选和排序"
				}
			]
		},
		{
			"ID": "20231117111028-grryi35",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117111028-grryi35",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设你有一个列表，你要筛选出里面的所有的偶数，且大于等于4的数据，再对挑选出来的数字进行排序，最后打印出来"
				}
			]
		},
		{
			"ID": "20231117112808-xb8nqn1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117112808-xb8nqn1",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//假设有一个列表\nList\u003cint\u003e list = new List\u003cint\u003e() { 1, 3, 5, 7, 9, 2, 4, 6, 8, 0 };\n//要筛选出里面的所有的偶数，且大于等于4的数据\n//再对挑选出来的数字进行排序，最后打印出来\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117111053-z9zckqz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117111053-z9zckqz",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果不用LINQ，我们需要使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "foreach"
				},
				{
					"Type": "NodeText",
					"Data": "​遍历条件判断，最后再排序"
				}
			]
		},
		{
			"ID": "20231117111100-gek7gjz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117111100-gek7gjz",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private static void Normal(List\u003cint\u003e list)\n{\n    //不使用LINQ的方法\n    List\u003cint\u003e resultList = new List\u003cint\u003e();\n    foreach (int i in list)\n    {\n        if (i % 2 == 0 \u0026\u0026 i \u003e= 4)\n            resultList.Add(i);\n    }\n    resultList.Sort();\n    foreach (int i in resultList)\n        Console.WriteLine(i);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117111138-mjp8b4o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117111138-mjp8b4o",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出结果："
				}
			]
		},
		{
			"ID": "20231117111148-4y3ckdy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117111148-4y3ckdy",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "4\n6\n8\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117111112-09sv3zw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117111112-09sv3zw",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来我们使用LINQ来替代"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "foreach"
				},
				{
					"Type": "NodeText",
					"Data": "​遍历和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".Sort()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法"
				}
			]
		},
		{
			"ID": "20231117135845-dhp4pks",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"alias": "from,in,=\u0026gt;",
				"id": "20231117135845-dhp4pks",
				"name": "select",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从可遍历集合内取出元素、将元素放入到新集合内"
				}
			]
		},
		{
			"ID": "20231117142847-fdin99b",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20231117142847-fdin99b",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"ID": "20231117142817-r20ww81",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20231117142817-r20ww81",
						"updated": "20231117142847"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "a",
							"TextMarkAHref": "https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/from-clause",
							"TextMarkTextContent": "from 子句 - C# 参考 - C# | Microsoft Learn"
						}
					]
				},
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				}
			]
		},
		{
			"ID": "20231117140836-ko0oo96",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117140836-ko0oo96",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意，由于LINQ语句返回的数据类型不容易确定（往往返回各种的是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IEnumerable\u0026lt;\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​），"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "因此，建议使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "var"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "，由IDE来判断类型"
				}
			]
		},
		{
			"ID": "20231117135934-c372ha0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117135934-c372ha0",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//查询表达式语法\nvar result = from 单个元素名 in 需要获取数据的集合(列表,数组等)\n             //在这里对元素进行各种操作\n             select 要放入的单个元素\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117140210-rcnp1ud",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117140210-rcnp1ud",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "from...in..."
				},
				{
					"Type": "NodeText",
					"Data": "​是从某个可遍历集合内（例如列表，数组等）取出元素，接下来我们才可以对取出的元素进行筛选，排序，等等操作\n最后使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "select"
				},
				{
					"Type": "NodeText",
					"Data": "​语句，将经过操作，符合条件的元素放入到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "result"
				},
				{
					"Type": "NodeText",
					"Data": "​内，它们是LINQ查询表达式里几乎使用都会出现的语法"
				}
			]
		},
		{
			"ID": "20231117142629-379ywuc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117142629-379ywuc",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来是链式表达式方法内传入参数经常会用的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20231117142535-twxvoq3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117142535-twxvoq3",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//链式表达式语法\nlist.LINQ拓展方法(x =\u003e 表达式(x))\n//可以等效的视为查询表达式的：\n    //from x in list\n    //要执行的方法 x\n    //select x\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117141253-xxt3sf9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"alias": "Where()",
				"id": "20231117141253-xxt3sf9",
				"name": "where",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "筛选"
				}
			]
		},
		{
			"ID": "20231117142316-3fcsozz",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20231117142316-3fcsozz",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"ID": "20231117142311-i5xbrz6",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20231117142311-i5xbrz6",
						"updated": "20231117142317"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "a",
							"TextMarkAHref": "https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/where-clause",
							"TextMarkTextContent": "where 子句 - C# 参考 - C# | Microsoft Learn"
						}
					]
				},
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				}
			]
		},
		{
			"ID": "20231117141142-vm4pmt7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117141142-vm4pmt7",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//查询表达式语法\nvar result = from x in list       //从list挑选出每一个元素，每一个元素取名x\n             where 条件表达式(x)    //根据条件表达式是否为true，筛选符合条件的x\n             select x             //将挑选出的x全部放入到result内\n\n//链式表达式语法\n//其中，n是从list挑选出的单个元素，根据条件表达式是否为ture，筛选符合条件的x，返回装载满足条件的x的可迭代集合\nvar result = list.Where(x =\u003e 条件表达式(x))  \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117141657-ss41eiw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117141657-ss41eiw",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在查询表达式内在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "where"
				},
				{
					"Type": "NodeText",
					"Data": "​关键字后面写与取出的元素相关的条件表达式，如果为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "true"
				},
				{
					"Type": "NodeText",
					"Data": "​，就将该元素筛选出来\n在链式表达式内参数为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "x =\u0026gt; 条件表达式(x)"
				},
				{
					"Type": "NodeText",
					"Data": "​，返回满足条件的元素的集合"
				}
			]
		},
		{
			"ID": "20231117142039-sq9iold",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231117142039-sq9iold",
				"name": "orderby",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "排序"
				}
			]
		},
		{
			"ID": "20231117142337-jkycvbr",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20231117142337-jkycvbr",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"ID": "20231117142319-apdxojh",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20231117142319-apdxojh",
						"updated": "20231117142338"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "a",
							"TextMarkAHref": "https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/orderby-clause",
							"TextMarkTextContent": "orderby 子句 - C# 参考 - C# | Microsoft Learn"
						}
					]
				},
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				}
			]
		},
		{
			"ID": "20231117142339-vp1pv5s",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117142339-vp1pv5s",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//查询表达式语法\nvar result = from x in list       //从list挑选出每一个元素，每一个元素取名x\n             orderby x            //对x进行排序\n             select x             //将挑选出的x全部放入到result内\n\n//链式表达式语法\n//其中，n是从list挑选出的单个元素，根据条件表达式是否为ture，筛选符合条件的x，返回装载满足条件的x的可迭代集合\nvar result = list.OrderBy(x =\u003e x);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117142956-bosfoug",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117142956-bosfoug",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在查询表达式内在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "orderby"
				},
				{
					"Type": "NodeText",
					"Data": "​关键字要排序的元素，如果在元素后面添加"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "descending"
				},
				{
					"Type": "NodeText",
					"Data": "​，形成"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "orderby x descending"
				},
				{
					"Type": "NodeText",
					"Data": "​，就是降序排序\n在链式表达式内参数为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "x =\u0026gt; 条件表达式(x)"
				},
				{
					"Type": "NodeText",
					"Data": "​，返回排序完毕的元素的集合，如果使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "OrderByDescending()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法，就是降序排序"
				}
			]
		},
		{
			"ID": "20231117142912-hh486di",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231117142912-hh486di",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "LINQ实例"
				}
			]
		},
		{
			"ID": "20231117143326-3bmge0b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117143326-3bmge0b",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "值得一提的是，这里不能用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "List\u0026lt;\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​类型的变量来承接这个结果，因此这里建议用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "var"
				},
				{
					"Type": "NodeText",
					"Data": "​关键字，因为返回的类型是不确定的\n首先，使用查询表达式来写"
				}
			]
		},
		{
			"ID": "20231117111132-6l3h5xf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117111132-6l3h5xf",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "List\u003cint\u003e list = new List\u003cint\u003e() { 1, 3, 5, 7, 9, 2, 4, 6, 8, 0 };\n//你要筛选出里面的所有的偶数，且大于等于4的数据\n//再对挑选出来的数字进行排序，最后打印出来\n//使用LINQ的方法(查询表达式形式)\nvar result = from x in list                    //从list挑选出每一个元素，每一个元素取名x\n             where x % 2 == 0 \u0026\u0026 x \u003e= 4        //挑选出偶数且大于4的数\n             orderby x                         //对所有的n进行排序\n             select x;                         //将挑选出的x全部放入到result内\n//输出结果\nforeach (var x in result)\n{\n    Console.WriteLine(x);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117111952-9mw57gp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117111952-9mw57gp",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出结果："
				}
			]
		},
		{
			"ID": "20231117143355-2u9i32b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117143355-2u9i32b",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "4\n6\n8\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117141932-td8n7dj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117141932-td8n7dj",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "LINQ还可以用链式表达式来写\n它的形式就像是让一个对象执行连续执行多个方法的形式"
				}
			]
		},
		{
			"ID": "20231117112549-fi7v0lb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117112549-fi7v0lb",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "var result = list.Where(n =\u003e n % 2 == 0 \u0026\u0026 n \u003e= 4).OrderBy(n =\u003e n);\nforeach (var x in result)\n{\n    Console.WriteLine(x);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117113522-412nx43",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117113522-412nx43",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出结果同上"
				}
			]
		},
		{
			"ID": "20231117113534-dj241fh",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231117113534-dj241fh",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "交集"
				}
			]
		},
		{
			"ID": "20231117115202-0ig7djb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117115202-0ig7djb",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设有两个数组，求两个数组的交集"
				}
			]
		},
		{
			"ID": "20231117115124-b6s383d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117115124-b6s383d",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//假设有两个数组，求两个数组的交集\nint[] arr1 = new int[] { 1, 2, 3, 4, 5, 6 };\nint[] arr2 = new int[] { 4, 5, 6, 7, 8, 9 };\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117115211-5lm4ddv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117115211-5lm4ddv",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不使用LINQ"
				}
			]
		},
		{
			"ID": "20231117115227-gyb51ia",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117115227-gyb51ia",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private static void Normal2(int[] arr1, int[] arr2)\n{\n    Console.WriteLine(\"不使用LINQ\");\n    var result = new List\u003cint\u003e();\n    foreach (var i in arr1)\n        if (arr2.Contains(i))\n            result.Add(i);\n    foreach (var i in result)\n        Console.WriteLine(i);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117120155-h2ngdll",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117120155-h2ngdll",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出结果："
				}
			]
		},
		{
			"ID": "20231117120201-5l22q07",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117120201-5l22q07",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "4\n5\n6\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117143410-2jk30o3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231117143410-2jk30o3",
				"name": "Intersect()",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取一个集合和另一个集合交集"
				}
			]
		},
		{
			"ID": "20231117143545-1rz7xfv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117143545-1rz7xfv",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个方法只有链式表达式有，返回"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "arr1"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "arr2"
				},
				{
					"Type": "NodeText",
					"Data": "​的交集"
				}
			]
		},
		{
			"ID": "20231117143443-mrm6i8g",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117143443-mrm6i8g",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "var result = arr1.Intersect(arr2);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117143433-fb1l9s7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231117143433-fb1l9s7",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "LINQ实例"
				}
			]
		},
		{
			"ID": "20231117115253-5i8o03u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117115253-5i8o03u",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用LINQ链式表达式"
				}
			]
		},
		{
			"ID": "20231117115302-lzj5ivy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117115302-lzj5ivy",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private static void ChainedExpressionLINQ2(int[] arr1, int[] arr2)\n{\n    Console.WriteLine(\"链式表达式LINQ\");\n    var result = arr1.Intersect(arr2);\n    foreach (var i in result)\n        Console.WriteLine(i);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117120216-q6bsi3l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117120216-q6bsi3l",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出结果："
				}
			]
		},
		{
			"ID": "20231117143854-d5pv78v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117143854-d5pv78v",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "4\n5\n6\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117115316-2qmp5ve",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117115316-2qmp5ve",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你愿意在IDE内将鼠标指向方法，你可以看到，这个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Intersect()"
				},
				{
					"Type": "NodeText",
					"Data": "​其实就是一种拓展方法，求两个可迭代类型集合"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IEnumerable\u0026lt;\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​的交集"
				}
			]
		},
		{
			"ID": "20231117115512-roubr7s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117115512-roubr7s",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 476px;",
						"style": "width: 466px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20231117115512-s6wth8p.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 466px;\" parent-style=\"width: 476px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20231117115538-0h4isnv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117115538-0h4isnv",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要注意的是，不是所有的链式表达式的方法都可以在查询表达式里找到对应关键字\n因为查询表达式的语法基本就是SQL语句那些关键字，例如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "orderby"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "select"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "join"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "groupby"
				},
				{
					"Type": "NodeText",
					"Data": "​等，这些关键字以外的内容可能就没那么好用了"
				}
			]
		},
		{
			"ID": "20231117115918-njkp628",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117115918-njkp628",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是也这不代表不能用查询表达式"
				}
			]
		},
		{
			"ID": "20231117120143-cnmtmlv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117120143-cnmtmlv",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private static void QueryExpressionLINQ2(int[] arr1, int[] arr2)\n{\n    Console.WriteLine(\"查询表达式LINQ\");\n    var result = from n in arr1\n                 where arr2.Contains(n)        //但有一说一，你说这玩意不就和一般方法的原理一样吗\n                 select n;\n    foreach (var i in result) \n        Console.WriteLine(i);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117120222-rahg9ey",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117120222-rahg9ey",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出结果同上"
				}
			]
		},
		{
			"ID": "20231117120228-v4ljhrn",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231117120228-v4ljhrn",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "统计频率"
				}
			]
		},
		{
			"ID": "20231117120418-hijzjpu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117120418-hijzjpu",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设有一个长度为200的数组，其中值是随机的"
				}
			]
		},
		{
			"ID": "20231117132755-vych1ks",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117132755-vych1ks",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " Random random = new Random(1334);       //使用种子使数组内部的值是唯一的\n var arr = new int[200];\n for (int i = 0; i \u003c arr.Length; i++)\n     arr[i] = random.Next(0, 20);        //该数组内的数据都是0~19\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117120348-0he7b83",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117120348-0he7b83",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不使用LINQ"
				}
			]
		},
		{
			"ID": "20231117132823-xg0fibu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117132823-xg0fibu",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static void Normal3(int[] arr)\n{\n    Console.WriteLine(\"不使用LINQ\");\n    Dictionary\u003cint, int\u003e dict = new();      //用来装载数组值与对应的频率，键为数组值，值为出现次数\n    foreach (int i in arr)\n    {\n        if (dict.ContainsKey(i))            //若存在，则+1\n            dict[i] += 1;\n        else\n            dict.Add(i, 1);                 //若不存在，则添加键值对\n    }\n    foreach (int i in dict.Keys)            //全部打印出来\n        Console.WriteLine(i + \" frequency is \" + dict[i]);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117134717-mqnap5l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117134717-mqnap5l",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出结果:"
				}
			]
		},
		{
			"ID": "20231117134721-01fgn6b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117134721-01fgn6b",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "12 frequency is 11\n4 frequency is 17\n5 frequency is 8\n9 frequency is 15\n6 frequency is 8\n13 frequency is 7\n0 frequency is 9\n3 frequency is 10\n1 frequency is 8\n18 frequency is 7\n14 frequency is 10\n2 frequency is 8\n15 frequency is 14\n16 frequency is 10\n8 frequency is 12\n10 frequency is 11\n17 frequency is 5\n11 frequency is 11\n7 frequency is 8\n19 frequency is 11\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117144107-x38wmkw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231117144107-x38wmkw",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "分组"
				}
			]
		},
		{
			"ID": "20231117144443-1y4zn0v",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20231117144443-1y4zn0v",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"ID": "20231117144422-o1pphd1",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20231117144422-o1pphd1",
						"updated": "20231117144443"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "a",
							"TextMarkAHref": "https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/group-clause",
							"TextMarkTextContent": "group 子句 - C# 参考 - C# | Microsoft Learn"
						}
					]
				},
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				}
			]
		},
		{
			"ID": "20231117144118-wrc9395",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117144118-wrc9395",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//查询表达式内\nvar result = from x in arr                             \n             group 要分组的元素 by 按照什么分组 into 分组出来的元素                       \n             select new { num = 分组出来的元素.Key, count = 分组出来的元素.Count() };\n\n//连接表达式内\nvar result = arr.GroupBy(要分组的元素 =\u003e 按照什么分组).Select(分组元素 =\u003e new { num = 分组元素.Key, count = 分组元素.Count() });\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117144413-plyg8b1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117144413-plyg8b1",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "groupby"
				},
				{
					"Type": "NodeText",
					"Data": "​分组出的数据类型是，类似于字典内的键值对形式的分组"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IGrouping\u0026lt;\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​类型，\n因此建议使用匿名类来装载或者直接转化为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dictionary"
				},
				{
					"Type": "NodeText",
					"Data": "​类型（仅限链接表达式）"
				}
			]
		},
		{
			"ID": "20231117145008-8tic96j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117145008-8tic96j",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IGrouping\u0026lt;\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​类型下，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IGrouping\u0026lt;\u0026gt;.key"
				},
				{
					"Type": "NodeText",
					"Data": "​可以得到分组的键（具体内容取决于如何分组），"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IGrouping\u0026lt;\u0026gt;.Count()"
				},
				{
					"Type": "NodeText",
					"Data": "​可以得到该组的元素数量"
				}
			]
		},
		{
			"ID": "20231117144110-9d22gfk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231117144110-9d22gfk",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "LINQ实例"
				}
			]
		},
		{
			"ID": "20231117133100-dxuhr70",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117133100-dxuhr70",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用LINQ（查询表达式）"
				}
			]
		},
		{
			"ID": "20231117133331-v04rid9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117133331-v04rid9",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static void QueryExpressionLINQ3(int[] arr)\n{\n    Console.WriteLine(\"查询表达式LINQ\");\n    var result = from x in arr                                      //从arr内取出所有元素并取名x\n                 group x by x into g                                //为x的值为x进行分组，装载到g，此时g的类型是类似于键值对形式的\n                 select new { num = g.Key, count = g.Count() };     //使用匿名类来装载，num为键也就是数组的元素，count就是该组的值\n    foreach (var keyValuePair in result)                            //全部打印出来\n        Console.WriteLine(keyValuePair.num + \" frequency is \" + keyValuePair.count);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117134745-uki2qd1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117134745-uki2qd1",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出结果："
				}
			]
		},
		{
			"ID": "20231117145411-6fqur5o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117145411-6fqur5o",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "12 frequency is 11\n4 frequency is 17\n5 frequency is 8\n9 frequency is 15\n6 frequency is 8\n13 frequency is 7\n0 frequency is 9\n3 frequency is 10\n1 frequency is 8\n18 frequency is 7\n14 frequency is 10\n2 frequency is 8\n15 frequency is 14\n16 frequency is 10\n8 frequency is 12\n10 frequency is 11\n17 frequency is 5\n11 frequency is 11\n7 frequency is 8\n19 frequency is 11\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117134752-2mzg30d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117134752-2mzg30d",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用LINQ（链式表达式）"
				}
			]
		},
		{
			"ID": "20231117134819-0zyxl2s",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117134819-0zyxl2s",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static void ChainedExpressionLINQ3(int[] arr)\n{\n    Console.WriteLine(\"链式表达式LINQ\");\n    //对arr使用分组，分组形式为数组元素x通过数组元素x来分组，这时result为分组元素的可迭代集合，\n    //再挑选，将分组元素g使用匿名类来装载，num为分组名（数组元素），count为该组的值，这时result为匿名类的可迭代集合\n    var result = arr.GroupBy(x =\u003e x).Select(g =\u003e new { num = g.Key, count = g.Count() });\n    //你也可以这样写，将分组元素直接转化为Dictionary\u003c\u003e类型\n    var res = arr.GroupBy(x =\u003e x).ToDictionary(g =\u003e g.Key, g =\u003e g.Count());\n    foreach (var keyValuePair in result)\n        Console.WriteLine(keyValuePair.num + \" frequency is \" + keyValuePair.count);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117145415-8gdcab7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231117145415-8gdcab7",
				"style": "line-height: 22px;",
				"updated": "20240331124709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "12 frequency is 11\n4 frequency is 17\n5 frequency is 8\n9 frequency is 15\n6 frequency is 8\n13 frequency is 7\n0 frequency is 9\n3 frequency is 10\n1 frequency is 8\n18 frequency is 7\n14 frequency is 10\n2 frequency is 8\n15 frequency is 14\n16 frequency is 10\n8 frequency is 12\n10 frequency is 11\n17 frequency is 5\n11 frequency is 11\n7 frequency is 8\n19 frequency is 11\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231117150911-kfcoyrm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231117150911-kfcoyrm",
				"updated": "20240331124709"
			}
		}
	]
}