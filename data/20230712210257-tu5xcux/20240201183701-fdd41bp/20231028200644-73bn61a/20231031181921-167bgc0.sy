{
	"ID": "20231031181921-167bgc0",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20231031181921-167bgc0",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231031181921-167bgc0\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231031194327-s5pstqi\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231031203624-z5pocm9\u0026quot;,\u0026quot;scrollTop\u0026quot;:300,\u0026quot;focusId\u0026quot;:\u0026quot;20231031182334-85zqw8t\u0026quot;,\u0026quot;focusStart\u0026quot;:2,\u0026quot;focusEnd\u0026quot;:2\u0026#125;",
		"title": "CS5L9——CSharp 7 功能和语法",
		"type": "doc",
		"updated": "20241210084414"
	},
	"Children": [
		{
			"ID": "20231031194327-s5pstqi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031194327-s5pstqi",
				"updated": "20241210084142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C# 7 的新语法更新重点主要是 代码简化\n今天学习的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "out"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ref"
				},
				{
					"Type": "NodeText",
					"Data": "​ 新用法，弃元、本地函数都是相对比较重要的内容，可以给我们带来很多便捷性"
				}
			]
		},
		{
			"ID": "20231031205621-kz1xys7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031205621-kz1xys7",
				"updated": "20241210084139"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而元组和模式匹配知识点 是 C# 7 中引入的最重要的两个知识点\n他们可以帮助我们更效率的完成一些功能需求，建议大家常用他们"
				}
			]
		},
		{
			"ID": "20231031194331-o7a6vk7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231031194331-o7a6vk7",
				"updated": "20240715102134"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20231031194335-zcrwrfo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231031194335-zcrwrfo",
				"style": "line-height: 22px;",
				"updated": "20231101210054"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//不愧是C#，语法糖爆炸多，本章知识不建议看这里的关键字，尤其是元组，模式匹配，你在这里看是看不懂的XD\nout    //在out后面可以直接声明一个对应的变量\nref    //ref修饰值变量可以在赋值时使用引用传递，而非值传递，使变量指向另一个变量的内存空间\n()     //元组\nis     //is后面不仅可以跟类型，还可以跟常量，直接判断是否同类型的同时，是否值相同，也可以跟变量，只要类型相同，is前面的变量的值直接就可以赋值给后面的变量\ncase   //case可以用于在判断类型的同时，将判断的值赋值给类型后面的变量\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231031182221-dd5fdbw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231031182221-dd5fdbw",
				"updated": "20241210084126"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C# 7 对应的Unity版本"
				}
			]
		},
		{
			"ID": "20231031181921-vjavgyz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031181921-vjavgyz",
				"updated": "20241210084126"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Unity 2018.3 支持 C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 7，Unity 2019.4 支持 C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 7.3，其中，7.1、7.2、7.3 相关内容都是基于 7 的一些改进"
				}
			]
		},
		{
			"ID": "20231031182257-6a7y5lk",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20231031182257-6a7y5lk",
				"updated": "20241210084151"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C# 7 的新增功能和语法"
				}
			]
		},
		{
			"ID": "20231031182324-zl6u9z9",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231031182324-zl6u9z9",
				"updated": "20240715101742"
			},
			"Children": [
				{
					"ID": "20231031182334-9gys2sr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231031182334-9gys2sr",
						"updated": "20231101210140"
					},
					"Children": [
						{
							"ID": "20231031182334-kka1tka",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031182334-kka1tka",
								"updated": "20231101210140"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20231031182344-qdgw41z",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "字面值改进"
								}
							]
						}
					]
				},
				{
					"ID": "20231031182334-eujewa1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231031182334-eujewa1",
						"updated": "20240715101742"
					},
					"Children": [
						{
							"ID": "20231031182334-7ewvvs9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031182334-7ewvvs9",
								"updated": "20240715101742"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20231031183822-b8y8pf5",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "out 参数相关"
								},
								{
									"Type": "NodeText",
									"Data": " 和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20231031183816-bxwamg5",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "弃元"
								},
								{
									"Type": "NodeText",
									"Data": " 知识点"
								}
							]
						}
					]
				},
				{
					"ID": "20231031182334-xy0pkg5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20231031182334-xy0pkg5",
						"updated": "20231101210224"
					},
					"Children": [
						{
							"ID": "20231031182334-lrmrt9o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031182334-lrmrt9o",
								"updated": "20231101210224"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20231031184051-sbzmeno",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "ref 返回值"
								}
							]
						}
					]
				},
				{
					"ID": "20231031182334-xxbe6v3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20231031182334-xxbe6v3",
						"updated": "20231101210227"
					},
					"Children": [
						{
							"ID": "20231031182334-p4n5y01",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031182334-p4n5y01",
								"updated": "20231101210227"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20231031184213-sxfcgv0",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "本地函数"
								}
							]
						}
					]
				},
				{
					"ID": "20231031182334-x7mie9s",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20231031182334-x7mie9s",
						"updated": "20231101210230"
					},
					"Children": [
						{
							"ID": "20231031182334-quvq4p7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031182334-quvq4p7",
								"updated": "20231101210230"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20231031194720-ydwn7wa",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "抛出表达式"
								}
							]
						}
					]
				},
				{
					"ID": "20231031182334-myywaol",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20231031182334-myywaol",
						"updated": "20231101210233"
					},
					"Children": [
						{
							"ID": "20231031182334-85zqw8t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031182334-85zqw8t",
								"updated": "20231101210233"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20231031200201-qaxfvlh",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "元组"
								}
							]
						}
					]
				},
				{
					"ID": "20231031182334-x9f574v",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20231031182334-x9f574v",
						"updated": "20231101210237"
					},
					"Children": [
						{
							"ID": "20231031182334-hdnv8z4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031182334-hdnv8z4",
								"updated": "20231101210237"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20231031203303-6i67dxp",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "模式匹配"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231031182344-qdgw41z",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231031182344-qdgw41z",
				"updated": "20241210084151"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字面值改进"
				}
			]
		},
		{
			"ID": "20231031182356-df36nqw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031182356-df36nqw",
				"updated": "20241210084151"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本概念：在声明数值变量时，为了方便查看数值，可以在数值之间插入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "_"
				},
				{
					"Type": "NodeText",
					"Data": "​ 作为分隔符\n主要作用：方便数值变量的阅读，而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "_"
				},
				{
					"Type": "NodeText",
					"Data": "​ 本身对程序没有影响"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "text",
					"TextMarkTextContent": "（我们不能在数值开头使用"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code text",
					"TextMarkTextContent": "_"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​ "
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "text",
					"TextMarkTextContent": "）"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20231031182431-f30il9v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231031182431-f30il9v",
				"style": "line-height: 22px;",
				"updated": "20231031182615"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int i = 9_9123_1239;\nprint(i);\nint i2 = 0xAB_CD_17;\nprint(i2);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231031182438-66crc1o",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231031182438-66crc1o",
				"updated": "20241210084202"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "out 变量的快捷使用 和 弃元"
				}
			]
		},
		{
			"ID": "20231031183822-b8y8pf5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231031183822-b8y8pf5",
				"updated": "20241210084202"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "out 的快捷使用（内联声明）"
				}
			]
		},
		{
			"ID": "20231031182756-wxhkqx5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031182756-wxhkqx5",
				"updated": "20240715101822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用法：不需要再使用带有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "out"
				},
				{
					"Type": "NodeText",
					"Data": "​ 参数的函数之前，声明对应变量\n作用：简化代码，提高开发效率"
				}
			]
		},
		{
			"ID": "20231031182813-vevd5x0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231031182813-vevd5x0",
				"style": "line-height: 22px;",
				"updated": "20240229145346"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    //C#7以前我们只能这么写\n    //int a, b;\n    //Calc(out a, out b);\n    //在C#7以后，我们可以直接在out关键字后面声明变量，并在后续使用它\n    Calc(out int a, out int b);\n    print(a);\n    print(b);\n}\n\npublic void Calc(out int a, out int b)\n{\n    a = 10;\n    b = 20;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231031183158-o7y19un",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031183158-o7y19un",
				"updated": "20240715101830"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结合 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "var"
				},
				{
					"Type": "NodeText",
					"Data": "​ 类型更简便\n使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "var"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后，编译器会根据参数需要的类型，自动帮我们判断该变量的类型"
				}
			]
		},
		{
			"ID": "20231031183234-fl75t85",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231031183234-fl75t85",
				"style": "line-height: 22px;",
				"updated": "20240229145346"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Calc(out var x, out var y);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231031183413-d5s1qtf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031183413-d5s1qtf",
				"updated": "20241210084202"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "text",
					"TextMarkTextContent": "（"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "但是这种写法在存在重载时不能正常使用，必须明确调用的是谁"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "text",
					"TextMarkTextContent": "）"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20231031183430-hmeb2te",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231031183430-hmeb2te",
				"style": "line-height: 22px;",
				"updated": "20240229145346"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    //Calc(out var x, out var y);    //当遇到参数数量相同但参数类型不同的重载时，这样写编译器无法帮我们判断类型\n    Calc(out int x, out var y);      //因此我们必须要在声明指明类型使编译器可以明确使用的是何种重载\n}\n\npublic void Calc(out int a, out int b)\n{\n    a = 10;\n    b = 20;\n}\n\npublic void Calc(out float a, out float b)\n{\n    a = 10;\n    b = 20;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231031183816-bxwamg5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231031183816-bxwamg5",
				"updated": "20240715102134"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "弃元"
				}
			]
		},
		{
			"ID": "20231031183840-nlm2p83",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031183840-nlm2p83",
				"updated": "20240715101835"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "_"
				},
				{
					"Type": "NodeText",
					"Data": "​ 弃元符号，省略不想使用的参数"
				}
			]
		},
		{
			"ID": "20231031183929-57grm8p",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231031183929-57grm8p",
				"style": "line-height: 22px;",
				"updated": "20231031194529"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    Calc(out int c, out _);\n    print(c);\n}\n\npublic void Calc(out int a, out int b)\n{\n    a = 10;\n    b = 20;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231031184051-sbzmeno",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231031184051-sbzmeno",
				"updated": "20241210084302"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ref 修饰临时变量和返回值"
				}
			]
		},
		{
			"ID": "20231031184129-s84g8s2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031184129-s84g8s2",
				"updated": "20240715101840"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本概念：使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ref"
				},
				{
					"Type": "NodeText",
					"Data": "​ 修饰临时变量和函数返回值，可以让赋值变为引用传递\n作用：用于修改数据对象中的某些值类型变量"
				}
			]
		},
		{
			"ID": "20231031184202-ncf1peq",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231031184202-ncf1peq",
				"updated": "20241210084302"
			},
			"Children": [
				{
					"ID": "20231031184225-mffnmbc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231031184225-mffnmbc",
						"updated": "20241210084302"
					},
					"Children": [
						{
							"ID": "20231031184225-cwckj8m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031184225-cwckj8m",
								"updated": "20231031184429"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "修饰值类型临时变量："
								}
							]
						},
						{
							"ID": "20231031184430-pgfhm03",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031184430-pgfhm03",
								"updated": "20241210084256"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在以前，将值类型变量 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "a"
								},
								{
									"Type": "NodeText",
									"Data": "​ 赋值给另一个值类型变量 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "b"
								},
								{
									"Type": "NodeText",
									"Data": "​，修改 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "b"
								},
								{
									"Type": "NodeText",
									"Data": "​ 并不能将 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "a"
								},
								{
									"Type": "NodeText",
									"Data": "​ 的值也修改掉，因为它们分别使用的是内存上不同的数据"
								}
							]
						},
						{
							"ID": "20231031184449-ocgrv5o",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031184449-ocgrv5o",
								"style": "line-height: 22px;",
								"updated": "20231031185838"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "int testI = 100;\nint testI2 = testI;        //这里是值传递，也就是说，testI2新开辟了一个新的内存空间来存储testI的数据\ntestI2 = 900;              //因此，在这里修改testI2并不能影响testI1的数据，因为它们指向的内存空间是不同的\nprint(testI);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231031184627-6qj25u2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031184627-6qj25u2",
								"updated": "20241210084302"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "而使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ref"
								},
								{
									"Type": "NodeText",
									"Data": "​ 关键字，对赋值的两边添加 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ref"
								},
								{
									"Type": "NodeText",
									"Data": "​ ，会使b指向a在内存的数据，这会导致修改 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "b"
								},
								{
									"Type": "NodeText",
									"Data": "​，也会修改 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "a"
								},
								{
									"Type": "NodeText",
									"Data": "​ 的值，因为它们使用的是内存上相同的数据"
								}
							]
						},
						{
							"ID": "20231031184227-c9pnpls",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031184227-c9pnpls",
								"style": "line-height: 22px;",
								"updated": "20231031190026"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "int testI = 100;\nref int testI2 = ref testI;    //通过ref来修饰临时变量，使这个赋值变成了引用传递，也就是说，testI2指向的testI1的内存空间\ntestI2 = 900;                  //因此，在这里修改testI2可以改变testI1的数据，因为它们指向的内存空间是相同的\nprint(testI);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231031185110-z2u6uz0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031185110-z2u6uz0",
								"updated": "20240715101905"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "结构体是值类型，因此使用结构体变量赋值另一个结构体变量时，会新开辟一块内存空间，因此修改新的结构体变量，并不能修改原来的结构体变量\n而在在赋值时使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ref"
								},
								{
									"Type": "NodeText",
									"Data": "​ 修饰临时变量，可以使两个变量指向同一个内存，修改其中一个也能修改另一个"
								}
							]
						},
						{
							"ID": "20231031185407-9m6bv8l",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031185407-9m6bv8l",
								"style": "line-height: 22px;",
								"updated": "20231031190153"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public struct TestRef\n{\n    public int atk;\n    public int def;\n\n    public TestRef(int atk, int def)\n    {\n        this.atk = atk;\n        this.def = def;\n    }\n}\n\npublic class Lesson8 : MonoBehaviour\n{\n    void Start()\n    {\n        TestRef r1 = new TestRef(5, 5);\n        ref TestRef r2 = ref r1;    //用ref修饰临时变量，因此这里是引用传递，也就是说，r2和r1指向了同一个内存空间\n        r2.atk = 10;                //因此修改r2的某个成员变量，会使r1的成员变量也被修改，因为它们指向的内存空间是相同的，类似于语言类型\n        print(r1.atk);\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231031184225-jqwgtq5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231031184225-jqwgtq5",
						"updated": "20231031190837"
					},
					"Children": [
						{
							"ID": "20231031184225-9d4ckbv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031184225-9d4ckbv",
								"updated": "20231031190837"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "获取对象中的参数，使变量指向该对象的参数"
								}
							]
						},
						{
							"ID": "20231031184229-0mfcsrz",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031184229-0mfcsrz",
								"style": "line-height: 22px;",
								"updated": "20231031190323"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public struct TestRef\n{\n    public int atk;\n    public int def;\n\n    public TestRef(int atk, int def)\n    {\n        this.atk = atk;\n        this.def = def;\n    }\n}\n\npublic class Lesson8 : MonoBehaviour\n{\n    void Start()\n    {\n        ref int atk = ref r1.atk;    //通过ref修饰临时变量，使atk指向结构体变量的某个成员存储数据的内存空间\n        atk = 99;                    //因此修改atk，就会修改r1.atk的值，因为atk指向的使r1.atk的内存空间\n        print(r1.atk);\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231031184225-7vd69pz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20231031184225-7vd69pz",
						"updated": "20240715101912"
					},
					"Children": [
						{
							"ID": "20231031184225-yk1s8k1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031184225-yk1s8k1",
								"updated": "20231031192733"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "函数返回值"
								}
							]
						},
						{
							"ID": "20231031192734-ut2o0lq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031192734-ut2o0lq",
								"updated": "20240715101912"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将方法的返回值前都加上 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ref"
								},
								{
									"Type": "NodeText",
									"Data": "​，并使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ref"
								},
								{
									"Type": "NodeText",
									"Data": "​ 修饰的变量接收返回的引用传递"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
									},
									"TextMarkType": "text",
									"TextMarkTextContent": "（不能缺少任意一个"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
									},
									"TextMarkType": "code text",
									"TextMarkTextContent": "ref"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
								},
								{
									"Type": "NodeText",
									"Data": "​ "
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
									},
									"TextMarkType": "text",
									"TextMarkTextContent": "，否则会导致引用传递失效或者语法错误）"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
								},
								{
									"Type": "NodeText",
									"Data": "\n这样可以使变量接收到的返回值为引用传递，或者说让变量指向返回的对象的内存空间，修改变量的值就会同时修改返回的对象的成员"
								}
							]
						},
						{
							"ID": "20231031184231-095vyqq",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031184231-095vyqq",
								"style": "line-height: 22px;",
								"updated": "20231031193653"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "void Start()\n{\n    int[] numbers = new int[] { 1, 2, 3, 45, 5, 65, 4532, 12 };\n    //函数返回的是数组某个元素的引用，由一个ref修饰的变量接收引用传递，使该变量指向返回的元素的内存空间\n    ref int number = ref FindNumber(numbers, 5);\n    number = 98765;                   //修改这个变量就会修改方法返回的数组的某一个元素的值\n    print(numbers[4]);\n}\n\n//要使返回值为值类型的方法，返回的是某个值类型的引用，我们需要用ref来修饰该方法，并让ref来修饰return\npublic ref int FindNumber(int[] numbers, int number)\n{\n    for (int i = 0; i \u003c numbers.Length; i++)\n    {\n        if (numbers[i] == number)\n            return ref numbers[i];    //返回numbers的第i个元素的引用\n    }\n    return ref numbers[0];            //返回numbers的第一个元素的引用\n}\n\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231031184213-sxfcgv0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231031184213-sxfcgv0",
				"updated": "20241210084310"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本地函数"
				}
			]
		},
		{
			"ID": "20231031193702-70ysq2c",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20231031193702-70ysq2c",
				"updated": "20241210084310"
			},
			"Children": [
				{
					"ID": "20241210084310-rh007ee",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241210084310-rh007ee",
						"updated": "20241210084310"
					},
					"Children": [
						{
							"ID": "20241210084310-z3m1noh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210084310-z3m1noh",
								"updated": "20241210084310"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "基本概念：在函数内部声明一个临时函数\n"
								}
							]
						}
					]
				},
				{
					"ID": "20241210084310-lizufag",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241210084310-lizufag",
						"updated": "20241210084310"
					},
					"Children": [
						{
							"ID": "20241210084310-l22ekkn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210084310-l22ekkn",
								"updated": "20241210084310"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "注意：本地函数只能在声明该函数的函数内部使用，本地函数可以使用声明自己的函数中的变量"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								}
							]
						}
					]
				},
				{
					"ID": "20241210084311-6r61qpb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241210084311-6r61qpb",
						"updated": "20241210084311"
					},
					"Children": [
						{
							"ID": "20241210084311-0s4eo5k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210084311-0s4eo5k",
								"updated": "20241210084311"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "作用：方便逻辑的封装\n"
								}
							]
						}
					]
				},
				{
					"ID": "20241210084312-j5knhix",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241210084312-j5knhix",
						"updated": "20241210084312"
					},
					"Children": [
						{
							"ID": "20241210084312-l4ny1qi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210084312-l4ny1qi",
								"updated": "20241210084312"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
									},
									"TextMarkType": "text",
									"TextMarkTextContent": "建议：把本地函数写在主要逻辑的后面，方便代码的查看"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231031193958-vj5bhr2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031193958-vj5bhr2",
				"updated": "20240715101917"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以理解为是本地函数就像是函数自己的私有函数，就像类的私有函数那样，\n函数里可以直接调用这个本地函数，本地函数的局部变量生命周期也仅限于本地函数内部"
				}
			]
		},
		{
			"ID": "20231031193741-8gzxcz2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231031193741-8gzxcz2",
				"style": "line-height: 22px;",
				"updated": "20231031194241"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    print(TestInt(10));\n}\n\npublic int TestInt(int i)\n{\n    bool b = false;\n    i += 10;\n    Calc();\n    print(b);\n    return i;\n\n    void Calc()\n    {\n        i += 10;\n        b = true;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231031194720-ydwn7wa",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231031194720-ydwn7wa",
				"updated": "20241210084343"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抛出表达式"
				}
			]
		},
		{
			"ID": "20231031194858-2b7f0pm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031194858-2b7f0pm",
				"updated": "20240715101954"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "throw"
				},
				{
					"Type": "NodeText",
					"Data": "​：抛出表达式，就是指抛出一个错误，一般的使用方式 都是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "throw new 一个异常类"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20231031195132-xtktm6a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031195132-xtktm6a",
				"updated": "20231031195251"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "异常基类："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Exception"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20231031194917-riqdd16",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231031194917-riqdd16",
				"style": "line-height: 22px;",
				"updated": "20231031195026"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "throw new System.Exception(\"出错了！\");\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231031194732-rjz1zih",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231031194732-rjz1zih",
				"updated": "20241210084343"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C# 自带的异常类"
				}
			]
		},
		{
			"ID": "20231031195056-wj7ijd7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231031195056-wj7ijd7",
				"style": "line-height: 22px;",
				"updated": "20231031195317"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//常用的异常类\nIndexOutOfRangeException：当一个数组的下标超出范围时运行时引发。\nNullReferenceException：当一个空对象被引用时运行时引发。\nArgumentException：方法的参数是非法的\nArgumentNullException： 一个空参数传递给方法，该方法不能接受该参数\nArgumentOutOfRangeException： 参数值超出范围\nSystemException：其他用户可处理的异常的基本类\nOutOfMemoryException：内存空间不够\nStackOverflowException 堆栈溢出\n//不常用的\nArithmeticException：出现算术上溢或者下溢\nArrayTypeMismatchException：试图在数组中存储错误类型的对象\nBadImageFormatException：图形的格式错误\nDivideByZeroException：除零异常\nDllNotFoundException：找不到引用的DLL\nFormatException：参数格式错误\nInvalidCastException：使用无效的类\nInvalidOperationException：方法的调用时间错误\nMethodAccessException：试图访问思友或者受保护的方法\nMissingMemberException：访问一个无效版本的DLL\nNotFiniteNumberException：对象不是一个有效的成员\nNotSupportedException：调用的方法在类中没有实现\nInvalidOperationException：当对方法的调用对对象的当前状态无效时，由某些方法引发。\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231031194729-ykjx5om",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031194729-ykjx5om",
				"updated": "20231031195409"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBackslashContent",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 7中，可以在更多的表达式中进行错误抛出\n好处：更节约代码量"
				}
			]
		},
		{
			"ID": "20231031195401-r1dbpsu",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231031195401-r1dbpsu",
				"updated": "20241210084343"
			},
			"Children": [
				{
					"ID": "20231031195437-lxu1xqe",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231031195437-lxu1xqe",
						"updated": "20240715102001"
					},
					"Children": [
						{
							"ID": "20231031195437-7liyroc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031195437-7liyroc",
								"updated": "20240715102001"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "空合并操作符后用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "throw"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"ID": "20231031195440-s5ihf3c",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031195440-s5ihf3c",
								"style": "line-height: 22px;",
								"updated": "20231031195700"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "private string jsonStr;\nprivate void InitInfo(string str) =\u003e jsonStr = str ?? throw new System.ArgumentNullException(nameof(str));\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231031195437-jcs3uts",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231031195437-jcs3uts",
						"updated": "20240715102002"
					},
					"Children": [
						{
							"ID": "20231031195437-gtxrhhf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031195437-gtxrhhf",
								"updated": "20240715102002"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "三目运算符后面用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "throw"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"ID": "20231031195702-pf7tsy2",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031195702-pf7tsy2",
								"style": "line-height: 22px;",
								"updated": "20231031200045"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "void Start()\n{\n    GetInfo(\"1,2,3\", 4);        //因为第一个参数被分割后并不能获取到索引为4的子字符串，因此抛出异常\n}\n\nprivate string GetInfo(string str, int index)\n{\n    string[] strs = str.Split(',');\n    return str.Length \u003e index ? strs[index] : throw new System.IndexOutOfRangeException(nameof(str));\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231031195437-n9698fu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20231031195437-n9698fu",
						"updated": "20241210084343"
					},
					"Children": [
						{
							"ID": "20231031195437-n0l1g6p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031195437-n0l1g6p",
								"updated": "20241210084343"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "=\u0026gt;"
								},
								{
									"Type": "NodeText",
									"Data": "​ 符号后面直接 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "throw"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"ID": "20231031200049-43koxju",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031200049-43koxju",
								"style": "line-height: 22px;",
								"updated": "20231031200157"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "System.Action action = () =\u003e throw new System.Exception(\"错误，该委托不可调用！\");\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231031200201-qaxfvlh",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231031200201-qaxfvlh",
				"updated": "20240715102134"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "元组"
				}
			]
		},
		{
			"ID": "20231031200231-75pkt9m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031200231-75pkt9m",
				"updated": "20231031201122"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "基本概念："
				},
				{
					"Type": "NodeText",
					"Data": "\n多个值的集合，相当于是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "一种快速构建数据结构类的方式"
				},
				{
					"Type": "NodeText",
					"Data": "\n一般在函数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "存在多返回值时可以使用元组 (返回值1类型, 返回值2类型,....) 来声明返回值"
				},
				{
					"Type": "NodeText",
					"Data": "\n在函数内部返回"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "具体内容时通过 (返回值1, 返回值2, ....)  进行返回"
				},
				{
					"Type": "NodeText"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "主要作用："
				},
				{
					"Type": "NodeText",
					"Data": "\n提升开发效率，更方便的处理多返回值等需要用到多个值时的需求"
				}
			]
		},
		{
			"ID": "20231031200322-6gy0ecw",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231031200322-6gy0ecw",
				"updated": "20240715102053"
			},
			"Children": [
				{
					"ID": "20231031200333-kpkid5n",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231031200333-kpkid5n",
						"updated": "20240715102042"
					},
					"Children": [
						{
							"ID": "20231031200333-n3oymhd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031200333-n3oymhd",
								"updated": "20240715102042"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "无变量名元组的声明\n（获取值："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Item'N'"
								},
								{
									"Type": "NodeText",
									"Data": "​ 作为从左到右依次的参数，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "N"
								},
								{
									"Type": "NodeText",
									"Data": "​ 从1开始）"
								}
							]
						},
						{
							"ID": "20231031200335-5r3p8wl",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031200335-5r3p8wl",
								"style": "line-height: 22px;",
								"updated": "20231031200624"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "(int, float) yz = (1, 5.5f);\nprint(yz.Item1);\nprint(yz.Item2);\n\n(int, float,bool,string) yz1 = (1, 5.5f, true, \"123\");\nprint(yz1.Item1);\nprint(yz1.Item2);\nprint(yz1.Item3);\nprint(yz1.Item4);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231031200525-d8dlt5s",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231031200525-d8dlt5s",
						"updated": "20240715102023"
					},
					"Children": [
						{
							"ID": "20231031200525-qu4ozaz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031200525-qu4ozaz",
								"updated": "20240715102023"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有变量名元组的声明\n（有变量名的话，就不需要什么 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "item1"
								},
								{
									"Type": "NodeText",
									"Data": "​ 这些，直接使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "元组名+变量名"
								},
								{
									"Type": "NodeText",
									"Data": "获取元组的成员值）"
								}
							]
						},
						{
							"ID": "20231031200550-4nwt8i6",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031200550-4nwt8i6",
								"style": "line-height: 22px;",
								"updated": "20231031200851"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "(int i, float f, bool b, string str) yz2 = (1, 5.5f, true, \"123\");\nprint(yz2.i);\nprint(yz2.f);\nprint(yz2.b);\nprint(yz2.str);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231031200852-mrxtmgh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031200852-mrxtmgh",
								"updated": "20231031201001"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "值得一提的是，元组赋值时也可以用类似于函数命名参数那样在参数前加上变量名，"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "但是我们赋值时仍然不能改变赋值的顺序"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								}
							]
						},
						{
							"ID": "20231031201002-0hsfifh",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031201002-0hsfifh",
								"style": "line-height: 22px;",
								"updated": "20231031201103"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "(int i, float f, bool b, string str) yz2 = (i: 1, f: 5.5f, b: true, str: \"123\");\n//(int i, float f, bool b, string str) yz2 = (i: 1, b: true, f: 5.5f, str: \"123\");    //即使我们这样写，也不能改变赋值的顺序\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231031201126-1obf7kw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20231031201126-1obf7kw",
						"updated": "20240715102053"
					},
					"Children": [
						{
							"ID": "20231031201126-giwgktd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031201126-giwgktd",
								"updated": "20240715102053"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "元组可以进行等于和不等于的判断\n但是，"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "数量相同才能比较，类型相同才能比较，否则会报错！"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								},
								{
									"Type": "NodeText",
									"Data": "每一个参数的比较是通过 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "=="
								},
								{
									"Type": "NodeText",
									"Data": "​ 比较 如果都是 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "true"
								},
								{
									"Type": "NodeText",
									"Data": "​ 则认为两个元组相等"
								}
							]
						},
						{
							"ID": "20231031201219-whwyvi2",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031201219-whwyvi2",
								"style": "line-height: 22px;",
								"updated": "20231031201334"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "(int i, float f, bool b, string str) yz1 = (1, 5.5f, true, \"123\");\n(int i, float f, bool b, string str) yz2 = (1, 5.5f, true, \"123\");\n\nif (yz1 == yz2)\n    print(\"相同\");\nelse\n    print(\"不同\");\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231031200512-m8tejje",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031200512-m8tejje",
				"updated": "20231031201442"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "元组不仅可以作为临时变量 成员变量也是可以的"
				}
			]
		},
		{
			"ID": "20231031201443-vp9culv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231031201443-vp9culv",
				"style": "line-height: 22px;",
				"updated": "20231031201557"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Lesson9 : MonoBehaviour\n{\n    public (int, float) yz;\n\n    void Start()\n    {\n        print(this.yz.Item1);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231031201601-bdlc7ob",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231031201601-bdlc7ob",
				"updated": "20240715102134"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "函数多返回值"
				}
			]
		},
		{
			"ID": "20231031201613-laulgym",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20231031201613-laulgym",
				"updated": "20240715102105"
			},
			"Children": [
				{
					"ID": "20231031201739-qah4j26",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231031201739-qah4j26",
						"updated": "20231031201739"
					},
					"Children": [
						{
							"ID": "20231031201739-rnhvaca",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031201739-rnhvaca",
								"updated": "20231031201801"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "无变量名函数返回值"
								}
							]
						},
						{
							"ID": "20231031201802-irgfjc3",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031201802-irgfjc3",
								"style": "line-height: 22px;",
								"updated": "20231031201931"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "void Start()\n{\n    var info = GetInfo();\n    print(info.Item1);\n    print(info.Item2);\n    print(info.Item3);\n}\n\nprivate (string, int, float) GetInfo()\n{\n    return (\"123\", 2, 5.5f);\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231031201933-7hwuns7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231031201933-7hwuns7"
					},
					"Children": [
						{
							"ID": "20231031201933-svkjid9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031201933-svkjid9",
								"updated": "20231031201942"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有变量名"
								}
							]
						},
						{
							"ID": "20231031201944-cttap1y",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031201944-cttap1y",
								"style": "line-height: 22px;",
								"updated": "20231031202151"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "void Start()\n{\n    var info = GetInfo();\n    print(info.str);\n    print(info.i);\n    print(info.f);\n}\n\nprivate (string str, int i, float f) GetInfo()\n{\n    return (\"123\", 2, 5.5f);\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231031202154-zg6t59b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231031202154-zg6t59b"
					},
					"Children": [
						{
							"ID": "20231031202154-w6had18",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031202154-w6had18",
								"updated": "20231031202208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "元组的解构赋值\n"
								}
							]
						},
						{
							"ID": "20231031202208-7psv27w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031202208-7psv27w"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "相当于把多返回值元组拆分到不同的变量中"
								}
							]
						},
						{
							"ID": "20231031202210-xn043gh",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031202210-xn043gh",
								"style": "line-height: 22px;",
								"updated": "20231031202359"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "void Start()\n{\n    (string myStr, int myInt, float myFloat) = GetInfo();\n    print(myStr);\n    print(myInt);\n    print(myFloat);\n}\n\nprivate (string str, int i, float f) GetInfo()\n{\n    return (\"123\", 2, 5.5f);\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231031202400-5y3hc2y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031202400-5y3hc2y",
								"updated": "20231031202601"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "或者也可以这样写，"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "要注意不能与上面的写法混用，要么声明都写在里面，要么声明都写在外面"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
								}
							]
						},
						{
							"ID": "20231031202439-muli4s5",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031202439-muli4s5",
								"style": "line-height: 22px;",
								"updated": "20231031202547"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "void Start()\n{\n    string myStr;\n    int myInt;\n    float myFloat;\n    (myStr, myInt, myFloat) = GetInfo();\n    print(myStr);\n    print(myInt);\n    print(myFloat);\n}\n\nprivate (string str, int i, float f) GetInfo()\n{\n    return (\"123\", 2, 5.5f);\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231031202621-ddgi719",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231031202621-ddgi719",
						"updated": "20240715102105"
					},
					"Children": [
						{
							"ID": "20231031202621-glg27tr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031202621-glg27tr",
								"updated": "20231031202625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "丢弃参数"
								}
							]
						},
						{
							"ID": "20231031202625-npeofi8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031202625-npeofi8",
								"updated": "20240715102105"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "利用传入 下划线 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "_"
								},
								{
									"Type": "NodeText",
									"Data": "​ 达到丢弃该参数不使用的作用"
								}
							]
						},
						{
							"ID": "20231031202635-4rauwqi",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031202635-4rauwqi",
								"style": "line-height: 22px;",
								"updated": "20231031202926"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "(string ss, _, _) = GetInfo();\nprint(ss)\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231031202959-efymx4g",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231031202959-efymx4g",
				"updated": "20240715102134"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字典多变量键"
				}
			]
		},
		{
			"ID": "20231031201930-rp0g98i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031201930-rp0g98i",
				"updated": "20231031203026"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当字典中的键 需要用多个变量来控制时"
				}
			]
		},
		{
			"ID": "20231031203026-06fxaj5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231031203026-06fxaj5",
				"style": "line-height: 22px;",
				"updated": "20231031203231"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Dictionary\u003c(int i, float f), string\u003e dic = new Dictionary\u003c(int i, float f), string\u003e();\ndic.Add((1, 2.5f), \"123\");\n\nif (dic.ContainsKey((1, 2.5f)))\n{\n    print(\"有这个键\");\n    print(dic[(1, 2.5f)]);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231031203303-6i67dxp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231031203303-6i67dxp",
				"updated": "20241210084414"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模式匹配"
				}
			]
		},
		{
			"ID": "20231031203405-7n5ee03",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031203405-7n5ee03",
				"updated": "20240626235621"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "基本概念："
				},
				{
					"Type": "NodeText",
					"Data": "\n模式匹配是一种语法元素，可以测试一个值是否满足某种条件，并可以从值中提取信息\n在C#7中，模式匹配增强了两个现有的语言结构"
				}
			]
		},
		{
			"ID": "20231031203326-fe4jo74",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231031203326-fe4jo74",
				"updated": "20240715102113"
			},
			"Children": [
				{
					"ID": "20231031203405-jwidgep",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231031203405-jwidgep",
						"updated": "20240715102110"
					},
					"Children": [
						{
							"ID": "20231031203405-u6f7o69",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031203405-u6f7o69",
								"updated": "20240715102110"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "is"
								},
								{
									"Type": "NodeText",
									"Data": "​ 表达式，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "is"
								},
								{
									"Type": "NodeText",
									"Data": "​ 表达式可以在右侧写一个模式语法，而不仅仅是一个类型"
								}
							]
						}
					]
				},
				{
					"ID": "20231031203405-iul03pe",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231031203405-iul03pe",
						"updated": "20240715102113"
					},
					"Children": [
						{
							"ID": "20231031203405-ikoh8ak",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031203405-ikoh8ak",
								"updated": "20240715102113"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "switch"
								},
								{
									"Type": "NodeText",
									"Data": "​ 语句中的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "case"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231031203401-s4zebt0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031203401-s4zebt0"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "主要作用："
				},
				{
					"Type": "NodeText",
					"Data": "\n节约代码量，提高编程效率"
				}
			]
		},
		{
			"ID": "20231031203458-3xnpl3u",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231031203458-3xnpl3u",
				"updated": "20241210084414"
			},
			"Children": [
				{
					"ID": "20231031203604-6fcv50s",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231031203604-6fcv50s",
						"updated": "20241210084400"
					},
					"Children": [
						{
							"ID": "20231031203604-kn6nftq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031203604-kn6nftq",
								"updated": "20241210084400"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "常量模式("
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong code",
									"TextMarkTextContent": "is 常量"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": ")："
								},
								{
									"Type": "NodeText",
									"Data": "\n用于判断输入值是否等于某个值"
								}
							]
						},
						{
							"ID": "20231031203626-xsxq53a",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031203626-xsxq53a",
								"style": "line-height: 22px;",
								"updated": "20231101194109"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "object o = 1;\n//旧写法\nif (o is int)\n{\n    print(\"o是int\");\n}\n//新写法\nif (o is 1)\n{\n    print(\"o是1\");\n}\n//等价于：\nif (o is int \u0026\u0026 o = 1)\n{\n    print(\"o是1\");\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231031203936-rr45axm",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031203936-rr45axm",
								"style": "line-height: 22px;",
								"updated": "20231031203940"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "object o = null;\nif (o is 1)\n{\n    print(\"o是1\");\n}\nif (o is null)\n{\n    print(\"o是null\");\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231031203606-e931ijc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231031203606-e931ijc",
						"updated": "20241210084414"
					},
					"Children": [
						{
							"ID": "20231031203606-xy3g9j9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031203606-xy3g9j9",
								"updated": "20241210084414"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "类型模式("
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong code",
									"TextMarkTextContent": "is 类型 变量名"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong code",
									"TextMarkTextContent": "case 类型 变量名"
								},
								{
									"Type": "NodeText",
									"Data": "​ "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": ")："
								},
								{
									"Type": "NodeText",
									"Data": "\n用于判断输入值类型，如果类型相同，将输入值提取出来\n判断某一个变量是否是某一个类型，如果满足会将该变量存入你申明的变量中\n"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "注意，该变量是生命周期是整个函数"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
								}
							]
						},
						{
							"ID": "20231031203945-k7ckabr",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031203945-k7ckabr",
								"style": "line-height: 22px;",
								"updated": "20231031204751"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "object o = 1;\nif ( o is int i )\n{\n    print(i);\n}\n//等同于下面这个写法\n//if (o is int)\n//{\n//    int i = (int)o;\n//    print(i);\n//}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231031205017-5rfcv0y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031205017-5rfcv0y",
								"updated": "20240715102123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类型模式还可以用于 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "switch"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"ID": "20231031205059-cxubjgp",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031205059-cxubjgp",
								"style": "line-height: 22px;",
								"updated": "20231031205312"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "object o = 1;\nswitch (o)\n{\n    case int value:\n        print(\"int: \" + value);\n        break;\n    case float value:\n        print(\"float: \" + value);\n        break;\n    case null:\n        print(\"null\");\n        break;\n    default:\n        break;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231031203604-baczett",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20231031203604-baczett",
						"updated": "20240715102134"
					},
					"Children": [
						{
							"ID": "20231031203604-bo3powr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231031203604-bo3powr",
								"updated": "20231031205344"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "var模式："
								},
								{
									"Type": "NodeText",
									"Data": "\n用于将输入值放入与输入值相同类型的新变量中，相当于是将变量装入一个和自己类型一样的变量中"
								}
							]
						},
						{
							"ID": "20231031204953-dmbc2ft",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231031204953-dmbc2ft",
								"style": "line-height: 22px;",
								"updated": "20231031205540"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "object o = 1;\nif (o is var v)\n{\n    print(o);\n    print(v);\n}\n//实际就等同于var v = o\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231101194557-fpvn1ir",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101194557-fpvn1ir",
								"updated": "20240715102134"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "var"
								},
								{
									"Type": "NodeText",
									"Data": "​ 模式可以用于让一个变量装载一个不确定类型的返回值，由编译器帮我们判断是何种类型，且该过程可以写入一句表达式内，以缩减代码行数"
								}
							]
						},
						{
							"ID": "20231101194546-um4i81w",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231101194546-um4i81w",
								"style": "line-height: 22px;",
								"updated": "20231101194840"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "int GetInt()\n{\n    return 1;\n}\n\nif (o is var v)\n{\n    print(v);\n}\n//旧写法\nint kk = GetInt();\nif (kk \u003e= 0 \u0026\u0026 kk \u003c= 10) { }\n//新写法，这里旧省略了kk这个中间变量，这里还省略了类型转换，由编译器直接帮我们判断这个函数返回的是何种类型，并将该过程直接并入表达式内\nif (GetInt() is var k \u0026\u0026 k \u003e= 0 \u0026\u0026 k \u003c= 10) { }\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231031203624-z5pocm9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231031203624-z5pocm9"
			}
		}
	]
}