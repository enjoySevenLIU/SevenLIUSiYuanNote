{
	"ID": "20231101181120-vw7ghae",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20231101181120-vw7ghae",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231101181120-vw7ghae\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231101182601-or3cnvj\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231101200227-ihbz0lg\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20231101184337-ufk8kbd\u0026quot;,\u0026quot;focusStart\u0026quot;:64,\u0026quot;focusEnd\u0026quot;:64\u0026#125;",
		"title": "CS5L10——CSharp 8 功能和语法",
		"type": "doc",
		"updated": "20250228080008"
	},
	"Children": [
		{
			"ID": "20231101182601-or3cnvj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231101182601-or3cnvj",
				"updated": "20241210084719"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C# 8 对应的 Unity 版本"
				}
			]
		},
		{
			"ID": "20231101182612-11pdov7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101182612-11pdov7",
				"updated": "20231101182625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Unity 2020.3 —— C# 8\n但是部分新内容还不在该版本Unity中被支持，这里筛选了一些比较实用的内容给大家讲解"
				}
			]
		},
		{
			"ID": "20231101193215-kyg5scx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231101193215-kyg5scx",
				"updated": "20241210084452"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20231101193219-m0ry4gb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231101193219-m0ry4gb",
				"style": "line-height: 22px;",
				"updated": "20241210084452"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using            //using()语法的简写，当上层语句块执行完毕时会调用对象的Dispose()方法，以释放对象\n??=              //空合并赋值运算符，当左侧变量为空时会把右侧值赋值给变量\nDeconstruct()    //类的解构函数，用于将类的不同的成员变量拆分到不同的临时变量中\nwhen             //when可以用于模式匹配里switch表达式内，添加更多的判断条件\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231101181120-gselhc7",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20231101181120-gselhc7",
				"updated": "20241210084525"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBackslashContent",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 8 的新增功能和语法"
				}
			]
		},
		{
			"ID": "20231101182440-f4movic",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231101182440-f4movic",
				"updated": "20240715102222"
			},
			"Children": [
				{
					"ID": "20231101182445-34guicj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231101182445-34guicj",
						"updated": "20240715102219"
					},
					"Children": [
						{
							"ID": "20231101182445-dnx43qp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101182445-dnx43qp",
								"updated": "20240715102219"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Using"
								},
								{
									"Type": "NodeText",
									"Data": "​ 声明"
								}
							]
						}
					]
				},
				{
					"ID": "20231101182445-x1whtxy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231101182445-x1whtxy",
						"updated": "20231101182445"
					},
					"Children": [
						{
							"ID": "20231101182445-zboxpi6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101182445-zboxpi6",
								"updated": "20231101182445"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态本地函数"
								}
							]
						}
					]
				},
				{
					"ID": "20231101182445-hwnmjr7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20231101182445-hwnmjr7",
						"updated": "20240715102218"
					},
					"Children": [
						{
							"ID": "20231101182445-ogton64",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101182445-ogton64",
								"updated": "20240715102218"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Null"
								},
								{
									"Type": "NodeText",
									"Data": "​ 合并赋值"
								}
							]
						}
					]
				},
				{
					"ID": "20231101182445-0tktfk7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20231101182445-0tktfk7",
						"updated": "20240715102222"
					},
					"Children": [
						{
							"ID": "20231101182445-gdpik89",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101182445-gdpik89",
								"updated": "20240715102222"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "解构函数 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Deconstruct"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20231101182445-fixrsbl",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20231101182445-fixrsbl",
						"updated": "20231101182445"
					},
					"Children": [
						{
							"ID": "20231101182445-28oaoxk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101182445-28oaoxk",
								"updated": "20231101182445"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "模式匹配增强功能"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231101182503-edexcby",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231101182503-edexcby",
				"updated": "20241210084525"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态本地函数"
				}
			]
		},
		{
			"ID": "20231101182446-owkulg0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101182446-owkulg0",
				"updated": "20231101182551"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "知识回顾：在C# 7的新语法中我们学习了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20231031184213-sxfcgv0",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "本地函数"
				}
			]
		},
		{
			"ID": "20241210084512-p1hnfle",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241210084512-p1hnfle",
				"updated": "20241210084512"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本地函数知识回顾：\n"
				}
			]
		},
		{
			"ID": "20241210084459-e3o9tv7",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241210084459-e3o9tv7",
				"updated": "20241210084512"
			},
			"Children": [
				{
					"ID": "20241210084512-a2petvc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241210084512-a2petvc",
						"updated": "20241210084512"
					},
					"Children": [
						{
							"ID": "20241210084512-2gghtu8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210084512-2gghtu8",
								"updated": "20241210084512"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "基本概念："
								},
								{
									"Type": "NodeText",
									"Data": "在函数内部声明一个临时函数\n"
								}
							]
						}
					]
				},
				{
					"ID": "20241210084513-6v37utc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241210084513-6v37utc",
						"updated": "20241210084513"
					},
					"Children": [
						{
							"ID": "20241210084513-ame3cmb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210084513-ame3cmb",
								"updated": "20241210084513"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "注意："
								},
								{
									"Type": "NodeText",
									"Data": "本地函数只能在声明该函数的函数内部使用，本地函数可以使用声明自己的函数中的变量\n"
								}
							]
						}
					]
				},
				{
					"ID": "20241210084514-vvdqp97",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241210084514-vvdqp97",
						"updated": "20241210084514"
					},
					"Children": [
						{
							"ID": "20241210084514-7szz6il",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210084514-7szz6il",
								"updated": "20241210084514"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "作用："
								},
								{
									"Type": "NodeText",
									"Data": "方便逻辑的封装\n"
								}
							]
						}
					]
				},
				{
					"ID": "20241210084517-pio4p1t",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241210084517-pio4p1t",
						"updated": "20241210084517"
					},
					"Children": [
						{
							"ID": "20241210084517-2uhgfct",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210084517-2uhgfct",
								"updated": "20241210084517"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "建议："
								},
								{
									"Type": "NodeText",
									"Data": "把本地函数写在主要逻辑的后面，方便代码的查看"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231101182551-uu8wwpc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101182551-uu8wwpc",
				"updated": "20240715102227"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "新知识点：\n静态本地函数就是在本地函数前方加入静态关键字 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "static"
				},
				{
					"Type": "NodeText",
					"Data": "​\n它的作用就是让本地函数不能够使用访问封闭范围内（也就是上层方法中）的任何变量"
				}
			]
		},
		{
			"ID": "20241210084525-1lhtrzg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241210084525-1lhtrzg",
				"updated": "20241210084525"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "作用："
				},
				{
					"Type": "NodeText",
					"Data": "让本地函数只能处理逻辑，避免让它通过直接改变上层变量来处理逻辑造成逻辑混乱"
				}
			]
		},
		{
			"ID": "20231101182737-32l8690",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231101182737-32l8690",
				"style": "line-height: 22px;",
				"updated": "20240312133642"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    print(CalcInfo(10));\n}\n\npublic int CalcInfo(int i)\n{\n    bool b = false;\n    i += 10;\n    Calc();\n    StaticCalc(ref i, ref b);\n    return i;\n    //这是静态本地函数，它不能直接使用上次函数的变量，这种限制的添加是为了防止本地函数改变上次函数变量导致的逻辑混乱\n    static void StaticCalc(ref int num, ref bool isRight)\n    {\n        num += 10;\n        isRight = true;\n    }\n    //这是非静态的本地函数，这种本地函数可以直接使用上层函数的变量\n    void Calc()\n    {\n        i += 10;\n        b = true;\n    }\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231101183353-yqch9e2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231101183353-yqch9e2",
				"name": "using",
				"updated": "20250228080008"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "using 声明"
				}
			]
		},
		{
			"ID": "20231101183426-h5bgd25",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101183426-h5bgd25",
				"updated": "20241210084535"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "知识回顾：在数据持久化 xml 相关知识当中，我们学习了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230715235537-845my7h",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "using相关的知识点"
				}
			]
		},
		{
			"ID": "20231101183358-w1kp9tq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231101183358-w1kp9tq",
				"style": "line-height: 22px;",
				"updated": "20231101183628"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using (对象声明)\n{\n    //使用对象，语句块结束后 对象将被释放掉\n    //当语句块结束 会自动帮助我们调用 对象的 Dispose这个方法 让其进行销毁\n    //using一般都是配合 内存占用比较大 或者 有读写操作时 进行使用的\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231101183740-zf5vm0l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101183740-zf5vm0l",
				"updated": "20231101183918"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "举例："
				}
			]
		},
		{
			"ID": "20231101183918-mpoiu6n",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231101183918-mpoiu6n",
				"style": "line-height: 22px;",
				"updated": "20231101183959"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using (StreamWriter stream = new StreamWriter(\"文件路径\"))\n{\n    stream.Write(true);\n    stream.Write(1.2f);\n    stream.Flush();\n    stream.Close();\n}\n//语句块接收执行时，会调用对象的Dispose方法，以释放对象\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231101184014-hnrm8sq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101184014-hnrm8sq",
				"updated": "20241210084542"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "新知识点："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Using"
				},
				{
					"Type": "NodeText",
					"Data": "​ 声明就是对 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "using()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语法的简写，当函数执行完毕时会调用对象的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dispose"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法，释放对象"
				}
			]
		},
		{
			"ID": "20231101184114-hi9777m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231101184114-hi9777m",
				"style": "line-height: 22px;",
				"updated": "20231101184655"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    using StreamWriter stream = new StreamWriter(\"文件路径\");\n    stream.Write(true);\n    stream.Write(1.2f);\n    stream.Flush();\n    stream.Close();\n    //利用这个写法 就会在上层语句块执行结束时释放该对象\n}   //到这里对象就释放了\n\n//之所以说是上层语句块，是因为类似于写在if语句块里的using声明，申明的对象在if语句块结束后也会释放\nvoid Test()\n{\n    if (true)\n    {\n        using StreamWriter stream = new StreamWriter(\"文件路径\");\n        stream.Write(1.2f);\n        stream.Flush();\n        stream.Close();\n    }\n    //到这里对象就释放了\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231101184337-ufk8kbd",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20231101184337-ufk8kbd",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);",
				"updated": "20250228080008"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20250228080008-kv3ra5o",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20250228080008-kv3ra5o",
						"updated": "20250228080024"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意：在使用 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "using"
						},
						{
							"Type": "NodeText",
							"Data": "​ 语法时，声明的对象必须继承 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "System.IDisposable"
						},
						{
							"Type": "NodeText",
							"Data": "​ 接口，因为必须具备"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "Dispose"
						},
						{
							"Type": "NodeText",
							"Data": "​方法，当声明没有继承该接口的对象时会报错"
						}
					]
				}
			]
		},
		{
			"ID": "20231101184726-gahinsq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231101184726-gahinsq",
				"style": "line-height: 22px;",
				"updated": "20231101185150"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System;\nusing UnityEngine;\n\npublic class TestUsing : IDisposable\n{\n    public void Dispose()\n    {\n        //在这里写释放对象的逻辑\n    }\n}\n\npublic class Lesson10 : MonoBehaviour\n{\n    void Start()\n    {\n        using TestUsing t = new TestUsing();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231101185208-9x8g45o",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231101185208-9x8g45o",
				"name": "??=",
				"updated": "20241210084556"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Null 合并赋值"
				}
			]
		},
		{
			"ID": "20231101185218-j7q5lw7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101185218-j7q5lw7",
				"updated": "20241210084556"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "知识回顾：在C#进阶的特殊语法知识点中我们学习了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "??"
				},
				{
					"Type": "NodeText",
					"Data": "​ 空合并操作符\n回顾空合并操作符知识点 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "左边值 ?? 右边值"
				},
				{
					"Type": "NodeText",
					"Data": "​\n如果左边值为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 就返回右边值，否则返回左边值，只要是可以为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的类型都能用\n举例："
				}
			]
		},
		{
			"ID": "20231101185324-o6r12b4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231101185324-o6r12b4",
				"style": "line-height: 22px;",
				"updated": "20231101185333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string str = null;\nstring str2 = str ?? \"234\";\nprint(str2);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231101185517-qrpd79x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101185517-qrpd79x",
				"updated": "20241210084551"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "新知识点：\n空合并赋值是 C# 8 新加的一个运算符 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "??="
				},
				{
					"Type": "NodeText",
					"Data": "​\n类似复合运算符，即 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "左边值 ??= 右边值"
				},
				{
					"Type": "NodeText",
					"Data": "​，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "当左侧为空时才会把右侧值赋值给变量"
				},
				{
					"Type": "NodeText",
					"Data": "\n举例："
				}
			]
		},
		{
			"ID": "20231101185601-xejjg9q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231101185601-xejjg9q",
				"style": "line-height: 22px;",
				"updated": "20231101190027"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string str = null;\nstring str2 = str ?? \"234\";    //str2被\"234\"赋值，因为这里的str是null \nprint(str2);                   //输出234\n//当str为空时，str会被赋值为\"456\"，这里的str是null，因此这里会赋值\nstr ??= \"456\";\nprint(str);                    //输出456\n//当str为空时，str会被赋值为\"1111\"，这里的str是456，而不是null，因此这里不会赋值\nstr ??= \"1111\";\nprint(str);                    //输出456\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231101185815-qffr0yn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101185815-qffr0yn",
				"updated": "20231101185914"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "注意：由于左侧为空才会将右侧赋值给左侧变量，所以不为空的变量不会改变"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20231101185909-l66s8pw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231101185909-l66s8pw",
				"style": "line-height: 22px;",
				"updated": "20231101190503"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//str2 = str ?? \"234\"就等价于下面的代码\nif (str != null)\n    str2 = str\nelse\n    str2 = \"234\"\n//-----------------分割线-----------------\n//str ??= \"123\"就等价于下面的代码\nif (str == null)\n    str = \"123\"\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231101190517-o7twecw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231101190517-o7twecw",
				"name": "Deconstruct()",
				"updated": "20241210084602"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解构函数 Deconstruct()"
				}
			]
		},
		{
			"ID": "20231101190822-e2okc5n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101190822-e2okc5n",
				"updated": "20241210084602"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "知识回顾：我们之前学习过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20231031202154-zg6t59b",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "元组的解构"
				},
				{
					"Type": "NodeText",
					"Data": "，就是可以用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "单独的变量存储元组的值，相当于把多返回值元组拆分到不同的变量中"
				}
			]
		},
		{
			"ID": "20241210084602-33fg0kg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241210084602-33fg0kg",
				"updated": "20241210084602"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "举例回顾："
				}
			]
		},
		{
			"ID": "20231101190607-bmih058",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231101190607-bmih058",
				"style": "line-height: 22px;",
				"updated": "20231101191018"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    (i, f, _, s) = GetInfo();\n}\n\npublic (int, float, bool, string) GetInfo()\n{\n    return (1, 3.4f, true, \"123\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231101190912-51i1qox",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101190912-51i1qox",
				"updated": "20240715102247"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "新知识点：解构函数 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Deconstruct()"
				},
				{
					"Type": "NodeText",
					"Data": "​ （C# 7就有了）\n我们可以在自定义类当中声明解构函数，这样我们可以将该自定义类对象利用元组的写法对其进行变量的获取\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "语法："
				},
				{
					"Type": "NodeText",
					"Data": "在类的内部申明函数 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public void Deconstruct(out 变量类型 变量名, out 变量类型 变量名.....)"
				},
				{
					"Type": "NodeText",
					"Data": "​\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "特点："
				},
				{
					"Type": "NodeText",
					"Data": "一个类中可以有多个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Deconstruct()"
				},
				{
					"Type": "NodeText",
					"Data": "​，但是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "参数数量不能相同"
				}
			]
		},
		{
			"ID": "20231101190934-7gzxzvt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231101190934-7gzxzvt",
				"style": "line-height: 22px;",
				"updated": "20231113174653"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Person\n{\n    public string name;\n    public bool sex;\n    public string number;\n    public string email;\n    //这是一个解构函数，通过外部传入参数，将自己的成员变量赋值给外部的变量\n    public void Deconstruct(out string name, out bool sex)\n    {\n        name = this.name;\n        sex = this.sex;\n    }\n    //一个类可以有多个解构函数，但是参数数量必须不同\n    public void Deconstruct(out string name, out bool sex, out string number)\n    {\n        name = this.name;\n        sex = this.sex;\n        number = this.number;\n    }\n\n    public void Deconstruct(out string name, out bool sex, out string number, out string email)\n    {\n        name = this.name;\n        sex = this.sex;\n        number = this.number;\n        email = this.email;\n    }\n}\n\npublic class Lesson10 : MonoBehaviour\n{\n    void Start()\n    {\n        Person p = new Person();\n        p.name = \"SevenL\";\n        p.sex = false;\n        p.email = \"UnityLearning@qq.com\";\n        p.number = \"12312312312\";\n        //用元组来接收来接收该类解构函数返回的多返回值，这里就调用了该类的两个参数的解构函数\n        (string name, bool sex) = p;\n        //上面的语句等价于：p.Deconstruct(out string name, out bool sex);\n        print(name);        //输出SevenL\n        print(sex);         //输出False\n  \n        string number;\n        (_, _, number) = p;\n        //上面的语句等价于：p.Deconstruct(out _, out _, out number);\n        print(number);      //输出12312312312\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231101191846-djo8zwz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101191846-djo8zwz",
				"updated": "20231101192758"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以对该对象利用元组将其具体的变量值解构出来，相当于把"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "不同的成员变量拆分到不同的临时变量中"
				}
			]
		},
		{
			"ID": "20231101192755-nsyuea2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101192755-nsyuea2",
				"updated": "20231101193051"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意，以上的解构函数声明还可以用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "lambda"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "表达式更进一步的简化"
				}
			]
		},
		{
			"ID": "20231101192857-jhbf4vd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231101192857-jhbf4vd",
				"style": "line-height: 22px;",
				"updated": "20240715102331"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Person\n{\n    public string name;\n    public bool sex;\n    public string number;\n    public string email;\n\n    public void Deconstruct(out string name, out bool sex) =\u003e (name, sex) = (this.name, this.sex);\n\n    public void Deconstruct(out string name, out bool sex, out string number)\n        =\u003e (name, sex, number) = (this.name, this.sex, this.number);\n\n    public void Deconstruct(out string name, out bool sex, out string number, out string email)\n    {\n        name = this.name;\n        sex = this.sex;\n        number = this.number;\n        email = this.email;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231101193618-xodeheu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231101193618-xodeheu",
				"updated": "20240715102441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模式匹配"
				}
			]
		},
		{
			"ID": "20231101193622-j1e1c7t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101193622-j1e1c7t",
				"updated": "20231101193719"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模式匹配（Pattern Matching），“模式匹配”是一种"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "测试表达式是否具有特定特征的方法"
				},
				{
					"Type": "NodeText",
					"Data": "\n在编程里指的是，把"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "一个不知道具体数据信息的内容，通过一些固定的语法格式来确定模式数据的具体内容的过程"
				}
			]
		},
		{
			"ID": "20231101194938-7amiv4h",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231101194938-7amiv4h",
				"updated": "20240715102441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以前学习过的模式匹配"
				}
			]
		},
		{
			"ID": "20231101193719-o0u6pbd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231101193719-o0u6pbd",
				"updated": "20231101194957"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20231031203303-6i67dxp",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "学习过的模式匹配"
				},
				{
					"Type": "NodeText",
					"Data": "回顾"
				}
			]
		},
		{
			"ID": "20231101193743-nwfxgpj",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231101193743-nwfxgpj",
				"updated": "20240715102349"
			},
			"Children": [
				{
					"ID": "20231101193747-r78x0xe",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231101193747-r78x0xe",
						"updated": "20231101194004"
					},
					"Children": [
						{
							"ID": "20231101193747-n1lallb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101193747-n1lallb",
								"updated": "20231101194004"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "常量模式 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "(is 常量)"
								},
								{
									"Type": "NodeText",
									"Data": "​："
								}
							]
						},
						{
							"ID": "20231101193830-s07va5x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101193830-s07va5x",
								"updated": "20231101193830"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于判断输入值是否等于某个值"
								}
							]
						},
						{
							"ID": "20231101193756-ag802c6",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231101193756-ag802c6",
								"style": "line-height: 22px;",
								"updated": "20231101193758"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "//我们目前学习过的模式匹配\n//1.常量模式(is 常量)：用于判断输入值是否等于某个值\nobject o = 1.5f;\nif (o is 1)\n{\n    print(\"o是1\");\n}\nif (o is null)\n{\n    print(\"o是null\");\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231101193804-0srszg9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231101193804-0srszg9",
						"updated": "20231101194003"
					},
					"Children": [
						{
							"ID": "20231101193804-qfc6soz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101193804-qfc6soz",
								"updated": "20231101194003"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类型模式 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "(is 类型 变量名"
								},
								{
									"Type": "NodeText",
									"Data": "​、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "case 类型 变量名"
								},
								{
									"Type": "NodeText",
									"Data": "​)："
								}
							]
						},
						{
							"ID": "20231101193850-2qj3ts2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101193850-2qj3ts2",
								"updated": "20231101193904"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于判断输入值类型，如果类型相同，将输入值提取出来\n"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "判断某一个变量是否是某一个类型，如果满足会将该变量存入你申明的变量中"
								}
							]
						},
						{
							"ID": "20231101193846-3dtpo2u",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231101193846-3dtpo2u",
								"style": "line-height: 22px;",
								"updated": "20231101193847"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "if (o is int i)\n{\n    print(i);\n}\nswitch (o)\n{\n    case int value:\n        print(\"int:\" + value);\n        break;\n    case float value:\n        print(\"float:\" + value);\n        break;\n    case null:\n        print(\"null\");\n        break;\n    default:\n        break;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231101193908-5kvx8pv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20231101193908-5kvx8pv",
						"updated": "20240715102349"
					},
					"Children": [
						{
							"ID": "20231101193908-1sfwzoe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101193908-1sfwzoe",
								"updated": "20240715102349"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "var"
								},
								{
									"Type": "NodeText",
									"Data": "​ 模式："
								}
							]
						},
						{
							"ID": "20231101193916-oxvvj8d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101193916-oxvvj8d",
								"updated": "20231101193925"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于将输入值放入与输入值相同类型的新变量中，相当于是将变量装入一个和自己类型一样的变量中"
								}
							]
						},
						{
							"ID": "20231101193928-qaxw14e",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231101193928-qaxw14e",
								"style": "line-height: 22px;",
								"updated": "20231101194846"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "int GetInt()\n{\n    return 1;\n}\n\nif (o is var v)\n{\n    print(v);\n}\n//旧写法\nint kk = GetInt();\nif (kk \u003e= 0 \u0026\u0026 kk \u003c= 10) { }\n//新写法，这里旧省略了kk这个中间变量，这里还省略了类型转换，由编译器直接帮我们判断这个函数返回的是何种类型，并将该过程直接并入表达式内\nif (GetInt() is var k \u0026\u0026 k \u003e= 0 \u0026\u0026 k \u003c= 10) { }\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231101194805-qh7d1n1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231101194805-qh7d1n1",
				"updated": "20241210084703"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模式匹配增强功能"
				}
			]
		},
		{
			"ID": "20231101200227-ihbz0lg",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231101200227-ihbz0lg",
				"updated": "20241210084703"
			},
			"Children": [
				{
					"ID": "20231101200228-fqaja1n",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231101200228-fqaja1n",
						"updated": "20241210084703"
					},
					"Children": [
						{
							"ID": "20231101200232-v6rzou7",
							"Type": "NodeHeading",
							"HeadingLevel": 4,
							"Properties": {
								"id": "20231101200232-v6rzou7",
								"updated": "20241210084703"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "switch 表达式"
								}
							]
						},
						{
							"ID": "20231101200232-6g03f97",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101200232-6g03f97",
								"updated": "20241210084703"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "switch"
								},
								{
									"Type": "NodeText",
									"Data": "​ 表达式是对有返回值的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "switch"
								},
								{
									"Type": "NodeText",
									"Data": "​ 语句的缩写，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "用"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code strong",
									"TextMarkTextContent": "=\u0026gt;"
								},
								{
									"Type": "NodeText",
									"Data": "​ "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "表达式符号代替"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code strong",
									"TextMarkTextContent": "case:"
								},
								{
									"Type": "NodeText",
									"Data": "​ "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "组合，用"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code strong",
									"TextMarkTextContent": "_"
								},
								{
									"Type": "NodeText",
									"Data": "​ "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "弃元符号代替"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code strong",
									"TextMarkTextContent": "default"
								},
								{
									"Type": "NodeText",
									"Data": "​\n由于其使用限制，这个表达式主要是用于 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "switch"
								},
								{
									"Type": "NodeText",
									"Data": "​ 语句当中只有一句代码用于返回值时使用\n"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "语法："
								}
							]
						},
						{
							"ID": "20231101200232-v5ck8ey",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231101200232-v5ck8ey",
								"style": "line-height: 22px;",
								"updated": "20231101200232"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "函数声明 =\u003e 变量 switch\n{\n    常量=\u003e返回值表达式,\n    常量=\u003e返回值表达式,\n    常量=\u003e返回值表达式,\n    ....\n    _ =\u003e 返回值表达式,\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231101200232-8cupikz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101200232-8cupikz",
								"updated": "20231101200232"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "举例："
								}
							]
						},
						{
							"ID": "20231101200232-byhvegh",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231101200232-byhvegh",
								"style": "line-height: 22px;",
								"updated": "20231101205802"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "using UnityEngine;\n\n//屏幕的顶角方位类型\npublic enum PosType\n{\n    Top_Left,       //左上角\n    Top_Right,      //右上角\n    Bottom_Left,    //左下角\n    Bottom_Right,   //右下角\n}\n\npublic class Lesson11 : MonoBehaviour\n{\n    //获取某个屏幕的某个顶角的坐标，旧写法\n    //public Vector2 GetPos(PosType type)\n    //{\n    //    switch (type)\n    //    {\n    //        case PosType.Top_Left:\n    //            return new Vector2(0, 0);\n    //        case PosType.Top_Right:\n    //            return new Vector2(1, 0);\n    //        case PosType.Bottom_Left:\n    //            return new Vector2(0, 1);\n    //        case PosType.Bottom_Right:\n    //            return new Vector2(1, 1);\n    //        default:\n    //            return new Vector2(0, 0);\n    //    }\n    //}\n\n    //获取某个屏幕的某个顶角的坐标，新写法，可以发现type写到了switch前面，而“case 常量:”都被缩减为了“常量 =\u003e ”\n    public Vector2 GetPos(PosType type) =\u003e type switch\n    {\n        PosType.Top_Left =\u003e new Vector2(0, 0),\n        PosType.Top_Right =\u003e new Vector2(1, 0),\n        PosType.Bottom_Left =\u003e new Vector2(0, 1),\n        PosType.Bottom_Right =\u003e new Vector2(1, 1),\n        _ =\u003e new Vector2(0, 0),\n    };\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231101200348-1ps8dcj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231101200348-1ps8dcj",
						"updated": "20240715102420"
					},
					"Children": [
						{
							"ID": "20231101200348-r6o7uio",
							"Type": "NodeHeading",
							"HeadingLevel": 4,
							"Properties": {
								"id": "20231101200348-r6o7uio",
								"updated": "20240715102420"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "属性模式"
								}
							]
						},
						{
							"ID": "20231101200330-8ndo238",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101200330-8ndo238",
								"updated": "20231101200411"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "就是在"
								},
								{
									"Type": "NodeText",
									"Data": "常量"
								},
								{
									"Type": "NodeText",
									"Data": "模式的基础上判断对象上各"
								},
								{
									"Type": "NodeText",
									"Data": "属性"
								},
								{
									"Type": "NodeText",
									"Data": "\n用法："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "变量 is {属性: 值, 属性: 值}"
								},
								{
									"Type": "NodeText",
									"Data": "​​"
								}
							]
						},
						{
							"ID": "20231101201001-8kvo8ea",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231101201001-8kvo8ea",
								"style": "line-height: 22px;",
								"updated": "20231101201024"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "using UnityEngine;\n\npublic class DiscountInfo\n{\n    public string discount;\n    public bool isDiscount;\n\n    public DiscountInfo(string discount, bool isDiscount)\n    {\n        this.discount = discount;\n        this.isDiscount = isDiscount;\n    }\n}\n\npublic class Lesson11 : MonoBehaviour\n{\n    void Start()\n    {\n        DiscountInfo info = new DiscountInfo(\"5折\", true);\n        if (info is { discount: \"5折\", isDiscount: true })\n            print(\"信息相同\");\n        //上面等同于下面这种写法\n        if (info.discount == \"5折\" \u0026\u0026 info.isDiscount == true)\n            print(\"信息相同\");\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231101201038-8503k1c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101201038-8503k1c",
								"updated": "20240715102420"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "它可以结合 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "switch"
								},
								{
									"Type": "NodeText",
									"Data": "​ 表达式使用，结合 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "switch"
								},
								{
									"Type": "NodeText",
									"Data": "​ 使用可以通过属性模式判断条件的组合"
								}
							]
						},
						{
							"ID": "20231101201107-pdzflpk",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231101201107-pdzflpk",
								"style": "line-height: 22px;",
								"updated": "20231101201709"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "using UnityEngine;\n\npublic class DiscountInfo\n{\n    public string discount;\n    public bool isDiscount;\n\n    public DiscountInfo(string discount, bool isDiscount)\n    {\n        this.discount = discount;\n        this.isDiscount = isDiscount;\n    }\n}\n\npublic class Lesson11 : MonoBehaviour\n{\n    void Start()\n    {\n        DiscountInfo info = new DiscountInfo(\"5折\", true);\n        print(GetMoney(info, 100));     //输出50\n    }\n  \n    public float GetMoney(DiscountInfo info, float money) =\u003e info switch\n    {\n        //可以利用属性模式，结合switch表达式，判断n个条件满足，较if...else if...else的写法更为简洁\n        { discount: \"5折\", isDiscount: true } =\u003e money * .5f,\n        { discount: \"6折\", isDiscount: true } =\u003e money * .6f,\n        { discount: \"7折\", isDiscount: true } =\u003e money * .7f,\n        _ =\u003e money\n    };\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231101201717-vww99jr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20231101201717-vww99jr",
						"updated": "20240715102428"
					},
					"Children": [
						{
							"ID": "20231101201717-g48w59w",
							"Type": "NodeHeading",
							"HeadingLevel": 4,
							"Properties": {
								"id": "20231101201717-g48w59w",
								"updated": "20240715102428"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "元组模式"
								}
							]
						},
						{
							"ID": "20231101201746-w3kudr1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101201746-w3kudr1",
								"updated": "20240715102423"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过刚才学习的属性模式，我们可以在 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "switch"
								},
								{
									"Type": "NodeText",
									"Data": "​ 表达式中判断多个变量同时满足再返回什么\n但是它必须是一个数据结构类对象，判断其中的变量\n而元组模式可以更简单的完成这样的功能，我们不需要声明数据结构类，可以直接利用元组进行判断"
								}
							]
						},
						{
							"ID": "20231101203239-jwe0dwt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101203239-jwe0dwt",
								"updated": "20231101203242"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "基本使用："
								}
							]
						},
						{
							"ID": "20231101201808-7ei019f",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231101201808-7ei019f",
								"style": "line-height: 22px;",
								"updated": "20231101202154"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "int ii = 10;\nbool bb = true;\nif ((ii, bb) is (10, true))\n{\n    print(\"元组的值相同\");\n}\n\n//等价于下面这两种写法\nif (ii is 10 \u0026\u0026 bb is true) \n    print(\"元组的值相同\");\nif (ii is int \u0026\u0026 ii == 10 \u0026\u0026 bb is bool \u0026\u0026 bb)\n    print(\"元组的值相同\");\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231101202758-eckwbvn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101202758-eckwbvn",
								"updated": "20240715102428"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "switch"
								},
								{
									"Type": "NodeText",
									"Data": "​ 表达式判断中判断多个变量同时满足再返回什么："
								}
							]
						},
						{
							"ID": "20231101202747-espcfbn",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231101202747-espcfbn",
								"style": "line-height: 22px;",
								"updated": "20231101205712"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "void Start()\n{\n    print(GetMoney(\"5折\", true, 200));     //输出100\n}\n\npublic float GetMoney(string discount, bool isDiscount, float money) =\u003e (discount, isDiscount) switch\n{\n    (\"5折\", true) =\u003e money * .5f,\n    (\"6折\", true) =\u003e money * .6f,\n    (\"7折\", true) =\u003e money * .7f,\n    _ =\u003e money\n};\n//上面的写法等同于下面的写法，可以发现(discount, isDiscount)被移到了switch前面，而“case 常量:”都被缩减为了“常量 =\u003e ”\n//public float GetMoney(string discount, bool isDiscount, float money)\n//{\n//    switch ((discount, isDiscount))\n//    {\n//        case (\"5折\", true):\n//            return money * .5f;\n//        case (\"6折\", true):\n//            return money * .6f;\n//        case (\"7折\", true):\n//            return money * .7f;\n//        default:\n//            return money;\n//    }\n//}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240526172323-2uvkeyr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240526172323-2uvkeyr",
								"updated": "20240526172410"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "该模式匹配可以配合 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code block-ref",
									"TextMarkBlockRefID": "20231113155817-qzeno0z",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "when"
								},
								{
									"Type": "NodeText",
									"Data": "​ 关键字来进行一定的逻辑判断"
								}
							]
						}
					]
				},
				{
					"ID": "20231101203020-pvaia9y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20231101203020-pvaia9y",
						"updated": "20240715102436"
					},
					"Children": [
						{
							"ID": "20231101203020-iejiq2y",
							"Type": "NodeHeading",
							"HeadingLevel": 4,
							"Properties": {
								"id": "20231101203020-iejiq2y",
								"updated": "20240715102436"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "位置模式"
								}
							]
						},
						{
							"ID": "20231101203444-ss067is",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101203444-ss067is",
								"updated": "20240715102432"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果自定义类中实现了"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20231101190517-o7twecw",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "解构函数"
								},
								{
									"Type": "NodeText",
									"Data": "，那么我们可以直接用对应类对象与元组进行 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "is"
								},
								{
									"Type": "NodeText",
									"Data": "​ 判断"
								}
							]
						},
						{
							"ID": "20231101203448-6ntton5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101203448-6ntton5",
								"updated": "20231101203454"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "基本使用："
								}
							]
						},
						{
							"ID": "20231101203023-3j27ced",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231101203023-3j27ced",
								"style": "line-height: 22px;",
								"updated": "20231101204237"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "using UnityEngine;\n\npublic class DiscountInfo\n{\n    public string discount;\n    public bool isDiscount;\n\n    public DiscountInfo(string discount, bool isDiscount)\n    {\n        this.discount = discount;\n        this.isDiscount = isDiscount;\n    }\n\n    public void Deconstruct(out string discount, out bool isDiscount) =\u003e (discount, isDiscount) = (this.discount, this.isDiscount);\n}\n\npublic class Lesson11 : MonoBehaviour\n{\n    void Start()\n    {\n        DiscountInfo info = new DiscountInfo(\"5折\", true);\n\n        if (info is (\"5折\", true))\n        {\n            print(\"位置模式满足条件\");\n        }\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231101204327-9q3id67",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231101204327-9q3id67",
								"updated": "20240715102436"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "同样我们也可以配合 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "switch"
								},
								{
									"Type": "NodeText",
									"Data": "​ 表达式来处理逻辑"
								}
							]
						},
						{
							"ID": "20231101204238-whd17r5",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231101204238-whd17r5",
								"style": "line-height: 22px;",
								"updated": "20231101205652"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "using UnityEngine;\n\npublic class DiscountInfo\n{\n    public string discount;\n    public bool isDiscount;\n\n    public DiscountInfo(string discount, bool isDiscount)\n    {\n        this.discount = discount;\n        this.isDiscount = isDiscount;\n    }\n\n    public void Deconstruct(out string discount, out bool isDiscount) =\u003e (discount, isDiscount) = (this.discount, this.isDiscount);\n}\n\npublic class Lesson11 : MonoBehaviour\n{\n    void Start()\n    {\n        DiscountInfo info = new DiscountInfo(\"5折\", true);\n        print(GetMoneyNum(info, 300));         //输出150\n    }\n\n    public float GetMoneyNum(DiscountInfo info, float money) =\u003e info switch\n    {\n        (\"5折\", true) =\u003e money * .5f,\n        (\"6折\", true) =\u003e money * .6f,\n        (\"7折\", true) =\u003e money * .7f,\n        _ =\u003e money\n    };\n\n    //上面的写法等同于下面的写法，可以发现info被移到了switch前面，而“case 常量:”都被缩减为了“常量 =\u003e ”\n    //public float GetMoneyNum(DiscountInfo info, float money)\n    //{\n    //    switch (info)\n    //    {\n    //        case (\"5折\", true):\n    //            return money * .5f;\n    //        case (\"6折\", true):\n    //            return money * .6f;\n    //        case (\"7折\", true):\n    //            return money * .7f;\n    //        default:\n    //            return money;\n    //    }\n    //}\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231113155817-qzeno0z",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20231113155817-qzeno0z",
						"name": "when",
						"updated": "20240715102441"
					},
					"Children": [
						{
							"ID": "20231113155817-fbwk9ui",
							"Type": "NodeHeading",
							"HeadingLevel": 4,
							"Properties": {
								"id": "20231113155817-fbwk9ui",
								"updated": "20240715102441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "when（模式匹配添加判断条件）"
								}
							]
						},
						{
							"ID": "20231113155850-0y36pi5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231113155850-0y36pi5",
								"updated": "20240715102441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "配合 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "when"
								},
								{
									"Type": "NodeText",
									"Data": "​ 关键字进行逻辑处理，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "可以添加更多的条件，以进行更细致的条件判断"
								}
							]
						},
						{
							"ID": "20231113155850-a2umkts",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231113155850-a2umkts",
								"style": "line-height: 22px;",
								"updated": "20231113155850"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public float GetMoneyAdvanceFunc(DiscountInfo info, float money) =\u003e info switch\n{\n    (string dis, bool isDis) when dis == \"5折\" \u0026\u0026 isDis =\u003e money * .5f,\n    (string dis, bool isDis) when dis == \"6折\" \u0026\u0026 isDis =\u003e money * .6f,\n    (string dis, bool isDis) when dis == \"7折\" \u0026\u0026 isDis =\u003e money * .7f,\n    //这里的条件判断就可以添加额外的条件表达式，从而进行更细致的条件判断\n    (string dis, bool isDis) when dis == \"8折\" \u0026\u0026 isDis \u0026\u0026 money \u003e 100 =\u003e money * .7f,\n    _ =\u003e money,\n};\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20231113155850-62iciiu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231113155850-62iciiu",
								"updated": "20240526172318"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "when"
								},
								{
									"Type": "NodeText",
									"Data": "​ 这个关键字不仅可以用于位置模式，还可以用于上面的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20231101201717-g48w59w",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "元组模式"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "用于添加更多的条件"
								}
							]
						},
						{
							"ID": "20231113155850-hnnuli8",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231113155850-hnnuli8",
								"style": "line-height: 22px;",
								"updated": "20231113155850"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public float GetMoney(string discount, bool isDiscount, float money) =\u003e (discount, isDiscount) switch\n{\n    //这里的条件判断就可以添加额外的条件表达式，从而进行更细致的条件判断\n    (\"5折\", true) when money \u003e 100 =\u003e money * .5f,\n    (\"6折\", true) =\u003e money * .6f,\n    (\"7折\", true) =\u003e money * .7f,\n    _ =\u003e money\n};\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240526172421-932uiec",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240526172421-932uiec"
			}
		}
	]
}