{"ID":"20240717175735-w6i6678","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240717175735-w6i6678","title":"CS2L7——ref和out","type":"doc","updated":"20241118111904"},"Children":[{"ID":"20240717175735-exk7kei","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240717175735-exk7kei","updated":"20241118111904"},"Children":[{"Type":"NodeText","Data":"学习 ref 和 out 的原因"}]},{"ID":"20240717175835-pj3hehm","Type":"NodeParagraph","Properties":{"id":"20240717175835-pj3hehm","updated":"20240717224030"},"Children":[{"Type":"NodeText","Data":"学习 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"out"},{"Type":"NodeText","Data":"​ 的原因，它们可以解决 在函数内部传入的内容 里面变了 外面没变 的问题"}]},{"ID":"20240717180002-352yfqd","Type":"NodeParagraph","Properties":{"id":"20240717180002-352yfqd","updated":"20240717224030"},"Children":[{"Type":"NodeText","Data":"首先需要知道两个概念：形参和实参"}]},{"ID":"20240717221558-q9g7w5e","Type":"NodeList","ListData":{},"Properties":{"id":"20240717221558-q9g7w5e","updated":"20240717224030"},"Children":[{"ID":"20240717221819-60fi1ct","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240717221819-60fi1ct","updated":"20240717221819"},"Children":[{"ID":"20240717221819-a2xrre2","Type":"NodeParagraph","Properties":{"id":"20240717221819-a2xrre2","updated":"20240717221829"},"Children":[{"Type":"NodeText","Data":"形式参数（形参）："},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在函数定义中声明的参数"}]}]},{"ID":"20240717221821-jqi5dw0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240717221821-jqi5dw0"},"Children":[{"ID":"20240717221821-pq1xcli","Type":"NodeParagraph","Properties":{"id":"20240717221821-pq1xcli","updated":"20240717221828"},"Children":[{"Type":"NodeText","Data":"实际参数（实参）："},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在函数调用时传递给函数的具体值或表达式"}]}]}]},{"ID":"20240717175850-15s2clh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717175850-15s2clh","style":"line-height: 22px;","updated":"20241118111808"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static void ChangeValue(int num)\t//这里的num是形参\n{\n    num = 3;\n}\n\nstatic void Main(string[] args)\n{\n    int a = 1;\n    ChangeValue(a);\t\t//这里的a是实参\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717221842-e3k0cfp","Type":"NodeParagraph","Properties":{"id":"20240717221842-e3k0cfp","updated":"20240717224030"},"Children":[{"Type":"NodeText","Data":"形参"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在函数定义中充当占位符，不占用内存空间"},{"Type":"NodeText","Data":"，表示函数在执行时将接受的值\n形参只在函数内部可见，其作用域局限在函数内部，"}]},{"ID":"20241118111855-k6tw5ox","Type":"NodeParagraph","Properties":{"id":"20241118111855-k6tw5ox","updated":"20241118111904"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在函数调用时，这些形参才会申请内存空间，它们申请的内存空间用来存储实参传递的数值"},{"Type":"NodeText","Data":"\n形参在函数执行结束后申请的内存空间就会被释放，形参释放内存空间不会影响实参"}]},{"ID":"20240717222026-ukj97pl","Type":"NodeParagraph","Properties":{"id":"20240717222026-ukj97pl","updated":"20240717224030"},"Children":[{"Type":"NodeText","Data":"实参作为函数调用的一部分，提供了函数在执行时所需的数据。\n在函数调用时，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"实参的数据就会拷贝到形参申请的内存空间内，得到数据的形参再参与到函数体的逻辑执行里"}]},{"ID":"20240717222247-vvs3csd","Type":"NodeParagraph","Properties":{"id":"20240717222247-vvs3csd","updated":"20240717224030"},"Children":[{"Type":"NodeText","Data":"因此，在函数内部修改传入的形参变量，是不能改变外部的实参的，因为两个变量不是一个存储空间"}]},{"ID":"20240717223647-dw4j9pk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717223647-dw4j9pk","style":"line-height: 22px;","updated":"20240717224030"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static void ChangeValue(int value)\n{\n\t//这里的value是形参\n    value = 3;\n}\n\nstatic void Main(string[] args)\n{\n    int a = 1;\n    ChangeValue(a);\n    Console.WriteLine(a);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717223807-16g81hw","Type":"NodeParagraph","Properties":{"id":"20240717223807-16g81hw","updated":"20240717224030"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240717223810-ban2mue","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717223810-ban2mue","style":"line-height: 22px;","updated":"20240717224030"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"1\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717223812-a5qkdcs","Type":"NodeParagraph","Properties":{"id":"20240717223812-a5qkdcs","updated":"20240717224030"},"Children":[{"Type":"NodeText","Data":"可见不用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"out"},{"Type":"NodeText","Data":"​ 并不能直接在改变函数内改变值类型的变量\n原理是 值类型的变量在传入函数时，相当于参数 = 传入变量，\n在栈空间里新开了房间并将数据拷贝给参数，因此只在函数里修改变量并不能影响原来传入的变量"}]},{"ID":"20240717222339-r1fhagw","Type":"NodeBlockquote","Properties":{"id":"20240717222339-r1fhagw","style":"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);","updated":"20240717224527"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240717222342-ox0jpvb","Type":"NodeParagraph","Properties":{"id":"20240717222342-ox0jpvb","updated":"20240717224527"},"Children":[{"Type":"NodeText","Data":"注意！以上的情况都是出现在值类型变量的，因为值类型变量在函数传递时拷贝的是变量的值。\n由于引用类型变量在函数传递时，拷贝的实际上是指向堆上对象的地址值，\n因此，在函数内修改引用类型形参变量内部数据（注意，这里只说内部数据），是可以影响到外部的实参变量的。"}]}]},{"ID":"20240717223915-tmmtuwz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717223915-tmmtuwz","style":"line-height: 22px;","updated":"20240717224030"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static void ChangeArrayValue(int[] arr)\n{\n    arr[0] = 99;\n}\n\nstatic void Main(string[] args)\n{\n    int[] arr2 = { 1, 2, 3 };\n    ChangeArrayValue(arr2);\n    Console.WriteLine(arr2[0]);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717224003-0w7nqfz","Type":"NodeParagraph","Properties":{"id":"20240717224003-0w7nqfz","updated":"20240717224030"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240717224006-ddsksp3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717224006-ddsksp3","style":"line-height: 22px;","updated":"20240717224030"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"99\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717224036-q3aqpsw","Type":"NodeParagraph","Properties":{"id":"20240717224036-q3aqpsw","updated":"20240717224057"},"Children":[{"Type":"NodeText","Data":"可见在这里，函数内将引用类型的变量改变了\n原理是，引用类型的变量传入函数时，将栈空间内的地址拷贝到参数里，指向了堆空间内同一个数据，\n因此在函数内修改了参数，同样会修改堆空间内的数据，因此函数外的变量也会改变"}]},{"ID":"20240717224108-cw8d90f","Type":"NodeParagraph","Properties":{"id":"20240717224108-cw8d90f","updated":"20240717224831"},"Children":[{"Type":"NodeText","Data":"不过，虽然引用类型变量在函数传递时，函数内部修改引用类型内部数据会影响到外部变量\n但是"},{"Type":"NodeTextMark","TextMarkType":"u","TextMarkTextContent":"形参和实参本质上是两块内存空间存储相同的地址"},{"Type":"NodeText","Data":"，\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"因此，如果形参引用的对象被修改了（例如为形参赋值一个新的实例化一个对象），这个改动是影响不到外部实参的"}]},{"ID":"20240717224701-qwccrku","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717224701-qwccrku","style":"line-height: 22px;","updated":"20240717224753"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static void ChangeArrayValue(int[] arr)\n{\n    arr[0] = 99;\n}\n\nstatic void ChangeArray(int[] arr)\n{\n    //相当于重新申明一个数组\n    arr = new int[] { 10, 20, 30 };\n}\n\nstatic void Main(string[] args)\n{\n    int[] arr2 = { 1, 2, 3 };\n    ChangeArrayValue(arr2);\n    Console.WriteLine(arr2[0]);\n    ChangeArray(arr2);\n    Console.WriteLine(arr2[0]);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717224736-j09qk1c","Type":"NodeParagraph","Properties":{"id":"20240717224736-j09qk1c","updated":"20240717224738"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240717224739-bqzge2e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717224739-bqzge2e","style":"line-height: 22px;","updated":"20240717224740"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"99\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717224841-3a4jxuz","Type":"NodeParagraph","Properties":{"id":"20240717224841-3a4jxuz","updated":"20240717224936"},"Children":[{"Type":"NodeText","Data":"可见，这里外面的值并没有改变，\n原理是在函数内参数在堆空间新开了一个数据区，此时参数的地址就与改变了，\n与传入参数无关，因此修改参数数据不再能函数外的变量。"}]},{"ID":"20240717175814-kc7hp52","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240717175814-kc7hp52","updated":"20240717230326"},"Children":[{"Type":"NodeText","Data":"ref 和 out 的使用"}]},{"ID":"20240717225306-m3b5272","Type":"NodeParagraph","Properties":{"id":"20240717225306-m3b5272","updated":"20240717225853"},"Children":[{"Type":"NodeText","Data":"它们是函数参数的修饰符，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"当传入的形参在函数内部修改时，或者引用类型参数在内部重新申明时，外部的实参值会发生变化"}]},{"ID":"20240717225537-92bewem","Type":"NodeParagraph","Properties":{"id":"20240717225537-92bewem","updated":"20240717230130"},"Children":[{"Type":"NodeText","Data":"对于 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"out"},{"Type":"NodeText","Data":"​ 修饰的参数，外部调用函数传入值时，前面也需要加上 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"out"},{"Type":"NodeText","Data":"​，以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref"},{"Type":"NodeText","Data":"​ 为例："}]},{"ID":"20240717225331-vttp541","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717225331-vttp541","style":"line-height: 22px;","updated":"20240717225749"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static void ChangeValueRef(ref int value)\n{\n    value = 3;\n}\n\nstatic void Main(string[] args)\n{\n    int a = 1;\n    ChangeValueRef(ref a);  //注意，这里的第一个参数也需要加上ref修饰\n    Console.WriteLine(a);   //a出现了变化\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717225748-co09s43","Type":"NodeParagraph","Properties":{"id":"20240717225748-co09s43","updated":"20240717225753"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240717225754-m60883z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717225754-m60883z","style":"line-height: 22px;","updated":"20240717225809"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"3"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717225822-5rx0m3b","Type":"NodeParagraph","Properties":{"id":"20240717225822-5rx0m3b","updated":"20240717225840"},"Children":[{"Type":"NodeText","Data":"可见，函数内部修改的形参的值，外部的实参也会变化"}]},{"ID":"20240717225856-hq8k09m","Type":"NodeParagraph","Properties":{"id":"20240717225856-hq8k09m","updated":"20240717230025"},"Children":[{"Type":"NodeText","Data":"对于引用类型变量，效果也是一样的："}]},{"ID":"20240717225909-35a1o2y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717225909-35a1o2y","style":"line-height: 22px;","updated":"20240717230007"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static void ChangeArrayRef(ref int[] arr)\n{\n    //相当于重新申明一个数组\n    arr = new int[] { 10, 20, 30 };\n}\n\nstatic void Main(string[] args)\n{\n    int[] arr2 = { 1, 2, 3 };\n    ChangeArrayRef(ref arr2);\n    Console.WriteLine(arr2[0]);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717230009-94rzuuw","Type":"NodeParagraph","Properties":{"id":"20240717230009-94rzuuw","updated":"20240717230011"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240717230012-zvau46j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717230012-zvau46j","style":"line-height: 22px;","updated":"20240717230018"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"10\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717230044-0k9evrk","Type":"NodeParagraph","Properties":{"id":"20240717230044-0k9evrk","updated":"20240717230112"},"Children":[{"Type":"NodeText","Data":"可见即便是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"new"},{"Type":"NodeText","Data":"​（让内部形参指向新的对象），外部的实参变量依然会被改变"}]},{"ID":"20240717230114-pn2w6zh","Type":"NodeParagraph","Properties":{"id":"20240717230114-pn2w6zh","updated":"20240717230243"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"out"},{"Type":"NodeText","Data":"​ 的作用和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref"},{"Type":"NodeText","Data":"​ 几乎是一致的："}]},{"ID":"20240717230155-u56fobx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717230155-u56fobx","style":"line-height: 22px;","updated":"20240717230255"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static void ChangeValueOut(out int value)\n{\n    value = 3;\n}\n\nstatic void ChangeArrayOut(out int[] arr)\n{\n    //相当于重新申明一个数组\n    arr = new int[] { 10, 20, 30 };\n}\n\nstatic void Main(string[] args)\n{\n    int a = 1;\n    int[] arr2 = new int[] { 1, 2, 3 };\n\n    ChangeValueOut(out a);  //注意,一个参数前如果使用了out，则填入该参数的变量前必须加out\n    Console.WriteLine(a);\n    ChangeArrayOut(out arr2);\n    Console.WriteLine(arr2[0]);\n    //效果与ref差不多\n    //ref和out类似与将传入变量直接进入函数而不赋值给临时变量，因此在函数内修改变量对外部变量有效\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717230255-6aeark1","Type":"NodeParagraph","Properties":{"id":"20240717230255-6aeark1","updated":"20240717230258"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240717230258-0va4eu3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240717230258-0va4eu3","style":"line-height: 22px;","updated":"20240717230303"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"3\n10\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240717230306-ez8uua6","Type":"NodeParagraph","Properties":{"id":"20240717230306-ez8uua6","updated":"20240717230326"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"out"},{"Type":"NodeText","Data":"​ 类似与将传入变量直接进入函数而不赋值给临时变量，因此在函数内修改变量对外部变量有效"}]},{"ID":"20240717175823-gwdfje5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240717175823-gwdfje5","updated":"20240717231442"},"Children":[{"Type":"NodeText","Data":"ref 和 out 的区别"}]},{"ID":"20240717225436-51vssr5","Type":"NodeList","ListData":{},"Properties":{"id":"20240717225436-51vssr5","updated":"20240717231418"},"Children":[{"ID":"20240717231355-ggfkg2r","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240717231355-ggfkg2r","updated":"20240717231413"},"Children":[{"ID":"20240717231355-lq4yjfq","Type":"NodeParagraph","Properties":{"id":"20240717231355-lq4yjfq","updated":"20240717231413"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref"},{"Type":"NodeText","Data":"​ 传入的变量必须初始化，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"out"},{"Type":"NodeText","Data":"​ 不需要"}]}]},{"ID":"20240717231356-ctd9yy0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240717231356-ctd9yy0","updated":"20240717231418"},"Children":[{"ID":"20240717231356-a4lju1o","Type":"NodeParagraph","Properties":{"id":"20240717231356-a4lju1o","updated":"20240717231418"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"out"},{"Type":"NodeText","Data":"​ 传入的变量必须在函数内部赋值，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref"},{"Type":"NodeText","Data":"​ 不需要"}]}]}]},{"ID":"20240717231359-1uz4hwm","Type":"NodeParagraph","Properties":{"id":"20240717231359-1uz4hwm","updated":"20240717231438"},"Children":[{"Type":"NodeText","Data":"总之 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"out"},{"Type":"NodeText","Data":"​ 的变量都会被赋值过"}]},{"ID":"20240717231438-l0zsbnl","Type":"NodeList","ListData":{},"Properties":{"id":"20240717231438-l0zsbnl","updated":"20240717231441"},"Children":[{"ID":"20240717231438-oslyqp2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240717231438-oslyqp2","updated":"20240717231441"},"Children":[{"ID":"20240717231438-2vnp6co","Type":"NodeParagraph","Properties":{"id":"20240717231438-2vnp6co","updated":"20240717231441"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref"},{"Type":"NodeText","Data":"​ 传入的变量必须初始化 但是在内部可改可不改"}]}]},{"ID":"20240717231439-en3dko0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240717231439-en3dko0"},"Children":[{"ID":"20240717231439-lbsg2m9","Type":"NodeParagraph","Properties":{"id":"20240717231439-lbsg2m9"},"Children":[{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"out"},{"Type":"NodeText","Data":"​ 传入的变量不用初始化 但是在内部必须修改该值或者赋值（因为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"out"},{"Type":"NodeText","Data":"​ 的参数默认没有初始化）"}]}]}]},{"ID":"20240717231442-uni9arl","Type":"NodeParagraph","Properties":{"id":"20240717231442-uni9arl"}}]}