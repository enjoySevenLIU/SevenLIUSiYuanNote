{
	"ID": "20240720221741-bsl0nh5",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240720221741-bsl0nh5",
		"title": "CS2L11——复杂数据类型—结构体",
		"type": "doc",
		"updated": "20240720224644"
	},
	"Children": [
		{
			"ID": "20240720221741-k8e9r38",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240720221741-k8e9r38",
				"name": "struct",
				"updated": "20240720224636"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结构体"
				}
			]
		},
		{
			"ID": "20240720221804-vhkbq35",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720221804-vhkbq35",
				"updated": "20240720221811"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结构体是一种自定义变量类型 类似与枚举可以自定义\n结构体是数据和函数的集合，在结构体中可以申明各种变量和方法"
				}
			]
		},
		{
			"ID": "20240720221804-jbzdj0s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720221804-jbzdj0s",
				"updated": "20240720221846"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用：用来表现 存在关系的数据 集合 比如用结构体表现 学生 动物 人类 等"
				}
			]
		},
		{
			"ID": "20240720221812-yudcbbc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240720221812-yudcbbc",
				"updated": "20240720224636"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结构体声明语法"
				}
			]
		},
		{
			"ID": "20240720221856-cu5gxpa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720221856-cu5gxpa",
				"updated": "20240720222005"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结构体 一般写在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "namespace"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语句块中，关键字是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "struct"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240720221909-tpfuyft",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240720221909-tpfuyft",
				"style": "line-height: 22px;",
				"updated": "20240720222002"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "struct 自定义结构体名\n{\n    第一部分 变量\n    第二部分 构造函数\n    第三部分 函数\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240720221859-s3i2zdm",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240720221859-s3i2zdm",
				"updated": "20240720222224"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240720221859-y7rv3rs",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240720221859-y7rv3rs",
						"updated": "20240720222224"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！结构体名字 我们的规范 是 帕斯卡命名法"
						}
					]
				}
			]
		},
		{
			"ID": "20240720222339-vsaa4dr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720222339-vsaa4dr",
				"updated": "20240720224335"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "声明一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Student"
				},
				{
					"Type": "NodeText",
					"Data": "​ 结构体，其中可以声明一系列变量、构造函数（方法）、函数（方法）\n结构体内部的方法可以调用结构体内部声明的成员变量和成员方法"
				}
			]
		},
		{
			"ID": "20240720224235-lhskgqv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720224235-lhskgqv",
				"updated": "20240720224537"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是 访问修饰符，和结构体同名且不写返回值类型的方法 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Student()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是构造函数（方法）"
				}
			]
		},
		{
			"ID": "20240720224400-4ticvof",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720224400-4ticvof",
				"updated": "20240720224430"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结构体内部的成员变量不能直接初始化！！！\n变量类型可以写任意类型，包括其他结构体，但是不能是自己的结构体！"
				}
			]
		},
		{
			"ID": "20240720224500-ay5janq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720224500-ay5janq",
				"updated": "20240720224636"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结构体内部的方法目前不加 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "static"
				},
				{
					"Type": "NodeText",
					"Data": "​ 关键字，这样才能通过结构体变量调用方法"
				}
			]
		},
		{
			"ID": "20240720222156-l6cl957",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240720222156-l6cl957",
				"style": "line-height: 22px;",
				"updated": "20240720224541"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace lesson12\n{\n    struct Student\n    {\n        //结构体成员变量，其中public是访问修饰符\n\t\t//注意 在结构体中申明的变量不能直接初始化！！！\n\t\t//变量类型 可以写任意类型 包括结构体 但是不能是自己的结构体！\n        public int age;\n        public bool sex;\n        public int number;\n        public string name;\n\n        //构造函数\n        public Student(int age, bool sex, int number, string name)\n        {\n            //新的关键字 this\n            //代表结构体自己\n            this.age = age;\n            this.sex = sex;\n            this.number = number;\n            this.name = name;\n        }\n\n        //结构体成员函数，其中public是访问修饰符\n\t\t//结构体的函数方法一般是表现这个数据结构的行为\n\t\t//注意 在结构体的方法 目前不需要加static关键字！！！\n        public void Speak()\n        {\n            //在函数中可以直接用结构体内部申明的变量\n            Console.WriteLine(\"我的名字是{0}，我今年{1}岁\",name,age);\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240720223819-nqliqxq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240720223819-nqliqxq",
				"updated": "20240720224107"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结构体的使用"
				}
			]
		},
		{
			"ID": "20240720223831-0rge790",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720223831-0rge790",
				"updated": "20240720224032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "声明了结构体后，就可以 以声明出来的结构体为变量类型，声明一个对应的变量，\n通过这个变量，可以调用我们在结构体内部声明的成员变量和方法"
				}
			]
		},
		{
			"ID": "20240720224033-epemtot",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240720224033-epemtot",
				"style": "line-height: 22px;",
				"updated": "20240720224057"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace lesson12\n{\n    struct Student\n    {\n        //结构体成员变量，其中public是访问修饰符\n        public int age;\n        public bool sex;\n        public int number;\n        public string name;\n\n        //构造函数\n        public Student(int age, bool sex, int number, string name)\n        {\n            //新的关键字 this\n            //代表结构体自己\n            this.age = age;\n            this.sex = sex;\n            this.number = number;\n            this.name = name;\n        }\n\n        //结构体成员函数，其中public是访问修饰符\n        public void Speak()\n        {\n            //在函数中可以直接用结构体内部申明的变量\n            Console.WriteLine(\"我的名字是{0}，我今年{1}岁\",name,age);\n        }\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        //变量类型 变量名;\n        Student s1;\n        s1.age = 10;\n        s1.sex = false;\n        s1.number = 1;\n        s1.name = \"MrTang\";\n        s1.Speak();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240720224059-p57dyt6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720224059-p57dyt6",
				"updated": "20240720224101"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240720224101-vz39jex",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240720224101-vz39jex",
				"style": "line-height: 22px;",
				"updated": "20240720224107"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "我的名字是MrTang，我今年10岁\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240720222443-xpugjk1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240720222443-xpugjk1",
				"updated": "20240720223828"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "访问修饰符"
				}
			]
		},
		{
			"ID": "20240720222446-d9ob5st",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720222446-d9ob5st",
				"updated": "20240720223825"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上例中的变量和方法前有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": "​，这是访问修饰符，修饰结构体中变量和方法，它决定了变量或者方法是否能被外部使用"
				}
			]
		},
		{
			"ID": "20240720222626-r7s0epq",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240720222626-r7s0epq",
				"updated": "20240720223825"
			},
			"Children": [
				{
					"ID": "20240720222626-ki572gz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240720222626-ki572gz",
						"updated": "20240720222701"
					},
					"Children": [
						{
							"ID": "20240720222626-yq5w26z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240720222626-yq5w26z",
								"updated": "20240720222701"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "public"
								},
								{
									"Type": "NodeText",
									"Data": "​ 公共的 可以在结构体外部访问"
								}
							]
						}
					]
				},
				{
					"ID": "20240720222626-n1r03g8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240720222626-n1r03g8",
						"updated": "20240720222709"
					},
					"Children": [
						{
							"ID": "20240720222626-tze4sqi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240720222626-tze4sqi",
								"updated": "20240720222709"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "private"
								},
								{
									"Type": "NodeText",
									"Data": "​ 私有的 只能在结构体内部使用"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240720222620-w2c11ht",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720222620-w2c11ht",
				"updated": "20240720223825"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不写 就默认为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "private"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240720222748-o4amjiq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240720222748-o4amjiq",
				"style": "line-height: 22px;",
				"updated": "20240720223825"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "struct Test\n{\n    public int testPublic;\n    bool testPrivate1;\n    private int testPrivate2;\n\n\tpublic void TestPublicMethod()\n    {\n        //在结构体的函数中可以直接用结构体内部申明的变量或者方法。不管是public还说private的\n        Test();\n        Console.WriteLine(\"这是外部可以调用的方法，testPublic = {0}，testPrivate2 = {1}\", testPublic, testPrivate2);\n    }\n\n    private void Test()\n    {\n        Console.WriteLine(\"只能在结构体内部使用！\");\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Test t;\n        t.testPublic = 10;\n        //t.testPrivate1 = false;\t//error, 私有变量只能在结构体内部使用\n        //t.testPrivate2 = 1;\t\t//error, 私有变量只能在结构体内部使用\n        //t.Test()\t\t\t\t\t//error, 私有方法只能在结构体内部使用\n        t.TestPublicMethod();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240720222713-zoh7tfr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240720222713-zoh7tfr",
				"updated": "20240720224644"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结构体的构造函数"
				}
			]
		},
		{
			"ID": "20240720222733-2unjgdg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720222733-2unjgdg",
				"updated": "20240720224559"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "没有返回值，必须有参数，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "函数名必须与结构体名相同！！！"
				},
				{
					"Type": "NodeText",
					"Data": "\n如果申明了构造函数，那么必须在其中对结构体的所有变量数据初始化"
				}
			]
		},
		{
			"ID": "20240720223510-p68iza2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240720223510-p68iza2",
				"style": "line-height: 22px;",
				"updated": "20240720223828"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "struct Student\n{\n    public int age;\n    public bool sex;\n    public int number;\n    public string name;\n\n    public Student(int age, bool sex, int number, string name)\n    {\n        //新的关键字 this\n        //代表结构体自己\n        this.age = age;\n        this.sex = sex;\n        this.number = number;\n        this.name = name;\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Student s2 = new Student(18, true, 2, \"小红\");//使用构造函数，直接完成了初始化\n        s2.speak();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240720223639-3zebtyn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720223639-3zebtyn",
				"updated": "20240720223828"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240720223643-6z36qcw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240720223643-6z36qcw",
				"style": "line-height: 22px;",
				"updated": "20240720223828"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "我的名字是小红，我今年18岁\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240720224644-25lw2rv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240720224644-25lw2rv"
			}
		}
	]
}