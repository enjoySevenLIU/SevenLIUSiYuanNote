{
	"ID": "20230614170126-dvut1v8",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L3——变量的本质_esc_newline_date: '2023-06-14 17:01:26'_esc_newline_updated: '2024-07-01 21:57:08'_esc_newline_permalink: /post/cs1l3-the-essence-of-variables-z26in06.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_---",
		"id": "20230614170126-dvut1v8",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230614170126-dvut1v8\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230614171408-tb0rtlu\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230614172010-ebxxn1a\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230710233324-mh52q62\u0026quot;,\u0026quot;focusStart\u0026quot;:2,\u0026quot;focusEnd\u0026quot;:2\u0026#125;",
		"title": "CS1L3——变量的本质",
		"type": "doc",
		"updated": "20241020153259"
	},
	"Children": [
		{
			"ID": "20230614171408-tb0rtlu",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230614171408-tb0rtlu",
				"updated": "20241020153158"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "变量的本质"
				}
			]
		},
		{
			"ID": "20230614171417-rjvfqrp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614171417-rjvfqrp",
				"updated": "20241020153158"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "变量的本质是二进制 ——\u003e 计算机中所有数据的本质都是二进制，也就是一堆0和1\n是二进制的原因是：数据传递只能通过电信号，电信号只有开和关两种状态\n计算机中的存储单位最小为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bit"
				},
				{
					"Type": "NodeText",
					"Data": "​（位），他只能表示0和1两个数字\n1bit 就是1个数，0或者1\n为了方便数据表示，出现一个叫 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "byte"
				},
				{
					"Type": "NodeText",
					"Data": "​（字节）的单位，它是由8个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bit"
				},
				{
					"Type": "NodeText",
					"Data": "​ 组成的存储单位，所以我们一般说一个字节为8位\n为何 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int"
				},
				{
					"Type": "NodeText",
					"Data": "​ 最多表示-21亿~21亿？因为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是由4个字节，也就是32 个 0或1 表示的"
				}
			]
		},
		{
			"ID": "20230811203258-3bdiaje",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230811203258-3bdiaje",
				"updated": "20240616132114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关键字"
				}
			]
		},
		{
			"ID": "20230811203304-yl8b19f",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811203304-yl8b19f",
				"updated": "20230811203837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "sizeof()    //查看某类型所占字节数\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710233324-mh52q62",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230710233324-mh52q62",
				"updated": "20241020153259"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "变量的存储空间"
				}
			]
		},
		{
			"ID": "20230710233324-lmcxacs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230710233324-lmcxacs",
				"updated": "20240616132043"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1bit就是内存中的1和0\n1byte = 8bit\n1MB = 1024KB\n1GB = 1024MB\n1TB = 1024GB\n通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "sizeof"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法可以获取变量类型所占的内存空间（单位：字节）"
				}
			]
		},
		{
			"ID": "20230710233324-9n3a1j4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710233324-9n3a1j4",
				"style": "line-height: 22px;",
				"updated": "20240616131948"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//1、有符号的整形变量 能存储一定范围内的正负数包括0的变量类型\nConsole.WriteLine(\"sbyte所占的字节数为：\" + sizeof(sbyte));\nConsole.WriteLine(\"int所占的字节数为：\" + sizeof(int));\nConsole.WriteLine(\"short所占的字节数为：\" + sizeof(short));\nConsole.WriteLine(\"long所占的字节数为：\" + sizeof(long));\nConsole.WriteLine(\"——————————————————————————————————————\");\n//2、无符号的整型变量 能存储一定范围内0和正数的变量类型\nConsole.WriteLine(\"byte所占的字节数为：\" + sizeof(byte));\nConsole.WriteLine(\"uint所占的字节数为：\" + sizeof(uint));\nConsole.WriteLine(\"ushort所占的字节数为：\" + sizeof(ushort));\nConsole.WriteLine(\"ulong所占的字节数为：\" + sizeof(ulong));\nConsole.WriteLine(\"——————————————————————————————————————\");\n//3、浮点数（小数）\nConsole.WriteLine(\"float所占的字节数为：\" + sizeof(float));\nConsole.WriteLine(\"double所占的字节数为：\" + sizeof(double));\nConsole.WriteLine(\"decimal所占的字节数为：\" + sizeof(decimal));\nConsole.WriteLine(\"——————————————————————————————————————\");\n//4、特殊类型\nConsole.WriteLine(\"bool所占的字节数为：\" + sizeof(bool));\nConsole.WriteLine(\"char所占的字节数为：\" + sizeof(char));\nConsole.WriteLine(\"string无法确定所占的字节数\");\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616131937-j50cql6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616131937-j50cql6",
				"updated": "20240616131940"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240616131940-f3pj4wj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616131940-f3pj4wj",
				"style": "line-height: 22px;",
				"updated": "20240616131944"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "sbyte所占的字节数为：1\nint所占的字节数为：4\nshort所占的字节数为：2\nlong所占的字节数为：8\n——————————————————————————————————————\nbyte所占的字节数为：1\nuint所占的字节数为：4\nushort所占的字节数为：2\nulong所占的字节数为：8\n——————————————————————————————————————\nfloat所占的字节数为：4\ndouble所占的字节数为：8\ndecimal所占的字节数为：16\n——————————————————————————————————————\nbool所占的字节数为：1\nchar所占的字节数为：2\nstring无法确定所占的字节数\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710233324-ja7y3nh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230710233324-ja7y3nh",
				"updated": "20240616132054"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "sizeof"
				},
				{
					"Type": "NodeText",
					"Data": "​ 不能得到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "string"
				},
				{
					"Type": "NodeText",
					"Data": "​ 类型所占的内存大小\n因为字符串长度是可变的，不确定的"
				}
			]
		},
		{
			"ID": "20241020153218-1li01r1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241020153218-1li01r1",
				"updated": "20241020153259"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "char"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是 Unicode UTF-16 字符，因此是 2 字节的（通常是）"
				}
			]
		},
		{
			"ID": "20230614171948-f61ogv4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230614171948-f61ogv4",
				"updated": "20240616132114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二进制与10进制相互转换规则"
				}
			]
		},
		{
			"ID": "20230614172010-ebxxn1a",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230614172010-ebxxn1a",
				"updated": "20240616132114"
			},
			"Children": [
				{
					"ID": "20240616132103-ggf8ogh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240616132103-ggf8ogh",
						"updated": "20240616132111"
					},
					"Children": [
						{
							"ID": "20240616132103-c094uzp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616132103-c094uzp",
								"updated": "20240616132111"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "二进制转十进制：从右往左看 最右边一位为第0位，如果该位不为0，则加上2的n位次方"
								}
							]
						}
					]
				},
				{
					"ID": "20240616132106-5hqnjyr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240616132106-5hqnjyr",
						"updated": "20240616132114"
					},
					"Children": [
						{
							"ID": "20240616132106-kfp1oo0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616132106-kfp1oo0",
								"updated": "20240616132114"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "十进制转二进制：除二取余，直到不能取为止"
								}
							]
						}
					]
				}
			]
		}
	]
}