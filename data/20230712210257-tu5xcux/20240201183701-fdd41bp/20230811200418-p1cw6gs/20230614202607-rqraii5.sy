{
	"ID": "20230614202607-rqraii5",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L10——字符串拼接_esc_newline_date: '2023-06-14 20:26:07'_esc_newline_updated: '2024-07-01 22:36:10'_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_permalink: /post/cs1l10----string-stitching-13wywa.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_---",
		"id": "20230614202607-rqraii5",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230614202607-rqraii5\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230614202622-107l8l7\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230616133603-iq1w6wb\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230614202622-107l8l7\u0026quot;,\u0026quot;focusStart\u0026quot;:5,\u0026quot;focusEnd\u0026quot;:5\u0026#125;",
		"title": "CS1L10——字符串拼接",
		"type": "doc",
		"updated": "20240616134408"
	},
	"Children": [
		{
			"ID": "20230614202622-107l8l7",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230614202622-107l8l7",
				"updated": "20240616134408"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字符串拼接"
				}
			]
		},
		{
			"ID": "20230616133459-hm1tskv",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230616133459-hm1tskv",
				"updated": "20240616134408"
			},
			"Children": [
				{
					"ID": "20230616133505-9yazhiu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230616133505-9yazhiu",
						"updated": "20230616133505"
					},
					"Children": [
						{
							"ID": "20230616133505-m8s4epi",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230616133505-m8s4epi",
								"updated": "20230616133546"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第一种方法“+”"
								}
							]
						},
						{
							"ID": "20240616134303-5ia5c7d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616134303-5ia5c7d",
								"updated": "20240616134306"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "字符串拼接只有"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "\u0026quot;+\u0026quot;"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"ID": "20230616133547-wdayx5d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616133547-wdayx5d",
								"updated": "20240616134250"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "之前的算数运算符，只是用于数值类型变量进行数学运算，而"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "string"
								},
								{
									"Type": "NodeText",
									"Data": "​不存在算数计算法，但是可以"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "+"
								},
								{
									"Type": "NodeText",
									"Data": "​进行字符串拼接"
								}
							]
						},
						{
							"ID": "20230616133734-isthqk9",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616133734-isthqk9",
								"style": "line-height: 22px;",
								"updated": "20240616134224"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "string str = \"\";\nstr = \"123\";\nstr = str + \"456\";\nConsole.WriteLine(str);\nstr = str + 1;\nConsole.WriteLine(str);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616134211-4y70cg4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616134211-4y70cg4",
								"updated": "20240616134214"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616134215-g4qxuer",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616134215-g4qxuer",
								"style": "line-height: 22px;",
								"updated": "20240616134222"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "123456\n1234561\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20230616134648-d3zju05",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616134648-d3zju05",
								"updated": "20240616134256"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "复合运算符 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "+="
								},
								{
									"Type": "NodeText",
									"Data": "​ 也可以用于字符串拼接\n​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "+="
								},
								{
									"Type": "NodeText",
									"Data": "​ 字符串拼接会有一定的规则和特性：\n会先试图计算，计算遇到字符串之后全部变成字符串拼接\n一般是先计算括号内的数，再从左向右算，碰到字符串时后面的计算都会变成字符串拼接"
								}
							]
						},
						{
							"ID": "20230616134542-1jnjb69",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616134542-1jnjb69",
								"style": "line-height: 22px;",
								"updated": "20240616134234"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "//复合运算符 +=\nstr = \"123\";\nstr += \"1\" + 4 + true;  //右边会先将非字符串类型转化为字符串再拼接\nConsole.WriteLine(str);\n\nstr += 1 + 2 + 3 + 4;   //先算右边的结果，再与自己拼接\nConsole.WriteLine(str);\n\nstr += \"\" + 1 + 2 + 3 + 4; //右边开头出现字符串，非字符串类型转化为字符串再拼接\nConsole.WriteLine(str);\n\nstr = \"\";\nstr += 1 + 2 + \"\" + 3 + 4;\nConsole.WriteLine(str); //从左向右算，碰到字符串时后面的计算都会变成字符串拼接\n                        //可以通过括号先保证计算的优先级，在进行字符串拼接\nstr = \"\";\nstr += 1 + 2 + \"\" + (3 + 4);\nConsole.WriteLine(str); //先计算括号内的数，再从左向右算，碰到字符串时后面的计算都会变成字符串拼接\n\nstr = \"123\";\nstr = str + 1 + 2 + 3;\nConsole.WriteLine(str); //变量为字符串类型的与字符串同理\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616134227-584kuwa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616134227-584kuwa",
								"updated": "20240616134228"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616134229-tygbfqd",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616134229-tygbfqd",
								"style": "line-height: 22px;",
								"updated": "20240616134242"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "12314True\n12314True10\n12314True101234\n334\n37\n123123\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230616133524-xp56tn5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230616133524-xp56tn5",
						"updated": "20240616134353"
					},
					"Children": [
						{
							"ID": "20230616133524-bjdp1u3",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230616133524-bjdp1u3",
								"updated": "20240616134353"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第二种方法“format”"
								}
							]
						},
						{
							"ID": "20230616133551-lqhdzhl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616133551-lqhdzhl",
								"updated": "20240616134246"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "固定语法："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "string.Format(\u0026quot;带拼接的内容\u0026quot;,内容1,内容2,......)"
								},
								{
									"Type": "NodeText",
									"Data": "​\n想要被拼接的内容用占位符替代，{数字}，数字0~n依次往后"
								}
							]
						},
						{
							"ID": "20230616134919-5c6y5eh",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616134919-5c6y5eh",
								"style": "line-height: 22px;",
								"updated": "20240616134348"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "string str2 = string.Format(\"我是{0}，今年{1}岁，想要{2}\", \"MrKRIFE\", 20, \"学习\");\nConsole.WriteLine(str2);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616134320-dduln0c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616134320-dduln0c",
								"updated": "20240616134322"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616134323-icgg5no",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616134323-icgg5no",
								"style": "line-height: 22px;",
								"updated": "20240616134353"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "我是MrKRIFE，今年20岁，想要学习\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20230616135027-qr962l4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616135027-qr962l4",
								"updated": "20230616135037"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "注意后面的要填充的部分可以多于占位符，多余部分会丢失，但不能少于占位符，否则报错\n注意索引必须从0开始，0~n\n"
								}
							]
						}
					]
				},
				{
					"ID": "20230616135055-pmesbgb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230616135055-pmesbgb",
						"updated": "20240616134408"
					},
					"Children": [
						{
							"ID": "20230616135055-sv91yxk",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230616135055-sv91yxk",
								"updated": "20240616134408"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "控制台打印输出"
								}
							]
						},
						{
							"ID": "20230616135129-17v37od",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616135129-17v37od",
								"updated": "20230616135129"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类似于format"
								}
							]
						},
						{
							"ID": "20230616135109-39w0kgj",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616135109-39w0kgj",
								"style": "line-height: 22px;",
								"updated": "20240616134408"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Console.WriteLine(\"asdf{0}qwer{1}zxcv{2}\", 1, true, false);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616134400-w4ci0fj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616134400-w4ci0fj",
								"updated": "20240616134404"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616134404-1tvtuw8",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616134404-1tvtuw8",
								"style": "line-height: 22px;",
								"updated": "20240616134406"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "asdf1qwerTruezxcvFalse\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20230616135140-smrhj45",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616135140-smrhj45",
								"updated": "20230616135148"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "注意后面的要填充的部分可以多于占位符，多余部分会丢失，但不能少于占位符，否则报错"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230614202607-76vsda4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230614202607-76vsda4",
				"updated": "20230616133602"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本课源代码"
				}
			]
		},
		{
			"ID": "20230616133603-iq1w6wb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616133603-iq1w6wb",
				"style": "line-height: 22px;",
				"updated": "20231113174539"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace lesson10字符串拼接\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"字符串拼接\");\n            #region 第一种方法\"+\"\n            //之前的算数运算符，只是用于数值类型变量进行数学运算\n            //而string不存在算数计算法，但是可以+进行字符串拼接\n            string str = \"\";\n            str = \"123\";\n            str = str + \"456\";\n            Console.WriteLine(str);\n            str = str + 1;\n            Console.WriteLine(str);\n            //复合运算符 +=\n            str = \"123\";\n            str += \"1\" + 4 + true;  //右边会先将非字符串类型转化为字符串再拼接\n            Console.WriteLine(str);\n\n            str += 1 + 2 + 3 + 4;   //先算右边的结果，再与自己拼接\n            Console.WriteLine(str);\n\n            str += \"\" + 1 + 2 + 3 + 4;//右边开头出现字符串，非字符串类型转化为字符串再拼接\n            Console.WriteLine(str);\n\n            str = \"\";\n            str += 1 + 2 + \"\" + 3 + 4;\n            Console.WriteLine(str); //从左向右算，碰到字符串时后面的计算都会变成字符串拼接\n                                    //可以通过括号先保证计算的优先级，在进行字符串拼接\n            str = \"\";\n            str += 1 + 2 + \"\" + (3 + 4);\n            Console.WriteLine(str); //先计算括号内的数，再从左向右算，碰到字符串时后面的计算都会变成字符串拼接\n\n            str = \"123\";\n            str = str + 1 + 2 + 3;\n            Console.WriteLine(str); //变量为字符串类型的与字符串同理\n\n            //字符串拼接只有\"+\"\n            #endregion\n\n            #region 第二种方法format\n            //固定语法：string.Format(\"带拼接的内容\",内容1,内容2,......)\n            //想要被拼接的内容用占位符替代，{数字}，数字0~n依次往后\n            string str2 = string.Format(\"我是{0}，今年{1}岁，想要{2}\", \"SevenL\", 20, \"学习\");\n            Console.WriteLine(str2);\n            //注意后面的要填充的部分可以多于占位符，多余部分会丢失，但不能少于占位符，否则报错\n            //注意索引必须从0开始，0~n\n            #endregion\n\n            #region 控制台打印拼接\n            //类似与format\n            Console.WriteLine(\"asdf{0}qwer{1}zxcv{2}\",1,true,false);\n            //注意后面的要填充的部分可以多于占位符，多余部分会丢失，但不能少于占位符，否则报错\n            #endregion\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}