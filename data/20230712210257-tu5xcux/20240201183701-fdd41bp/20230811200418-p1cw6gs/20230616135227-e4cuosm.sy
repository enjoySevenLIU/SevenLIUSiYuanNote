{
	"ID": "20230616135227-e4cuosm",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L11——条件运算符_esc_newline_date: '2023-06-16 13:52:27'_esc_newline_updated: '2024-07-01 22:36:48'_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_permalink: /post/cs1l11----conditional-operator-zlja86.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_---",
		"id": "20230616135227-e4cuosm",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230616135227-e4cuosm\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230616135240-qndxnk7\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230616141640-y3kxwla\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230616135240-qndxnk7\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;",
		"title": "CS1L11——条件运算符",
		"type": "doc",
		"updated": "20240616134616"
	},
	"Children": [
		{
			"ID": "20230616135240-qndxnk7",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230616135240-qndxnk7",
				"updated": "20240616134616"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "条件运算符"
				}
			]
		},
		{
			"ID": "20230616135530-r4myp23",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616135530-r4myp23",
				"updated": "20240616134607"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bool"
				},
				{
					"Type": "NodeText",
					"Data": "​ 值，用于比较两个变量或者常量\n是否大于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​，是否等于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;"
				},
				{
					"Type": "NodeText",
					"Data": "​\n是否等于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=="
				},
				{
					"Type": "NodeText",
					"Data": "​，是否不等于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "!="
				},
				{
					"Type": "NodeText",
					"Data": "​\n是否大于等于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026gt;="
				},
				{
					"Type": "NodeText",
					"Data": "​，是否小于等于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;="
				},
				{
					"Type": "NodeText",
					"Data": "​\n条件运算符 一定存在两边的内容：左边内容 条件运算符 右边内容\n条件运算符必需要用一个变量存储或是使用，比较结果就是返回一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bool"
				},
				{
					"Type": "NodeText",
					"Data": "​ 值，如果比较条件满足就返回 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "true"
				},
				{
					"Type": "NodeText",
					"Data": "​，不满足就返回 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "false"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230616135327-0cpljeg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616135327-0cpljeg",
				"style": "line-height: 22px;",
				"updated": "20240616134419"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 5;\nint b = 10;\n\nbool result = a \u003e b;\nConsole.WriteLine(result);\n\nresult = a \u003c b;\nConsole.WriteLine(result);\n\nresult = a \u003e= b;\nConsole.WriteLine(result);\n\nresult = a \u003c= b;\nConsole.WriteLine(result);\n\nresult = a == b;\nConsole.WriteLine(result);\n\nresult = a != b;\nConsole.WriteLine(result);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616134419-5sv1zj1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616134419-5sv1zj1",
				"updated": "20240616134421"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240616134421-69k3pnh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616134421-69k3pnh",
				"style": "line-height: 22px;",
				"updated": "20240616134432"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "False\nTrue\nFalse\nTrue\nFalse\nTrue\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616135705-t45y7x5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230616135705-t45y7x5",
				"updated": "20240616134616"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "各种应用写法"
				}
			]
		},
		{
			"ID": "20230616135726-n7vexg9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616135726-n7vexg9",
				"updated": "20230616135746"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 变量与变量比较\nresult = a \u003c b;\n// 变量与数值（常量）比较\nresult = a \u003c 10;\nresult = b \u003e 5;\n// 数值与数值比较\nresult = 5 \u003e 3;\nresult = 5 == 3;\nresult = 5 != 2;\n// 计算结果比较\n// 条件运算符的优先级低于算数运算符\n// 因此会先计算再比较\nresult = a + 3 \u003e a - 2 - 3;\nresult = 3 + 3 \u003c 5 - 1;\n// 左边内容 条件运算符 右边内容，左右边内容都可变\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616135839-ag3e2tx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616135839-ag3e2tx",
				"updated": "20230616140117"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "条件运算符的优先级低于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230614201043-5eumkn7",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "算数运算符"
				},
				{
					"Type": "NodeText",
					"Data": "，因此会先计算再比较"
				}
			]
		},
		{
			"ID": "20230616135756-fgppwj2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230616135756-fgppwj2",
				"updated": "20240616134616"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不能进行范围比较"
				}
			]
		},
		{
			"ID": "20230616135227-hj8mz3p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616135227-hj8mz3p",
				"updated": "20230616141518"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在C#，判断是否在两个值之间不可以用类似于 1 \u003c a \u003c 2，这种写法\n判断一个变量是否在两个值之间，要使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230616141416-s2uhav6",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "逻辑运算符"
				}
			]
		},
		{
			"ID": "20230616135903-aw3i4uw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230616135903-aw3i4uw",
				"updated": "20240616134616"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不同类型之间的比较"
				}
			]
		},
		{
			"ID": "20230616135924-po0k7xh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616135924-po0k7xh",
				"updated": "20240616134526"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不同数值类型之间可以随意的进行条件比较\n但是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "decimal"
				},
				{
					"Type": "NodeText",
					"Data": "​ 与 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "float"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "double"
				},
				{
					"Type": "NodeText",
					"Data": "​ 都不能直接进行比较"
				}
			]
		},
		{
			"ID": "20230616135944-pc5sxq3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616135944-pc5sxq3",
				"updated": "20230616135958"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int i = 5;\nfloat f = 1.2f;\nushort us = 3;\ndecimal de = 2.4m;\n\nresult = i \u003e f;\nresult = de \u003c us;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616140013-b05wh8l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616140013-b05wh8l",
				"updated": "20240616134510"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "string"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bool"
				},
				{
					"Type": "NodeText",
					"Data": "​ 只能同类型 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=="
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "!="
				},
				{
					"Type": "NodeText",
					"Data": "​ 比较"
				}
			]
		},
		{
			"ID": "20230616140000-4wmcy7o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616140000-4wmcy7o",
				"updated": "20230616140034"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string str = \"234\";\nchar c = 'A';\nbool bo = true;\n\nresult = str == \"123\";\nresult = str != \"123\";\n\nresult = c == 'B';\n\nresult = bo == false;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616140054-q0ec9uw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616140054-q0ec9uw",
				"updated": "20240616134454"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "char"
				},
				{
					"Type": "NodeText",
					"Data": "​ 不仅可以和自己类型进行 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=="
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "!="
				},
				{
					"Type": "NodeText",
					"Data": "​ 比较,还可以和数值类型比较\n还可以和字符类型进行比较"
				}
			]
		},
		{
			"ID": "20230616140036-gen8vy9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616140036-gen8vy9",
				"updated": "20230616141631"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "result = c \u003e 123;\nresult = c \u003e 'B';\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616141632-2sd6dqw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230616141632-2sd6dqw",
				"updated": "20240616134616"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本课源代码"
				}
			]
		},
		{
			"ID": "20230616141640-y3kxwla",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616141640-y3kxwla",
				"style": "line-height: 22px;",
				"updated": "20240616134615"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace lesson11条件运算符\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"条件运算符\");\n            #region 条件运算符\n            // 输出bool值，用于比较两个变量或者常量\n            // 是否大于 \u003e\n            // 是否等于 \u003c\n            // 是否等于 ==\n            // 是否不等于 !=\n            // 是否大于等于 \u003e=\n            // 是否小于等于 \u003c=\n            int a = 5;\n            int b = 10;\n            // 条件运算符 一定存在两边的内容\n            // 左边内容 条件运算符 右边内容\n            // 条件运算符必需要用一个变量存储或是使用\n            // 比较结果就是返回一个bool值\n            // 如果比较条件满足就返回true 不满足就返回false\n            bool result = a \u003e b;\n            Console.WriteLine(result);\n\n            result = a \u003c b;\n            Console.WriteLine(result);\n\n            result = a \u003e= b;\n            Console.WriteLine(result);\n\n            result = a \u003c= b;\n            Console.WriteLine(result);\n\n            result = a == b;\n            Console.WriteLine(result);\n\n            result = a != b;\n            Console.WriteLine(result);\n            #endregion\n\n            #region 各种应用写法\n            // 变量与变量比较\n            result = a \u003c b;\n            // 变量与数值（常量）比较\n            result = a \u003c 10;\n            result = b \u003e 5;\n            // 数值与数值比较\n            result = 5 \u003e 3;\n            result = 5 == 3;\n            result = 5 != 2;\n            // 计算结果比较\n            // 条件运算符的优先级低于算数运算符\n            // 因此会先计算再比较\n            result = a + 3 \u003e a - 2 - 3;\n            result = 3 + 3 \u003c 5 - 1;\n            // 左边内容 条件运算符 右边内容，左右边内容都可变\n            #endregion\n\n            #region 不能进行范围比较\n            // 在C#，判断是否在两个值之间不可以用类似于 1 \u003c a \u003c 2，这种写法\n            // 判断一个变量是否在两个值之间，要使用逻辑运算符\n            #endregion\n\n            #region 不同类型之间的比较\n            // 不同数值类型之间可以随意的进行条件比较\n            // 但是decimal与float和double都不能直接进行比较\n            int i = 5;\n            float f = 1.2f;\n            ushort us = 3;\n            decimal de = 2.4m;\n\n            result = i \u003e f;\n            result = de \u003c us;\n\n            // string bool 只能同类型 == 和 != 比较\n            string str = \"234\";\n            char c = 'A';\n            bool bo = true;\n\n            result = str == \"123\";\n            result = str != \"123\";\n\n            result = c == 'B';\n\n            result = bo == false;\n\n            // char不仅可以和自己类型进行 == != 比较,还可以和数值类型比较\n            // 还可以和字符类型进行比较\n            result = c \u003e 123;\n            result = c \u003e 'B';\n      \n            #endregion\n\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}