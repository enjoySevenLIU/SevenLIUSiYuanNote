{
	"ID": "20230616141348-3m27yhi",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L12——逻辑运算符_esc_newline_date: '2023-06-16 14:13:48'_esc_newline_updated: '2024-07-01 22:37:31'_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_permalink: /post/cs1l12-logical-operator-kqimg.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_---",
		"id": "20230616141348-3m27yhi",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230616141348-3m27yhi\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230616141416-s2uhav6\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230616141348-zvy1jvv\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230616141416-s2uhav6\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;",
		"title": "CS1L12——逻辑运算符",
		"type": "doc",
		"updated": "20240616135149"
	},
	"Children": [
		{
			"ID": "20230616141416-s2uhav6",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230616141416-s2uhav6",
				"updated": "20240616135149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "逻辑运算符"
				}
			]
		},
		{
			"ID": "20230616141542-4ypj0ca",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616141542-4ypj0ca",
				"updated": "20240616134631"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对两个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bool"
				},
				{
					"Type": "NodeText",
					"Data": "​ 进行逻辑运算，返回 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bool"
				},
				{
					"Type": "NodeText",
					"Data": "​ 值"
				}
			]
		},
		{
			"ID": "20230616141426-2l6pqrm",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230616141426-2l6pqrm",
				"updated": "20240616135116"
			},
			"Children": [
				{
					"ID": "20230616141542-fqa1p1h",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"alias": "与",
						"id": "20230616141542-fqa1p1h",
						"name": "逻辑与",
						"updated": "20230616142125"
					},
					"Children": [
						{
							"ID": "20230616141542-r8jpuql",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230616141542-r8jpuql",
								"updated": "20230616141605"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "逻辑与"
								}
							]
						},
						{
							"ID": "20230616141620-fukzpiw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616141620-fukzpiw",
								"updated": "20240616134639"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "符号 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "\u0026amp;\u0026amp;"
								},
								{
									"Type": "NodeText",
									"Data": "​，规则 对两个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bool"
								},
								{
									"Type": "NodeText",
									"Data": "​ 值进行逻辑计算 有假则假 同真为真"
								}
							]
						},
						{
							"ID": "20240616134807-js08qcp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616134807-js08qcp",
								"updated": "20240616134807"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "? \u0026amp;\u0026amp; ?"
								},
								{
									"Type": "NodeText",
									"Data": "​，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "?"
								},
								{
									"Type": "NodeText",
									"Data": "​ 可以是写死的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bool"
								},
								{
									"Type": "NodeText",
									"Data": "​ 变量 或者 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bool"
								},
								{
									"Type": "NodeText",
									"Data": "​ 值，还可以是条件运算符相关表达式"
								}
							]
						},
						{
							"ID": "20230616141605-s9wf0wg",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616141605-s9wf0wg",
								"style": "line-height: 22px;",
								"updated": "20240616134810"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "bool result = true \u0026\u0026 false;\nConsole.WriteLine(result);\nresult = true \u0026\u0026 true;\nConsole.WriteLine(result);\nresult = false \u0026\u0026 true;\nConsole.WriteLine(result);\nresult = false \u0026\u0026 false;\nConsole.WriteLine(result);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616134641-5asox8e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616134641-5asox8e",
								"updated": "20240616134643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616134644-0ez3ulo",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616134644-0ez3ulo",
								"style": "line-height: 22px;",
								"updated": "20240616134652"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "False\nTrue\nFalse\nFalse\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20230616142011-eg3h0nl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616142011-eg3h0nl",
								"updated": "20240616134656"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bool"
								},
								{
									"Type": "NodeText",
									"Data": "​ 相关的类型 条件运算符\n与 和 或 这样的逻辑运算符的优先级低于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20230616135240-qndxnk7",
									"TextMarkBlockRefSubtype": "d",
									"TextMarkTextContent": "条件运算符"
								},
								{
									"Type": "NodeText",
									"Data": "低于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20230614201043-5eumkn7",
									"TextMarkBlockRefSubtype": "d",
									"TextMarkTextContent": "算数运算符"
								}
							]
						},
						{
							"ID": "20230616141830-osgix1s",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616141830-osgix1s",
								"style": "line-height: 22px;",
								"updated": "20240616134717"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "result = 3 \u003e 1 \u0026\u0026 1 \u003c 2;\nresult = 3 \u003e 1 \u0026\u0026 1 \u003c 2 - 1;\nConsole.WriteLine(result);\n\nint i = 3;\nresult = i \u003e 1 \u0026\u0026 i \u003c 5;\nConsole.WriteLine(result);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616134658-0lt2c8b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616134658-0lt2c8b",
								"updated": "20240616134702"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616134702-4q41zyr",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616134702-4q41zyr",
								"style": "line-height: 22px;",
								"updated": "20240616134709"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "False\nTrue\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20230616142334-4q1k7rk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616142334-4q1k7rk",
								"updated": "20230616142411"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "多个逻辑与 组合使用\n在没有括号的情况下，从左往右看；有括号先看括号内\n一旦遇到false就直接false, 无视后续的运算，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "尤其注意自增减，若被无视，则自增减不会发生"
								}
							]
						},
						{
							"ID": "20230616142251-mnvkvvy",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616142251-mnvkvvy",
								"style": "line-height: 22px;",
								"updated": "20240616134722"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "result = i2 \u003e 1 \u0026\u0026 i2 \u003c 5 \u0026\u0026 i \u003e 1 \u0026\u0026 i++ \u003c 5;\nConsole.WriteLine(result);\nConsole.WriteLine(i);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616134722-vyqjou7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616134722-vyqjou7",
								"updated": "20240616134724"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616134724-qcg8iug",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616134724-qcg8iug",
								"style": "line-height: 22px;",
								"updated": "20240616134729"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "False\n3\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230616142514-q0esiyb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"alias": "或",
						"id": "20230616142514-q0esiyb",
						"name": "逻辑或",
						"updated": "20230616142544"
					},
					"Children": [
						{
							"ID": "20230616142514-iov5018",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230616142514-iov5018",
								"updated": "20230616142547"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "逻辑或"
								}
							]
						},
						{
							"ID": "20230616143052-cuhnc3v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616143052-cuhnc3v",
								"updated": "20240616134943"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "符号 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "||"
								},
								{
									"Type": "NodeText",
									"Data": "​\n规则 对两个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bool"
								},
								{
									"Type": "NodeText",
									"Data": "​ 值进行逻辑运算 有真则真 同假则假"
								}
							]
						},
						{
							"ID": "20240616134945-5c94icw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616134945-5c94icw",
								"updated": "20240616134946"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "? || ?"
								},
								{
									"Type": "NodeText",
									"Data": "​，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "?"
								},
								{
									"Type": "NodeText",
									"Data": "​ 可以是写死的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bool"
								},
								{
									"Type": "NodeText",
									"Data": "​ 变量 或者 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bool"
								},
								{
									"Type": "NodeText",
									"Data": "​ 值，还可以是条件运算符相关表达式"
								}
							]
						},
						{
							"ID": "20230616143208-vxf2pqf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616143208-vxf2pqf",
								"updated": "20240616134935"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一旦遇到 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "true"
								},
								{
									"Type": "NodeText",
									"Data": "​ 就直接 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "true"
								},
								{
									"Type": "NodeText",
									"Data": "​ , 无视后续的运算，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "尤其注意自增减，若被无视，则自增减不会发生"
								}
							]
						},
						{
							"ID": "20230616142547-pteb4nt",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616142547-pteb4nt",
								"style": "line-height: 22px;",
								"updated": "20240616135006"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "result = true || false;\nConsole.WriteLine(result);\nresult = true || true;\nConsole.WriteLine(result);\nresult = false || true;\nConsole.WriteLine(result);\nresult = false || false;\nConsole.WriteLine(result);\n\nresult = 3 \u003e 10 || 3 \u003c 5;\nConsole.WriteLine(result);\n\nint a = 5;\nint b = 11;\nresult = a \u003e 1 || b \u003c 20 || a \u003e 5;\nConsole.WriteLine(result);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616134955-2f8jgrw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616134955-2f8jgrw",
								"updated": "20240616134957"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616134958-xecx7zr",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616134958-xecx7zr",
								"style": "line-height: 22px;",
								"updated": "20240616135018"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "True\nTrue\nTrue\nFalse\nTrue\nTrue\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230616143245-g41s4mf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"alias": "非",
						"id": "20230616143245-g41s4mf",
						"name": "逻辑非",
						"updated": "20240616135116"
					},
					"Children": [
						{
							"ID": "20230616143245-fw0lmay",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230616143245-fw0lmay",
								"updated": "20240616135116"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "逻辑非"
								}
							]
						},
						{
							"ID": "20230616143422-w12miq7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616143422-w12miq7",
								"updated": "20240616135043"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "符号 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "!"
								},
								{
									"Type": "NodeText",
									"Data": "​\n规则 对一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bool"
								},
								{
									"Type": "NodeText",
									"Data": "​ 值进行取反 真变假 假变真"
								}
							]
						},
						{
							"ID": "20230616143319-smu0zim",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616143319-smu0zim",
								"style": "line-height: 22px;",
								"updated": "20240616135059"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "result = !true;\nConsole.WriteLine(result);\nresult = !false;\nConsole.WriteLine(result);\n\nresult = !!true;\nConsole.WriteLine(result);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616135045-0k6ea4j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616135045-0k6ea4j",
								"updated": "20240616135049"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616135049-fssq9pp",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616135049-fssq9pp",
								"style": "line-height: 22px;",
								"updated": "20240616135057"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "False\nTrue\nTrue\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20230616143546-b17misl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616143546-b17misl",
								"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
								"updated": "20230616143546"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "注意：逻辑非的优先级高于算数运算符高于条件运算符，用的时候注意适时使用括号"
								}
							]
						},
						{
							"ID": "20230616143537-ooxo3rt",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616143537-ooxo3rt",
								"style": "line-height: 22px;",
								"updated": "20240616135116"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "result = !(3 \u003e 2);\nConsole.WriteLine(result);\na = 5;\nresult = !(a \u003e 5);\nConsole.WriteLine(result);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616135106-xrasjlp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616135106-xrasjlp",
								"updated": "20240616135108"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616135108-yhu8yfp",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616135108-yhu8yfp",
								"style": "line-height: 22px;",
								"updated": "20240616135113"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "False\nTrue\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230616143644-qnmpkse",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230616143644-qnmpkse",
				"updated": "20240616135149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "逻辑运算符混合使用的优先级问题"
				}
			]
		},
		{
			"ID": "20230616143713-zo2uk4v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616143713-zo2uk4v",
				"updated": "20240616135126"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "规则： "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "!"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的使用优先级高于算数运算符高于条件运算符，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "||"
				},
				{
					"Type": "NodeText",
					"Data": "​ 低于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026amp;\u0026amp;"
				},
				{
					"Type": "NodeText",
					"Data": "​ ，而低于条件运算符低于算数运算符"
				}
			]
		},
		{
			"ID": "20230616143741-mrzpsel",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616143741-mrzpsel",
				"style": "line-height: 22px;",
				"updated": "20240616135137"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "bool gameOver = false;\nint hp = 100;\nbool isDead = false;\nbool isMustOver = true;\n\nresult = gameOver || hp + 100 \u003c 0 \u0026\u0026 !isDead || isMustOver;\n// false || 100 + 100 \u003c 0 \u0026\u0026 true || true\n// false || 200 \u003c 0 \u0026\u0026 true || true;\n// false || false \u0026\u0026 true || true;\n// false || false || true;\n// true\nConsole.WriteLine(result);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616135128-21xvn5g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616135128-21xvn5g",
				"updated": "20240616135130"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240616135131-kdml1xb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616135131-kdml1xb",
				"style": "line-height: 22px;",
				"updated": "20240616135134"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "True\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616143824-g6armth",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230616143824-g6armth",
				"updated": "20240616135149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "逻辑运算符短路规则"
				}
			]
		},
		{
			"ID": "20230616143945-mdzqpbh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616143945-mdzqpbh",
				"updated": "20240616135146"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多个逻辑组合使用时，在没有括号的情况下，从左往右看，只要 逻辑与 或者 逻辑或 的组合式里左边满足了条件\n就会抛弃后续的运算，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "尤其注意自增减，若被无视，则自增减不会发生"
				}
			]
		},
		{
			"ID": "20240616135149-kk6rc29",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616135149-kk6rc29",
				"updated": "20240616135149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如："
				}
			]
		},
		{
			"ID": "20230616143905-ab74qd1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616143905-ab74qd1",
				"style": "line-height: 22px;",
				"updated": "20240616131116"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "result = i2 \u003e 1 \u0026\u0026 i2 \u003c 5 \u0026\u0026 i \u003e 1 \u0026\u0026 i++ \u003c 5;\nConsole.WriteLine(result);\nConsole.WriteLine(i);\n//逻辑与，一旦遇到false就直接false, 无视后续的运算，尤其注意自增减，若被无视，则自增减不会发生\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616131056-81sj3ne",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616131056-81sj3ne",
				"updated": "20240616131100"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240616131100-goco5ip",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616131100-goco5ip",
				"style": "line-height: 22px;",
				"updated": "20240616131111"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "False\n3\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616141711-tr2y0tt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230616141711-tr2y0tt",
				"updated": "20230616141725"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本课源代码"
				}
			]
		},
		{
			"ID": "20230616141726-1a7k4mq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616141726-1a7k4mq",
				"updated": "20230616141732"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace lesson12逻辑运算符\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"逻辑运算符\");\n            //对两个bool进行逻辑运算，返回bool值\n            #region 逻辑与\n            //符号 \u0026\u0026\n            //规则 对两个bool值进行逻辑计算 有假则假 同真为真\n\n            bool result = true \u0026\u0026 false;\n            Console.WriteLine(result);\n            result = true \u0026\u0026 true;\n            Console.WriteLine(result);\n            result = false \u0026\u0026 true;\n            Console.WriteLine(result);\n            result = false \u0026\u0026 false;\n            Console.WriteLine(result);\n\n            //bool相关的类型 条件运算符\n            // 与 和 或 这样的逻辑运算符的优先级低于条件运算符低于算数运算符\n            result = 3 \u003e 1 \u0026\u0026 1 \u003c 2;\n            result = 3 \u003e 1 \u0026\u0026 1 \u003c 2 - 1;\n            Console.WriteLine(result);\n\n            int i = 3;\n            result = i \u003e 1 \u0026\u0026 i \u003c 5;\n            Console.WriteLine(result);\n\n            //多个逻辑与 组合使用\n            int i2 = 5;\n            //在没有括号的情况下，从左往右看\n            //有括号先看括号内\n            result = i2 \u003e 1 \u0026\u0026 i2 \u003c 5 \u0026\u0026 i \u003e 1 \u0026\u0026 i++ \u003c 5;\n            Console.WriteLine(result);\n            Console.WriteLine(i);\n            //一旦遇到false就直接false, 无视后续的运算，尤其注意自增减，若被无视，则自增减不会发生\n\n            // ? \u0026\u0026 ?\n            // ? 可以是写死的bool变量 或者 bool值\n            // 还可以是条件运算符相关\n            #endregion\n\n            #region 逻辑或\n            //符号 ||\n            //规则 对两个bool值进行逻辑运算 有真则真 同假则假\n            result = true || false;\n            Console.WriteLine(result);\n            result = true || true;\n            Console.WriteLine(result);\n            result = false || true;\n            Console.WriteLine(result);\n            result = false || false;\n            Console.WriteLine(result);\n\n            result = 3 \u003e 10 || 3 \u003c 5;\n            Console.WriteLine(result);\n\n            int a = 5;\n            int b = 11;\n            result = a \u003e 1 || b \u003c 20 || a \u003e 5;\n            Console.WriteLine(result);\n            //一旦遇到true就直接true, 无视后续的运算，尤其注意自增减，若被无视，则自增减不会发生\n\n            //  // ? \u0026\u0026 ?\n            // ? 可以是写死的bool变量 或者 bool值\n            // 还可以是条件运算符相关\n            #endregion\n\n            #region 逻辑非\n            //符号 ！\n            //规则 对一个bool值进行取反 真变假 假变真\n            result = !true;\n            Console.WriteLine(result);\n            result = !false;\n            Console.WriteLine(result);\n\n            result = !!true;\n            Console.WriteLine(result);\n\n            //注意：逻辑非的优先级高于算数运算符高于条件运算符，用的时候注意适时使用括号\n            result = !(3 \u003e 2);\n            Console.WriteLine(result);\n            a = 5;\n            result = !(a \u003e 5);\n            Console.WriteLine(result);\n\n            #endregion\n\n            #region 逻辑运算符混合使用的优先级问题\n            //规则： ! 的使用优先级高于算数运算符高于条件运算符\n            //       || 低于 \u0026\u0026 ，而低于条件运算符低于算数运算符\n            bool gameOver = false;\n            int hp = 100;\n            bool isDead = false;\n            bool isMustOver = true;\n\n            result = gameOver || hp + 100 \u003c 0 \u0026\u0026 !isDead || isMustOver;\n            // false || 100 + 100 \u003c 0 \u0026\u0026 true || true\n            // false || 200 \u003c 0 \u0026\u0026 true || true;\n            // false || false \u0026\u0026 true || true;\n            // false || false || true;\n            // true\n            Console.WriteLine(result);\n\n            #endregion\n\n            #region 逻辑运算符短路规则\n            //多个逻辑组合使用时\n            //在没有括号的情况下，从左往右看\n            //只要 逻辑与 或者 逻辑或 的组合式里左边满足了条件\n            //就会抛弃后续的运算，尤其注意自增减，若被无视，则自增减不会发生\n            //例如：\n            result = i2 \u003e 1 \u0026\u0026 i2 \u003c 5 \u0026\u0026 i \u003e 1 \u0026\u0026 i++ \u003c 5;\n            Console.WriteLine(result);\n            Console.WriteLine(i);\n            //逻辑与，一旦遇到false就直接false, 无视后续的运算，尤其注意自增减，若被无视，则自增减不会发生\n            #endregion\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616141348-zvy1jvv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616141348-zvy1jvv",
				"updated": "20230616141348"
			}
		}
	]
}