{
	"ID": "20230811204309-plkbeut",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L18——do...while_esc_newline_date: '2023-08-11 20:43:09'_esc_newline_updated: '2024-07-01 22:39:54'_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_permalink: /post/cs1l18----dowhile-z18rfnd.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_---",
		"id": "20230811204309-plkbeut",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230811204309-plkbeut\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230811204309-k9gcqb6\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230811204926-6e46p8b\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230811205026-xwhlrq4\u0026quot;,\u0026quot;focusStart\u0026quot;:52,\u0026quot;focusEnd\u0026quot;:52\u0026#125;",
		"title": "CS1L18——do...while",
		"type": "doc",
		"updated": "20240616140355"
	},
	"Children": [
		{
			"ID": "20230811204309-k9gcqb6",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230811204309-k9gcqb6",
				"updated": "20240616140355"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "do...while"
				}
			]
		},
		{
			"ID": "20230811204853-f8rmpfk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811204853-f8rmpfk",
				"updated": "20240616140317"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "while"
				},
				{
					"Type": "NodeText",
					"Data": "​ 循环 是先判断条件再执行\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "do...while"
				},
				{
					"Type": "NodeText",
					"Data": "​ 循环是先斩后奏，先至少执行一次循环语句块的逻辑 再判断是否继续"
				}
			]
		},
		{
			"ID": "20230811204907-8bqkfbf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811204907-8bqkfbf",
				"updated": "20230811204915"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "do\n{\n    do while循环语句块;\n}\nwhile (bool类型的值);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230811204921-skloxnq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811204921-skloxnq",
				"updated": "20240616140331"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果满足"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "while"
				},
				{
					"Type": "NodeText",
					"Data": "​语句条件，则回到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "do"
				},
				{
					"Type": "NodeText",
					"Data": "​代码块开头\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意！"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "do...while"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "语句存在一个重要的分号"
				}
			]
		},
		{
			"ID": "20230811205026-xwhlrq4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811205026-xwhlrq4",
				"updated": "20240616140355"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "if"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "switch"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "while"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "do...while"
				},
				{
					"Type": "NodeText",
					"Data": "​ 都可以相互嵌套\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "continue"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "break"
				},
				{
					"Type": "NodeText",
					"Data": "​ 也可以使用"
				}
			]
		},
		{
			"ID": "20230811204926-6e46p8b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811204926-6e46p8b",
				"updated": "20230811205015"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "do\n{\n    Console.WriteLine(\"do while 循环语句\")\n} \nwhile (false);\n\nint a = 0;\ndo \n{\n    ++a;\n} \nwhile (a \u003c 2);\n\ndo\n{\n    ++a;\n    if (a == 0)\n    {\n\n    }\n} \nwhile (false);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}