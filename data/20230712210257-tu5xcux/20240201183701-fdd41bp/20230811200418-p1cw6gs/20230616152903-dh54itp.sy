{
	"ID": "20230616152903-dh54itp",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L16——switch语句_esc_newline_date: '2023-06-16 15:29:03'_esc_newline_updated: '2024-07-01 22:39:23'_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_permalink: /post/cs1l16-switch-statement-zcjchy.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_---",
		"id": "20230616152903-dh54itp",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230616152903-dh54itp\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230629161247-uslvnxr\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230616152903-mgmhhjy\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230629161247-uslvnxr\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;",
		"title": "CS1L16——switch语句",
		"type": "doc",
		"updated": "20240616140059"
	},
	"Children": [
		{
			"ID": "20230629161247-uslvnxr",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230629161247-uslvnxr",
				"updated": "20240616140059"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "switch"
				}
			]
		},
		{
			"ID": "20230629161321-gv84veo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230629161321-gv84veo",
				"updated": "20230629161717"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让顺序执行的代码 产生分支"
				}
			]
		},
		{
			"ID": "20230629161717-drk70ai",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230629161717-drk70ai",
				"updated": "20240616140059"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本语法"
				}
			]
		},
		{
			"ID": "20230811204136-5bkf5gr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811204136-5bkf5gr",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240616140002"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：常量只能写一个值，不能写变量，一个范围 条件运算符 逻辑运算符！\n​"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"parent-style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "switch"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: parent-style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​只判断变量是否等于一个固定值！！！"
				}
			]
		},
		{
			"ID": "20230811204147-nzjs46f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811204147-nzjs46f",
				"updated": "20240616140018"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "case"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以有无数个，如果上面 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "case"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的条件都不满足 就会执行 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "default"
				},
				{
					"Type": "NodeText",
					"Data": "​ 代码块"
				}
			]
		},
		{
			"ID": "20230629161330-i4k5zz5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230629161330-i4k5zz5",
				"updated": "20230629161728"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//switch (变量)\n//{\n//     变量 == 常量 执行 case 和 break 之间的代码\n//    case 常量:\n//        满足条件执行的代码逻辑;\n//        break;\n//    case 常量:\n//        满足条件执行的代码逻辑;\n//        break;\n//    case可以有无数个\n//    default:\n//        如果上面case的条件都不满足 就会执行 default代码块;\n//}\n//注意：常量只能写一个值，不能写变量，一个范围 条件运算符 逻辑运算符！\n//switch只判断变量是否等于一个固定值！！！\n\n           int a = 3;\n            switch (a)\n            {\n                //case的条件用的一定是常量，变量也不可以用！！！\n                case 1:\n                    Console.WriteLine(\"a等于1\");\n                    break;  //break会直接结束switch这个代码块\n                case 2:\n                    Console.WriteLine(\"a等于2\");\n                    break;\n                case 3:\n                    Console.WriteLine(\"a等于3\");\n                    break;\n                default:\n                    Console.WriteLine(\"什么条件都不满足,执行default代码块\");\n                    break;\n            }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230629161747-9kl8jpt",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230629161747-9kl8jpt",
				"updated": "20240616140041"
			},
			"Children": [
				{
					"ID": "20240616140027-ubymfci",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240616140027-ubymfci",
						"updated": "20240616140027"
					},
					"Children": [
						{
							"ID": "20240616140027-c7v5gem",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616140027-c7v5gem",
								"updated": "20240616140027"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "case"
								},
								{
									"Type": "NodeText",
									"Data": "​ 可以有无数个"
								}
							]
						}
					]
				},
				{
					"ID": "20240616140031-84li0af",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240616140031-84li0af",
						"updated": "20240616140041"
					},
					"Children": [
						{
							"ID": "20240616140031-h39t5q1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616140031-h39t5q1",
								"updated": "20240616140041"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "default:"
								},
								{
									"Type": "NodeText",
									"Data": "​ 如果上面 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "case"
								},
								{
									"Type": "NodeText",
									"Data": "​ 的条件都不满足 就会执行 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "default"
								},
								{
									"Type": "NodeText",
									"Data": "​ 代码块"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230629161827-9t9uesz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230629161827-9t9uesz",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20230629161840"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：常量只能写一个值，不能写变量，一个范围 条件运算符 逻辑运算符！！！"
				}
			]
		},
		{
			"ID": "20230629161903-vefawc5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230629161903-vefawc5",
				"updated": "20240616140049"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "switch"
				},
				{
					"Type": "NodeText",
					"Data": "​ 只判断变量是否等于一个固定值！！！"
				}
			]
		},
		{
			"ID": "20230629161921-1w16he6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230629161921-1w16he6",
				"updated": "20240616140059"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "switch"
				},
				{
					"Type": "NodeText",
					"Data": "​ 一般配合"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20231107222919-bbe1w8t",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "枚举"
				},
				{
					"Type": "NodeText",
					"Data": "的使用"
				}
			]
		},
		{
			"ID": "20230629161936-98xw0su",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230629161936-98xw0su",
				"updated": "20240616140053"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "case"
				},
				{
					"Type": "NodeText",
					"Data": "​ 只能填入能够隐式转换的类型"
				}
			]
		},
		{
			"ID": "20230616152925-d2w90i5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230616152925-d2w90i5",
				"updated": "20230616153132"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本课源代码"
				}
			]
		},
		{
			"ID": "20230616153133-o842j5p",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616153133-o842j5p",
				"updated": "20230616153138"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace lesson16switch语句\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"switch语句\");\n            #region 作用\n            //让顺序执行的代码 产生分支\n            #endregion\n\n            #region 基本语法\n            //switch (变量)\n            //{\n            //     变量 == 常量 执行 case 和 break 之间的代码\n            //    case 常量:\n            //        满足条件执行的代码逻辑;\n            //        break;\n            //    case 常量:\n            //        满足条件执行的代码逻辑;\n            //        break;\n            //    case可以有无数个\n            //    default:\n            //        如果上面case的条件都不满足 就会执行 default代码块;\n            //}\n            //注意：常量只能写一个值，不能写变量，一个范围 条件运算符 逻辑运算符！\n            //switch只判断变量是否等于一个固定值！！！\n\n            int a = 3;\n            switch (a)\n            {\n                //case的条件用的一定是常量，变量也不可以用！！！\n                case 1:\n                    Console.WriteLine(\"a等于1\");\n                    break;  //break会直接结束switch这个代码块\n                case 2:\n                    Console.WriteLine(\"a等于2\");\n                    break;\n                case 3:\n                    Console.WriteLine(\"a等于3\");\n                    break;\n                default:\n                    Console.WriteLine(\"什么条件都不满足,执行default代码块\");\n                    break;\n            }\n\n            float f = 1.4f;\n            //一般配合枚举的使用！\n            switch (f)\n            {\n                //  case只能填入能够隐式转换的类型\n                case 1.5f:\n                    Console.WriteLine(\"f等于1.5\");\n                    break;\n                case 1:\n                    Console.WriteLine(\"f等于1\");\n                    break;\n                default:\n                    break;\n            }\n            #endregion\n\n            #region default可以省略\n            string str = \"123\";\n            switch (str)\n            {\n                case \"123\":\n                    Console.WriteLine(\"str等于123\");\n                    break;\n                case \"234\":\n                    Console.WriteLine(\"str等于234\");\n                    break;\n                //default可以省略不写\n            }\n\n            #endregion\n\n            #region 可以自定义常量\n            char c = 'A';\n            const char c2 = 'A';    //必须初始化且不能被修改\n            switch (c)\n            {\n                case c2:\n                    Console.WriteLine(\"等于c2\");\n                    break;\n                default:\n                    Console.WriteLine(\"不满足任何条件\");\n                    break;\n            }\n\n            #endregion\n\n            #region 贯穿\n            //作用：满足某些条件时 做的事情是一样的 就可以用贯穿\n            int aa = 1;\n            switch (aa)\n            {\n                case 3:\n                //一个case没有break也没有执行任何语句，就会贯穿，判断完会直接进入下一句case\n                case 1:\n                //一旦贯穿期间出现了满足条件的case，则执行下方拥有语句块的case代码块，无论被执行的case代码块是否满足条件\n                case 4:\n                case 2:\n                    //case与break可以写n句语句\n                    //且可以嵌套使用各种语句\n                    Console.WriteLine(\"是个数字\");\n                    //虽然不满足等于2,但由于已经满足了case 1,所以仍然会执行case 2 下的语句\n                    break;\n                default:\n                    //一旦满足任何一个case条件后，即使所有case没有任何语句也不会再执行default代码块\n                    Console.WriteLine(\"没有运行\");\n                    break;\n            }\n            #endregion\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616152903-mgmhhjy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616152903-mgmhhjy",
				"updated": "20230616152903"
			}
		}
	]
}