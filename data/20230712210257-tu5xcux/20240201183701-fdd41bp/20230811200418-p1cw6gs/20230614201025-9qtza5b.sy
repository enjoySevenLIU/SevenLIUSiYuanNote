{
	"ID": "20230614201025-9qtza5b",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L9——算术运算符_esc_newline_date: '2023-06-14 20:10:25'_esc_newline_updated: '2024-07-01 22:35:56'_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_permalink: /post/cs1l9------arithmetic-operator-trjqj.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_---",
		"id": "20230614201025-9qtza5b",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230614201025-9qtza5b\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230614201043-5eumkn7\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230614202533-4lmpr7v\u0026quot;,\u0026quot;scrollTop\u0026quot;:3348\u0026#125;",
		"title": "CS1L9——算术运算符",
		"type": "doc",
		"updated": "20240616134201"
	},
	"Children": [
		{
			"ID": "20230614201043-5eumkn7",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230614201043-5eumkn7",
				"updated": "20240616134201"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "算数运算符"
				}
			]
		},
		{
			"ID": "20230614201131-66ca76i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614201131-66ca76i",
				"updated": "20230614201135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "算数运算符是用于数值类型变量计算的运算符，返回结果是数值"
				}
			]
		},
		{
			"ID": "20230614201304-d5abetz",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230614201304-d5abetz",
				"updated": "20240616134201"
			},
			"Children": [
				{
					"ID": "20230614201308-huulpf8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230614201308-huulpf8",
						"updated": "20230614201308"
					},
					"Children": [
						{
							"ID": "20230614201308-hamrwgt",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230614201308-hamrwgt",
								"updated": "20230614201308"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "“=”赋值符号"
								}
							]
						},
						{
							"ID": "20230614201316-4b7lavu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230614201316-4b7lavu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "先看右侧 再看左侧，将右侧的值赋值给左侧的变量"
								}
							]
						},
						{
							"ID": "20230614201153-qitpyh9",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230614201153-qitpyh9",
								"style": "line-height: 22px;",
								"updated": "20230614201232"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "string myName = \"SevenL\";\nint myAge = 18;\nfloat myHeight = 175.66f;\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230614201341-3nv1yo6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230614201341-3nv1yo6",
						"updated": "20230614202409"
					},
					"Children": [
						{
							"ID": "20230614201341-5d47zfi",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230614201341-5d47zfi",
								"updated": "20230614202409"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "算数运算符 + - * / %"
								}
							]
						},
						{
							"ID": "20230614201410-3mpp9gv",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230614201410-3mpp9gv",
								"updated": "20230614201415"
							},
							"Children": [
								{
									"ID": "20230614201415-qddcxf6",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230614201415-qddcxf6",
										"updated": "20230614201415"
									},
									"Children": [
										{
											"ID": "20230614201415-1iw6875",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230614201415-1iw6875",
												"updated": "20230614201448"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "+"
												}
											]
										},
										{
											"ID": "20230614201449-px04ujn",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20230614201449-px04ujn",
												"style": "line-height: 22px;",
												"updated": "20230614201556"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YyM="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "//用自己计算，先算右侧结果再赋值左侧变量\nint i = 1;\ni = i + 1;  // 2\nConsole.WriteLine(i);\n\n//连续计算，先算右侧结果再赋值左侧变量\ni = 12 + 23 + i;    //注意：这里的i用仍然是之前的值\n\n//初始化就计算，先算右侧结果再赋值左侧变量\nint i2 = i + 2345;   //注意：这里的i用仍然是之前的值\n    //注意左边往往只有一个变量，而不会是算式\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								},
								{
									"ID": "20230614201440-ccrxzre",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230614201440-ccrxzre"
									},
									"Children": [
										{
											"ID": "20230614201440-j9g0xkg",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230614201440-j9g0xkg",
												"updated": "20230614201500"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "-"
												}
											]
										},
										{
											"ID": "20230614201501-5pvx5am",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20230614201501-5pvx5am",
												"style": "line-height: 22px;",
												"updated": "20230614201630"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YyM="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "//用自己计算，先算右侧结果再赋值左侧变量\nint j = 1;\nj = j - 1;  // 0\nConsole.WriteLine(i);\n\n//连续计算，先算右侧结果再赋值左侧变量\nj = j - 2 - 3;\nj = 1 - j;    //注意：这里的j用仍然是之前的值\n\n//初始化就计算，先算右侧结果再赋值左侧变量\nint j2 = j - 2345;   //注意：这里的i用仍然是之前的值\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								},
								{
									"ID": "20230614201634-aiokp1h",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20230614201634-aiokp1h"
									},
									"Children": [
										{
											"ID": "20230614201741-77frcxb",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230614201741-77frcxb",
												"updated": "20230614201750"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "*"
												}
											]
										},
										{
											"ID": "20230614201634-6exlwpp",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20230614201634-6exlwpp",
												"style": "line-height: 22px;",
												"updated": "20230614201718"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YyM="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "//用自己计算，先算右侧结果再赋值左侧变量\nint k = 1;\nk = k * 10; //10\nConsole.WriteLine(k);\n\n//连续计算，先算右侧结果再赋值左侧变量\nk = 1 * 2 * 3;\nk = 2 * k;\n\n//初始化就计算，先算右侧结果再赋值左侧变量\nint k2 = k * 2;\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								},
								{
									"ID": "20230614201640-6z6qksd",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20230614201640-6z6qksd"
									},
									"Children": [
										{
											"ID": "20230614201812-mh9r75w",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230614201812-mh9r75w",
												"updated": "20230614201812"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "/\n注意：除法往往会出现小数，如果仍用整形变量会导致丢失小数部分"
												}
											]
										},
										{
											"ID": "20230614201640-eulvku8",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20230614201640-eulvku8",
												"style": "line-height: 22px;",
												"updated": "20230614201830"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YyM="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "//先算右侧结果再赋值左侧变量\nint chu = 1;\nchu = 10 / chu;// 10\n    //注意：除法往往会出现小数，如果仍用整形变量会导致丢失小数部分\n\n//如果用浮点数来存储，运算时一定要有浮点数的特征\nfloat f = 1 / 2f;   //  注意！如果要用float浮点数注意要加f\nf = 1.1f / 1;\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								},
								{
									"ID": "20230614201652-27iyint",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NS4=",
										"Num": 5
									},
									"Properties": {
										"id": "20230614201652-27iyint"
									},
									"Children": [
										{
											"ID": "20230614201905-62qs98w",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230614201905-62qs98w",
												"updated": "20230614201905"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "%"
												}
											]
										},
										{
											"ID": "20230614201910-fa39t8n",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230614201910-fa39t8n",
												"updated": "20230614201917"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "就是取余数"
												}
											]
										},
										{
											"ID": "20230614201652-jd3j2hn",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20230614201652-jd3j2hn",
												"style": "line-height: 22px;",
												"updated": "20230614201934"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YyM="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "int y = 4;\ny = 4 % 3;//余1\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230614201939-hvsopxm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230614201939-hvsopxm",
						"updated": "20240616134201"
					},
					"Children": [
						{
							"ID": "20230614202414-7e0h9r4",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230614202414-7e0h9r4",
								"updated": "20240616134201"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "算数运算符的优先级"
								}
							]
						},
						{
							"ID": "20230614202024-prdu827",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230614202024-prdu827",
								"updated": "20230614202414"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "优先级值得是混合运算时的运算顺序\n*/%的优先级高于+-，同优先级从左向右运算\n括号可以改变优先级，多组括号先算最里面的括号"
								}
							]
						},
						{
							"ID": "20230614201939-k6e8eie",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230614201939-k6e8eie",
								"style": "line-height: 22px;",
								"updated": "20240616134155"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "//优先级值得是混合运算时的运算顺序\n//  */%的优先级高于+-，同优先级从左向右运算\nint a = 1 + 2 * 3 / 2 + 1 + 2 * 3; // 11\nConsole.WriteLine(a);\n//  括号可以改变优先级，多组括号先算最里面的括号\na = (1 + (1 + 2)) * 3 * (2 + 3);\nConsole.WriteLine(a);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616134155-7so0vgk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616134155-7so0vgk",
								"updated": "20240616134157"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616134157-qq6kmup",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616134157-qq6kmup",
								"style": "line-height: 22px;",
								"updated": "20240616134201"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "11\n60\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230614202147-8ol7wuh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230614202147-8ol7wuh",
						"updated": "20230614202418"
					},
					"Children": [
						{
							"ID": "20230614202418-ap8fuic",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230614202418-ap8fuic",
								"updated": "20230614202418"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "算数运算符的复合运算符"
								}
							]
						},
						{
							"ID": "20230614202225-e3yjbqz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230614202225-e3yjbqz",
								"updated": "20230614202418"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "固定写法 运算符=\n+= -= *= /= %=\n复合运算符是用于对变量自己的运算"
								}
							]
						},
						{
							"ID": "20230614202147-5di5fy6",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230614202147-5di5fy6",
								"style": "line-height: 22px;",
								"updated": "20230614202242"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "//  固定写法 运算符=\n//  += -= *= /= %=\n//复合运算符是用于对变量自己的运算\nint i3 = 1;\ni3 = i3 + 1;\ni3 += 1;    //上句与这句是等同的\n            //其他复合运算符同理\n\ni3 = 1;\ni3 -= i3 * 20 % 19;// 0\nConsole.WriteLine(i3);\n//注意复合运算符只能用一种，不可能有-+=这种\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230614202249-jo5z8zs",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230614202249-jo5z8zs",
						"updated": "20230614202421"
					},
					"Children": [
						{
							"ID": "20230614202317-34wyeo8",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230614202317-34wyeo8",
								"updated": "20230614202421"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "算术运算符的自加减"
								}
							]
						},
						{
							"ID": "20230614202249-kr73qkf",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230614202249-kr73qkf",
								"style": "line-height: 22px;",
								"updated": "20230614202335"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "//自增运算符 让自己加1\ni = 1;\ni++;    //先用i再加1\n++i;    //先加1再用i\n\ni = 1;\nConsole.WriteLine(i++);//1\n                       //2\nConsole.WriteLine(++i);//3\n\n//自减运算符 让自己减1\ni = 1;\ni--;    //先用i再减1\n--i;    //先减1再用i\n\ni = 1;\nConsole.WriteLine(i--);//1\n                       //0\nConsole.WriteLine(--i);//-1\n\n//不存在自乘自除\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230614202521-67nh5m1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230614202521-67nh5m1",
				"updated": "20230614202532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本课源代码"
				}
			]
		},
		{
			"ID": "20230614202533-4lmpr7v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230614202533-4lmpr7v",
				"style": "line-height: 22px;",
				"updated": "20231113174554"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace lesson9算术运算符\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"算数运算符\");\n            //算数运算符是用于数值类型变量计算的运算符\n            //返回结果是数值\n\n            #region \"=\"赋值符号\n            //先看右侧 再看左侧，将右侧的值赋值给左侧的变量\n            string myName = \"文KRIFE齐\";\n            int myAge = 18;\n            float myHeight = 175.66f;\n            #endregion\n\n            #region 算数运算符 +-*/%\n            #region +\n            //用自己计算，先算右侧结果再赋值左侧变量\n            int i = 1;\n            i = i + 1;  // 2\n            Console.WriteLine(i);\n\n            //连续计算，先算右侧结果再赋值左侧变量\n            i = 12 + 23 + i;    //注意：这里的i用仍然是之前的值\n\n            //初始化就计算，先算右侧结果再赋值左侧变量\n            int i2 = i + 2345;   //注意：这里的i用仍然是之前的值\n                                 //注意左边往往只有一个变量，而不会是算式\n            #endregion\n\n            #region -\n            //用自己计算，先算右侧结果再赋值左侧变量\n            int j = 1;\n            j = j - 1;  // 0\n            Console.WriteLine(i);\n\n            //连续计算，先算右侧结果再赋值左侧变量\n            j = j - 2 - 3;\n            j = 1 - j;    //注意：这里的j用仍然是之前的值\n\n            //初始化就计算，先算右侧结果再赋值左侧变量\n            int j2 = j - 2345;   //注意：这里的i用仍然是之前的值\n            #endregion\n\n            #region *\n            //用自己计算，先算右侧结果再赋值左侧变量\n            int k = 1;\n            k = k * 10; //10\n            Console.WriteLine(k);\n\n            //连续计算，先算右侧结果再赋值左侧变量\n            k = 1 * 2 * 3;\n            k = 2 * k;\n\n            //初始化就计算，先算右侧结果再赋值左侧变量\n            int k2 = k * 2;\n            #endregion\n\n            #region / 注意：除法往往会出现小数，如果仍用整形变量会导致丢失小数部分\n            //先算右侧结果再赋值左侧变量\n            int chu = 1;\n            chu = 10 / chu;// 10\n            //注意：除法往往会出现小数，如果仍用整形变量会导致丢失小数部分\n\n            //如果用浮点数来存储，运算时一定要有浮点数的特征\n            float f = 1 / 2f;   //  注意！如果要用float浮点数注意要加f\n            f = 1.1f / 1;\n\n            #endregion\n\n            #region % 取余数\n            int y = 4;\n            y = 4 % 3;//余1\n            #endregion\n\n            #endregion\n\n            #region 算数运算符的优先级\n            //优先级值得是混合运算时的运算顺序\n            //  */%的优先级高于+-，同优先级从左向右运算\n            int a = 1 + 2 * 3 / 2 + 1 + 2 * 3; // 11\n            Console.WriteLine(a);\n            //  括号可以改变优先级，多组括号先算最里面的括号\n            a = (1 + (1 + 2)) * 3 * (2 + 3);\n            Console.WriteLine(a);\n            #endregion\n\n            #region 算数运算符的复合运算符\n            //  固定写法 运算符=\n            //  += -= *= /= %=\n            //复合运算符是用于对变量自己的运算\n            int i3 = 1;\n            i3 = i3 + 1;\n            i3 += 1;    //上句与这句是等同的\n            //其他复合运算符同理\n\n            i3 = 1;\n            i3 -= i3*20%19;// 0\n            Console.WriteLine(i3);\n            //注意复合运算符只能用一种，不可能有-+=这种\n            #endregion\n\n            #region 算术运算符的自加减\n            //自增运算符 让自己加1\n            i = 1;\n            i++;    //先用i再加1\n            ++i;    //先加1再用i\n\n            i = 1;\n            Console.WriteLine(i++);//1\n            //2\n            Console.WriteLine(++i);//3\n\n            //自减运算符 让自己减1\n            i = 1;\n            i--;    //先用i再减1\n            --i;    //先减1再用i\n\n            i = 1;\n            Console.WriteLine(i--);//1\n            //0\n            Console.WriteLine(--i);//-1\n\n            //不存在自乘自除\n            #endregion\n\n            #region 练习\n            //1\n            int age = 20;\n            Console.WriteLine(age += 10);\n            //2\n            int r = 5;\n            const float PI = 3.14159f;\n            float S = PI * r * r;\n            Console.WriteLine(S);\n            float D = 2 * PI * r;\n            Console.WriteLine(D);\n            //3\n            int g1 = 90;\n            int g2 = 85;\n            int g3 = 70;\n            int t = g1 + g2 + g3;\n            Console.WriteLine(t);\n            float mean = t / 3f;\n            Console.WriteLine(mean);\n            //4\n            Console.WriteLine(\"num1=31\");\n            Console.WriteLine(\"num2=30\");\n            Console.WriteLine(\"num3=41\");\n            //5\n            a = 99;\n            int b = 87;\n            int c = b;\n            b = a;\n            a = c;\n\n            a = 99;\n            b = 87;\n\n            a -= a - b;\n            b += 12;\n            //6\n            int time = 987652;\n            int days = time / (24 * 60 * 60);\n            int hours = time % (24 * 60 * 60) / (60 * 60);\n            int minute = time % (60 * 60) / 60;\n            int second = time % 60;\n            Console.WriteLine(days +\" \"+ hours +\" \"+ minute +\" \"+ second);\n            #endregion\n        }\n    }\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}