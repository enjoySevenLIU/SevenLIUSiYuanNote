{
	"ID": "20230616144113-lxgzck7",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L13——位运算符_esc_newline_date: '2023-06-16 14:41:13'_esc_newline_updated: '2024-07-01 22:37:48'_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_permalink: /post/cs1l13-position-operator-z26qktn.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_---",
		"id": "20230616144113-lxgzck7",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230616144113-lxgzck7\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230616144125-v3eu0xe\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230616144453-xhy73bk\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230812182936-4f639hb\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;",
		"title": "CS1L13——位运算符",
		"type": "doc",
		"updated": "20240616135654"
	},
	"Children": [
		{
			"ID": "20230616144125-v3eu0xe",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230616144125-v3eu0xe",
				"updated": "20240616135654"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "位运算符"
				}
			]
		},
		{
			"ID": "20230616144253-5i6g6bp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616144253-5i6g6bp",
				"updated": "20230616144253"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "位运算符是用于二进制的对位运算，一个字节的表示格式是这样的：0000 0000"
				}
			]
		},
		{
			"ID": "20230616145006-li5zv8k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230616145006-li5zv8k",
				"updated": "20240616135654"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "补充知识：反码与补码"
				}
			]
		},
		{
			"ID": "20230616145021-1cauc5n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616145021-1cauc5n",
				"updated": "20230616145049"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "内存内存储的二进制数都是补码，而首位数即符号位为0的是正数，为1的是负数\n"
				}
			]
		},
		{
			"ID": "20230812182935-1hiz3gk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230812182935-1hiz3gk"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正数的负码和补码与原码都相同\n"
				}
			]
		},
		{
			"ID": "20230812182936-4f639hb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230812182936-4f639hb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "负数的负码是在原码首位不变的情况下都取反，负数的补码是在负码的基础上+1\n1111 1111 1111 1111 1111 1111 1111 1001         符号位是1，是负数，因此将补码-1还原为负码\n1000 0000 0000 0000 0000 0000 0000 0110 =\u003e -6   将负码除符号位的每一位都取反，还原为原码，110 =\u003e 6 因此是-6"
				}
			]
		},
		{
			"ID": "20230616144253-8mxlffg",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230616144253-8mxlffg",
				"updated": "20240616135654"
			},
			"Children": [
				{
					"ID": "20230616144255-plc1mn4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230616144255-plc1mn4",
						"updated": "20230714171527"
					},
					"Children": [
						{
							"ID": "20230616144255-jmx6fje",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230616144255-jmx6fje",
								"updated": "20230616144415"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "位与 \u0026"
								}
							]
						},
						{
							"ID": "20230616144440-r71btoy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616144440-r71btoy",
								"updated": "20230616144440"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "规则 连接两个数值进行对位运算 将数值转为二进制\n对位运算 有0则0"
								}
							]
						},
						{
							"ID": "20230616144416-ako9f6u",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616144416-ako9f6u",
								"style": "line-height: 22px;",
								"updated": "20240616135253"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "int a = 1;  //001\nint b = 5;  //101\n            //  001\n            //\u0026 101\n            //  001 = 1\nint c = a \u0026 b;\nConsole.WriteLine(c);\t\t//1\n\na = 3;  //00011\nb = 19; //10011\n        //  00011\n        //\u0026 10011\n        //  00011\nc = a \u0026 b;\nConsole.WriteLine(c);\t\t//3\n\na = 1;  //00001\nb = 5;  //00101\nc = 19; //10011\n        //  00001\n        //\u0026 00101\n        //  00001\n        //\u0026 10011\n        //  00001\nint d = a \u0026 b \u0026 c;\nConsole.WriteLine(d);\t\t//1\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616135226-hjhmj6j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616135226-hjhmj6j",
								"updated": "20240616135228"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616135229-g3lobzn",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616135229-g3lobzn",
								"style": "line-height: 22px;",
								"updated": "20240616135232"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "1\n3\n1\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20230616144606-zh6zwtz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616144606-zh6zwtz",
								"updated": "20240616135305"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可见，位与"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "\u0026amp;"
								},
								{
									"Type": "NodeText",
									"Data": "​最终会使结果和最小的数一样或者更小"
								}
							]
						}
					]
				},
				{
					"ID": "20230616144304-r8lqhh8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230616144304-r8lqhh8"
					},
					"Children": [
						{
							"ID": "20230616144304-h2uystd",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230616144304-h2uystd",
								"updated": "20230616144722"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "位或 |"
								}
							]
						},
						{
							"ID": "20230616144725-tb74ddr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616144725-tb74ddr",
								"updated": "20230616144737"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "规则 连接两个数值进行对位运算 将数值转为二进制\n对位运算 有1则1"
								}
							]
						},
						{
							"ID": "20230616144707-lhwtp6b",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616144707-lhwtp6b",
								"style": "line-height: 22px;",
								"updated": "20240616135544"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "a = 1;  //001\nb = 5;  //101\n        //  001\n        //| 101\n        //  101\nc = a | b;\nConsole.WriteLine(c);\t//5\n\na = 5;  //00101\nb = 10; //01010\nc = 20; //10100\n        //  00101\n        //| 01010\n        //  01111\n        //| 10100\n        //  11111\nd = a | b | c;\nConsole.WriteLine(d);\t//31\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616135514-8um9xay",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616135514-8um9xay",
								"updated": "20240616135516"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616135516-yrslwch",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616135516-yrslwch",
								"style": "line-height: 22px;",
								"updated": "20240616135525"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "5\n31\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230616144314-z5azjr3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230616144314-z5azjr3"
					},
					"Children": [
						{
							"ID": "20230616144314-8j6n2cr",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230616144314-8j6n2cr",
								"updated": "20230616144324"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "异或 ^"
								}
							]
						},
						{
							"ID": "20230616144932-nhg8zcx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616144932-nhg8zcx",
								"updated": "20230616144939"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "规则 连接两个数值进行对位运算 将数值转为二进制\n对位运算 相同为0 不同为1"
								}
							]
						},
						{
							"ID": "20230616144902-zksgfyt",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616144902-zksgfyt",
								"style": "line-height: 22px;",
								"updated": "20230616145332"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "a = 1;  //001\nb = 5;  //101\n        //  001\n        //^ 101\n        //  100\nc = a ^ b;\nConsole.WriteLine(c);\n\n## 4\na = 10; // 1010\nb = 11; // 1011\nc = 4;  // 0100\n        //  1010\n        //^ 1011\n        //  0001\n        //^ 0100\n        //  0101\nConsole.WriteLine(a ^ b ^ c);\n\n## 5\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230616144325-7zfwgjt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230616144325-7zfwgjt",
						"updated": "20240616135622"
					},
					"Children": [
						{
							"ID": "20230616144325-1iai74s",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230616144325-1iai74s",
								"updated": "20240616135622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "位取反 ~"
								}
							]
						},
						{
							"ID": "20230616145132-ngzg5xd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616145132-ngzg5xd",
								"updated": "20230616145143"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "规则 写在数值前面 将数值转为二进制\n对位运算 0变1 1变0"
								}
							]
						},
						{
							"ID": "20230616145158-h4yeyvq",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616145158-h4yeyvq",
								"style": "line-height: 22px;",
								"updated": "20240616135622"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "a = 5;  //0000 0000 0000 0000 0000 0000 0000 0101\n//数值长度取决于变量类型的位数，例如int类型占32位，因此有32个位数\n//~ 0000 0000 0000 0000 0000 0000 0000 0101\n//  1111 1111 1111 1111 1111 1111 1111 1010\n//注意：内存内存储的二进制数都是补码，而首位数即符号位为0的是正数，为1的是负数\n//正数的负码和补码与原码都相同\n//负数的负码是在原码首位不变的情况下都取反，负数的补码是在负码的基础上+1\n//  1111 1111 1111 1111 1111 1111 1111 1001         符号位是1，是负数，因此将补码-1还原为负码\n//  1000 0000 0000 0000 0000 0000 0000 0110 =\u003e -6   将负码除符号位的每一位都取反，还原为原码，110 =\u003e 6 因此是-6\nConsole.WriteLine(~a);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616135614-p0uuag4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616135614-p0uuag4",
								"updated": "20240616135617"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616135618-uy12w6p",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616135618-uy12w6p",
								"style": "line-height: 22px;",
								"updated": "20240616135621"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "-6\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230616144336-gxuvtau",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230616144336-gxuvtau",
						"updated": "20240616135654"
					},
					"Children": [
						{
							"ID": "20230616144336-5koa9ta",
							"Type": "NodeHeading",
							"HeadingLevel": 3,
							"Properties": {
								"id": "20230616144336-5koa9ta",
								"updated": "20240616135654"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "左移\u003c\u003c 和 右移\u003e\u003e"
								}
							]
						},
						{
							"ID": "20230616145408-0ngejy6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230616145408-0ngejy6",
								"updated": "20230616145408"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "规则 让一个数的二进制进行左移和右移\n左移几位 右侧加几个0"
								}
							]
						},
						{
							"ID": "20230616145356-nf1dj04",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230616145356-nf1dj04",
								"style": "line-height: 22px;",
								"updated": "20240616135654"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "a = 5;  // 101\nc = a \u003c\u003c 5;\n//1 1010\n//2 10100\n//3 101000\n//4 1010000\n//5 10100000 = 32 + 128 = 160\nConsole.WriteLine(c);\t\t//160\n\n// 右移几位右侧去掉几个数\na = 19; // 10011\nc = a \u003e\u003e 2;\n//0 10011\n//1 01001\n//2 00100 = 4\nConsole.WriteLine(c);\t\t//4\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240616135632-s89qxup",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616135632-s89qxup",
								"updated": "20240616135634"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240616135628-xp5s2m8",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240616135628-xp5s2m8",
								"style": "line-height: 22px;",
								"updated": "20240616135638"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "160\n4\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230616144113-v2ltshy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230616144113-v2ltshy",
				"updated": "20230616144453"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本课源代码"
				}
			]
		},
		{
			"ID": "20230616144453-xhy73bk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616144453-xhy73bk",
				"updated": "20230616144459"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace lesson13位运算符\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"位运算符\");\n            #region 位与 \u0026\n            // 规则 连接两个数值进行对位运算 将数值转为二进制\n            // 对位运算 有0则0\n            int a = 1;  //001\n            int b = 5;  //101\n            //  001\n            //\u0026 101\n            //  001 = 1\n            int c = a \u0026 b;\n            Console.WriteLine(c);\n\n            a = 3;  // 00011\n            b = 19; // 10011\n            //  00011\n            //\u0026 10011\n            //  00011\n            c = a \u0026 b;\n            Console.WriteLine(c);\n\n            a = 1;  //00001\n            b = 5;  //00101\n            c = 19; //10011\n            //  00001\n            //\u0026 00101\n            //  00001\n            //\u0026 10011\n            //  00001\n            int d = a \u0026 b \u0026 c;\n            Console.WriteLine(d);\n            //可见，位与\u0026最终会使结果和最小的数一样或者更小\n            #endregion\n\n            #region 位或 |\n            // 规则 连接两个数值进行对位运算 将数值转为二进制\n            // 对位运算 有1则1\n\n            a = 1;  //001\n            b = 5;  //101\n            //  001\n            //| 101\n            //  101\n            c = a | b;\n            Console.WriteLine(c);\n\n            a = 5;  //00101\n            b = 10; //01010\n            c = 20; //10100\n            //  00101\n            //| 01010\n            //  01111\n            //| 10100\n            //  11111\n            d = a | b | c;\n            Console.WriteLine(d);\n            #endregion\n\n            #region 异或 ^\n            // 规则 连接两个数值进行对位运算 将数值转为二进制\n            // 对位运算 相同为0 不同为1\n            a = 1;  //001\n            b = 5;  //101\n            //  001\n            //^ 101\n            //  100\n            c = a ^ b;\n            Console.WriteLine(c);\n\n            a = 10; // 1010\n            b = 11; // 1011\n            c = 4;  // 0100\n            //  1010\n            //^ 1011\n            //  0001\n            //^ 0100\n            //  0101\n            Console.WriteLine(a ^ b ^ c);\n            #endregion\n\n            #region 位取反 ~\n            // 规则 写在数值前面 将数值转为二进制\n            // 对位运算 0变1 1变0\n            a = 5;  //0000 0000 0000 0000 0000 0000 0000 0101\n            //数值长度取决于变量类型的位数，例如int类型占32位，因此有32个位数\n            //~ 0000 0000 0000 0000 0000 0000 0000 0101\n            //  1111 1111 1111 1111 1111 1111 1111 1010\n            //注意：内存内存储的二进制数都是补码，而首位数即符号位为0的是正数，为1的是负数\n            //正数的负码和补码与原码都相同\n            //负数的负码是在原码首位不变的情况下都取反，负数的补码是在负码的基础上+1\n            //  1111 1111 1111 1111 1111 1111 1111 1001         符号位是1，是负数，因此将补码-1还原为负码\n            //  1000 0000 0000 0000 0000 0000 0000 0110 =\u003e -6   将负码除符号位的每一位都取反，还原为原码，110 =\u003e 6 因此是-6\n            Console.WriteLine(~a);\n            #endregion\n\n            #region 左移\u003c\u003c 和 右移\u003e\u003e\n            // 规则 让一个数的二进制进行左移和右移\n            // 左移几位 右侧加几个0\n            a = 5;  // 101\n            c = a \u003c\u003c 5;\n            //1 1010\n            //2 10100\n            //3 101000\n            //4 1010000\n            //5 10100000 = 32 + 128 = 160\n            Console.WriteLine(c);\n\n            // 右移几位右侧去掉几个数\n            a = 19; // 10011\n            c = a \u003e\u003e 2;\n            //0 10011\n            //1 01001\n            //2 00100 = 4\n            Console.WriteLine(c);\n            #endregion\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}