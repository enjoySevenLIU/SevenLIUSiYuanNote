{
	"ID": "20230614190243-jyy0hnn",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L6——隐式转换_esc_newline_date: '2023-06-14 19:02:43'_esc_newline_updated: '2024-07-01 21:58:04'_esc_newline_permalink: /post/cs1l6------cimc-conversion-wtkxi.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_---",
		"id": "20230614190243-jyy0hnn",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230614190243-jyy0hnn\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230614190655-rfn7tkl\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230614190243-zya32gm\u0026quot;,\u0026quot;scrollTop\u0026quot;:1800,\u0026quot;focusId\u0026quot;:\u0026quot;20230614190655-rfn7tkl\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;",
		"title": "CS1L6——隐式转换",
		"type": "doc",
		"updated": "20230614192643"
	},
	"Children": [
		{
			"ID": "20230614190655-rfn7tkl",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230614190655-rfn7tkl",
				"updated": "20230614192643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "隐式转换"
				}
			]
		},
		{
			"ID": "20230614190647-f718c9y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614190647-f718c9y",
				"updated": "20230614192643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "隐式转换就是某些变量类型按照"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230614190719-4r0mvwa",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "隐式转换的规则"
				},
				{
					"Type": "NodeText",
					"Data": "，可以直接转变为另一种变量类型\n大致要点是：大集合完全包含的小集合，小集合即可转换为大集合"
				}
			]
		},
		{
			"ID": "20230614190719-4r0mvwa",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230614190719-4r0mvwa",
				"name": "隐式转换的规则",
				"updated": "20240616133025"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "隐式转换的规则"
				}
			]
		},
		{
			"ID": "20230614190732-eil4ki4",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230614190732-eil4ki4",
				"updated": "20240616133025"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "相同类型的隐式转换"
				}
			]
		},
		{
			"ID": "20230614191004-1vqkris",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614191004-1vqkris",
				"updated": "20240616132845"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "sbyte"
				},
				{
					"Type": "NodeText",
					"Data": "​ -\u003e "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "short"
				},
				{
					"Type": "NodeText",
					"Data": "​ -\u003e "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int"
				},
				{
					"Type": "NodeText",
					"Data": "​ -\u003e "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "long"
				},
				{
					"Type": "NodeText",
					"Data": "​（小范围的类型可以隐式转换为大范围类型）"
				}
			]
		},
		{
			"ID": "20230614190951-h2s89jg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230614190951-h2s89jg",
				"updated": "20230614191042"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "sbyte sb = 1; // -128~127\nint i = 1;  //  -21亿~21亿\nshort s = 1;    //  -32768~32767\nlong l = 1;    //  -九百万兆~九百万兆\n\ns = sb;\ni = sb;\ni = s;\nl = sb;\nl = s;\nl = i;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230614190630-8bwfgrt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614190630-8bwfgrt",
				"updated": "20240616132857"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "无符号  "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "byte"
				},
				{
					"Type": "NodeText",
					"Data": "​ -\u003e "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ushort"
				},
				{
					"Type": "NodeText",
					"Data": "​ -\u003e "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "uint"
				},
				{
					"Type": "NodeText",
					"Data": "​ -\u003e "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ulong"
				},
				{
					"Type": "NodeText",
					"Data": "​（小范围的类型可以隐式转换为大范围类型）"
				}
			]
		},
		{
			"ID": "20230614191202-apwgyc4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230614191202-apwgyc4",
				"updated": "20230614191253"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "byte b = 1;    //  0~255\nuint ui = 1;    //  0~42亿\nushort us = 1;  //  0~65535\nulong ul = 1;   //  0~18百万兆\n\nus = b;\nui = b;\nui = us;\nul = b;\nul = us;\nul = ui;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230614191122-m9vwr85",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614191122-m9vwr85",
				"updated": "20240616132905"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "float"
				},
				{
					"Type": "NodeText",
					"Data": "​ -\u003e "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "double"
				},
				{
					"Type": "NodeText",
					"Data": "​\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "decimal"
				},
				{
					"Type": "NodeText",
					"Data": "​ 不与其他两种浮点数转换"
				}
			]
		},
		{
			"ID": "20230614191329-d0y92ax",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230614191329-d0y92ax",
				"updated": "20230614191907"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "float f = 1.1f;\ndouble d = 1.1;\nd = f;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230614191131-mzu7g7s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614191131-mzu7g7s",
				"updated": "20240616132918"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特殊类型 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bool"
				},
				{
					"Type": "NodeText",
					"Data": "​，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "string"
				},
				{
					"Type": "NodeText",
					"Data": "​，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "char"
				},
				{
					"Type": "NodeText",
					"Data": "​ 之间不存在隐式转换"
				}
			]
		},
		{
			"ID": "20230614191456-z50j6a2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230614191456-z50j6a2",
				"updated": "20240616133025"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不同大类型的隐式转换"
				}
			]
		},
		{
			"ID": "20230614191610-djfgd2w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614191610-djfgd2w",
				"updated": "20230614191610"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "无符号不能装有符号的\n有符号装无符号，若无符号的范围小于该有符号的范围则可以隐式转换"
				}
			]
		},
		{
			"ID": "20230614191520-xgfzs7b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230614191520-xgfzs7b",
				"updated": "20230614191842"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "s = b;\ni = b;\ni = us;\nl = b;\nl = us;\nl = ui;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230614191709-7glayg4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614191709-7glayg4",
				"updated": "20230614191810"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "浮点数可以装所有的整数类型，过大的整数以科学计数法计数"
				}
			]
		},
		{
			"ID": "20230614191811-3il0ejw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230614191811-3il0ejw",
				"updated": "20230614191902"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "decimal de = 1.0m;\nf = ul;\nd = ul;\nde = ul;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230614191922-5ysddml",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614191922-5ysddml",
				"updated": "20230614192116"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "整数不能装浮点数"
				}
			]
		},
		{
			"ID": "20230614192117-3zn9okw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614192117-3zn9okw",
				"updated": "20240616132925"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bool"
				},
				{
					"Type": "NodeText",
					"Data": "​，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "string"
				},
				{
					"Type": "NodeText",
					"Data": "​ 与其他任何类型都不能相互隐式转换"
				}
			]
		},
		{
			"ID": "20230614192119-119tqc2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614192119-119tqc2",
				"updated": "20240616132930"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其他类型不能转换为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "char"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230614192144-qm0t8vq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614192144-qm0t8vq",
				"updated": "20240616133025"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "char"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以隐式转换为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ushort"
				},
				{
					"Type": "NodeText",
					"Data": "​ 以及比 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ushort"
				},
				{
					"Type": "NodeText",
					"Data": "​ 更大范围的整形和浮点型"
				}
			]
		},
		{
			"ID": "20230614192122-8bare0h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230614192122-8bare0h",
				"updated": "20230614192203"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "us = c;\ni = c;\nl = c;\nui = c;\nul = c;\nf = c;\nd = c;\nde = c;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230614190319-oq9dgjv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230614190319-oq9dgjv",
				"updated": "20230614190327"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本课源代码"
				}
			]
		},
		{
			"ID": "20230614190327-u2uy6dz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230614190327-u2uy6dz",
				"updated": "20230614190350"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace lesson6隐式转换\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"隐式转换（要点：大集合完全包含的小集合，小集合即可转换为大集合）\");\n            #region 变量申明\n            //1、有符号的整形变量 能存储一定范围内的正负数包括0的变量类型\n            sbyte sb = 1; // -128~127\n            int i = 1;  //  -21亿~21亿\n            short s = 1;    //  -32768~32767\n            long l = 1;    //  -九百万兆~九百万兆\n            //2、无符号的整型变量 能存储一定范围内0和正数的变量类型\n            byte b = 1;    //  0~255\n            uint ui = 1;    //  0~42亿\n            ushort us = 1;  //  0~65535\n            ulong ul = 1;   //  0~18百万兆\n            //3、浮点数（小数）\n            float f = 0.1f;    //  数字后必须加f声明float，因为小数会被默认为double，从非0数算起为有效数字，7/8位有效数字，根据编译器不同有可能不同，超出部分会四舍五入\n            double d = 0.1;    //  从非0数算起为有效数字，15~17位有效数字，超出部分会四舍五入\n            decimal de = 0.1m;    //  数字后必须加m声明，因为小数会被默认为double，27~28位有效数字，不建议使用\n            //4、特殊类型\n            bool bo = true; //  true或者false\n            char c = 'a';   //  需要加'',单个字符\n            string st = \"hello\";    //  需要加\"\",字符串\n            #endregion\n\n            #region 相同类型的隐式转换\n            // 有符号  sbyte -\u003e short -\u003e int -\u003e long（小范围的类型可以隐式转换为大范围类型）\n            s = sb;\n            i = sb;\n            i = s;\n            l = sb;\n            l = s;\n            l = i;\n            // 无符号  byte -\u003e ushort -\u003e uint -\u003e ulong（小范围的类型可以隐式转换为大范围类型）\n            us = b;\n            ui = b;\n            ui = us;\n            ul = b;\n            ul = us;\n            ul = ui;\n            // 浮点数  float -\u003e double | decimal不与其他两种浮点数转换\n            d = f;\n            // 特殊类型 bool,string,char不存在隐式转换\n            #endregion\n\n            #region 不同大类型的隐式转换\n            //无符号不能装有符号的\n            //有符号装无符号   若无符号的范围小于该有符号的范围则可以隐式转换\n            s = b;\n            i = b;\n            i = us;\n            l = b;\n            l = us;\n            l = ui;\n            //浮点数装整数    所有浮点数都可以装所有的整数类型，过大的数以科学计数法计数   \n            f = ul;\n            d = ul;\n            de = ul;\n            //整数不能装浮点数\n            //bool与其他任何类型不能相互隐式转换\n            //其他类型不能转换为char\n            //char可以隐式转换为ushort及比ushort更大范围的整形和浮点型（原理:char可以转化为对应的Unicode码，Unicode码最多有65536个，与ushort相同）\n            us = c;\n            i = c;\n            l = c;\n            ui = c;\n            ul = c;\n            f = c;\n            d = c;\n            de = c;\n            //string与其他任何类型不能相互隐式转换\n            #endregion\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230614190243-zya32gm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230614190243-zya32gm",
				"updated": "20230614190243"
			}
		}
	]
}