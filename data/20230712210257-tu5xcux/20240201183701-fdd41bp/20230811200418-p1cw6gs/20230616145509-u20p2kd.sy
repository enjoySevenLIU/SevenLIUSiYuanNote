{
	"ID": "20230616145509-u20p2kd",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L14——三目运算符_esc_newline_date: '2023-06-16 14:55:09'_esc_newline_updated: '2024-07-01 22:38:22'_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_permalink: /post/cs1l14-three-eye-operator-1kkfdu.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_---",
		"id": "20230616145509-u20p2kd",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230616145509-u20p2kd\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230616145526-btlcfco\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230616152824-ygth57k\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230616145526-btlcfco\u0026quot;,\u0026quot;focusStart\u0026quot;:5,\u0026quot;focusEnd\u0026quot;:5\u0026#125;",
		"title": "CS1L14——三目运算符",
		"type": "doc",
		"updated": "20230822141438"
	},
	"Children": [
		{
			"ID": "20230616145526-btlcfco",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230616145526-btlcfco",
				"updated": "20230822141438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三目运算符"
				}
			]
		},
		{
			"ID": "20230616150710-5z5vrhx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230616150710-5z5vrhx",
				"updated": "20230616150714"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本语法"
				}
			]
		},
		{
			"ID": "20230616150710-0yc1vhb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616150710-0yc1vhb",
				"updated": "20230616150756"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "套路：3个空位 2个符号\n固定语法：空位 ?空位 :空位;\n关键信息：bool类型 ?bool类型为真返回内容 ：bool类型为假返回内容;\n三目运算符会有返回值，这个返回值类型必须一致，并且必须使用！"
				}
			]
		},
		{
			"ID": "20230616150710-5rmshds",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616150710-5rmshds",
				"updated": "20230616150852"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string str = false ? \"条件为真\" : \"条件为假\";\nConsole.WriteLine(str);\n\nint a = 5;\nstr = a \u003c 1 ? \"a大于1\" : \"a不满足条件\";\nConsole.WriteLine(str);\n\nint i = a \u003e 1 ? 123 : 234;\nConsole.WriteLine(i);\n\n## 条件为假\n## a不满足条件\n## 123\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616150710-qx3v84i",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230616150710-qx3v84i",
				"updated": "20230616150717"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体使用"
				}
			]
		},
		{
			"ID": "20230616150814-wyrdaqm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616150814-wyrdaqm",
				"updated": "20230616150818"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第一个空位 始终是结果类型是bool的表达式 bool变量 条件表达式 逻辑运算符表达式\n第二三个空位 什么表达式都可以 只要保证他们的结果类型是一致的"
				}
			]
		},
		{
			"ID": "20230616150710-a1qpd0r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616150710-a1qpd0r",
				"updated": "20230616150930"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "bool b = a \u003e 1 ? a \u003e 6 : !false;\nConsole.WriteLine(b);\n\n## False\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616145509-boxjqap",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230616145509-boxjqap",
				"updated": "20230616152824"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本课源代码"
				}
			]
		},
		{
			"ID": "20230616152824-ygth57k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616152824-ygth57k",
				"updated": "20230616152832"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace lesson15if语句\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"if语句\");\n            #region 作用\n            //让顺序执行的代码 产生分支\n            //if语句是一个可以让程序产生逻辑变化的语句\n            #endregion\n\n            #region if语句\n            //作用：满足条件时多执行一些代码\n            //固定语法：\n            //if( bool类型值 )     //bool类型相关：bool变量 条件运算符表达式 逻辑运算符表达式\n            //{\n            //      满足条件时要执行的代码写在if代码块里;\n            //}\n            //注意：if语句的语法部分不需要写 \";\"\n            //if可以嵌套使用\n\n            if (true)\n            {\n                Console.WriteLine(\"进入了if语句的代码块\");\n                Console.WriteLine(\"执行了其中的代码逻辑\");\n            }\n            Console.WriteLine(\"if语句外的代码\");\n\n            int a = 1;\n            if (a \u003e 0 \u0026\u0026 a \u003c 5)\n            {\n                Console.WriteLine(\"满足a在0到5之间\");\n            }\n\n            //嵌套使用\n            string name = \"SevenL\";\n            string password = \"666\";\n            if (name == \"SevenL\")\n            {\n                Console.WriteLine(\"用户名验证成功\");\n                if (password == \"666\")\n                {\n                    Console.WriteLine(\"密码运用成功\");\n                    //可以无线嵌套\n                }\n            }\n\n            #endregion\n\n            #region if...else...\n            //作用：产生两条分支 满足条件做if内代码块，不满足则做else内代码块\n            //if (bool类型值)\n            //{\n            //      满足条件执行的代码\n            //}\n            //else\n            //{\n            //      不满足条件执行的代码\n            //}\n            //注意：\n            //1、if...else 语句的语法部分不需要写分号\n            //2、if...else 语句可以嵌套\n            if (true)\n            {\n                Console.WriteLine(\"满足if条件时...\");\n            }\n            else\n            {\n                Console.WriteLine(\"不满足条件时...\");\n            }\n\n            //其他的使用和if使用时一样\n            //与if语句一样可以嵌套，也可以无限嵌套\n            #endregion\n\n            #region if...else if...else if... else...\n            //作用：产生n条分支 多条道路选择 最先满足其中的一个条件 就做什么\n            //语法：\n            // if (bool类型值)\n            //{\n            //      满足条件执行的代码\n            //}\n            //else if (bool类型值)\n            //{\n            //      满足条件执行的代码\n            //}\n            //...中间可以有n个else if语句的代码块\n            //else\n            //{\n            //      不满足条件执行的代码\n            //}\n\n            //注意：\n            //1、和前面两个是一样的 不需要写分号\n            //2、是可以嵌套的\n            //3、else可以省略\n            //4、注意：条件判断 从上到下执行 满足了第一个之后 之后的都不会执行了\n            int a3 = 6;\n            if (a3 \u003e= 10)\n            {\n                Console.WriteLine(\"a大于等于10\");\n            }\n            else if (a3 \u003e 5 \u0026\u0026 a3 \u003c 10)\n            {\n                Console.WriteLine(\"a在5和10之间\");\n            }\n            else if (a3 \u003e= 0 \u0026\u0026 a3 \u003c= 5) \n            {\n                Console.WriteLine(\"a在0到5之间\");\n            }\n            else\n            {\n                Console.WriteLine(\"a小于0\");\n            }\n            //如果不加else，则每个if都会执行\n            #endregion\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}