{
	"ID": "20230616151516-xo1psn6",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L15——if语句_esc_newline_date: '2023-06-16 15:15:16'_esc_newline_updated: '2024-07-01 22:39:02'_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_permalink: /post/cs1l15-if-statement-lzyb8.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_---",
		"id": "20230616151516-xo1psn6",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230616151516-xo1psn6\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230616151530-s3e6sxn\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230616152749-l1g0qia\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230616151530-s3e6sxn\u0026quot;,\u0026quot;focusStart\u0026quot;:2,\u0026quot;focusEnd\u0026quot;:2\u0026#125;",
		"title": "CS1L15——if语句",
		"type": "doc",
		"updated": "20240616135941"
	},
	"Children": [
		{
			"ID": "20230616151530-s3e6sxn",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230616151530-s3e6sxn",
				"updated": "20240616135941"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "if"
				}
			]
		},
		{
			"ID": "20230616151617-m5kpk5p",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230616151617-m5kpk5p",
				"updated": "20240616135941"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用"
				}
			]
		},
		{
			"ID": "20230616151622-hp6qa9v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616151622-hp6qa9v",
				"updated": "20230616151632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让顺序执行的代码 产生分支\nif语句是一个可以让程序产生逻辑变化的语句"
				}
			]
		},
		{
			"ID": "20230616151958-ubkglr7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230616151958-ubkglr7",
				"updated": "20240616135941"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "if"
				}
			]
		},
		{
			"ID": "20230616152153-w85c2m4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616152153-w85c2m4",
				"updated": "20230616152153"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用：满足条件时多执行一些代码"
				}
			]
		},
		{
			"ID": "20230616152042-sycszma",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616152042-sycszma",
				"updated": "20230616152157"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//固定语法：\nif( bool类型值 )     //bool类型相关：bool变量 条件运算符表达式 逻辑运算符表达式\n{\n      满足条件时要执行的代码写在if代码块里;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616152158-9wofbmv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616152158-9wofbmv",
				"updated": "20240616135848"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：if语句的语法部分不需要写 \""
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ";"
				},
				{
					"Type": "NodeText",
					"Data": "​\"，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "if"
				},
				{
					"Type": "NodeText",
					"Data": "​可以嵌套使用"
				}
			]
		},
		{
			"ID": "20230616152200-j92p76n",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616152200-j92p76n",
				"updated": "20230616152254"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "if (true)\n{\n    Console.WriteLine(\"进入了if语句的代码块\");\n    Console.WriteLine(\"执行了其中的代码逻辑\");\n}\nConsole.WriteLine(\"if语句外的代码\");\n\nint a = 1;\nif (a \u003e 0 \u0026\u0026 a \u003c 5)\n{\n    Console.WriteLine(\"满足a在0到5之间\");\n}\n\n//嵌套使用\nstring name = \"SevenL\";\nstring password = \"666\";\nif (name == \"SevenL\")\n{\n    Console.WriteLine(\"用户名验证成功\");\n    if (password == \"666\")\n    {\n        Console.WriteLine(\"密码运用成功\");\n        //可以无线嵌套\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616152256-yp95059",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230616152256-yp95059",
				"updated": "20240616135941"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "if...else..."
				}
			]
		},
		{
			"ID": "20230616152321-6dzkr1m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616152321-6dzkr1m",
				"updated": "20230616152406"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用：产生两条分支 满足条件做if内代码块，不满足则做else内代码块"
				}
			]
		},
		{
			"ID": "20230616152415-1ue7exk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616152415-1ue7exk",
				"updated": "20230616152421"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "if (bool类型值)\n{\n    满足条件执行的代码\n}\nelse\n{\n    不满足条件执行的代码\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616152423-vetuu8v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616152423-vetuu8v",
				"updated": "20240616135828"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意："
				}
			]
		},
		{
			"ID": "20240616135828-is0688g",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240616135828-is0688g",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240616135828"
			},
			"Children": [
				{
					"ID": "20240616135828-d3fedff",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240616135828-d3fedff",
						"updated": "20240616135828"
					},
					"Children": [
						{
							"ID": "20240616135828-5yjyycd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616135828-5yjyycd",
								"updated": "20240616135831"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "if...else"
								},
								{
									"Type": "NodeText",
									"Data": "​ 语句的语法部分不需要写分号"
								}
							]
						}
					]
				},
				{
					"ID": "20240616135828-dpw5set",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240616135828-dpw5set",
						"updated": "20240616135828"
					},
					"Children": [
						{
							"ID": "20240616135828-5chg5qp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616135828-5chg5qp",
								"updated": "20240616135834"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "if...else"
								},
								{
									"Type": "NodeText",
									"Data": "​ 语句可以嵌套"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230616152425-jsq1nc1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230616152425-jsq1nc1",
				"updated": "20240616135941"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "if... else if... else if... else..."
				}
			]
		},
		{
			"ID": "20230616152522-vy1mqtp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616152522-vy1mqtp",
				"updated": "20230616152539"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用：产生n条分支 多条道路选择 最先满足其中的一个条件 就做什么\n语法：\n"
				}
			]
		},
		{
			"ID": "20230616152526-q7ewplb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616152526-q7ewplb",
				"updated": "20230616152703"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " if (bool类型值)\n{\n    满足条件执行的代码\n}\nelse if (bool类型值)\n{\n    满足条件执行的代码\n}\n//...中间可以有n个else if语句的代码块\nelse\n{\n    不满足条件执行的代码\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616152522-o5hjo89",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616152522-o5hjo89",
				"updated": "20240616135904"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意："
				}
			]
		},
		{
			"ID": "20240616135904-9f6w5h0",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240616135904-9f6w5h0",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240616135941"
			},
			"Children": [
				{
					"ID": "20240616135904-cngn13y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240616135904-cngn13y",
						"updated": "20240616135904"
					},
					"Children": [
						{
							"ID": "20240616135904-ra0wv65",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616135904-ra0wv65",
								"updated": "20240616135904"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "和前面两个是一样的 不需要写分号"
								}
							]
						}
					]
				},
				{
					"ID": "20240616135904-aqcqbcs",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240616135904-aqcqbcs",
						"updated": "20240616135904"
					},
					"Children": [
						{
							"ID": "20240616135904-vzp8jml",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616135904-vzp8jml",
								"updated": "20240616135904"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是可以嵌套的"
								}
							]
						}
					]
				},
				{
					"ID": "20240616135904-3d4foc7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240616135904-3d4foc7",
						"updated": "20240616135941"
					},
					"Children": [
						{
							"ID": "20240616135904-f55yup5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616135904-f55yup5",
								"updated": "20240616135941"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "else"
								},
								{
									"Type": "NodeText",
									"Data": "​ 语句块可以省略"
								}
							]
						}
					]
				},
				{
					"ID": "20240616135904-koelgn0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240616135904-koelgn0",
						"updated": "20240616135904"
					},
					"Children": [
						{
							"ID": "20240616135904-pv608qb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616135904-pv608qb",
								"updated": "20240616135914"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "条件判断 从上到下执行 满足了第一个之后 之后的都不会执行了"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230616152705-2e8s5e4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616152705-2e8s5e4",
				"updated": "20230616152707"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a3 = 6;\nif (a3 \u003e= 10)\n{\n    Console.WriteLine(\"a大于等于10\");\n}\nelse if (a3 \u003e 5 \u0026\u0026 a3 \u003c 10)\n{\n    Console.WriteLine(\"a在5和10之间\");\n}\nelse if (a3 \u003e= 0 \u0026\u0026 a3 \u003c= 5)\n{\n    Console.WriteLine(\"a在0到5之间\");\n}\nelse\n{\n    Console.WriteLine(\"a小于0\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616152711-w0v4848",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230616152711-w0v4848",
				"updated": "20240616135931"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果不加 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "else"
				},
				{
					"Type": "NodeText",
					"Data": "​ ，则每个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "if"
				},
				{
					"Type": "NodeText",
					"Data": "​都会执行"
				}
			]
		},
		{
			"ID": "20230616152725-9cq80pq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230616152725-9cq80pq",
				"updated": "20230616152748"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本课源代码"
				}
			]
		},
		{
			"ID": "20230616152749-l1g0qia",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230616152749-l1g0qia",
				"updated": "20230616152757"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace lesson15if语句\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"if语句\");\n            #region 作用\n            //让顺序执行的代码 产生分支\n            //if语句是一个可以让程序产生逻辑变化的语句\n            #endregion\n\n            #region if语句\n            //作用：满足条件时多执行一些代码\n            //固定语法：\n            //if( bool类型值 )     //bool类型相关：bool变量 条件运算符表达式 逻辑运算符表达式\n            //{\n            //      满足条件时要执行的代码写在if代码块里;\n            //}\n            //注意：if语句的语法部分不需要写 \";\"\n            //if可以嵌套使用\n\n            if (true)\n            {\n                Console.WriteLine(\"进入了if语句的代码块\");\n                Console.WriteLine(\"执行了其中的代码逻辑\");\n            }\n            Console.WriteLine(\"if语句外的代码\");\n\n            int a = 1;\n            if (a \u003e 0 \u0026\u0026 a \u003c 5)\n            {\n                Console.WriteLine(\"满足a在0到5之间\");\n            }\n\n            //嵌套使用\n            string name = \"SevenL\";\n            string password = \"666\";\n            if (name == \"SevenL\")\n            {\n                Console.WriteLine(\"用户名验证成功\");\n                if (password == \"666\")\n                {\n                    Console.WriteLine(\"密码运用成功\");\n                    //可以无线嵌套\n                }\n            }\n\n            #endregion\n\n            #region if...else...\n            //作用：产生两条分支 满足条件做if内代码块，不满足则做else内代码块\n            //if (bool类型值)\n            //{\n            //      满足条件执行的代码\n            //}\n            //else\n            //{\n            //      不满足条件执行的代码\n            //}\n            //注意：\n            //1、if...else 语句的语法部分不需要写分号\n            //2、if...else 语句可以嵌套\n            if (true)\n            {\n                Console.WriteLine(\"满足if条件时...\");\n            }\n            else\n            {\n                Console.WriteLine(\"不满足条件时...\");\n            }\n\n            //其他的使用和if使用时一样\n            //与if语句一样可以嵌套，也可以无限嵌套\n            #endregion\n\n            #region if...else if...else if... else...\n            //作用：产生n条分支 多条道路选择 最先满足其中的一个条件 就做什么\n            //语法：\n            // if (bool类型值)\n            //{\n            //      满足条件执行的代码\n            //}\n            //else if (bool类型值)\n            //{\n            //      满足条件执行的代码\n            //}\n            //...中间可以有n个else if语句的代码块\n            //else\n            //{\n            //      不满足条件执行的代码\n            //}\n\n            //注意：\n            //1、和前面两个是一样的 不需要写分号\n            //2、是可以嵌套的\n            //3、else可以省略\n            //4、注意：条件判断 从上到下执行 满足了第一个之后 之后的都不会执行了\n            int a3 = 6;\n            if (a3 \u003e= 10)\n            {\n                Console.WriteLine(\"a大于等于10\");\n            }\n            else if (a3 \u003e 5 \u0026\u0026 a3 \u003c 10)\n            {\n                Console.WriteLine(\"a在5和10之间\");\n            }\n            else if (a3 \u003e= 0 \u0026\u0026 a3 \u003c= 5) \n            {\n                Console.WriteLine(\"a在0到5之间\");\n            }\n            else\n            {\n                Console.WriteLine(\"a小于0\");\n            }\n            //如果不加else，则每个if都会执行\n            #endregion\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}