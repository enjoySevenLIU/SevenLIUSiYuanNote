{
	"ID": "20230811204306-ggnkero",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L17——while_esc_newline_date: '2023-08-11 20:43:06'_esc_newline_updated: '2024-07-01 22:39:40'_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_permalink: /post/cs1l17----while-1n726i.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_---",
		"id": "20230811204306-ggnkero",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230811204306-ggnkero\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230811204306-y62duhp\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230811204810-ucu9vjy\u0026quot;,\u0026quot;scrollTop\u0026quot;:1730,\u0026quot;focusId\u0026quot;:\u0026quot;20230811204440-3uwmpa6\u0026quot;,\u0026quot;focusStart\u0026quot;:5,\u0026quot;focusEnd\u0026quot;:5\u0026#125;",
		"title": "CS1L17——while",
		"type": "doc",
		"updated": "20240616140258"
	},
	"Children": [
		{
			"ID": "20230811204306-y62duhp",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230811204306-y62duhp",
				"updated": "20240616140258"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "循环语句"
				}
			]
		},
		{
			"ID": "20230811204435-3tyrhw0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811204435-3tyrhw0",
				"updated": "20230811204435"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让顺序执行的代码 可以不停的循环执行某一代码块的内容\n条件分支语句 是让代码产生分支\n循环语句 是让代码可以被重复运行"
				}
			]
		},
		{
			"ID": "20230811204440-3uwmpa6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230811204440-3uwmpa6",
				"updated": "20240616140258"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "while"
				}
			]
		},
		{
			"ID": "20230811204504-r5d03bh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811204504-r5d03bh",
				"updated": "20240616140134"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "能使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bool"
				},
				{
					"Type": "NodeText",
					"Data": "​ 类型的变量或表达式 条件运算符 逻辑运算符"
				}
			]
		},
		{
			"ID": "20230811204525-9tn61g5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811204525-9tn61g5",
				"updated": "20230811204548"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "while (bool类型的值)\n{\n    当满足条件时就会执行while语句块的内容;\n    ......;\n    ......;\n    当代码逻辑执行完，回到while循环开头\n    再次进行条件判断，符合条件就继续循环\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230811204520-dtvm2dk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811204520-dtvm2dk"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不满足条件后，就会跳出循环"
				}
			]
		},
		{
			"ID": "20230811204504-hk9uxud",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811204504-hk9uxud",
				"updated": "20230811204504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "死循环，不停的执行其中的代码逻辑直到被强制关闭\n死循环只有在我们学习控制台程序时才会频繁使用\n可能会因为内存问题造成程序崩溃闪退\n造成程序卡死\n谨慎使用死循环"
				}
			]
		},
		{
			"ID": "20230811204700-zsf25px",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811204700-zsf25px",
				"updated": "20230811204700"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意定义变量的位置！！！\n被放入循环的变量很有可能会被初始化，注意变量在循环的位置"
				}
			]
		},
		{
			"ID": "20230811204452-hri7aol",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811204452-hri7aol",
				"updated": "20230811204559"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 1;\nwhile (true)\n{\n    Console.WriteLine(\"循环\"+ a++ + \"次\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230811204612-eome1vu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230811204612-eome1vu",
				"updated": "20240616140240"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "嵌套使用"
				}
			]
		},
		{
			"ID": "20230811204622-7orimkw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811204622-7orimkw",
				"updated": "20240616140151"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "while"
				},
				{
					"Type": "NodeText",
					"Data": "​ 不仅可以嵌套 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "if"
				},
				{
					"Type": "NodeText",
					"Data": "​，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "switch"
				},
				{
					"Type": "NodeText",
					"Data": "​ 还可以再嵌套 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "while"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230811204629-z4ouck0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811204629-z4ouck0",
				"updated": "20230811204638"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "a = 0;\nint b = 0;\nwhile(b \u003c 10)\n{\n    ++b;\n    while (a \u003c 10)\n    {\n        ++a;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230811204709-2coqw16",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230811204709-2coqw16",
				"updated": "20240616140240"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "流程控制关键字"
				}
			]
		},
		{
			"ID": "20230811204833-k2r137s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811204833-k2r137s",
				"updated": "20240616140220"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "break"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "continue"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是配套循环使用的，无法用于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "if"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语句内\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "break"
				},
				{
					"Type": "NodeText",
					"Data": "​ 在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "switch"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的作用和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "while"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的作用有异曲同工之妙\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "break"
				},
				{
					"Type": "NodeText",
					"Data": "​ 只作用与当前的循环或者 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "switch"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230811204739-azg6lor",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230811204739-azg6lor",
				"name": "break",
				"updated": "20240616140240"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "跳出循环"
				}
			]
		},
		{
			"ID": "20230811204717-2v9n545",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811204717-2v9n545",
				"updated": "20240616140232"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用：控制循环逻辑的关键词\n"
				}
			]
		},
		{
			"ID": "20230811204713-5lkzgxp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811204713-5lkzgxp",
				"updated": "20240616140232"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "while (true)\n{\n    Console.WriteLine(\"break之前的代码\");\n    break;\n    Console.WriteLine(\"break之后的代码\");\n}\nConsole.WriteLine(\"循环外的代码\");\n\nint i = 0;\nwhile (true)\n{\n    ++i;\n    if (i == 10)\n    {\n        break;\n    }\n}\nConsole.WriteLine(i);\n//注意break跳出的是当前循环，与if语句无关\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230811204804-wdasa9a",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230811204804-wdasa9a",
				"name": "continue",
				"updated": "20240616140240"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "回到循环开始，继续执行"
				}
			]
		},
		{
			"ID": "20230811204810-ucu9vjy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811204810-ucu9vjy",
				"updated": "20240616140240"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "while (i \u003c 10)\n{\n    Console.WriteLine(\"continue之前的代码\");\n    ++i;\n    continue;\n    Console.WriteLine(\"continue之后的代码\");\n}\nConsole.WriteLine(\"循环外的代码\");\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}