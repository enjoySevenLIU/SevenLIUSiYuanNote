{
	"ID": "20230811204312-ilpi0w5",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-github-Hexo-yaml": "---_esc_newline_title: CS1L19——for_esc_newline_date: '2023-08-11 20:43:12'_esc_newline_updated: '2024-07-01 22:40:13'_esc_newline_categories:_esc_newline_  - C#_esc_newline_  - C#入门系列_esc_newline_permalink: /post/cs1l19----for-z1udagr.html_esc_newline_comments: true_esc_newline_toc: true_esc_newline_---",
		"id": "20230811204312-ilpi0w5",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230811204312-ilpi0w5\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230811204312-wip8j6p\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230811205332-2f253xg\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230811205332-2f253xg\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;",
		"title": "CS1L19——for",
		"type": "doc",
		"updated": "20240616140459"
	},
	"Children": [
		{
			"ID": "20230811204312-wip8j6p",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230811204312-wip8j6p",
				"updated": "20240616140459"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "for"
				}
			]
		},
		{
			"ID": "20230811205058-galim6b",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230811205058-galim6b",
				"updated": "20240616140405"
			},
			"Children": [
				{
					"ID": "20240616140405-yobu46m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240616140405-yobu46m",
						"updated": "20240616140405"
					},
					"Children": [
						{
							"ID": "20240616140405-yvdit9c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616140405-yvdit9c",
								"updated": "20240616140405"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第一个空（初始表达式）：一般声明临时变量，用来记数用,可以连续声明\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240616140406-r8mviqr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240616140406-r8mviqr"
					},
					"Children": [
						{
							"ID": "20240616140406-17q3czo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616140406-17q3czo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第二个空（条件表达式）：表明进入循环的条件 一个bool类型的结果\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240616140407-8bcj685",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240616140407-8bcj685"
					},
					"Children": [
						{
							"ID": "20240616140407-1k4qzma",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616140407-1k4qzma"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第三个空（增量表达式）：用第一个空中的变量进行自增减运算"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230811205044-kj7kokb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811205044-kj7kokb",
				"updated": "20230811205055"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "for (/*初始表达式*/; /*条件表达式*/; /*增量表达式*/)\n{\n    //循环代码逻辑;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230811205109-k61pya4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811205109-k61pya4",
				"updated": "20230811205116"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第一次进入循环时，才会调用第一个空的代码\n每次循环之前都会判断第二个空中的条件 满足条件才会进入循环逻辑"
				}
			]
		},
		{
			"ID": "20230811205117-t2yl746",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811205117-t2yl746",
				"updated": "20230811205127"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "for (int i = 0; i \u003c 10; i++)\n{\n    Console.WriteLine(i);\n    //执行完循环语句块的逻辑后\n    //最后执行第三个语句的代码\n}\n\nfor(int i = 10;i \u003e= 0; i--)\n{\n    Console.WriteLine(i);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230811205135-hvga48x",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230811205135-hvga48x",
				"updated": "20240616140422"
			},
			"Children": [
				{
					"ID": "20240616140422-stlneo3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240616140422-stlneo3",
						"updated": "20240616140422"
					},
					"Children": [
						{
							"ID": "20240616140422-yecb39j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616140422-yecb39j",
								"updated": "20240616140422"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第一个空（初始表达式）：申明变量，可以连续声明变量\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240616140423-qhxasq9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240616140423-qhxasq9"
					},
					"Children": [
						{
							"ID": "20240616140423-armpx70",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616140423-armpx70"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第二个空（条件表达式）：进入循环的条件 只要是bool类型的结果的表达式都可以\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240616140423-3g95ngk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240616140423-3g95ngk"
					},
					"Children": [
						{
							"ID": "20240616140423-sp54ttw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240616140423-sp54ttw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第三个空（增量表达式）：执行一次循环逻辑后要执行的代码，做什么都可以"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230811205144-y4jjjnv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811205144-y4jjjnv",
				"updated": "20230811205200"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "for (int i = 0 , j = 0;\n    i \u003c 10 \u0026\u0026 j \u003c 0 ;\n    ++i , j += 1 , Console.WriteLine(\"完成了一次循环\"))\n{\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230811205202-jw6s2vq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230811205202-jw6s2vq",
				"updated": "20240616140459"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "支持嵌套"
				}
			]
		},
		{
			"ID": "20230811205222-4q612v6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811205222-4q612v6",
				"updated": "20240616140443"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "if"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "switch"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "while"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "do...while"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "for"
				},
				{
					"Type": "NodeText",
					"Data": "​都可以相互嵌套使用"
				}
			]
		},
		{
			"ID": "20230811205216-mwlm5g0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811205216-mwlm5g0",
				"updated": "20230811205229"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "for (int i = 0; i \u003c 10 ; i++)\n{\n    for (int j = 0; j \u003c 10; j++)\n    {\n        Console.WriteLine(i + \"_\" + j);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230811205232-c5r6azn",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230811205232-c5r6azn",
				"updated": "20240616140459"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特殊写法"
				}
			]
		},
		{
			"ID": "20230811205236-km8yfx1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230811205236-km8yfx1",
				"updated": "20240616140459"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "死循环"
				}
			]
		},
		{
			"ID": "20230811205257-8q9fu8f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811205257-8q9fu8f",
				"updated": "20240616140451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "for"
				},
				{
					"Type": "NodeText",
					"Data": "​ 循环的三个空位可以按照需求填写或空着"
				}
			]
		},
		{
			"ID": "20230811205246-5bbsi91",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811205246-5bbsi91",
				"updated": "20240616140449"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "for( ; ; )\n{\n    Console.WriteLine(\"for循环的死循环\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230811205304-nrx5605",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230811205304-nrx5605",
				"updated": "20240616140449"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int k = 10;\nfor (; k \u003c 10;)\n{\n    ++k;\n}\n\nfor (k = 0; ; ++k)\n{\n    if (k \u003e= 10)\n    {\n        break;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230811205314-uuwp35p",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230811205314-uuwp35p",
				"updated": "20240616140459"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对比while循环"
				}
			]
		},
		{
			"ID": "20230811205326-0rhcvp8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811205326-0rhcvp8",
				"updated": "20240616140459"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "for"
				},
				{
					"Type": "NodeText",
					"Data": "​ 循环 一般用来准确得到 一个范围的中的所有数\n实现同效果对比 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref code",
					"TextMarkBlockRefID": "20230811204306-ggnkero",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "while"
				},
				{
					"Type": "NodeText",
					"Data": "​ 代码量更少"
				}
			]
		},
		{
			"ID": "20230811205332-2f253xg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230811205332-2f253xg"
			}
		}
	]
}