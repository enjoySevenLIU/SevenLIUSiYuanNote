{
	"ID": "20240902125343-ijn8t4v",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240902125343-ijn8t4v",
		"title": "CS3L3——成员变量和访问修饰符",
		"type": "doc",
		"updated": "20240904195318"
	},
	"Children": [
		{
			"ID": "20240904135943-3lbqncg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240904135943-3lbqncg",
				"updated": "20240904140033"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240904135947-izxklq1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240904135947-izxklq1",
				"style": "line-height: 22px;",
				"updated": "20240904140033"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public\t\t//公共的 自己（内部）和别人（外部）都能访问和使用\nprivate\t\t//私有的 自己（内部）才能访问和使用\nprotected\t//保护的 自己（内部）和子类（继承）才能访问和使用\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902133434-u7vj6a8",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240902133434-u7vj6a8",
				"updated": "20240904195318"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员变量"
				}
			]
		},
		{
			"ID": "20240902133447-or7x93m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902133447-or7x93m",
				"updated": "20240902133514"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员变量申明在类语句块中，用来描述对象的特征，成员变量可以是任意变量类型，数量不做限制"
				}
			]
		},
		{
			"ID": "20240902130156-p1dikq4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"alias": "private,protected",
				"id": "20240902130156-p1dikq4",
				"name": "public",
				"updated": "20240904195318"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "修饰类成员的访问修饰符"
				}
			]
		},
		{
			"ID": "20240902130358-xon7gim",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902130358-xon7gim",
				"updated": "20240902130527"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240720221741-bsl0nh5",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "结构体"
				},
				{
					"Type": "NodeText",
					"Data": " 已经接触了访问修饰符，在这里修饰类成员变量和方法，它决定了成员变量或者方法是否能被外部使用"
				}
			]
		},
		{
			"ID": "20240902130202-ky9qtfz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240902130202-ky9qtfz",
				"updated": "20240903121957"
			},
			"Children": [
				{
					"ID": "20240902130216-a9a2gf7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902130216-a9a2gf7",
						"updated": "20240902130216"
					},
					"Children": [
						{
							"ID": "20240902130216-llzu4n6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902130216-llzu4n6",
								"updated": "20240902130237"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "public"
								},
								{
									"Type": "NodeText",
									"Data": "​ —— 公共的 自己（内部）和别人（外部）都能访问和使用\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240902130217-gy0sxse",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902130217-gy0sxse",
						"updated": "20240902130217"
					},
					"Children": [
						{
							"ID": "20240902130217-vg2rxh1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902130217-vg2rxh1",
								"updated": "20240902130238"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "private"
								},
								{
									"Type": "NodeText",
									"Data": "​ —— 私有的 自己（内部）才能访问和使用 不写访问修饰符就默认 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "private"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240902130217-ywlyjwu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902130217-ywlyjwu",
						"updated": "20240903121957"
					},
					"Children": [
						{
							"ID": "20240902130217-qlz64zm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902130217-qlz64zm",
								"updated": "20240903121957"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "protected"
								},
								{
									"Type": "NodeText",
									"Data": "​ —— 保护的 自己（内部）和子类（继承）才能访问和使用，这个访问修饰符在讲到 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20240903121638-0nx5ne5",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "继承"
								},
								{
									"Type": "NodeText",
									"Data": " 时会展现作用"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240902130222-j3dp87n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902130222-j3dp87n",
				"updated": "20240904194619"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目前它们决定类内部的成员 的 访问权限"
				}
			]
		},
		{
			"ID": "20240904194621-9vrb2n9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240904194621-9vrb2n9",
				"updated": "20240904194746"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里是修饰类的成员的访问修饰符，对于修饰类的访问修饰符详见 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240904142244-b5xtx03",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "CS3L22——命名空间"
				},
				{
					"Type": "NodeText",
					"Data": " 的："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240904193522-f3rq819",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "internal"
				}
			]
		},
		{
			"ID": "20240902125343-eebmw07",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902125343-eebmw07",
				"updated": "20240902133516"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员变量的声明"
				}
			]
		},
		{
			"ID": "20240902125516-q098s43",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902125516-q098s43",
				"updated": "20240902133516"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员变量是否赋值根据需求来定，如果赋值，则该变量会在实例化时就会自动赋值，相当于指定这个成员变量的默认值"
				}
			]
		},
		{
			"ID": "20240902125532-rlg25tl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902125532-rlg25tl",
				"style": "line-height: 22px;",
				"updated": "20240902132632"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "enum E_Sex\n{\n    male,\n    female\n}\n\nclass Person\n{\n    //特征——成员变量\n    //姓名\n    public string name;\n    public int age;\n    public E_Sex sex = E_Sex.male; //初始化赋值，后续可以改，按照需求决定是否初始化\n\n    public Person girlFriend;  //与结构体不同，类里面可以用类变量，甚至可以用与自己相同类的变量类型，因为是引用类型\n    public Person[] friend;    //类的成员变量可以用任何变量类型\n\n    public Position pos;\n    //在类里实例化一个 与自己不同类的成员变量是可以的\n    public Pet pet = new Pet();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902125718-j4pkcib",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902125718-j4pkcib",
				"updated": "20240902130309"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240720221741-bsl0nh5",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "结构体"
				},
				{
					"Type": "NodeText",
					"Data": "不同，类可以声明自己类型的成员变量，因为在声明类变量不赋值默认是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​，不会调用构造函数，但是不能对它实例化！"
				}
			]
		},
		{
			"ID": "20240902125657-v5xotp2",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240902125657-v5xotp2",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240902132914"
			},
			"Children": [
				{
					"ID": "20240902125937-t3racfz",
					"Type": "NodeHeading",
					"HeadingLevel": 4,
					"Properties": {
						"id": "20240902125937-t3racfz",
						"updated": "20240902132914"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！"
						}
					]
				},
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240902125701-blv6srt",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240902125701-blv6srt",
						"updated": "20240902125937"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "如果要在类中申明一个与自己相同类型的成员变量时 不可以对它实例化！！！！！（"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "null"
						},
						{
							"Type": "NodeText",
							"Data": "​ 除外）\n举例来说 我有一个女朋友 而我的女朋友里还有一个女朋友 这种抽象是错误的\n程序运行来说 如果在类里实例化 与自己相同类型的成员变量\n那么会导致实例化该类时 类内部的成员变量会再次实例化该类，造成无限递归，导致栈溢出！程序崩溃！！！"
						}
					]
				},
				{
					"ID": "20240902132808-fitxjy1",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240902132808-fitxjy1",
						"updated": "20240902132823"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "下面这段代码只要执行就会报错："
						}
					]
				},
				{
					"ID": "20240902132656-65ykbzc",
					"Type": "NodeCodeBlock",
					"IsFencedCodeBlock": true,
					"Properties": {
						"id": "20240902132656-65ykbzc",
						"style": "line-height: 22px;",
						"updated": "20240902132901"
					},
					"Children": [
						{
							"Type": "NodeCodeBlockFenceOpenMarker",
							"Data": "```"
						},
						{
							"Type": "NodeCodeBlockFenceInfoMarker",
							"CodeBlockInfo": "YyM="
						},
						{
							"Type": "NodeCodeBlockCode",
							"Data": "class Person\n{\n    public Person girlFriend = new Person();\t// error: Stack overflow.\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Person p = new Person();\n    }\n}\n"
						},
						{
							"Type": "NodeCodeBlockFenceCloseMarker",
							"Data": "```"
						}
					]
				},
				{
					"ID": "20240902132904-42a9s3y",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240902132904-42a9s3y",
						"updated": "20240902132907"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "输出："
						}
					]
				},
				{
					"ID": "20240902132907-85g2vgx",
					"Type": "NodeCodeBlock",
					"IsFencedCodeBlock": true,
					"Properties": {
						"id": "20240902132907-85g2vgx",
						"style": "line-height: 22px;",
						"updated": "20240902132914"
					},
					"Children": [
						{
							"Type": "NodeCodeBlockFenceOpenMarker",
							"Data": "```"
						},
						{
							"Type": "NodeCodeBlockFenceInfoMarker",
							"CodeBlockInfo": "YyM="
						},
						{
							"Type": "NodeCodeBlockCode",
							"Data": "Stack overflow.\nRepeat 19282 times:\n--------------------------------\n   at lesson2_封装_成员变量和访问修饰符.Person..ctor()\n--------------------------------\n   at lesson2_封装_成员变量和访问修饰符.Program.Main(System.String[])\n"
						},
						{
							"Type": "NodeCodeBlockFenceCloseMarker",
							"Data": "```"
						}
					]
				}
			]
		},
		{
			"ID": "20240902130104-jpg32aw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902130104-jpg32aw",
				"name": "default()",
				"updated": "20240902134554"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员变量的使用和初始值"
				}
			]
		},
		{
			"ID": "20240902130122-sx4a5j0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902130122-sx4a5j0",
				"updated": "20240902132036"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上文的类声明中，虽然我们没有给成员变量赋值，但是它们其实都是有自己的默认值的"
				}
			]
		},
		{
			"ID": "20240902131454-jyqsx2e",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240902131454-jyqsx2e",
				"updated": "20240902131637"
			},
			"Children": [
				{
					"ID": "20240902131541-3msjmwy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902131541-3msjmwy",
						"updated": "20240902131637"
					},
					"Children": [
						{
							"ID": "20240902131541-600cqch",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902131541-600cqch",
								"updated": "20240902131637"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "值类型初始值 数字类型 默认值都是0，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bool"
								},
								{
									"Type": "NodeText",
									"Data": "​ 类型 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "false"
								},
								{
									"Type": "NodeText",
									"Data": "​，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "char"
								},
								{
									"Type": "NodeText",
									"Data": "​ 类型 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "''"
								},
								{
									"Type": "NodeText",
									"Data": "​ (空字符)"
								}
							]
						}
					]
				},
				{
					"ID": "20240902131542-17t78bz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902131542-17t78bz",
						"updated": "20240902131542"
					},
					"Children": [
						{
							"ID": "20240902131542-dntw6jj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902131542-dntw6jj",
								"updated": "20240902131546"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "引用类型初始值 是 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "null"
								},
								{
									"Type": "NodeText",
									"Data": "​\n"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240902131546-rceeygg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902131546-rceeygg",
				"updated": "20240902132650"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "default()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来获取变量类型的默认初始值"
				}
			]
		},
		{
			"ID": "20240902131641-95b5i9u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902131641-95b5i9u",
				"style": "line-height: 22px;",
				"updated": "20240902132554"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Console.WriteLine(default(int));\nConsole.WriteLine(default(bool));\nConsole.WriteLine(default(Person));\t\t// null\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902131650-uy4i4ir",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902131650-uy4i4ir",
				"updated": "20240902131654"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240902131654-5r7kcid",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902131654-5r7kcid",
				"style": "line-height: 22px;",
				"updated": "20240902132010"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "0\nfalse\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902132040-quubxmr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902132040-quubxmr",
				"updated": "20240902134554"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在类的外部要调用成员变量，类对象需要先实例化，且这个成员变量必须是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的（子类的情况到继承时会说）"
				}
			]
		},
		{
			"ID": "20240902133028-yjhx05a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902133028-yjhx05a",
				"updated": "20240902133122"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "外部想要调用类对象的成员变量，只需要 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "对象.成员变量"
				},
				{
					"Type": "NodeText",
					"Data": "​ 即可"
				}
			]
		},
		{
			"ID": "20240902132139-1mx8vf7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902132139-1mx8vf7",
				"style": "line-height: 22px;",
				"updated": "20240902132755"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    public string name;\n    public int age;\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Person p = new Person();\n        p.name = $\"MrTang\";\n        p.age = 20;\n        Console.WriteLine(p.age);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902132425-wnd17up",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902132425-wnd17up",
				"updated": "20240902132502"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240902132503-ejyfj47",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902132503-ejyfj47",
				"style": "line-height: 22px;",
				"updated": "20240902132509"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "20\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902132538-ad8fvhv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902132538-ad8fvhv",
				"updated": "20240902132538"
			}
		}
	]
}