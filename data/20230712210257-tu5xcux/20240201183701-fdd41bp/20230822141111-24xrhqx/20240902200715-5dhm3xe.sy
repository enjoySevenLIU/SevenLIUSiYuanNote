{
	"ID": "20240902200715-5dhm3xe",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240902200715-5dhm3xe",
		"title": "CS3L7——索引器",
		"type": "doc",
		"updated": "20240904140400"
	},
	"Children": [
		{
			"ID": "20240904140352-gvks6pv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240904140352-gvks6pv",
				"updated": "20240904140400"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240904140352-0w8ti57",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240904140352-0w8ti57",
				"style": "line-height: 22px;",
				"updated": "20240904140400"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "get\t\t//索引器中接收值时会执行的关键字\nset\t\t//索引器中被修改值时会执行的关键字\nvalue\t//索引器中set代码块中传入的修改的值\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902200715-vbgyuic",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240902200715-vbgyuic",
				"name": "this[]",
				"updated": "20240902202518"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "索引器"
				}
			]
		},
		{
			"ID": "20240902200813-xu55q6q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902200813-xu55q6q",
				"updated": "20240902200931"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让对象可以像数组一样通过索引访问其中元素，使程序看起来更直观，更容易编写\n可以让我们以中括号的形式范围自定义类中的元素，规则自己规定实现，访问时和数组一样\n比较适用于在类中有数组变量时使用，可以方便的访问和逻辑处理"
				}
			]
		},
		{
			"ID": "20240902200815-uyosfz8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902200815-uyosfz8",
				"updated": "20240902202518"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "索引器语法"
				}
			]
		},
		{
			"ID": "20240902201512-oa9umu4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902201512-oa9umu4",
				"updated": "20240902201605"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "索引器的声明和属性很像"
				}
			]
		},
		{
			"ID": "20240902201028-y4zeg6c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902201028-y4zeg6c",
				"style": "line-height: 22px;",
				"updated": "20240902201332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "访问修饰符 返回值 this[参数类型 参数名, 参数类型 参数名...]\n{\n    内部写法和规则与属性相同\n    get { return ... }\n    set { ... = value }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902201102-uvwcyli",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902201102-uvwcyli",
				"updated": "20240902201215"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "语法示例："
				}
			]
		},
		{
			"ID": "20240902202223-tv9k7gz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902202223-tv9k7gz",
				"updated": "20240902202518"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "索引器内部可以写逻辑，其类似于属性，分别在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 内实现逻辑"
				}
			]
		},
		{
			"ID": "20240902201215-i5f2kv6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902201215-i5f2kv6",
				"style": "line-height: 22px;",
				"updated": "20240902202147"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    private string name;\n    private int age;\n    private Person[] friends;\n\n    private int[,] array;\n\n    //相当于函数与属性的综合体，使对象可以像数组一样使用索引来访问对象内元素\n    #region 索引器中可以写逻辑\n    public Person this[int index]\n    {\n        get\n        {\n            //get和set可以写逻辑\n            if (friends == null || friends.Length - 1 \u003c index)\n            {\n                return null;\n            }\n            return friends[index];\n        }\n        set\n        {\n            //value代表传入的值\n            if (friends == null)\n            {\n                friends = new Person[] { value };\n            }\n            else if (friends.Length - 1 \u003c index)\n            {\n                //相当于自己定了一个规则，若输入的索引越界 就会默认把最后一个朋友顶掉\n                friends[friends.Length - 1] = value;\n            }\n            else\n            {\n                friends[index] = value;\n            }\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902201619-na0xk0k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902201619-na0xk0k",
				"updated": "20240902201647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "和属性一样，如果 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 或者 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语句块只有一句代码，则可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来简写，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后跟对应的表达式语句："
				}
			]
		},
		{
			"ID": "20240902201418-pf4jti1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902201418-pf4jti1",
				"style": "line-height: 22px;",
				"updated": "20240902201722"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test\n{\n    private Test[] array;\n\n    public Test this[int index]\n    {\n        get =\u003e array[index];\n        set =\u003e array[index] = value;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902201740-d1vh91m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902201740-d1vh91m",
				"updated": "20240902201825"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "若索引器是只读的（只有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​）且 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 只有一句代码，则整个代码块都可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来简写，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后跟对应的表达式语句"
				}
			]
		},
		{
			"ID": "20240902201826-g7t5uyt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902201826-g7t5uyt",
				"style": "line-height: 22px;",
				"updated": "20240902201839"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test\n{\n    private Test[] array;\n\n    public Test this[int index] =\u003e array[index];\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902201843-udbj198",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902201843-udbj198",
				"updated": "20240902202256"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "索引器的使用"
				}
			]
		},
		{
			"ID": "20240902201850-r2wmf2y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902201850-r2wmf2y",
				"style": "line-height: 22px;",
				"updated": "20240902202057"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    private string name;\n    private Person[] friends;\n\n    //相当于函数与属性的综合体，使对象可以像数组一样使用索引来访问对象内元素\n    public Person this[int index]\n    {\n        get =\u003e return friends[index];\n        set =\u003e friends[index] = value;\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Person p = new Person();\n        //类里有索引器后，就可以像这样写\n        p[0] = new Person();\n        p[0].name = \"MrTang\";\n        Console.WriteLine(p[0].name);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902202011-y3uxz8y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902202011-y3uxz8y",
				"updated": "20240902202014"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240902202014-zb52vbt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902202014-zb52vbt",
				"style": "line-height: 22px;",
				"updated": "20240902202018"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "MrTang\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902202256-gzpge3k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902202256-gzpge3k",
				"updated": "20240902202716"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "索引器可以重载"
				}
			]
		},
		{
			"ID": "20240902202302-x0u0uvy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902202302-x0u0uvy",
				"updated": "20240902202538"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "索引器同样可以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240720214555-hp6p4lk",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "重载"
				},
				{
					"Type": "NodeText",
					"Data": "，索引器的参数和返回值也是不限的"
				}
			]
		},
		{
			"ID": "20240902202330-mc69xd4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902202330-mc69xd4",
				"style": "line-height: 22px;",
				"updated": "20240902202623"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    private string name;\n    private int age;\n    private Person[] friends;\n\n    private int[,] array;\n\n    public Person this[int index]\t\t// 重载1\n    {\n        get =\u003e return friends[index];\n        set =\u003e friends[index] = value;\n    }\n\n    public int this[int i, int j]\t\t// 重载2\n    {\n        get =\u003e array[i, j];\n        set =\u003e array[i, j] = value;\n    }\n\n    public string this[string str]\t\t// 重载3\n    {\n        get\n        {\n            switch (str)\n            {\n                case \"name\":\n                    return this.name;\n                case \"age\":\n                    return age.ToString();\n            }\n\n            return \"\";\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902202716-den73vb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902202716-den73vb",
				"updated": "20240902202716"
			}
		}
	]
}