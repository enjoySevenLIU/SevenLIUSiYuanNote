{
	"ID": "20240904223841-uhja4lf",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240904223841-uhja4lf",
		"title": "CS3SL3——面向对象七大原则",
		"type": "doc",
		"updated": "20240904230917"
	},
	"Children": [
		{
			"ID": "20240904223841-sdd9vz2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240904223841-sdd9vz2",
				"updated": "20240904224101"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为什么要有七大原则"
				}
			]
		},
		{
			"ID": "20240904223933-ujcg99f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240904223933-ujcg99f",
				"updated": "20240904223949"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "七大原则总体要实现的目标是：高内聚、低耦合\n使程序模块的可重用性、移植性增强"
				}
			]
		},
		{
			"ID": "20240904223958-zahuguk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240904223958-zahuguk",
				"updated": "20240904224101"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "何为高内聚低耦合"
				}
			]
		},
		{
			"ID": "20240904224006-44xomm4",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240904224006-44xomm4",
				"updated": "20240904224041"
			},
			"Children": [
				{
					"ID": "20240904224027-flzfymm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240904224027-flzfymm",
						"updated": "20240904224039"
					},
					"Children": [
						{
							"ID": "20240904224027-rojsf9c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224027-rojsf9c",
								"updated": "20240904224039"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从类角度来看：高内聚低耦合要减少类内部，对其他类的调用"
								}
							]
						}
					]
				},
				{
					"ID": "20240904224029-xe9lixs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240904224029-xe9lixs",
						"updated": "20240904224041"
					},
					"Children": [
						{
							"ID": "20240904224029-ope92q6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224029-ope92q6",
								"updated": "20240904224041"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从功能块来看：高内聚低耦合要减少模块之间的交互复杂度"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240904224101-s4jnvfv",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240904224101-s4jnvfv",
				"updated": "20240904230917"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "面向对象七大原则"
				}
			]
		},
		{
			"ID": "20240904230833-n4k66hu",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240904230833-n4k66hu",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240904230917"
			},
			"Children": [
				{
					"ID": "20240904230914-lonfr19",
					"Type": "NodeHeading",
					"HeadingLevel": 4,
					"Properties": {
						"id": "20240904230914-lonfr19",
						"updated": "20240904230917"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意"
						}
					]
				},
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240904230833-oliak3p",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240904230833-oliak3p",
						"updated": "20240904230909"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "初学程序阶段，不要过多的纠结于七大原则，\n先用最适合自己的方法把需求实现了，再使用七大原则去优化\n不要想着一步到位，要循序渐进，面向对象编程能力提升是需要经验积累的"
						}
					]
				}
			]
		},
		{
			"ID": "20240904224104-97ldjes",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240904224104-97ldjes",
				"updated": "20240904230732"
			},
			"Children": [
				{
					"ID": "20240904224105-f2dnjks",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240904224105-f2dnjks",
						"updated": "20240904224105"
					},
					"Children": [
						{
							"ID": "20240904224105-oob16ed",
							"Type": "NodeHeading",
							"HeadingLevel": 2,
							"Properties": {
								"id": "20240904224105-oob16ed",
								"updated": "20240904230717"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "单一职责原则"
								}
							]
						},
						{
							"ID": "20240904225709-7wqpl2q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904225709-7wqpl2q",
								"updated": "20240904225954"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "即："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "一个类只处理自己应该处理的内容"
								},
								{
									"Type": "NodeText",
									"Data": "，不应该什么都写在一起"
								}
							]
						},
						{
							"ID": "20240904224234-r0c8xab",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224234-r0c8xab",
								"updated": "20240904225704"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SRP (Single Responsibility Principle)，类被修改的几率很大，因此应该专注于单一的功能。\n如果把多个功能放在同一个类中，功能之间就形成了关联，改变其中一个功能，有可能中止另一个功能。"
								}
							]
						},
						{
							"ID": "20240904224355-9cazzy7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224355-9cazzy7",
								"updated": "20240904224357"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "举例：假设程序、策划、美术三个工种是三个类，他们应该各司其职，在程序世界中只应该做自己应该做的事情。"
								}
							]
						}
					]
				},
				{
					"ID": "20240904224110-g3ndlnt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240904224110-g3ndlnt",
						"updated": "20240904230720"
					},
					"Children": [
						{
							"ID": "20240904224110-r5o5m4i",
							"Type": "NodeHeading",
							"HeadingLevel": 2,
							"Properties": {
								"id": "20240904224110-r5o5m4i",
								"updated": "20240904230720"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "开闭原则"
								}
							]
						},
						{
							"ID": "20240904224402-dwj4e5t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224402-dwj4e5t",
								"updated": "20240904230008"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "OCP (Open-Closed Principle)，即：对拓展开放，对修改关闭，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "新加功能尽可能是增加方法而不是改源代码"
								}
							]
						},
						{
							"ID": "20240904224522-wp0r3f5",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20240904224522-wp0r3f5",
								"updated": "20240904224522"
							},
							"Children": [
								{
									"ID": "20240904224522-7187ok3",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240904224522-7187ok3",
										"updated": "20240904224522"
									},
									"Children": [
										{
											"ID": "20240904224522-73r9xvu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240904224522-73r9xvu",
												"updated": "20240904224522"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "拓展开放：模块的行为可以被拓展从而满足新的需求\n"
												}
											]
										}
									]
								},
								{
									"ID": "20240904224523-br6jbf0",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240904224523-br6jbf0",
										"updated": "20240904224523"
									},
									"Children": [
										{
											"ID": "20240904224523-2bgllg0",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240904224523-2bgllg0",
												"updated": "20240904224523"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "修改关闭：不允许修改模块的源代码（或者尽量使修改最小化）"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20240904224516-ly0h7rb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224516-ly0h7rb",
								"updated": "20240904224519"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "举例：继承就是最典型的开闭原则的体现，可以通过添加新的子类和重写父类的方法来实现"
								}
							]
						}
					]
				},
				{
					"ID": "20240904224116-ldm7iuo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240904224116-ldm7iuo",
						"updated": "20240904230722"
					},
					"Children": [
						{
							"ID": "20240904224116-l55rvu6",
							"Type": "NodeHeading",
							"HeadingLevel": 2,
							"Properties": {
								"id": "20240904224116-l55rvu6",
								"updated": "20240904230722"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "里氏替换原则"
								}
							]
						},
						{
							"ID": "20240904224530-z547um2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224530-z547um2",
								"updated": "20240904225948"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LSP (Liskov Substitution Principle)，任何父类出现的地方，子类都可以替代，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "即父类装子类"
								}
							]
						},
						{
							"ID": "20240904224552-stb12w5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224552-stb12w5",
								"updated": "20240904224604"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "举例：用父类容器装载子类对象，因为子类对象包含了父类的所有内容"
								}
							]
						}
					]
				},
				{
					"ID": "20240904224122-fgjvr1r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240904224122-fgjvr1r",
						"updated": "20240904230727"
					},
					"Children": [
						{
							"ID": "20240904224122-ul4wgt1",
							"Type": "NodeHeading",
							"HeadingLevel": 2,
							"Properties": {
								"id": "20240904224122-ul4wgt1",
								"updated": "20240904230727"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "依赖倒转原则"
								}
							]
						},
						{
							"ID": "20240904224605-3hz64wy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224605-3hz64wy",
								"updated": "20240904225907"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "DIP (Dependence Inversion Principle)，要依赖于抽象，不要依赖于具体的实现，要"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "依赖抽象（接口）"
								}
							]
						},
						{
							"ID": "20240904224629-s30aepy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224629-s30aepy",
								"updated": "20240904224702"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "例如：把函数的参数改为接口，而不是具体的类型，这样拥有这种接口行为的类对象都可以传入"
								}
							]
						},
						{
							"ID": "20240904224729-ytduc8u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224729-ytduc8u",
								"updated": "20240904224729"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Properties": {
										"parent-style": "width: 474px;",
										"style": "width: 464px;"
									},
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "image"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/image-20240904224729-7xuit7l.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"width: 464px;\" parent-style=\"width: 474px;\"}"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240904224128-0zl4a9k",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240904224128-0zl4a9k",
						"updated": "20240904230728"
					},
					"Children": [
						{
							"ID": "20240904224128-r3ud1jc",
							"Type": "NodeHeading",
							"HeadingLevel": 2,
							"Properties": {
								"id": "20240904224128-r3ud1jc",
								"updated": "20240904230728"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "迪米特法则"
								}
							]
						},
						{
							"ID": "20240904224747-3vojerv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224747-3vojerv",
								"updated": "20240904230045"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LoP (Law of Demeter)，又称最少知识原则，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "一个类要尽量减少对别的类的了解，尽量少用别的类和自己关联"
								}
							]
						},
						{
							"ID": "20240904224810-obkz748",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224810-obkz748",
								"updated": "20240904224851"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个对象应当对其它对象尽可能少的了解不要和陌生人说话"
								}
							]
						},
						{
							"ID": "20240904224848-78m3965",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224848-78m3965",
								"updated": "20240904224848"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "举例：一个对象中的成员，要尽可能少的直接和其它类建立关系目的是降低耦合性"
								}
							]
						}
					]
				},
				{
					"ID": "20240904224152-solkp3n",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240904224152-solkp3n",
						"updated": "20240904230730"
					},
					"Children": [
						{
							"ID": "20240904224152-fucjuj9",
							"Type": "NodeHeading",
							"HeadingLevel": 2,
							"Properties": {
								"id": "20240904224152-fucjuj9",
								"updated": "20240904230730"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "接口隔离原则"
								}
							]
						},
						{
							"ID": "20240904224844-tjn03q8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224844-tjn03q8",
								"updated": "20240904230553"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ISP (Interface Segregation Principle)，不应该强迫别人依赖他们不需要使用的方法，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "一个接口一个行为，不要一个接口n个行为"
								}
							]
						},
						{
							"ID": "20240904224917-6cougdw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224917-6cougdw",
								"updated": "20240904224917"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个接口不需要提供太多的行为，一个接口应该尽量只提供一个对外的功能，\n让别人去选择需要实现什么样的行为，而不是把所有的行为都封装到一个接口当中"
								}
							]
						},
						{
							"ID": "20240904224920-cuw8578",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904224920-cuw8578",
								"updated": "20240904224930"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "举例：飞行接口、走路接口、跑步接口等等，虽然都是移动的行为\n但是我们应该把他们分为一个一个单独的接口，让别人去选择使用"
								}
							]
						},
						{
							"ID": "20240904225103-sfo4skq",
							"Type": "NodeBlockquote",
							"Properties": {
								"id": "20240904225103-sfo4skq",
								"updated": "20240904225104"
							},
							"Children": [
								{
									"Type": "NodeBlockquoteMarker",
									"Data": "\u003e"
								},
								{
									"ID": "20240904225104-b0z47cj",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240904225104-b0z47cj",
										"updated": "20240904230523"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "笔者注：不妨多尝试基于行为抽象，也就是多抽象接口，将不同行为抽象成不同接口，一个类有哪些行为就继承哪些接口，达成一种组合\n例如，怪物基类提供攻击行为、生命增加减少行为和死亡行为，但有些具有攻击行为的怪物对象可能是无敌的，这时生命和死亡行为就会成为不必要的耦合\n把攻击行为，生命增加减少行为，死亡行为使用接口抽象，并剔除出怪物基类，让需要对应行为的类继承，就可以减少耦合"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240904224214-bi3cdyc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240904224214-bi3cdyc",
						"updated": "20240904230732"
					},
					"Children": [
						{
							"ID": "20240904224214-ppbbgbl",
							"Type": "NodeHeading",
							"HeadingLevel": 2,
							"Properties": {
								"id": "20240904224214-ppbbgbl",
								"updated": "20240904230732"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "合成复用原则"
								}
							]
						},
						{
							"ID": "20240904225015-v0ub3fy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904225015-v0ub3fy",
								"updated": "20240904230618"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CRP (Composite Reuse Principle)，除非设计上需要继承，否则"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "尽量使用对象组合"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								}
							]
						},
						{
							"ID": "20240904230619-z67ead9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904230619-z67ead9",
								"updated": "20240904230625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不使用继承来达到复用的目的，继承关系是强耦合，组合关系是低耦合"
								}
							]
						},
						{
							"ID": "20240904225032-nl4n0dh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240904225032-nl4n0dh",
								"updated": "20240904225039"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "举例：脸应该是眼镜、鼻子、嘴巴、耳朵的组合，而不是依次的继承角色和装备也应该是组合，而不是继承"
								}
							]
						},
						{
							"ID": "20240904225044-d6l4p3r",
							"Type": "NodeBlockquote",
							"Properties": {
								"id": "20240904225044-d6l4p3r",
								"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
								"updated": "20240904225049"
							},
							"Children": [
								{
									"Type": "NodeBlockquoteMarker",
									"Data": "\u003e"
								},
								{
									"ID": "20240904225049-a8ojz4e",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240904225049-a8ojz4e",
										"updated": "20240904225049"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "注意：不能盲目的使用合成复用原则，要在遵循迪米特原则的前提下"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240904225014-zoef4dc",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240904225014-zoef4dc",
				"updated": "20240904230820"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如何使用这些原则"
				}
			]
		},
		{
			"ID": "20240904230706-zhg5gxe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240904230706-zhg5gxe",
				"updated": "20240904230810"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在开始做项目之前，整理UML类图时先按自己的想法把需要的类整理出来，\n再把七大原则截图放在旁边，基于七大原则去优化整理自己的设计，"
				}
			]
		},
		{
			"ID": "20240904230811-qqibkpr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240904230811-qqibkpr",
				"updated": "20240904230820"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "整体目标就是："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "高内聚，低耦合"
				}
			]
		},
		{
			"ID": "20240904230820-xu9c7n0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240904230820-xu9c7n0",
				"updated": "20240904230820"
			}
		}
	]
}