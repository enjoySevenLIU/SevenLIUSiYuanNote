{
	"ID": "20240903131756-7q9d4jr",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240903131756-7q9d4jr",
		"title": "CS3L15——继承中的构造函数",
		"type": "doc",
		"updated": "20240904140805"
	},
	"Children": [
		{
			"ID": "20240904140737-0yd91bk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240904140737-0yd91bk",
				"updated": "20240904140805"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240904140742-q6xiyk1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240904140742-q6xiyk1",
				"style": "line-height: 22px;",
				"updated": "20240904140805"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "this\t//代表类自己的构造函数\nbase\t//代表父类的构造函数\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240903131756-oetftkx",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240903131756-oetftkx",
				"updated": "20240903134519"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承中的构造函数"
				}
			]
		},
		{
			"ID": "20240903131841-rl61t3k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903131841-rl61t3k",
				"updated": "20240903134158"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特点：当实例化一个子类对象时，执行顺序是先执行父类的构造函数 再执行子类的 从最开始的基类开始 依次一代一代向下执行"
				}
			]
		},
		{
			"ID": "20240903131853-09zpz7a",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240903131853-09zpz7a",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240903134519"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240903131905-vibhrvm",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240903131905-vibhrvm",
						"updated": "20240903134400"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！父类的无参构造很重要，子类构造函数默认会调用父类无参构造函数\n子类的构造函数必须要调用父类的一个构造函数，子类可以通过 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "base"
						},
						{
							"Type": "NodeText",
							"Data": "​ 关键字 来指定调用父类的某个构造函数"
						}
					]
				},
				{
					"ID": "20240903134408-mi75mgu",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240903134408-mi75mgu",
						"updated": "20240903134519"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意要区分 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "base"
						},
						{
							"Type": "NodeText",
							"Data": "​ 和 "
						},
						{
							"Type": "NodeTextMark",
							"Properties": {
								"style": "background-color: var(--b3-font-background3);"
							},
							"TextMarkType": "code block-ref text",
							"TextMarkBlockRefID": "20240902141927-5c76xw1",
							"TextMarkBlockRefSubtype": "s",
							"TextMarkTextContent": "this"
						},
						{
							"Type": "NodeKramdownSpanIAL",
							"Data": "{: style=\"background-color: var(--b3-font-background3);\"}"
						},
						{
							"Type": "NodeText",
							"Data": "​ 的区别，"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "base"
						},
						{
							"Type": "NodeText",
							"Data": "​ 是基类的构造函数，而 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "this"
						},
						{
							"Type": "NodeText",
							"Data": "​ 是类自己的构造函数"
						}
					]
				}
			]
		},
		{
			"ID": "20240903131912-835ojk5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240903131912-835ojk5",
				"updated": "20240903132109"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承中构造函数的执行顺序"
				}
			]
		},
		{
			"ID": "20240903131922-yprq3jy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903131922-yprq3jy",
				"updated": "20240903131928"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "父类的父类的构造 ——\u003e ... 父类构造 ——\u003e ... ——\u003e 子类构造"
				}
			]
		},
		{
			"ID": "20240903131958-3zqitpo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240903131958-3zqitpo",
				"style": "line-height: 22px;",
				"updated": "20240903132020"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class GameObject\n{\n    public GameObject()\n    {\n        Console.WriteLine(\"GameObject的构造函数\");\n    }\n}\nclass Player : GameObject\n{\n    public Player()\n    {\n        Console.WriteLine(\"Player的构造函数\");\n    }\n}\n\nclass MainPlayer : Player\n{\n    public MainPlayer()\n    {\n        Console.WriteLine(\"MainPlayer的构造函数\");\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        MainPlayer mp = new MainPlayer();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240903132002-8kx4o67",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903132002-8kx4o67",
				"updated": "20240903132023"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240903132024-4lbi239",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240903132024-4lbi239",
				"style": "line-height: 22px;",
				"updated": "20240903132036"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "GameObject的构造函数\nPlayer的构造函数\nMainPlayer的构造函数\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240903132109-cl8fjo7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240903132109-cl8fjo7",
				"updated": "20240903134505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过 base 调用指定父类构造"
				}
			]
		},
		{
			"ID": "20240903132732-di10k04",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903132732-di10k04",
				"updated": "20240903133653"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "父类的无参构造函数很重要，如果父类的无参构造不存在或者被顶掉，子类构造函数又不调用父类构造函数，就会报错\n因为实例化子类时会自动调用父类的构造函数，没有无参构造就无法默认执行父类无参构造函数，除非使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "base"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法使其使用别的有参构造函数"
				}
			]
		},
		{
			"ID": "20240903134216-zt12e5z",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240903134216-zt12e5z",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240903134505"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240903134303-qbdv7i8",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240903134303-qbdv7i8",
						"updated": "20240903134505"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意：要区分 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "base"
						},
						{
							"Type": "NodeText",
							"Data": "​ 和 "
						},
						{
							"Type": "NodeTextMark",
							"Properties": {
								"style": "background-color: var(--b3-font-background3);"
							},
							"TextMarkType": "code block-ref text",
							"TextMarkBlockRefID": "20240902141927-5c76xw1",
							"TextMarkBlockRefSubtype": "s",
							"TextMarkTextContent": "this"
						},
						{
							"Type": "NodeKramdownSpanIAL",
							"Data": "{: style=\"background-color: var(--b3-font-background3);\"}"
						},
						{
							"Type": "NodeText",
							"Data": "​ 的区别，"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "base"
						},
						{
							"Type": "NodeText",
							"Data": "​ 是基类的构造函数，而 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "this"
						},
						{
							"Type": "NodeText",
							"Data": "​ 是类自己的构造函数"
						}
					]
				}
			]
		},
		{
			"ID": "20240903132814-5v1h7yv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903132814-5v1h7yv",
				"updated": "20240903133707"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "子类的所有构造函数想要执行，都需要先执行父类的一个构造函数"
				},
				{
					"Type": "NodeText",
					"Data": "，无论是用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "base"
				},
				{
					"Type": "NodeText",
					"Data": "​ 或者用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "this"
				},
				{
					"Type": "NodeText",
					"Data": "​（间接调用）方法"
				}
			]
		},
		{
			"ID": "20240903132752-hvqb382",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240903132752-hvqb382",
				"style": "line-height: 22px;",
				"updated": "20240903133909"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Father\n{\n    public Father(int i)\n    {\n        Console.WriteLine(\"Father构造\");\n    }\n}\n\nclass Son : Father\n{\n    //如果想要用子类调用父类的有参构造函数则需要使用base，子类的所有构造函数想要执行，都需要执行父类的构造函数\n    public Son(int i) : base(i) \t\t\t//相当于将子类的构造函数参数传入父类的构造函数参数内\n    {\n        Console.WriteLine(\"Son的一个参数的构造函数\");\n    }\n\n    public Son(int i, string str) : this(i) //将该函数传入的参数i传入这个类里的另一个只有参数i的构造函数\n    {\n        Console.WriteLine(\"Son的两个参数的构造函数\");\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Son s = new Son(1, \"123\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240903133732-ea2po5j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903133732-ea2po5j",
				"updated": "20240903133852"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240903133853-31h0qhv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240903133853-31h0qhv",
				"style": "line-height: 22px;",
				"updated": "20240903133854"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Father构造\nSon的一个参数的构造函数\nSon的两个参数的构造函数\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}