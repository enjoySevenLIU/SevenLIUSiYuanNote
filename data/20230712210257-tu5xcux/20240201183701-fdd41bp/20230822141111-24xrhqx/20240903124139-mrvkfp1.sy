{
	"ID": "20240903124139-mrvkfp1",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240903124139-mrvkfp1",
		"title": "CS3L14——里氏替换原则",
		"type": "doc",
		"updated": "20240903143046"
	},
	"Children": [
		{
			"ID": "20240903124139-ex1buvs",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240903124139-ex1buvs",
				"updated": "20240903143046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "里氏替换原则"
				}
			]
		},
		{
			"ID": "20240903124223-o0w1enr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903124223-o0w1enr",
				"updated": "20240903124240"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "里氏替换原则是面向对象七大原则中最重要的原则"
				}
			]
		},
		{
			"ID": "20240903124240-c2ebx64",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240903124240-c2ebx64",
				"updated": "20240903124240"
			},
			"Children": [
				{
					"ID": "20240903124240-iuaokch",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240903124240-iuaokch",
						"updated": "20240903124240"
					},
					"Children": [
						{
							"ID": "20240903124240-8v1kwdu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240903124240-8v1kwdu",
								"updated": "20240903124240"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "概念：任何父类出现的地方，子类都可以替代\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240903124241-8q6be5p",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240903124241-8q6be5p",
						"updated": "20240903124241"
					},
					"Children": [
						{
							"ID": "20240903124241-xa38vee",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240903124241-xa38vee",
								"updated": "20240903124241"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "重点：语法表现为父类容器装子类对象，因为子类对象包含了父类的所有内容\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240903124241-aeziawr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240903124241-aeziawr",
						"updated": "20240903124241"
					},
					"Children": [
						{
							"ID": "20240903124241-3z8wqxv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240903124241-3z8wqxv",
								"updated": "20240903124241"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "作用：方便进行对象存储和管理"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240903142038-eyu0xpb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903142038-eyu0xpb",
				"updated": "20240903143046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "里氏替换原则的意义是：让我们不需要关心子类的实现，只管调用父类声明好的成员即可，它需要配合后续的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240903140959-1qvqgzq",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "多态"
				},
				{
					"Type": "NodeText",
					"Data": " 才会展现出意义所在"
				}
			]
		},
		{
			"ID": "20240903124242-64kfy9c",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240903124242-64kfy9c",
				"updated": "20240903124546"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本实现"
				}
			]
		},
		{
			"ID": "20240903124518-s62hvcf",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240903124518-s62hvcf",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240903124546"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240903124546-ahh8q3n",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240903124546-ahh8q3n",
						"updated": "20240903124546"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！用父类容器装载的子类对象不能直接调用子类里的成员方法，如果要使用子类的方法就需要用到 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "is"
						},
						{
							"Type": "NodeText",
							"Data": "​ 和 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "as"
						},
						{
							"Type": "NodeText",
							"Data": "​"
						}
					]
				}
			]
		},
		{
			"ID": "20240903124324-aoibw0w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240903124324-aoibw0w",
				"style": "line-height: 22px;",
				"updated": "20240903124406"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class GameObject { }\n\nclass Player : GameObject\n{\n    public void PlayerAtk()\n    {\n        Console.WriteLine(\"怪物攻击\");\n    }\n}\nclass Monster : GameObject\n{\n    public void MonsterAtk()\n    {\n        Console.WriteLine(\"怪物攻击\");\n    }\n}\nclass Boss : GameObject\n{\n    public void BossAtk()\n    {\n        Console.WriteLine(\"boss攻击\");\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        //里氏替换原则 用父类容器 装载 子类对象\n        GameObject player = new Player();\n        GameObject monster = new Monster();\n        GameObject boss = new Boss();\n\n        GameObject[] objects = new GameObject[] { new Player(), new Monster(), new Boss() };\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240903124343-rlgn1d0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"alias": "is",
				"id": "20240903124343-rlgn1d0",
				"name": "as",
				"updated": "20240903135203"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "is 和 as"
				}
			]
		},
		{
			"ID": "20240903124626-6eqkyb6",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240903124626-6eqkyb6",
				"updated": "20240903124707"
			},
			"Children": [
				{
					"ID": "20240903124707-3ip1lu4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240903124707-3ip1lu4",
						"updated": "20240903124707"
					},
					"Children": [
						{
							"ID": "20240903124707-afkbrw9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240903124707-afkbrw9",
								"updated": "20240903124716"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "is"
								},
								{
									"Type": "NodeText",
									"Data": "​：判断一个实例化对象是否是指定类\n"
								}
							]
						},
						{
							"ID": "20240903124721-z06m16e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240903124721-z06m16e",
								"updated": "20240903124721"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回值："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bool"
								},
								{
									"Type": "NodeText",
									"Data": "​ 是为真 不是为假"
								}
							]
						}
					]
				},
				{
					"ID": "20240903124708-k60uoiz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240903124708-k60uoiz",
						"updated": "20240903124708"
					},
					"Children": [
						{
							"ID": "20240903124708-61kdsn9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240903124708-61kdsn9",
								"updated": "20240903124710"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "as"
								},
								{
									"Type": "NodeText",
									"Data": "​：将一个对象转换为指定类\n"
								}
							]
						},
						{
							"ID": "20240903124723-nbwx358",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240903124723-nbwx358",
								"updated": "20240903124728"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回值：指定类型对象，成功返回执行类型对象，返回失败 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "null"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240903125447-2kzwtnv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903125447-2kzwtnv",
				"updated": "20240903125506"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "is"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "as"
				},
				{
					"Type": "NodeText",
					"Data": "​ 配合使用，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "is"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来确保对象是指定类对象，防止 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "as"
				},
				{
					"Type": "NodeText",
					"Data": "​ 返回 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 导致报错"
				}
			]
		},
		{
			"ID": "20240903124931-smx5g46",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903124931-smx5g46",
				"updated": "20240903124958"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "as"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230614193355-yfpkyvm",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "括号强转"
				},
				{
					"Type": "NodeText",
					"Data": " 的区别："
				}
			]
		},
		{
			"ID": "20240903125019-1l03fc2",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240903125019-1l03fc2",
				"updated": "20240903135203"
			},
			"Children": [
				{
					"ID": "20240903125019-5wapnmo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240903125019-5wapnmo",
						"updated": "20240903135203"
					},
					"Children": [
						{
							"ID": "20240903125019-jw9d13y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240903125019-jw9d13y",
								"updated": "20240903135203"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "转换检查"
								},
								{
									"Type": "NodeText",
									"Data": "：括号强转不进行转换检查，直接尝试转换。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "as"
								},
								{
									"Type": "NodeText",
									"Data": "​ 会先进行转换检查，如果对象不能转换为目标类型，则返回"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "null"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240903125019-nie5d3d",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240903125019-nie5d3d",
						"updated": "20240903135202"
					},
					"Children": [
						{
							"ID": "20240903125019-fmknd5k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240903125019-fmknd5k",
								"updated": "20240903135202"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "失败处理"
								},
								{
									"Type": "NodeText",
									"Data": "：括号强转如果转换失败，会抛出"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "InvalidCastException"
								},
								{
									"Type": "NodeText",
									"Data": "​异常。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "as"
								},
								{
									"Type": "NodeText",
									"Data": "​ 不会抛出异常，而是返回"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "null"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240903125019-8twz76c",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240903125019-8twz76c",
						"updated": "20240903125209"
					},
					"Children": [
						{
							"ID": "20240903125019-le6f5ql",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240903125019-le6f5ql",
								"updated": "20240903125209"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "适用范围"
								},
								{
									"Type": "NodeText",
									"Data": "：括号强转可以用于值类型和引用类型。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "as"
								},
								{
									"Type": "NodeText",
									"Data": "​ 只能用于引用类型和可空值类型（如"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "int?"
								},
								{
									"Type": "NodeText",
									"Data": "​），不能用于非可空值类型"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240903124626-ifginc8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903124626-ifginc8",
				"updated": "20240903125216"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本语法："
				}
			]
		},
		{
			"ID": "20240903124630-eiiamwc",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240903124630-eiiamwc",
				"updated": "20240903125433"
			},
			"Children": [
				{
					"ID": "20240903124630-2lt8dzr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240903124630-2lt8dzr",
						"updated": "20240903125433"
					},
					"Children": [
						{
							"ID": "20240903124630-nuxga5e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240903124630-nuxga5e",
								"updated": "20240903125433"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "类对象 is 类名"
								},
								{
									"Type": "NodeText",
									"Data": "​ 该语句 会返回一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bool"
								},
								{
									"Type": "NodeText",
									"Data": "​ 值："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "false"
								},
								{
									"Type": "NodeText",
									"Data": "​ 或者 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "true"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240903124630-f461u75",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240903124630-f461u75",
						"updated": "20240903124630"
					},
					"Children": [
						{
							"ID": "20240903124630-oiykxf7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240903124630-oiykxf7",
								"updated": "20240903124702"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "类对象 as 类名"
								},
								{
									"Type": "NodeText",
									"Data": "​ 该语句 会有一个对象返回值对象或者 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "null"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240903125310-xrnv566",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903125310-xrnv566",
				"updated": "20240903125314"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用示例："
				}
			]
		},
		{
			"ID": "20240903125225-23ryll5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240903125225-23ryll5",
				"style": "line-height: 22px;",
				"updated": "20240903125615"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class GameObject { }\n\nclass Player : GameObject\n{\n    public void PlayerAtk()\n    {\n        Console.WriteLine(\"怪物攻击\");\n    }\n}\nclass Monster : GameObject\n{\n    public void MonsterAtk()\n    {\n        Console.WriteLine(\"怪物攻击\");\n    }\n}\nclass Boss : GameObject\n{\n    public void BossAtk()\n    {\n        Console.WriteLine(\"boss攻击\");\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        GameObject player = new Player();\n        GameObject[] objects = new GameObject[] { new Player(), new Monster(), new Boss() };\n\n        if (player is Player)\n        {\n            Console.WriteLine(\"是Player类型的\");\n            (player as Player).PlayerAtk();\n        }\n\n        //一般is和as配合使用，is来确保对象是指定类对象，防止as返回null导致报错\n        for (int i = 0; i \u003c objects.Length; i++)\n        {\n            if (objects[i] is Player)\n            {\n                (objects[i] as Player).PlayerAtk();\n            }\n            else if (objects[i] is Monster)\n            {\n                (objects[i] as Monster).MonsterAtk();\n            }\n            else if (objects[i] is Boss)\n            {\n                (objects[i] as Boss).BossAtk();\n            }\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}