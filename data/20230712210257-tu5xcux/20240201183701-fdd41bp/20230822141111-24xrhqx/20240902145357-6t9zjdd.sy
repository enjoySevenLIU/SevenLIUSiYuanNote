{
	"ID": "20240902145357-6t9zjdd",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240902145357-6t9zjdd",
		"title": "CS3L6——成员属性",
		"type": "doc",
		"updated": "20240904140343"
	},
	"Children": [
		{
			"ID": "20240904140224-u8qmn7z",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240904140224-u8qmn7z",
				"updated": "20240904140343"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240904140230-t8ektrf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240904140230-t8ektrf",
				"style": "line-height: 22px;",
				"updated": "20240904140343"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "get\t\t//属性中接收值时会执行的关键字\nset\t\t//属性中被修改值时会执行的关键字\nvalue\t//属性中set代码块中传入的修改的值\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902145357-yujzh5p",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240902145357-yujzh5p",
				"updated": "20240902200640"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员属性"
				}
			]
		},
		{
			"ID": "20240902145541-tfj56ru",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240902145541-tfj56ru",
				"style": "background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);",
				"updated": "20240902200640"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240902145641-9rvvih2",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240902145641-9rvvih2",
						"updated": "20240902200640"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "属性是 C"
						},
						{
							"Type": "NodeBackslash",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "#"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 非常好用的语言功能，实际开发中强烈建议"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "u",
							"TextMarkTextContent": "使用 公开成员属性 + 私有成员变量 来代替 公开成员变量"
						},
						{
							"Type": "NodeText",
							"Data": "\n因为相比起直接使用公开成员变量，属性具有灵活性，在后续开发可以很方便地对属性读写添加或修改额外逻辑，并提高安全性"
						}
					]
				}
			]
		},
		{
			"ID": "20240902154447-0e98k46",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902154447-0e98k46",
				"updated": "20240902154552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员属性 一般是用来保护成员变量的，成员属性和使用和变量一样 外部用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "对象.属性"
				},
				{
					"Type": "NodeText",
					"Data": "​ 调用\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中需要 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "return"
				},
				{
					"Type": "NodeText",
					"Data": "​ 内容；"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "value"
				},
				{
					"Type": "NodeText",
					"Data": "​ 表示传入的内容\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语句块内可以加逻辑处理，get和set可以加访问修饰符，但是要按照一定的规则进行添加\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以只有一个\n自动属性是属性语句块中只有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​，一般用于 外部不能改能得 的情况"
				}
			]
		},
		{
			"ID": "20240902145433-guiaded",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902145433-guiaded",
				"updated": "20240902154603"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "属性用于保护成员变量，为成员变量的获取和赋值添加逻辑处理（例如加密等），解决访问修饰符的局限性"
				}
			]
		},
		{
			"ID": "20240902145447-358k1pn",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240902145447-358k1pn",
				"updated": "20240902145459"
			},
			"Children": [
				{
					"ID": "20240902145447-p1p0eow",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902145447-p1p0eow",
						"updated": "20240902145459"
					},
					"Children": [
						{
							"ID": "20240902145447-dog1emu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902145447-dog1emu",
								"updated": "20240902145459"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "public"
								},
								{
									"Type": "NodeText",
									"Data": "​ —— 内外访问"
								}
							]
						}
					]
				},
				{
					"ID": "20240902145448-7f8ierw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902145448-7f8ierw",
						"updated": "20240902145456"
					},
					"Children": [
						{
							"ID": "20240902145448-ua3fnf6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902145448-ua3fnf6",
								"updated": "20240902145456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "private"
								},
								{
									"Type": "NodeText",
									"Data": "​ —— 内部访问"
								}
							]
						}
					]
				},
				{
					"ID": "20240902145448-fhl3cj9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902145448-fhl3cj9",
						"updated": "20240902145453"
					},
					"Children": [
						{
							"ID": "20240902145448-d1tqpi8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902145448-d1tqpi8",
								"updated": "20240902145453"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "protected"
								},
								{
									"Type": "NodeText",
									"Data": "​ —— 内部和子类访问"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240902145442-fiov85i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902145442-fiov85i",
				"updated": "20240902145948"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "属性可以让成员变量在外部，只能获取不能修改 或者 只能修改不能获取，并为获取和修改添加额外逻辑"
				}
			]
		},
		{
			"ID": "20240902145814-n80vstx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902145814-n80vstx",
				"updated": "20240902150950"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员属性的基本语法"
				}
			]
		},
		{
			"ID": "20240902150145-umv3dnj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902150145-umv3dnj",
				"updated": "20240902150145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "属性的命名一般用帕斯卡命名法"
				}
			]
		},
		{
			"ID": "20240902150023-lghw2q2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902150023-lghw2q2",
				"style": "line-height: 22px;",
				"updated": "20240902150230"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "访问修饰符 属性类型 属性名\n{\n    get { return ... }\n    set { ... = value }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902150045-cp2ts0p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902150045-cp2ts0p",
				"updated": "20240902150117"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "声明示例："
				}
			]
		},
		{
			"ID": "20240902150117-8mou1gl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902150117-8mou1gl",
				"style": "line-height: 22px;",
				"updated": "20240902150250"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    private string name;\n\n    //属性的命名一般用帕斯卡命名法\n    public string Name\n    {\n        //get需要一个返回值，因此必要return\n        get\n        {\n            //可以在返回之前添加一些逻辑规则，通过属性Name使外部获取到类里私有的name\n            return name;\n        }\n        //set中 value 是关键字 用于表示外部传入的值，使用set需要传入一个值\n        set\n        {\n            //可以在设置之前添加一些逻辑规则\n            name = value;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902150203-77c5vsy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902150203-77c5vsy",
				"updated": "20240902150608"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 或者 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语句块只有一句代码，则可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来简写，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后跟对应的表达式语句："
				}
			]
		},
		{
			"ID": "20240902150359-p2l58hs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902150359-p2l58hs",
				"style": "line-height: 22px;",
				"updated": "20240902150818"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    private string name;\n\n    //属性的命名一般用帕斯卡命名法\n    public string Name\n    {\n        get =\u003e name;\t\t\t//=\u003e 在这里等价于 return，后跟要返回值即可\n        set =\u003e name = value;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902150819-kwsu8w5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902150819-kwsu8w5",
				"updated": "20240902150941"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "属性的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 或者 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语句块内可以添加多个逻辑，以处理传入的值或者返回的值"
				}
			]
		},
		{
			"ID": "20240902150506-lpyh1us",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902150506-lpyh1us",
				"style": "line-height: 22px;",
				"updated": "20240902150722"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    private string name;\n    private int age;\n\n    //属性的命名一般用帕斯卡命名法\n    public string Name\n    {\n        get =\u003e name;\t\t//等价于 return，=\u003e 后跟要返回值即可\n        set =\u003e name = value;\n    }\n\n    public int Money\n    {\n        get =\u003e money - 5;\t//可以解密处理\n        set\n        {\n            //可以保证成员变量处于一个范围内\n            if (value \u003c 0)\n            {\n                value = 0;\n                WriteLine(\"钱不能少于0，强制设置为0了\");\n            }\n            //可以加密，使输入的值在内存中存储不同的加密值\n            money = value + 5;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902150945-q53heqn",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902150945-q53heqn",
				"updated": "20240902151915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员属性的使用"
				}
			]
		},
		{
			"ID": "20240902151752-dvd0hkl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902151752-dvd0hkl",
				"updated": "20240902151836"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员属性本质是类似于只有返回值的或者只有一个参数的方法，因此属性可以如成员变量那样调用"
				}
			]
		},
		{
			"ID": "20240902150956-wg84u0m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902150956-wg84u0m",
				"style": "line-height: 22px;",
				"updated": "20240902151700"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    private string name;\n    private int age;\n\n    public string Name\n    {\n        get =\u003e name;\t\t//等价于 return，=\u003e 后跟要返回值即可\n        set =\u003e name = value;\n    }\n\n    public int Money\n    {\n        get =\u003e money - 5;\t//可以解密处理\n        set\n        {\n            //可以保证成员变量处于一个范围内\n            if (value \u003c 0)\n            {\n                value = 0;\n                WriteLine(\"钱不能少于0，强制设置为0了\");\n            }\n            money = value + 5;\t//可以加密，使输入的值在内存中存储不同的加密值\n        }\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Person p = new Person();\n        //因为name是私有的所以我们无法直接修改，但是通过属性Name 我们可以对name进行获取和修改\n        p.Name = \"MrTang\";\t//下面的语句就执行了属性Name的set语句块\n        WriteLine(p.Name);\t//下面的语句就执行了属性Name的get语句块\n\n        p.Money = 5;\t\t//此时，内存内存储的并不是5，而是10\n        WriteLine(p.Money);\t//下面的语句块就执行了get语句块里的解密逻辑\n        p.Money = -1;\n        WriteLine(p.Money);\t//money不能小于0，因此会触发主动写的保护机制\n    }\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902151609-dsp5jf1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902151609-dsp5jf1",
				"updated": "20240902151615"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240902151615-hr8s8mt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902151615-hr8s8mt",
				"style": "line-height: 22px;",
				"updated": "20240902151645"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "MrTang\n5\n钱不能少于0，强制设置为0了\n0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902151915-uepblz2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902151915-uepblz2",
				"updated": "20240902152527"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员属性中 get 和 set 前可以加访问修饰符"
				}
			]
		},
		{
			"ID": "20240902151934-lo0qaa5",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240902151934-lo0qaa5",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240902151934"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240902151925-zyl8d1l",
					"Type": "NodeHeading",
					"HeadingLevel": 4,
					"Properties": {
						"id": "20240902151925-zyl8d1l",
						"updated": "20240902151930"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意"
						}
					]
				},
				{
					"ID": "20240902151930-1iawywj",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240902151930-1iawywj",
						"updated": "20240902151955"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "默认不加 会使用属性申明时的访问权限，加的访问修饰符要低于属性的方法权限 （"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "public"
						},
						{
							"Type": "NodeText",
							"Data": "​ \u003e "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "protected"
						},
						{
							"Type": "NodeText",
							"Data": "​ \u003e "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "private"
						},
						{
							"Type": "NodeText",
							"Data": "​）\n不能让 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "get"
						},
						{
							"Type": "NodeText",
							"Data": "​ 和 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "set"
						},
						{
							"Type": "NodeText",
							"Data": "​ 的访问权限都低于属性的权限，否则属性的访问修饰符失去意义"
						}
					]
				}
			]
		},
		{
			"ID": "20240902152025-fxqp5rp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902152025-fxqp5rp",
				"style": "line-height: 22px;",
				"updated": "20240902152344"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    private string name;\n    private int age;\n\n    public string Name\t\t// 这里的get和set就没有使用访问修饰符，因此默认和Name属性一致，都是public\n    {\n        get =\u003e name;\t\t// 等价于 return，=\u003e 后跟要返回值即可\n        set =\u003e name = value;\n    }\n\n    public int Age\n    {\n        private get\t\t\t// 此时，在外部的属性.Age就不能再执行get语句块了，做到了只能修改不能获取\n        {\n            return age;\n        }\n        set\t\t\t\t\t// 这时，set和get不可以都低于属性的访问权限，因此set前不可以加低权限的访问修饰符了\n        {\n            age = value;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902152345-yyctm4v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902152345-yyctm4v",
				"updated": "20240902152527"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "内部 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的访问修饰符不可高于属性声明用的访问修饰符，\n例如，属性本身是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "private"
				},
				{
					"Type": "NodeText",
					"Data": "​ 或 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "protected"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的，那么内部 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的访问修饰符就不可以是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的"
				}
			]
		},
		{
			"ID": "20240902152239-wnphtn0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902152239-wnphtn0",
				"updated": "20240902155617"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员属性 get 和 set 可以只有一个"
				}
			]
		},
		{
			"ID": "20240902152616-04jj3oi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902152616-04jj3oi",
				"updated": "20240902152756"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当属性只能获取或只能修改时，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以只有一个，注意，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 只有一个时没必要再加访问修饰符了"
				}
			]
		},
		{
			"ID": "20240902152650-tt7alot",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902152650-tt7alot",
				"style": "line-height: 22px;",
				"updated": "20240902153141"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    private bool isSurvive;\n\n    public bool IsSurvive\t//这时就只能得，不能改了，一般情况下都是只有get，很少有只能set的\n    {\n        get\n        {\n            return isSurvive;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902153142-ljvuazw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902153142-ljvuazw",
				"updated": "20240902155546"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的只能 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的属性也被称为只读属性"
				}
			]
		},
		{
			"ID": "20240902152758-42jmqkk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902152758-42jmqkk",
				"updated": "20240902155617"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于，让外部只能获取而不能修改某个成员变量，又不做额外处理的情况非常多，\n因此，属性只有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 且 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语句块只有一句代码时，属性的整个语句块，都可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来简写，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后跟要返回对应的表达式语句"
				}
			]
		},
		{
			"ID": "20240902152919-qthby1m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902152919-qthby1m",
				"style": "line-height: 22px;",
				"updated": "20240902153047"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    private bool isSurvive;\n\n    public bool IsSurvive =\u003e isSurvive;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902153117-3mb5n0j",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902153117-3mb5n0j",
				"updated": "20240902160055"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自动属性"
				}
			]
		},
		{
			"ID": "20240902153416-fnmixz6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902153416-fnmixz6",
				"updated": "20240902153717"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自动属性是没有特殊处理逻辑，会自动声明并关联成员变量的属性，它关联的成员变量，无需我们去显式声明"
				}
			]
		},
		{
			"ID": "20240902153516-52pocg7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902153516-52pocg7",
				"style": "line-height: 22px;",
				"updated": "20240902160055"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    public float Height { get; set; }\t\t\t//自动属性，它会自动生成一个成员变量存储值\n\tpublic float length { get; private set; }\t//自动属性，它会自动生成一个成员变量存储值\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902153819-v80sdkr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902153819-v80sdkr",
				"updated": "20240902154355"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个自动属性的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 前可以加访问修饰符，也可以只有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ （自动属性必须要有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​），以限制外部的访问和修改"
				}
			]
		},
		{
			"ID": "20240902153341-d8p4001",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902153341-d8p4001",
				"updated": "20240902153954"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自动属性的好处是可以节约代码量，不需要再申明一个成员变量，\n同时解决访问修饰符的局限性，直接用属性解决这个特殊的成员变量需求\n这种属性就类似于成员变量，使用该属性会自动生成一个成员变量，而不需要为其申明成员变量"
				}
			]
		},
		{
			"ID": "20240902154007-yyff763",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902154007-yyff763",
				"updated": "20240902154408"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "建议仅在 需要解决访问修饰符的局限性（让变量只读） 而又没有别的特殊处理的情况下使用自动属性，不鼓励全部使用自动属性来替代声明成员变量，"
				}
			]
		},
		{
			"ID": "20240902154652-6janjko",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240902154652-6janjko",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240902155727"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240902155030-z7wskjj",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240902155030-z7wskjj",
						"updated": "20240902155727"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！自动属性和成员变量本质上不是相同的东西，切勿将两者混为一谈，自动属性在编译后本质上是方法，并管理一个自动生成的变量"
						}
					]
				}
			]
		},
		{
			"ID": "20240902155035-gytu45v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902155035-gytu45v",
				"updated": "20240902155035"
			}
		}
	]
}