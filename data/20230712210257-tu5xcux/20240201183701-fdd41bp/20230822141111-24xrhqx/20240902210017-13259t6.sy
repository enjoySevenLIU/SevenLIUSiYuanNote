{
	"ID": "20240902210017-13259t6",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240902210017-13259t6",
		"title": "CS3L10——拓展方法",
		"type": "doc",
		"updated": "20240902211149"
	},
	"Children": [
		{
			"ID": "20240902210017-a025j5p",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240902210017-a025j5p",
				"updated": "20240902210300"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "拓展方法"
				}
			]
		},
		{
			"ID": "20240902210138-x6p9ur5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902210138-x6p9ur5",
				"updated": "20240902210151"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "拓展方法可以为现有的 非静态变量类型 添加 新办法"
				}
			]
		},
		{
			"ID": "20240902210154-hzysq5m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902210154-hzysq5m",
				"updated": "20240902210201"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用："
				}
			]
		},
		{
			"ID": "20240902210201-0tu8vjg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240902210201-0tu8vjg",
				"updated": "20240902210201"
			},
			"Children": [
				{
					"ID": "20240902210201-uaoxsc0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902210201-uaoxsc0",
						"updated": "20240902210201"
					},
					"Children": [
						{
							"ID": "20240902210201-ibp8zvy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902210201-ibp8zvy",
								"updated": "20240902210201"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "提升代码拓展性\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240902210202-4h7jlwb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902210202-4h7jlwb",
						"updated": "20240902210202"
					},
					"Children": [
						{
							"ID": "20240902210202-resvb6s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902210202-resvb6s",
								"updated": "20240902210202"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不需要在在对象中重新写办法\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240902210202-32oyaan",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902210202-32oyaan",
						"updated": "20240902210202"
					},
					"Children": [
						{
							"ID": "20240902210202-9ocdraw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902210202-9ocdraw",
								"updated": "20240902210202"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不需要继承来添加方法\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240902210203-p8izj60",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902210203-p8izj60",
						"updated": "20240902210203"
					},
					"Children": [
						{
							"ID": "20240902210203-x1ti7p7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902210203-x1ti7p7",
								"updated": "20240902210203"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为别人封装的类型写额外的方法"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240902210156-e9l5po0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902210156-e9l5po0",
				"updated": "20240902210205"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特点："
				}
			]
		},
		{
			"ID": "20240902210206-rqbw4b9",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240902210206-rqbw4b9",
				"updated": "20240902210215"
			},
			"Children": [
				{
					"ID": "20240902210207-xn44gil",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902210207-xn44gil",
						"updated": "20240902210207"
					},
					"Children": [
						{
							"ID": "20240902210207-1df4a5v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902210207-1df4a5v",
								"updated": "20240902210207"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一定是写在静态类中\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240902210208-qkcxtjn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902210208-qkcxtjn",
						"updated": "20240902210208"
					},
					"Children": [
						{
							"ID": "20240902210208-plu3ju4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902210208-plu3ju4",
								"updated": "20240902210208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一定是个静态函数\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240902210209-a0g6isa",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902210209-a0g6isa",
						"updated": "20240902210209"
					},
					"Children": [
						{
							"ID": "20240902210209-vvny6nu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902210209-vvny6nu",
								"updated": "20240902210209"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第一个参数为拓展目标\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240902210210-edcu7uz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902210210-edcu7uz",
						"updated": "20240902210215"
					},
					"Children": [
						{
							"ID": "20240902210210-vovbxbc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902210210-vovbxbc",
								"updated": "20240902210215"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第一个参数用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "this"
								},
								{
									"Type": "NodeText",
									"Data": "​ 修饰"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240902210217-h3r3wkm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902210217-h3r3wkm",
				"updated": "20240902210241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "拓展方法可以有返回值 和 n 个参数根据需求而定"
				}
			]
		},
		{
			"ID": "20240902210243-40zhzp6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902210243-40zhzp6",
				"updated": "20240902210300"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本语法"
				}
			]
		},
		{
			"ID": "20240902210258-vliw9fq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902210258-vliw9fq",
				"style": "line-height: 22px;",
				"updated": "20240902210259"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "访问修饰符 static 返回值 函数名(this 被拓展的类名 参数名, 参数类型 参数名, 参数类型 参数名,...) { }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902210300-hf8f3wx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902210300-hf8f3wx",
				"updated": "20240902210650"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "拓展示例"
				}
			]
		},
		{
			"ID": "20240902210314-38ww8fk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902210314-38ww8fk",
				"updated": "20240902210449"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设要为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "string"
				},
				{
					"Type": "NodeText",
					"Data": "​ 拓展一个成员方法，成员方法 是需要 实例化对象后 才能使用的，\n第一个参数 是规定为了哪一个非静态的变量类型添加拓展方法，使用这个方法的是 哪个对象"
				}
			]
		},
		{
			"ID": "20240902210352-a4cl1in",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902210352-a4cl1in",
				"style": "line-height: 22px;",
				"updated": "20240902210607"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static class Tools\n{\n    //value 代表 使用该方法的实例化对象\n    //第一个参数 是规定为了哪一个非静态的变量类型添加拓展方法，使用这个方法的是 哪个对象\n    public static void SpeakValue(this int value)\n    {\n        //拓展的方法的逻辑\n        Console.WriteLine(\"MrTang对int拓展的方法\");\n    }\n    public static void SpeakStringInfo(this string str, string str2, string str3)\n    {\n        Console.WriteLine(\"MrTang对string拓展的方法\");\n        Console.WriteLine(\"调用方法的对象是：\" + str);\n        Console.WriteLine(\"传的参数是：\" + str2 + str3);\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        int i = 10;\n        i.SpeakValue();\n\n        string str = \"调用拓展方法的字符串的内容\";\n        str.SpeakStringInfo(\"C# \", \"is good\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902210531-e1jeoa8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902210531-e1jeoa8",
				"updated": "20240902210533"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240902210533-s2q3pam",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902210533-s2q3pam",
				"style": "line-height: 22px;",
				"updated": "20240902210623"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "MrTang对int拓展的方法\nMrTang对string拓展的方法\n调用方法的对象是：调用拓展方法的字符串的内容\n传的参数是：C# is good\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902210650-18zk26k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902210650-18zk26k",
				"updated": "20240902211149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为自定义的类型拓展方法"
				}
			]
		},
		{
			"ID": "20240902210723-behb5u8",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240902210723-behb5u8",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240902210737"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240902210730-qdx5wmw",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240902210730-qdx5wmw",
						"updated": "20240902210737"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！如果 拓展方法 与 被拓展的类里面的方法 重名 且没有重载该方法，则会优先调用类里面的方法 拓展方法就会失效！"
						}
					]
				}
			]
		},
		{
			"ID": "20240902210715-7tlmvto",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902210715-7tlmvto",
				"style": "line-height: 22px;",
				"updated": "20240902211033"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test\n{\n    public int i = 10;\n    public void Fun1()\n    {\n        Console.WriteLine(\"123\");\n    }\n\n    public void Fun2()\n    {\n        Console.WriteLine(\"456\");\n    }\n}\n\nstatic class Tools\n{\n    public static void Fun3(this Test t)\n    {\n        Console.WriteLine(\"为test拓展的方法\");\n    }\n\n    public static void Fun2(this Test t)\n    {\n        Console.WriteLine(\"为test拓展的方法2\");\n    }\n\n    //注意，拓展方法若与被拓展类的成员方法重名，且不函数重载的情况下，该拓展方法会失效\n    public static void Fun2(this Test t, int t2)\n    {\n        Console.WriteLine(\"为test拓展的方法\" + t2);\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Test t = new Test();\n        t.Fun1();\n        t.Fun2();\n        t.Fun2(2);\n        t.Fun3();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902210824-hs83pmn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902210824-hs83pmn",
				"updated": "20240902210835"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240902210836-cxjb366",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902210836-cxjb366",
				"style": "line-height: 22px;",
				"updated": "20240902211149"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "123\n456\t\t\t\t\t// 可见，拓展方法若与被拓展类的成员方法重名，且不函数重载的情况下，拓展方法会失效\n为test拓展的方法2\n为test拓展的方法\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}