{
	"ID": "20240903143944-9kd3slx",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240903143944-9kd3slx",
		"title": "CS3L19——抽象类和抽象方法",
		"type": "doc",
		"updated": "20240904141127"
	},
	"Children": [
		{
			"ID": "20240904141055-l04mrmc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240904141055-l04mrmc",
				"updated": "20240904141127"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240904141101-wyu9cir",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240904141101-wyu9cir",
				"style": "line-height: 22px;",
				"updated": "20240904141127"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "abstract\t//抽象类和抽象方法的关键字\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240903143944-720hsdc",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240903143944-720hsdc",
				"name": "abstract",
				"updated": "20240903144923"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抽象类"
				}
			]
		},
		{
			"ID": "20240903144024-h78apnu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903144024-h78apnu",
				"updated": "20240903144046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抽象类就是，被抽象关键字 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "abstract"
				},
				{
					"Type": "NodeText",
					"Data": "​ 修饰的类"
				}
			]
		},
		{
			"ID": "20240903144026-agkka9r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903144026-agkka9r",
				"updated": "20240903144034"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特点：不能被实例化的类，可以包含抽象方法，继承抽象类必须重写其抽象方法"
				}
			]
		},
		{
			"ID": "20240903144751-82bi35v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903144751-82bi35v",
				"updated": "20240903144754"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用：整体框架设计时会使用"
				}
			]
		},
		{
			"ID": "20240903144706-eov7mqw",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240903144706-eov7mqw",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240903144923"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240903144731-28rd3dy",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240903144731-28rd3dy",
						"updated": "20240903144923"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意：选择普通类还是抽象类，对于不希望被实例化的对象，相对比较抽象的类可以使用抽象类\n父类中的行为不太需要被实现的，只希望在子类去定义具体的规则，可以选择，抽象类然后使用其中的抽象方法类定义规则"
						}
					]
				}
			]
		},
		{
			"ID": "20240903144048-w23uht0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240903144048-w23uht0",
				"style": "line-height: 22px;",
				"updated": "20240903144417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 物品就是一种抽象的概念，它不是具体的物质，而是一个统称\nabstract class Thing\n{\n    //抽象类中 封装的所有知识点都可以在其中书写\n    public string name;\n    //还可以抽象类中写抽象函数\n}\n\nclass Water : Thing { }\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        //抽象类不能被实例化\n        //Thing t = new Thing();\n        Thing t = new Water();\t\t//但是遵循里氏替换原则，可以用父类装子类\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240903144248-rw1iorv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240903144248-rw1iorv",
				"updated": "20240903144835"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抽象方法"
				}
			]
		},
		{
			"ID": "20240903144441-b5xlyjx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903144441-b5xlyjx",
				"updated": "20240903144446"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抽象方法，又称为 纯虚方法，用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "abstract"
				},
				{
					"Type": "NodeText",
					"Data": "​ 关键字修饰的方法\n特点：只能在抽象类中申明，没有方法体，不能是私有的，继承后必须实现，用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "override"
				},
				{
					"Type": "NodeText",
					"Data": "​ 重写"
				}
			]
		},
		{
			"ID": "20240903144541-dda2aka",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903144541-dda2aka",
				"updated": "20240903144604"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为不写访问修饰符的方法默认是私有的，而抽象方法不能是私有的，所以抽象方法必须加访问修饰符\n抽象方法 是一定不能有函数体的 不能加 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "{}"
				},
				{
					"Type": "NodeText",
					"Data": "​ ，直接用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ";"
				},
				{
					"Type": "NodeText",
					"Data": "​ 结束"
				}
			]
		},
		{
			"ID": "20240903144615-m22bt49",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903144615-m22bt49",
				"updated": "20240903144625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承了抽象类的类必须要实现抽象类中的所有抽象方法，并用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "override"
				},
				{
					"Type": "NodeText",
					"Data": "​ 重写\n同时子类里父类的虚方法是选择性实现的，抽象方法一定要实现"
				}
			]
		},
		{
			"ID": "20240903144649-w4kbs5g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903144649-w4kbs5g",
				"updated": "20240903144649"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虚方法和抽象方法都可以被子类无限的重写"
				}
			]
		},
		{
			"ID": "20240903144447-lcxw9ex",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240903144447-lcxw9ex",
				"style": "line-height: 22px;",
				"updated": "20240903144516"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 水果就是一种抽象的概念，它不是具体的物品，而是一个统称\nabstract class Fruits\n{\n    public string name;\n    //因为不写访问修饰符默认是私有的，而抽象方法不能是私有的，所以抽象方法必须加访问修饰符\n    //抽象方法 是一定不能有函数体的 不能加 { } ，直接用 ; 结束\n    public abstract void Bad();\n\n    public virtual void Test() \n    {\n        //可以选择是否写逻辑\n    }\n}\n\n//继承了抽象类的类必须要实现抽象类中的所有抽象方法，并用override重写\n//可以点击灯泡图标的实现抽象类以自动填写所有需要写的抽象方法\nclass Apple : Fruits\n{\n    public override void Bad()\n    {\n        //这是会丢出一个没有写函数的提示的代码，默认会添加\n        //throw new NotImplementedException();\n    }\n    //同时子类里父类的虚方法是选择性实现的，抽象方法一定要实现\n}\n\nclass SuperApple : Apple\n{\n    //子类的子类没必要再次重写父类的抽象方法，但仍然可以选择重写\n    public override void Bad()\n    {\n        base.Bad();\n    }\n\n    public override void Test()\n    {\n        base.Test();\n    }\n    //虚方法和抽象方法都可以被子类无限的重写\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240903144835-4r1i9sn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240903144835-4r1i9sn",
				"updated": "20240903144835"
			}
		}
	]
}