{
	"ID": "20240902202732-non0kea",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240902202732-non0kea",
		"title": "CS3L8——静态成员",
		"type": "doc",
		"updated": "20240904140545"
	},
	"Children": [
		{
			"ID": "20240904140407-mc2t75m",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240904140407-mc2t75m",
				"updated": "20240904140545"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240904140416-o95i2k4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240904140416-o95i2k4",
				"style": "line-height: 22px;",
				"updated": "20240904140545"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static\t\t//用static修饰的成员为静态成员，静态成员在程序开始时就会被分配内存空间，直到程序运行结束才会被释放，可以直接点出使用\nconst\t\t//可以理解为特殊的static，相比static，它必须初始化，也不可改变\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902202732-e25kklw",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240902202732-e25kklw",
				"name": "static",
				"updated": "20240902205445"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态成员"
				}
			]
		},
		{
			"ID": "20240902203015-xdn4cow",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902203015-xdn4cow",
				"updated": "20240902203030"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态关键字 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "static"
				},
				{
					"Type": "NodeText",
					"Data": "​，用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "static"
				},
				{
					"Type": "NodeText",
					"Data": "​ 修饰的 成员变量、方法、属性等，称为静态成员"
				}
			]
		},
		{
			"ID": "20240902203015-mz4sfum",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902203015-mz4sfum",
				"updated": "20240902203058"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态成员的特点是：直接用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "类名.静态成员"
				},
				{
					"Type": "NodeText",
					"Data": "​ 就可以使用\n静态成员在程序开始时就会被分配内存空间，直到程序运行结束才会被释放"
				}
			]
		},
		{
			"ID": "20240902203031-kb0bsnw",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240902203031-kb0bsnw",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240902203159"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240902203159-o0kgi1b",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240902203159-o0kgi1b",
						"updated": "20240902203159"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意：静态函数中不能直接使用非静态成员，非静态函数中可以直接使用静态成员"
						}
					]
				}
			]
		},
		{
			"ID": "20240902203156-x3ktclo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902203156-x3ktclo",
				"updated": "20240902203156"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20230614173758-he41xz4",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "const"
				},
				{
					"Type": "NodeText",
					"Data": "​（常量）可以理解为特殊的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "static"
				},
				{
					"Type": "NodeText",
					"Data": "​（静态）"
				}
			]
		},
		{
			"ID": "20240902205413-w476yd8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902205413-w476yd8",
				"updated": "20240902205445"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态关键字 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "static"
				},
				{
					"Type": "NodeText",
					"Data": "​ 还可以修饰类和构造函数，详见："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240902204857-o56v630",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "CS3L9——静态类和静态构造函数"
				}
			]
		},
		{
			"ID": "20240902203154-ff2jfbv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902203154-ff2jfbv",
				"updated": "20240902203240"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "早已出现的静态成员"
				}
			]
		},
		{
			"ID": "20240902203221-5rj91eq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902203221-5rj91eq",
				"updated": "20240902203234"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类似于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20230811202046-f2u6zds",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "Console.WriteLine()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 这些函数都是早已出现并被我们使用的静态函数"
				}
			]
		},
		{
			"ID": "20240902203240-oewrbb6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902203240-oewrbb6",
				"updated": "20240902203647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自定义静态成员"
				}
			]
		},
		{
			"ID": "20240902203316-n7irnng",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902203316-n7irnng",
				"style": "line-height: 22px;",
				"updated": "20240902203647"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test\n{\n    public static float PI = 3.1415926f;\t//静态成员变量，访问修饰符和static的顺序是随意的\n    public int testInt = 100;\t\t\t\t//成员变量\n  \n  \n    public static float CalcCircle(float r)\t//静态成员方法\n    {\n        return PI * r * r;\n    }\n\n  \n    public void TestFun()\t\t\t\t\t//成员方法\n    {\n        Console.WriteLine(\"123\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902203638-t7w15cf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902203638-t7w15cf",
				"updated": "20240902203848"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态成员的使用"
				}
			]
		},
		{
			"ID": "20240902203726-zp7gpck",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902203726-zp7gpck",
				"updated": "20240902203745"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态成员变量和静态成员方法无需实例化即可使用，而非静态的成员变量和成员方法必须要实例化才可以使用"
				}
			]
		},
		{
			"ID": "20240902203745-pil33t0",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240902203745-pil33t0",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240902203745"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240902203745-2xl0eu8",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240902203745-2xl0eu8",
						"updated": "20240902203745"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意，静态成员变量和静态成员方法是不能通过实例化来使用的！！！"
						}
					]
				}
			]
		},
		{
			"ID": "20240902203656-4gaf3g2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902203656-4gaf3g2",
				"style": "line-height: 22px;",
				"updated": "20240902203848"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test\n{\n    public static float PI = 3.1415926f;\t//静态成员变量，访问修饰符和static的顺序是随意的\n    public int testInt = 100;\t\t\t\t//成员变量\n  \n  \n    public static float CalcCircle(float r)\t//静态成员方法\n    {\n        return PI * r * r;\n    }\n\n  \n    public void TestFun()\t\t\t\t\t//成员方法\n    {\n        Console.WriteLine(\"123\");\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        // 静态成员变量和静态成员方法无需实例化即可使用\n        Console.WriteLine(Test.PI);\n        Console.WriteLine(Test.CalcCircle(2));\n\n\t\t// 非静态的成员变量和成员方法必须要实例化才可以使用\n        Test t = new Test();\n        Console.WriteLine(t.testInt);\n        t.TestFun();\n    \n        // 注意，静态成员变量和静态成员方法是不能通过实例化来使用的！！！\n        //Console.WriteLine(t.PI);\n        //t.CalcCircle();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902203848-esynkrw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902203848-esynkrw",
				"updated": "20240902204235"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态成员不实例化即可直接使用的原因"
				}
			]
		},
		{
			"ID": "20240902203907-r1gd294",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902203907-r1gd294",
				"updated": "20240902204009"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "记住，程序不能无中生有，我们要使用的对象，变量，函数都是要在内存中分配内存空间的\n之所以要实例化对象 目的计算要分配内存空间 在程序中产生一个抽象的对象"
				}
			]
		},
		{
			"ID": "20240902204010-lfjcilw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902204010-lfjcilw",
				"updated": "20240902204222"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而静态成员的特点是："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "静态成员在程序开始运行时，就会直接被分配内存空间，所以我们可以直接使用\n静态成员的存在 是和 程序运行的状态 是绑定的，程序运行则静态成员就一直存在在内存内"
				}
			]
		},
		{
			"ID": "20240902204141-m5vlt3j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902204141-m5vlt3j",
				"updated": "20240902204151"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只要使用静态成员，静态成员的分配的内存 直到程序结束才会被释放\n所以一个静态成员就会有 一个自己唯一一个“内存空间”，这使得静态成员具有唯一性"
				}
			]
		},
		{
			"ID": "20240902204153-j4lnui6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902204153-j4lnui6",
				"updated": "20240902204209"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在任何地方使用静态成员， 都是使用该静态成员唯一的“内存空间”，\n改变了静态变量，也是改变该“内存空间”的内容\n因此，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的静态成员具有全局性"
				}
			]
		},
		{
			"ID": "20240902204235-m78oxkj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902204235-m78oxkj",
				"updated": "20240902204320"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态函数中不能使用非静态成员"
				}
			]
		},
		{
			"ID": "20240902204256-jrqunyk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902204256-jrqunyk",
				"updated": "20240902204300"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态成员方法内不能直接使用 非静态成员 否则会报错，因为非静态成员必须要实例化后才能使用\n成员变量只能将对象实例化出来后才可以使用，不能无中生有"
				}
			]
		},
		{
			"ID": "20240902203617-97qwjta",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902203617-97qwjta",
				"style": "line-height: 22px;",
				"updated": "20240902204320"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test\n{\n    public static float PI = 3.1415926f;\t//静态成员变量，访问修饰符和static的顺序是随意的\n    public int testInt = 100;\t\t\t\t//成员变量\n  \n    //静态成员方法\n    public static float CalcCircle(float r)\n    {\n        //Console.WriteLine(testInt);\t//静态成员方法内不能直接使用 非静态成员 否则会报错，因为非静态成员必须要实例化后才能使用\n        Test t = new Test();\n        Console.WriteLine(t.testInt);\t//成员变量只能将对象实例化出来后才可以使用，不能无中生有\n        return PI * r * r;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902204311-j5pwzji",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902204311-j5pwzji",
				"updated": "20240902204443"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "非静态函数可以使用静态成员"
				}
			]
		},
		{
			"ID": "20240902204417-m9sosk5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902204417-m9sosk5",
				"updated": "20240902204422"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为静态成员在程序开始时就存在了，所以可以直接使用"
				}
			]
		},
		{
			"ID": "20240902204350-3pflzaj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902204350-3pflzaj",
				"style": "line-height: 22px;",
				"updated": "20240902204443"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test\n{\n    public static float PI = 3.1415926f;\t//静态成员变量，访问修饰符和static的顺序是随意的\n    public int testInt = 100;\t\t\t\t//成员变量\n  \n  \n    public static float CalcCircle(float r)\t//静态成员方法\n    {\n        //Console.WriteLine(testInt);\t//静态成员方法内不能直接使用 非静态成员 否则会报错，因为非静态成员必须要实例化后才能使用\n        Test t = new Test();\n        Console.WriteLine(t.testInt);\t//成员变量只能将对象实例化出来后才可以使用，不能无中生有\n        return PI * r * r;\n    }\n\n    public void TestFun()\t\t\t\t\t//成员方法\n    {\n        Console.WriteLine(\"123\");\n        Console.WriteLine(CalcCircle(100));\n        Console.WriteLine(PI);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902204409-1pbpj8h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902204409-1pbpj8h",
				"updated": "20240902204529"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态成员对于我们的作用"
				}
			]
		},
		{
			"ID": "20240902204503-uijirrx",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240902204503-uijirrx",
				"updated": "20240902204518"
			},
			"Children": [
				{
					"ID": "20240902204506-jmqrvtg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902204506-jmqrvtg",
						"updated": "20240902204514"
					},
					"Children": [
						{
							"ID": "20240902204506-ieo1jqv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902204506-ieo1jqv",
								"updated": "20240902204514"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态变量：多用于常用的唯一变量申明，方便别人获取的对象申明"
								}
							]
						}
					]
				},
				{
					"ID": "20240902204508-x9jel89",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902204508-x9jel89",
						"updated": "20240902204518"
					},
					"Children": [
						{
							"ID": "20240902204508-kmz1de9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902204508-kmz1de9",
								"updated": "20240902204518"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态方法：常用的唯一的方法申明，例如：相同规则的数学计算相关函数"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240902204503-wvmx50q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902204503-wvmx50q",
				"updated": "20240902204527"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态的缺点：滥用静态变量会大量挤占一般变量，方法等的内存\n导致可分配的内存空间变少，容易频繁触发GC，导致程序性能严重下降"
				}
			]
		},
		{
			"ID": "20240902204526-zxvsfs9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902204526-zxvsfs9",
				"updated": "20240902204526"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此静态变量和静态方法要慎重使用！！！"
				}
			]
		},
		{
			"ID": "20240902204529-4pjh1se",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240902204529-4pjh1se",
				"updated": "20240902204825"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "常量和静态变量"
				}
			]
		},
		{
			"ID": "20240902204545-43nar8z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902204545-43nar8z",
				"updated": "20240902204557"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20230614173758-he41xz4",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "const"
				},
				{
					"Type": "NodeText",
					"Data": "​（常量）可以理解为特殊的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "static"
				},
				{
					"Type": "NodeText",
					"Data": "​（静态）"
				}
			]
		},
		{
			"ID": "20240902204557-zzt1yao",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240902204557-zzt1yao",
				"updated": "20240902204639"
			},
			"Children": [
				{
					"ID": "20240902204557-jmf20vw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902204557-jmf20vw",
						"updated": "20240902204557"
					},
					"Children": [
						{
							"ID": "20240902204557-gqh1vpw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902204557-gqh1vpw",
								"updated": "20240902204559"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "相同点：他们都可以通过类名点出使用\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240902204601-icsrl6q",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240902204601-icsrl6q",
						"updated": "20240902204639"
					},
					"Children": [
						{
							"ID": "20240902204601-o51649x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240902204601-o51649x",
								"updated": "20240902204620"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不同点："
								}
							]
						},
						{
							"ID": "20240902204601-151c289",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20240902204601-151c289",
								"updated": "20240902204639"
							},
							"Children": [
								{
									"ID": "20240902204635-p3inoex",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240902204635-p3inoex",
										"updated": "20240902204639"
									},
									"Children": [
										{
											"ID": "20240902204635-hcw9wvh",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240902204635-hcw9wvh",
												"updated": "20240902204639"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "const"
												},
												{
													"Type": "NodeText",
													"Data": "​ 必须初始化，不能修改，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "static"
												},
												{
													"Type": "NodeText",
													"Data": "​ 没有这个规则"
												}
											]
										}
									]
								},
								{
									"ID": "20240902204636-9rmia86",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240902204636-9rmia86",
										"updated": "20240902204638"
									},
									"Children": [
										{
											"ID": "20240902204636-9yd8300",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240902204636-9yd8300",
												"updated": "20240902204638"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "const"
												},
												{
													"Type": "NodeText",
													"Data": "​ 只能修饰变量，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "static"
												},
												{
													"Type": "NodeText",
													"Data": "​ 可以修饰很多内容"
												}
											]
										}
									]
								},
								{
									"ID": "20240902204637-uohm7d6",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240902204637-uohm7d6",
										"updated": "20240902204637"
									},
									"Children": [
										{
											"ID": "20240902204637-e7by84r",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240902204637-e7by84r",
												"updated": "20240902204637"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "const"
												},
												{
													"Type": "NodeText",
													"Data": "​ 一定写在访问修饰符后面，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "static"
												},
												{
													"Type": "NodeText",
													"Data": "​ 没有这个规则"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240902204622-nlnp71c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240902204622-nlnp71c",
				"style": "line-height: 22px;",
				"updated": "20240902204825"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test\n{\n    public static float PI;\t\t\t//可以不初始化，可以修改\n    public const float G = 9.8f;\t//必须初始化，不可修改\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240902204711-uw6nzf7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240902204711-uw6nzf7",
				"updated": "20240902204711"
			}
		}
	]
}