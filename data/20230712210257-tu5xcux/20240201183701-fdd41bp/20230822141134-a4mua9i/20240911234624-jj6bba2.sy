{
	"ID": "20240911234624-jj6bba2",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240911234624-jj6bba2",
		"title": "CS4L12——委托",
		"type": "doc",
		"updated": "20240918001533"
	},
	"Children": [
		{
			"ID": "20240918000150-xgqv8th",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240918000150-xgqv8th",
				"updated": "20240918001258"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240918000157-iahf58c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240918000157-iahf58c",
				"style": "line-height: 22px;",
				"updated": "20240918001258"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "delegate\t//委托声明关键字\nAction\u003c\u003e\t//C#自带的无返回值委托\nFunc\u003c\u003e\t\t//C#自带的有返回值委托\nInvoke()\t//委托可以使用此方法来执行存储于其中的方法\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240911234624-v3sb1qd",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240911234624-v3sb1qd",
				"name": "delegate",
				"updated": "20240918001533"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "委托"
				}
			]
		},
		{
			"ID": "20240911234658-pf055y7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240911234658-pf055y7",
				"updated": "20240917230111"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "委托是函数（方法）的容器，可以理解为表示特定格式（参数列表和返回值类型一致）的函数（方法）的变量类型，用来存储传递函数（方法）\n委托的本质是一个类，用来定义函数（方法）的类型（返回值和参数的类型），\n不同的函数（方法）必须对应和各自 “格式“ 一致（即参数列表和返回值类型必须一致）的委托"
				}
			]
		},
		{
			"ID": "20240918001221-kyhiluz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240918001221-kyhiluz",
				"updated": "20240918001312"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单理解 委托 就是装载、传递函数的容器而已，可以使用委托变量来 存储函数 或者 传递函数\n系统已经提供了很多委托给我们用："
				}
			]
		},
		{
			"ID": "20240918001305-v6pbbv1",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240918001305-v6pbbv1",
				"updated": "20240918001308"
			},
			"Children": [
				{
					"ID": "20240918001305-i20mptb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240918001305-i20mptb",
						"updated": "20240918001308"
					},
					"Children": [
						{
							"ID": "20240918001305-vts5vso",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240918001305-vts5vso",
								"updated": "20240918001308"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Action"
								},
								{
									"Type": "NodeText",
									"Data": "​：没有返回值，参数提供了 0-16 个委托给我们用"
								}
							]
						}
					]
				},
				{
					"ID": "20240918001306-rzpk1cm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240918001306-rzpk1cm",
						"updated": "20240918001306"
					},
					"Children": [
						{
							"ID": "20240918001306-8ld8o9u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240918001306-8ld8o9u",
								"updated": "20240918001306"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Func"
								},
								{
									"Type": "NodeText",
									"Data": "​: 有返回值，参数提供了 0-16 个委托给我们用"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240918001443-tjqf9gv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240918001443-tjqf9gv",
				"updated": "20240918001533"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "委托可以让我们接收外部传入的函数，然后一并执行，这在UI系统中的为按钮等控件定义触发的行为时将非常有用"
				}
			]
		},
		{
			"ID": "20240911234745-u92lhed",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240911234745-u92lhed",
				"updated": "20240917211239"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本语法"
				}
			]
		},
		{
			"ID": "20240917211152-odzuk2s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917211152-odzuk2s",
				"updated": "20240917211207"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关键字："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "delegate"
				},
				{
					"Type": "NodeText",
					"Data": "​\n语法："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "访问修饰符 delegete 返回值 委托名(参数列表);"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240917211152-flwohrk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917211152-flwohrk",
				"updated": "20240917211228"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "写在哪里：\n可以申明在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "namespace"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "class"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语句块中\n更多的写在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "namespace"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中"
				}
			]
		},
		{
			"ID": "20240917211152-82f75n1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917211152-82f75n1",
				"updated": "20240917211232"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "委托语法简单记忆就是：函数申明语法前面加一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "delegate"
				},
				{
					"Type": "NodeText",
					"Data": "​ 关键字"
				}
			]
		},
		{
			"ID": "20240917211234-7hyknac",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240917211234-7hyknac",
				"updated": "20240917233638"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "定义自定义委托"
				}
			]
		},
		{
			"ID": "20240917211245-1lymaeo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917211245-1lymaeo",
				"updated": "20240917211551"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "委托的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240904195346-szc6vkt",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "访问修饰符"
				},
				{
					"Type": "NodeText",
					"Data": " 一般不写，默认是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": "​，即委托在别的命名空间中也能使用\n使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "private"
				},
				{
					"Type": "NodeText",
					"Data": "​ 会让其他命名空间不能使用了，因此一般用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240917211528-uhj7x0v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917211528-uhj7x0v",
				"updated": "20240917211541"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "委托声明不能同名（在同一语句块中）"
				}
			]
		},
		{
			"ID": "20240917211342-c9ye48o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917211342-c9ye48o",
				"updated": "20240917233638"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "声明委托只是申明了规则（参数列表和返回值类型），并没有使用\n委托可以使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240907195242-5lbrmqr",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "泛型"
				},
				{
					"Type": "NodeText",
					"Data": "，可以让返回值和参数类型可变 方便我们的使用"
				}
			]
		},
		{
			"ID": "20240917211313-s7w2mec",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917211313-s7w2mec",
				"style": "line-height: 22px;",
				"updated": "20240917211505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public delegate void MyFun();\t\t\t\t//委托规则的申明 是不能同名的（在同一语句块中）\npublic delegate int MyFun2(int a);\t\t\t//表示用来转载或传递 返回值为int 有一个int参数的函数的 委托容器规则\npublic delegate T MyFun3\u003cT, K\u003e(T t, K k);\t//委托可以使用泛型，可以让返回值和参数类型可变 方便我们的使用\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917212104-8t6kvgj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240917212104-8t6kvgj",
				"name": "Invoke()",
				"updated": "20240917225727"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "调用委托以执行委托存储的函数"
				}
			]
		},
		{
			"ID": "20240917212208-qy3cevg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917212208-qy3cevg",
				"updated": "20240917213129"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "委托是专门用来装载 函数 的容器，可以 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "new"
				},
				{
					"Type": "NodeText",
					"Data": "​ 委托来声明一个空委托，或者 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "new"
				},
				{
					"Type": "NodeText",
					"Data": "​ 委托时传入一个函数，也可以直接赋值一个函数\n要执行委托存储的函数，可以对委托调用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Invoke()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法，也可以如方法那样直接 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "委托变量()"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240917225503-0gcl91n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917225503-0gcl91n",
				"updated": "20240917225526"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "函数不能装在不匹配格式的委托里，例如有参函数就不能存储在无参委托内"
				}
			]
		},
		{
			"ID": "20240917225727-kpjb3j9",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240917225727-kpjb3j9",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240917225727"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240917225727-88wy5zu",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240917225727-88wy5zu",
						"updated": "20240917225829"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意：向委托装载一个函数时，函数不能加括号，如果加上括号就是调用该函数了"
						}
					]
				}
			]
		},
		{
			"ID": "20240917212158-mjel1tp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917212158-mjel1tp",
				"style": "line-height: 22px;",
				"updated": "20240917225725"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public delegate void MyFun();\n\nstatic void Main(string[] args)\n{\n    //第一种装载方法\n    MyFun f = new MyFun(Fun);\n\t// 可以执行一堆逻辑后再执行委托\n    Console.WriteLine(\"1\");\n    Console.WriteLine(\"2\");\n    Console.WriteLine(\"3\");\n    f.Invoke();\t\t//第一种调用方法 委托变量.Invoke();\n    // 第二种装载方法\n    MyFun f2 = Fun;\n    f2();\t\t\t//第二种调用方法 委托变量();\n  \n    //函数不能装在不匹配格式的委托里\n    //MyFun f3 = Fun2;\n    //函数只能装在格式一致的委托里\n    MyFun2 f3 = Fun2;\n    Console.WriteLine(f3(1));\n\n    MyFun2 f4 = new MyFun2(Fun2);\n    Console.WriteLine(f4.Invoke(3));\n}\n\nstatic void Fun()\n{\n    Console.WriteLine(\"我做了什么\");\n}\n\nstatic int Fun2(int value)\n{\n    return value;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917225209-65ar9dz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917225209-65ar9dz",
				"updated": "20240917225215"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240917225215-mjsf4q5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917225215-mjsf4q5",
				"style": "line-height: 22px;",
				"updated": "20240917225709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1\n2\n3\n我做了什么\n我做了什么\n1\n3\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917225326-hzkmc9i",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240917225326-hzkmc9i",
				"updated": "20240917230022"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用定义好的委托"
				}
			]
		},
		{
			"ID": "20240917225326-nhcubjz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917225326-nhcubjz",
				"updated": "20240917225326"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "委托类型变量是函数的容器，常用在："
				}
			]
		},
		{
			"ID": "20240917225326-edbhesj",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240917225326-edbhesj",
				"updated": "20240917225326"
			},
			"Children": [
				{
					"ID": "20240917225326-padvv6k",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240917225326-padvv6k",
						"updated": "20240917225326"
					},
					"Children": [
						{
							"ID": "20240917225326-iwgxllm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240917225326-iwgxllm",
								"updated": "20240917225326"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "作为类的成员"
								}
							]
						}
					]
				},
				{
					"ID": "20240917225326-kjdk50l",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240917225326-kjdk50l",
						"updated": "20240917225326"
					},
					"Children": [
						{
							"ID": "20240917225326-19htcmm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240917225326-19htcmm",
								"updated": "20240917225326"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "作为函数的参数"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240917225326-olohjpo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917225326-olohjpo",
				"style": "line-height: 22px;",
				"updated": "20240917225921"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public delegate void MyFun();\t\t\t\t//委托规则的申明 是不能同名的（在同一语句块中）\npublic delegate int MyFun2(int a);\t\t\t//表示用来转载或传递 返回值为int 有一个int参数的函数的 委托容器规则\npublic delegate T MyFun3\u003cT, K\u003e(T t, K k);\t//委托可以使用泛型，可以让返回值和参数类型可变 方便我们的使用\n\nclass Test\n{\n    public MyFun fun;\n    public MyFun2 fun2;\n\n    public void TestFun(MyFun fun, MyFun2 fun2)\n    {\n        //可以先处理一些别的逻辑，当这些逻辑处理完了 在执行传入的函数\n        int i = 1;\n        i *= 2;\n        i += 2;\n\n        fun();\n        fun2(i);\n\n        //可以让传入的委托 保存在成员变量里\n        this.fun = fun;\n        this.fun2 = fun2;\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        //注意:被装载的方法不能加括号，否则就是调用该函数了, 除非该函数返回值是委托变量\n        Test t = new Test();\n        t.TestFun(Fun, Fun2);\n    }\n\n    static void Fun()\n    {\n        Console.WriteLine(\"我做了什么\");\n    }\n\n    static int Fun2(int value)\n    {\n        return value;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917225850-b56ea49",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917225850-b56ea49",
				"updated": "20240917225852"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240917225852-wpxawi2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917225852-wpxawi2",
				"style": "line-height: 22px;",
				"updated": "20240917230022"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "我做了什么\n4\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917211751-iczqywk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240917211751-iczqywk",
				"updated": "20240917233104"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "委托变量可以存储多个函数（多播委托）"
				}
			]
		},
		{
			"ID": "20240917230124-4ac02hz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917230124-4ac02hz",
				"updated": "20240917230237"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所谓多播委托，即 “多路广播委托”（MulticastDelegate）。\n从它的名字就可以看出，此种委托可以像广播一样将影响信息“传播”到四面八方。\n多播委托类拥有一个方法调用列表，调用委托时，它就会逐一调用该列表中的方法，从而实现多重影响。"
				}
			]
		},
		{
			"ID": "20240917230239-0n1xtm5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917230239-0n1xtm5",
				"updated": "20240917230404"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单来说就是，委托可以存储多个函数，调用委托时，会依次执行存储的所有函数"
				}
			]
		},
		{
			"ID": "20240917230404-t91o7qr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917230404-t91o7qr",
				"updated": "20240917230717"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "+="
				},
				{
					"Type": "NodeText",
					"Data": "​ 向委托添加多个函数，\n但是要"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意，没有初始化的委托是不能直接加函数的！！！"
				},
				{
					"Type": "NodeText",
					"Data": "，也就是说，不能刚声明一个委托变量时就使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "+="
				},
				{
					"Type": "NodeText",
					"Data": "​\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MyFun ff = null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以算是初始化，可以在后续语句里用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "+="
				},
				{
					"Type": "NodeText",
					"Data": "​\n当委托有多个函数时，会按照添加的先后顺序依次执行添加的内容"
				}
			]
		},
		{
			"ID": "20240917230232-f681x9y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917230232-f681x9y",
				"style": "line-height: 22px;",
				"updated": "20240917231419"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public delegate void MyFun();\n\nstatic void Main(string[] args)\n{\n    //注意不能直接写MyFun ff += Fun; 没有初始化是不能直接加的！！！\n    MyFun ff = Fun;\n    //用 += 即可 等同于ff = ff + Fun3;\n    ff += Fun3;\n    ff();\n}\n\nstatic void Fun()\n{\n    Console.WriteLine(\"我做了什么\");\n}\n\nstatic void Fun3()\n{\n    Console.WriteLine(\"你做了什么\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917230723-whp6vo5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917230723-whp6vo5",
				"updated": "20240917230725"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240917230725-1ttsguj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917230725-1ttsguj",
				"style": "line-height: 22px;",
				"updated": "20240917230735"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "我做了什么\n你做了什么\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917230749-zqxaywp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917230749-zqxaywp",
				"updated": "20240917230907"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-="
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以从容器中移除指定的函数，如果容器本来就没有这个函数，再去移除该函数会不进行处理"
				}
			]
		},
		{
			"ID": "20240917230804-efj6ggl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917230804-efj6ggl",
				"style": "line-height: 22px;",
				"updated": "20240917231422"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public delegate void MyFun();\n\nstatic void Main(string[] args)\n{\n    MyFun ff = Fun;\n    ff += Fun3;\n    ff();\n    Console.WriteLine(\"————————分割线————————\");\n\n    ff -= Fun3;\n    ff();\n    ff -= Fun3;\n    //如果容器本来就没有这个函数，再去移除该函数会不进行处理\n}\n\nstatic void Fun()\n{\n    Console.WriteLine(\"我做了什么\");\n}\n\nstatic void Fun3()\n{\n    Console.WriteLine(\"你做了什么\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917230856-szgdszx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917230856-szgdszx",
				"updated": "20240917230858"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240917230858-8cvr0fl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917230858-8cvr0fl",
				"style": "line-height: 22px;",
				"updated": "20240917230900"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "我做了什么\n你做了什么\n————————分割线————————\n我做了什么\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917230909-6tc54jl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917230909-6tc54jl",
				"updated": "20240917230943"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对委托直接赋值 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 即可清空委托"
				}
			]
		},
		{
			"ID": "20240917231126-u9dbsbf",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240917231126-u9dbsbf",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240917231133"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240917231133-x2len0o",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240917231133-x2len0o",
						"updated": "20240917231157"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！如果委托是 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "null"
						},
						{
							"Type": "NodeText",
							"Data": "​，直接调用会报错！！！，建议用 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "if"
						},
						{
							"Type": "NodeText",
							"Data": "​ 判断来确保不会报错"
						}
					]
				}
			]
		},
		{
			"ID": "20240917231023-mko6p32",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917231023-mko6p32",
				"style": "line-height: 22px;",
				"updated": "20240917231425"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public delegate void MyFun();\n\nstatic void Main(string[] args)\n{\n    MyFun ff = Fun;\n    ff += Fun3;\n\n    //如果委托是null,直接调用会报错！！！，建议用if判断来确保不会报错\n    if (ff != null)\n    {\n        ff();\n    }\n    else\n    {\n        Console.WriteLine(\"ff没有存储方法\");\n    }\n}\n\nstatic void Fun()\n{\n    Console.WriteLine(\"我做了什么\");\n}\n\nstatic void Fun3()\n{\n    Console.WriteLine(\"你做了什么\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917231020-rzgp71q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917231020-rzgp71q",
				"updated": "20240917231022"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240917230943-niqdd28",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917230943-niqdd28",
				"style": "line-height: 22px;",
				"updated": "20240917231018"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ff没有存储方法\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917231228-vsz7psl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917231228-vsz7psl",
				"updated": "20240917231736"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果一个委托要判断确认不为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后才执行，除了使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "if"
				},
				{
					"Type": "NodeText",
					"Data": "​ 判断，\n还可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "?.Invoke()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的方法来调用委托，委托在不等于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 时才会调用\n这个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "?."
				},
				{
					"Type": "NodeText",
					"Data": "​ 是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 检查运算符，它用于简化判空逻辑，会在（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "tag",
					"TextMarkTextContent": "TODO"
				},
				{
					"Type": "NodeText",
					"Data": "​）内详细讲解"
				}
			]
		},
		{
			"ID": "20240917231447-8zw5nrr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917231447-8zw5nrr",
				"style": "line-height: 22px;",
				"updated": "20240917231757"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public delegate void MyFun();\n\nstatic void Main(string[] args)\n{\n    MyFun ff = null;\n\n    //如果委托是null,直接调用会报错！！！，建议用if判断来确保不会报错\n    if (ff != null)\n    {\n        ff();\n    }\n    // 下面的写法等价于上面的写法\n    ff?.Invoke();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917231427-iggb6r0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917231427-iggb6r0",
				"updated": "20240917232504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以封装方法来为类内部的委托变量添加函数或移除函数\n在类里为已经有的委托成员变量，在函数里直接使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "+="
				},
				{
					"Type": "NodeText",
					"Data": "​ 是可以的，因为实例化类时已经默认进行了初始化（赋值为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​）"
				}
			]
		},
		{
			"ID": "20240917232318-qu619ba",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917232318-qu619ba",
				"style": "line-height: 22px;",
				"updated": "20240917233031"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public delegate void MyFun();\npublic delegate int MyFun2(int a);\n\nclass Test\n{\n    public MyFun fun;\n    public MyFun2 fun2;\n\n    public void AddFun(MyFun fun, MyFun2 fun2)\n    {\n        //在类里 为已经有的委托成员变量 在函数里直接 使用 += 是可以的，因为实例化类时已经进行了初始化（=null）\n        this.fun += fun;\n        this.fun2 = fun2;\n    }\n\n    public void RemoveFun(MyFun fun, MyFun2 fun2)\n    {\n        //等同于this.fun = this.fun - fun;\n        this.fun -= fun;\n        this.fun2 -= fun2;\n    }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Test t = new Test();\n        //可以调用实例化对象里存储的委托成员变量，实例化对象.委托变量() 即可\n        t.AddFun(Fun, Fun2);\n        t.fun();\n        t.fun2(50);\n\n        t.RemoveFun(Fun, Fun2);\n        t.fun?.Invoke();\t\t\t//这里要进行空检查，如果不为空才执行，否则可能报错\n        t.fun2?.Invoke(50);\t\t\t//这里要进行空检查，如果不为空才执行，否则可能报错\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917232852-crg9ziz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917232852-crg9ziz",
				"updated": "20240917232854"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240917232854-s1va2an",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240917232854-s1va2an",
				"style": "line-height: 22px;",
				"updated": "20240917232856"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "我做了什么\n50\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240917232916-k4zwp3b",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"alias": "Func\u0026lt;\u0026gt;",
				"id": "20240917232916-k4zwp3b",
				"name": "Action\u0026lt;\u0026gt;",
				"updated": "20240917233543"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "系统定义好的委托"
				}
			]
		},
		{
			"ID": "20240917233111-wrj7kbb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917233111-wrj7kbb",
				"updated": "20240917233127"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以直接使用系统提供的常用委托，需要 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "using System"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240917233128-ax0mylv",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240917233128-ax0mylv",
				"updated": "20240917233543"
			},
			"Children": [
				{
					"ID": "20240917233143-yzs6vq1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240917233143-yzs6vq1",
						"updated": "20240917233522"
					},
					"Children": [
						{
							"ID": "20240917233143-1wfrg4h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240917233143-1wfrg4h",
								"updated": "20240917233215"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Action\u0026lt;\u0026gt;"
								},
								{
									"Type": "NodeText",
									"Data": "​ 是代表无返回值委托，系统提供了1-16个参数的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Action"
								},
								{
									"Type": "NodeText",
									"Data": "​ 委托，直接用即可，类型可以分别指定"
								}
							]
						},
						{
							"ID": "20240917233302-yxy0lr9",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240917233302-yxy0lr9",
								"style": "line-height: 22px;",
								"updated": "20240917233505"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "static void Main(string[] args)\n{\n    //Action代表无返回值委托\n    Action action = Fun;\n    action += Fun3;\n    action();\n\n    //Action 代表无返回值委托 系统提供了1-16个参数的Action委托，直接用即可，类型可以分别指定\n    Action\u003cint, String\u003e action2 = Fun6;\n}\n\nstatic void Fun()\n{\n    Console.WriteLine(\"我做了什么\");\n}\n\nstatic void Fun3()\n{\n    Console.WriteLine(\"你做了什么\");\n}\n\nstatic void Fun6(int i, string s) { }\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240917233508-sj2b4ud",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240917233508-sj2b4ud",
								"updated": "20240917233512"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240917233512-wqki248",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240917233512-wqki248",
								"style": "line-height: 22px;",
								"updated": "20240917233522"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "我做了什么\n你做了什么\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240917233145-0ahy8wc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240917233145-0ahy8wc",
						"updated": "20240917233543"
					},
					"Children": [
						{
							"ID": "20240917233145-y85wy5s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240917233145-y85wy5s",
								"updated": "20240917233258"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Func\u0026lt;\u0026gt;"
								},
								{
									"Type": "NodeText",
									"Data": "​ 是代表有返回值委托，系统提供了1-16个参数的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Func"
								},
								{
									"Type": "NodeText",
									"Data": "​ 委托，直接用即可"
								}
							]
						},
						{
							"ID": "20240917233226-5zuzc78",
							"Type": "NodeBlockquote",
							"Properties": {
								"id": "20240917233226-5zuzc78",
								"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
								"updated": "20240917233228"
							},
							"Children": [
								{
									"Type": "NodeBlockquoteMarker",
									"Data": "\u003e"
								},
								{
									"ID": "20240917233228-ouz9lzn",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240917233228-ouz9lzn",
										"updated": "20240917233235"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "注意！指定类型时，参数的类型写在前面，泛型参数的最后一个一定是返回值的类型"
										}
									]
								}
							]
						},
						{
							"ID": "20240917233440-d7j0rmj",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240917233440-d7j0rmj",
								"style": "line-height: 22px;",
								"updated": "20240917233538"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "static void Main(string[] args)\n{\n    //Func代表可以指定返回值委托\n    Func\u003cstring\u003e funcString = Fun4;\n    Func\u003cint\u003e funcInt = Fun5;\n\n    //Func 代表可以指定返回值的委托 系统提供了1-16个参数的Func委托，直接用即可\n    //注意！指定类型时，参数的类型写在前面，最后一个一定是返回值的类型\n    Func\u003cint, int\u003e func2 = Fun2;\n}\n\nstatic int Fun2(int value)\n{\n    return value;\n}\n\nstatic string Fun4()\n{\n    return \"\";\n}\n\nstatic int Fun5()\n{\n    return 0;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240917233540-aqoaejf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240917233540-aqoaejf",
				"updated": "20240917233540"
			}
		}
	]
}