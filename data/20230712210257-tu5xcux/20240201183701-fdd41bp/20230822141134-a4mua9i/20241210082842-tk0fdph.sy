{"ID":"20241210082842-tk0fdph","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241210082842-tk0fdph","title":"CS4L18——多线程","type":"doc","updated":"20241210133055"},"Children":[{"ID":"20241210132644-mggq0rm","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241210132644-mggq0rm","updated":"20241210133055"},"Children":[{"Type":"NodeText","Data":"本章代码关键字"}]},{"ID":"20241210132740-et77sps","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241210132740-et77sps","updated":"20241210133055"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"System.Threading\t\t// 线程相关命名空间\nThread\t\t\t\t\t// 线程\nthread.Start()\t\t\t// 开启线程\nthread.IsBackground\t\t// 设置线程为后台线程，当主线程执行完毕时，后台线程会被自动关闭\nthread.Abort()\t\t\t// 中止线程，此方法已废弃，不建议使用\nThread.Sleep()\t\t\t// 让线程休眠一段时间（传入的单位是毫秒）\nlock() {}\t\t\t\t// 给对象加锁，确保同时只有一个线程能够访问该对象\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241210082842-plsgzx7","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20241210082842-plsgzx7","updated":"20241210122301"},"Children":[{"Type":"NodeText","Data":"进程"}]},{"ID":"20241210122123-o5yk2wz","Type":"NodeParagraph","Properties":{"id":"20241210122123-o5yk2wz","updated":"20241210122149"},"Children":[{"Type":"NodeText","Data":"进程（Process）是计算机中的程序关于某数据集合上的一次运行活动。是系统进行资源分配和调度的基本单位，是操作系统结构的基础"}]},{"ID":"20241210122152-w2abavj","Type":"NodeParagraph","Properties":{"id":"20241210122152-w2abavj","updated":"20241210122152"},"Children":[{"Type":"NodeText","Data":"说人话：打开一个应用程序就是在操作系统上开启了一个进程\n进程之间可以相互独立运行，互不干扰，进程之间也可以相互访问、操作"}]},{"ID":"20241210122216-2ji64v5","Type":"NodeParagraph","Properties":{"id":"20241210122216-2ji64v5","updated":"20241210122216"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"style":"width: 596px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"进程图片说明"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/进程图片说明-20241210122216-8us3051.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 596px;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20241210122223-grptf6e","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20241210122223-grptf6e","name":"Thread","updated":"20241210132637"},"Children":[{"Type":"NodeText","Data":"线程"}]},{"ID":"20241210122312-af72f6f","Type":"NodeParagraph","Properties":{"id":"20241210122312-af72f6f","updated":"20241210122332"},"Children":[{"Type":"NodeText","Data":"操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位\n一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，我们目前写的程序 都在主线程中"}]},{"ID":"20241210122330-u627jsw","Type":"NodeParagraph","Properties":{"id":"20241210122330-u627jsw","updated":"20241210122330"},"Children":[{"Type":"NodeText","Data":"简单理解线程：就是代码从上到下运行的一条“管道”"}]},{"ID":"20241210122401-x4medbk","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241210122401-x4medbk","updated":"20241210132637"},"Children":[{"Type":"NodeText","Data":"多线程"}]},{"ID":"20241210122411-egwaby0","Type":"NodeParagraph","Properties":{"id":"20241210122411-egwaby0","updated":"20241210122447"},"Children":[{"Type":"NodeText","Data":"我们可以通过代码，开启新的线程，以同时运行代码的多条 “管道”，就叫多线程"}]},{"ID":"20241210122343-tjet765","Type":"NodeParagraph","Properties":{"id":"20241210122343-tjet765","updated":"20241210132634"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"多线程图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/多线程图片-20241210122343-scn4shv.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241210132634-07evspv","Type":"NodeParagraph","Properties":{"id":"20241210132634-07evspv","updated":"20241210132637"},"Children":[{"Type":"NodeText","Data":"多线程是多个可以同时执行代码逻辑的“管道”，可以通过代码开启多线程，用多线程处理一些复杂的可能影响主线程流畅度的逻辑"}]},{"ID":"20241210122455-1jah3p4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241210122455-1jah3p4","updated":"20241210125748"},"Children":[{"Type":"NodeText","Data":"多线程语法相关"}]},{"ID":"20241210122656-fzytagt","Type":"NodeParagraph","Properties":{"id":"20241210122656-fzytagt","updated":"20241210122745"},"Children":[{"Type":"NodeText","Data":"C"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"#"}]},{"Type":"NodeText","Data":" 提供了一个线程类 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Thread"},{"Type":"NodeText","Data":"​，使用前需要先引用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"using System.Threading"},{"Type":"NodeText","Data":"​"}]},{"ID":"20241210122823-8bgheig","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241210122823-8bgheig","updated":"20241210125748"},"Children":[{"Type":"NodeText","Data":"声明新线程"}]},{"ID":"20241210124406-6ao6gqm","Type":"NodeParagraph","Properties":{"id":"20241210124406-6ao6gqm","updated":"20241210124407"},"Children":[{"Type":"NodeText","Data":"声明一个新线程，需要提供该线程执行的函数"}]},{"ID":"20241210122908-datuwyq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241210122908-datuwyq","updated":"20241210125748"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static void Main()\n{\n    Thread t = new Thread(NewThreadLogic);\n}\n\nstatic void NewThreadLogic()\n{\n    Console.WriteLine(\"新线程开启\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241210123039-sqi5wlr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241210123039-sqi5wlr","name":"thread.Start()","updated":"20241210125745"},"Children":[{"Type":"NodeText","Data":"启动线程"}]},{"ID":"20241210123147-z6u8xvd","Type":"NodeParagraph","Properties":{"id":"20241210123147-z6u8xvd","updated":"20241210123215"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Start()"},{"Type":"NodeText","Data":"​ 方法即可运行创建出来的线程"}]},{"ID":"20241210123058-is1bcoj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241210123058-is1bcoj","updated":"20241210125745"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static void Main()\n{\n    Thread thread = new Thread(NewThreadLogic);\n    thread.Start();\n}\n\nstatic void NewThreadLogic()\n{\n    Console.WriteLine(\"新线程开启\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241210123650-vvf91il","Type":"NodeParagraph","Properties":{"id":"20241210123650-vvf91il","updated":"20241210123652"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20241210123652-avlgklo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241210123652-avlgklo","updated":"20241210123656"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"新线程开启\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241210123347-b00wot4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241210123347-b00wot4","name":"thread.IsBackground","updated":"20241210125739"},"Children":[{"Type":"NodeText","Data":"设置为后台线程"}]},{"ID":"20241210123401-m2rnkkv","Type":"NodeParagraph","Properties":{"id":"20241210123401-m2rnkkv","updated":"20241210123716"},"Children":[{"Type":"NodeText","Data":"当前台线程都结束了的时候，整个程序也就结束了，即使还有后台线程正在运行\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"后台线程不会防止应用程序的进程被终止掉，如果不设置为后台线程，可能导致进程无法正常关闭"}]},{"ID":"20241210123435-ikpbvf5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241210123435-ikpbvf5","updated":"20241210125739"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static void Main()\n{\n    Thread thread = new Thread(NewThreadLogic);\n    thread.Start();\n    Thread.Sleep(100);              // 设置主线程0.1秒后再继续执行\n    thread.IsBackground = true;     // 如果不设置为后台线程，则thread会阻止进程的关闭\n}\n\nstatic void NewThreadLogic()\n{\n    Console.WriteLine(\"新线程开启\");\n    while (true)\n    {\n        Console.WriteLine(\"新线程运行中\");\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241210123353-i0w3fs5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241210123353-i0w3fs5","name":"thread.Abort()","updated":"20241210125735"},"Children":[{"Type":"NodeText","Data":"关闭释放一个线程"}]},{"ID":"20241210124017-tldvqyw","Type":"NodeParagraph","Properties":{"id":"20241210124017-tldvqyw","updated":"20241210124034"},"Children":[{"Type":"NodeText","Data":"如果开启的线程中不是死循环，是能够结束的逻辑，那么 不用刻意的去关闭它\n"}]},{"ID":"20241210124036-5iwa6k0","Type":"NodeParagraph","Properties":{"id":"20241210124036-5iwa6k0","updated":"20241210124036"},"Children":[{"Type":"NodeText","Data":"如果是死循环，想要中止这个线程，有两种方式："}]},{"ID":"20241210124058-skwf12f","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241210124058-skwf12f","updated":"20241210125735"},"Children":[{"ID":"20241210124101-p8lmeca","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241210124101-p8lmeca","updated":"20241210125735"},"Children":[{"ID":"20241210124101-z02n2gn","Type":"NodeParagraph","Properties":{"id":"20241210124101-z02n2gn","updated":"20241210124130"},"Children":[{"Type":"NodeText","Data":"死循环中使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"bool"},{"Type":"NodeText","Data":"​ 标识控制循环是否结束"}]},{"ID":"20241210124509-g15k0qo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241210124509-g15k0qo","updated":"20241210125735"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static bool isRuning = true;\n\nstatic void Main()\n{\n    Thread thread = new Thread(NewThreadLogic);\n    thread.Start();\n    thread.IsBackground = true;     // 如果不设置为后台线程，则thread会阻止进程的关闭\n    Console.ReadKey();\t\t\t\t// 等待用户输入任意键结束进程\n    isRuning = false;\t\t\t\t// 关闭线程\n    Console.ReadKey();\n}\n\nstatic void NewThreadLogic()\n{\n    Console.WriteLine(\"新线程开启\");\n    while (isRuning)\n    {\n        Console.WriteLine(\"新线程运行中\");\n    }\n    Console.WriteLine(\"新线程运行结束\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20241210124131-a7zmhar","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241210124131-a7zmhar","updated":"20241210125730"},"Children":[{"ID":"20241210124131-n6kow6x","Type":"NodeParagraph","Properties":{"id":"20241210124131-n6kow6x","updated":"20241210124159"},"Children":[{"Type":"NodeText","Data":"通过线程提供的方法 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Abort()"},{"Type":"NodeText","Data":"​"}]},{"ID":"20241210124902-thoi8gd","Type":"NodeBlockquote","Properties":{"id":"20241210124902-thoi8gd","style":"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color); --b3-parent-background: var(--b3-card-error-background);","updated":"20241210125233"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20241210124956-pz0rkev","Type":"NodeParagraph","Properties":{"id":"20241210124956-pz0rkev","updated":"20241210125233"},"Children":[{"Type":"NodeText","Data":"警告！在 .NET 5 及以后的版本，此方法已废弃，使用该方法会抛出错误，因此不建议使用此方法"}]}]},{"ID":"20241210124835-osh913f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241210124835-osh913f","updated":"20241210125730"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static void Main()\n{\n    Thread thread = new Thread(NewThreadLogic);\n    thread.Start();\n    thread.IsBackground = true;     // 如果不设置为后台线程，则thread会阻止进程的关闭\n    Console.ReadKey();\n    thread.Abort();                 // “Thread.Abort()”已过时:“Thread.Abort is not supported and throws PlatformNotSupportedException.”\n}\n\nstatic void NewThreadLogic()\n{\n    Console.WriteLine(\"新线程开启\");\n    while (true)\n    {\n        Console.WriteLine(\"新线程运行中\");\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20241210123234-60i6hpx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241210123234-60i6hpx","name":"Thread.Sleep()","updated":"20241210125727"},"Children":[{"Type":"NodeText","Data":"线程休眠"}]},{"ID":"20241210125207-fifuk1f","Type":"NodeParagraph","Properties":{"id":"20241210125207-fifuk1f","updated":"20241210125342"},"Children":[{"Type":"NodeText","Data":"让线程休眠一段时间（传入的单位是毫秒，1 秒 = 1000 毫秒），在哪个线程里执行 就休眠哪个线程"}]},{"ID":"20241210125343-f70kmm0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241210125343-f70kmm0","updated":"20241210125727"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static bool isRuning = true;\n  \nstatic void Main()\n{\n    Thread thread = new Thread(NewThreadLogic);\n    thread.Start();\n    thread.IsBackground = true;     // 如果不设置为后台线程，则thread会阻止进程的关闭\n    Console.ReadKey();\t\t\t\t// 等待用户输入任意键结束进程\n    isRuning = false;\t\t\t\t// 关闭线程\n}\n  \nstatic void NewThreadLogic()\n{\n    Console.WriteLine(\"新线程开启\");\n    while (isRuning)\n    {\n        Thread.Sleep(1000);\n        Console.WriteLine(\"新线程运行中\");\n    }\n    Console.WriteLine(\"新线程运行结束\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241210125359-pgu2fv9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241210125359-pgu2fv9","updated":"20241210132111"},"Children":[{"Type":"NodeText","Data":"线程之间共享数据"}]},{"ID":"20241210125515-uglbxhp","Type":"NodeParagraph","Properties":{"id":"20241210125515-uglbxhp","updated":"20241210130525"},"Children":[{"Type":"NodeText","Data":"多个线程使用的内存是共享的，都属于该应用程序（进程），所以要注意，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"多线程同时操作同一片内存区域时可能会出问题"}]},{"ID":"20241210130525-g2ffe4q","Type":"NodeParagraph","Properties":{"id":"20241210130525-g2ffe4q","updated":"20241210130625"},"Children":[{"Type":"NodeText","Data":"假设主线程要在控制台的（0，0）位置画红色三角形，副线程要在（10，5）位置画黄色方形"}]},{"ID":"20241210125821-zuotro7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241210125821-zuotro7","updated":"20241210131801"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"class Program\n{\n    static bool isRuning = true;\n  \n    static void Main()\n    {\n        Thread thread = new Thread(NewThreadLogic);\n        thread.Start();\n        thread.IsBackground = true;     // 如果不设置为后台线程，则thread会阻止进程的关闭\n        Console.Clear();\n        while (isRuning)\n        {\n            Console.SetCursorPosition(0, 0);\n            Console.ForegroundColor = ConsoleColor.Red;\n            Console.Write(\"▲\");\n        }\n    }\n  \n    static void NewThreadLogic()\n    {\n        while (isRuning)\n        {\n            Console.SetCursorPosition(10, 5);\n            Console.ForegroundColor = ConsoleColor.Yellow;\n            Console.Write(\"■\");\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241210130446-4cubkad","Type":"NodeParagraph","Properties":{"id":"20241210130446-4cubkad","updated":"20241210130449"},"Children":[{"Type":"NodeText","Data":"显示效果："}]},{"ID":"20241210130501-e24s1nu","Type":"NodeParagraph","Properties":{"id":"20241210130501-e24s1nu","updated":"20241210130501"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241210130501-w8h7emz.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241210130630-zos8byp","Type":"NodeParagraph","Properties":{"id":"20241210130630-zos8byp","updated":"20241210131559"},"Children":[{"Type":"NodeText","Data":"可以看到，由于不同线程间执行顺序不一致，就出现绘制混乱的问题，可以通过加锁的形式避免问题"}]},{"ID":"20241210125550-riq5r12","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241210125550-riq5r12","name":"lock()","updated":"20241210132111"},"Children":[{"Type":"NodeText","Data":"线程锁"}]},{"ID":"20241210125518-rxxm61l","Type":"NodeParagraph","Properties":{"id":"20241210125518-rxxm61l","updated":"20241210130805"},"Children":[{"Type":"NodeText","Data":"当我们在多个线程当中想要访问同样的东西，进行逻辑处理时，为了避免不必要的逻辑顺序执行的差错，\n就需要对某个引用类型对象加锁 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"lock"},{"Type":"NodeText","Data":"​，确保同时只有一个线程能够访问该对象"}]},{"ID":"20241210125626-tlwg1hd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241210125626-tlwg1hd","updated":"20241210125646"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"lock (引用类型对象)\n{\n    // ...\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241210131915-ljm7ug3","Type":"NodeParagraph","Properties":{"id":"20241210131915-ljm7ug3","updated":"20241210132106"},"Children":[{"Type":"NodeText","Data":"当一个线程运行到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"lock"},{"Type":"NodeText","Data":"​ 内部逻辑时，就会将括号内的引用类型对象是否被锁住，\n如果被锁住，就会等待此对象解锁，如果没有被锁住，就会锁住此对象使得其他线程无法进入，然后执行 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"lock"},{"Type":"NodeText","Data":"​ 内部的逻辑，执行结束再解锁"}]},{"ID":"20241210131620-ytn116y","Type":"NodeParagraph","Properties":{"id":"20241210131620-ytn116y","updated":"20241210131704"},"Children":[{"Type":"NodeText","Data":"这样，就可以跳过线程锁，确保同时只有一个线程能够在控制台输出，这样就不会出现绘制混乱的问题："}]},{"ID":"20241210131704-vrz4js8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241210131704-vrz4js8","updated":"20241210131857"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"static bool isRuning = true;\nstatic object lockobj = new object();\n  \nstatic void Main()\n{\n    Thread thread = new Thread(NewThreadLogic);\n    thread.Start();\n    thread.IsBackground = true;     // 如果不设置为后台线程，则thread会\n    Console.Clear();\n    while (isRuning)\n    {\n        lock (lockobj)\n        {\n            Console.SetCursorPosition(0, 0);\n            Console.ForegroundColor = ConsoleColor.Red;\n            Console.Write(\"▲\");\n        }\n    }\n}\n  \nstatic void NewThreadLogic()\n{\n    while (isRuning)\n    {\n        lock (lockobj)\n        {\n            Console.SetCursorPosition(10, 5);\n            Console.ForegroundColor = ConsoleColor.Yellow;\n            Console.Write(\"■\");\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241210131837-xxyrlxt","Type":"NodeParagraph","Properties":{"id":"20241210131837-xxyrlxt","updated":"20241210131839"},"Children":[{"Type":"NodeText","Data":"显示效果："}]},{"ID":"20241210131841-7timr50","Type":"NodeParagraph","Properties":{"id":"20241210131841-7timr50","updated":"20241210131841"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241210131841-dydifw7.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241210132111-qkireu5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241210132111-qkireu5","updated":"20241210132500"},"Children":[{"Type":"NodeText","Data":"多线程对于我们的意义"}]},{"ID":"20241210132258-idtr587","Type":"NodeParagraph","Properties":{"id":"20241210132258-idtr587","updated":"20241210132452"},"Children":[{"Type":"NodeText","Data":"可以用多线程专门处理一些复杂耗时的逻辑，比如 寻路、网络通信等等\n使用多线程来处理这些复杂耗时的逻辑，就可以避免主线程被卡住，导致主线程卡顿等问题"}]},{"ID":"20241210132500-fud50eq","Type":"NodeParagraph","Properties":{"id":"20241210132500-fud50eq","updated":"20241210132500"}}]}