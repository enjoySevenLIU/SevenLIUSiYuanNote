{"ID":"20240918005835-mosmabj","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240918005835-mosmabj","title":"CS4L15——Lambda表达式","type":"doc","updated":"20241129120621"},"Children":[{"ID":"20240918005835-89vugcg","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240918005835-89vugcg","name":"=\u0026gt;","updated":"20241105175826"},"Children":[{"Type":"NodeText","Data":"lambda表达式"}]},{"ID":"20240918005857-16bktkd","Type":"NodeParagraph","Properties":{"id":"20240918005857-16bktkd","updated":"20241105175826"},"Children":[{"Type":"NodeText","Data":"可以将 lambda 表达式 理解为 "},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240918003055-2l1k05r","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"匿名函数"},{"Type":"NodeText","Data":" 的缩写\n它除了写法不同外，使用上和匿名函数一模一样\n都是和委托或者事件 配合使用的"}]},{"ID":"20240918023902-ewiqyps","Type":"NodeParagraph","Properties":{"id":"20240918023902-ewiqyps","updated":"20240918023924"},"Children":[{"Type":"NodeText","Data":"匿名函数存在闭包这个概念，闭包确保了内层的匿名函数可以引用包含在它外层的函数的变量，即使外层函数的已经执行完毕"}]},{"ID":"20240918023902-trszvsn","Type":"NodeBlockquote","Properties":{"id":"20240918023902-trszvsn","style":"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);","updated":"20240918023902"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240918023902-zau4xbh","Type":"NodeParagraph","Properties":{"id":"20240918023902-zau4xbh","updated":"20240918023902"},"Children":[{"Type":"NodeText","Data":"注意：通过调用 使用闭包变量的匿名函数 时，闭包变量的值不是变量创建时的值，而是在父函数（严格来说是作用域）范围内的最终值！！！"}]}]},{"ID":"20240918005940-r0opzyl","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240918005940-r0opzyl","updated":"20240918011611"},"Children":[{"Type":"NodeText","Data":"lambda表达式语法"}]},{"ID":"20240918011451-03ebw5s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918011451-03ebw5s","style":"line-height: 22px;","updated":"20240918011501"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"//匿名函数\ndelegate (参数列表)\n{\n\n};\n\n//lambda表达式\n(参数列表) =\u003e\n{\n    //函数体\n};\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918012435-0mmzn7e","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240918012435-0mmzn7e","updated":"20241129120621"},"Children":[{"Type":"NodeText","Data":"使用"}]},{"ID":"20240918013140-ed48i02","Type":"NodeList","ListData":{},"Properties":{"id":"20240918013140-ed48i02","updated":"20240918013707"},"Children":[{"ID":"20240918013146-ath9ui7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240918013146-ath9ui7","updated":"20240918013146"},"Children":[{"ID":"20240918013146-5d8o0wt","Type":"NodeParagraph","Properties":{"id":"20240918013146-5d8o0wt","updated":"20240918013146"},"Children":[{"Type":"NodeText","Data":"无参无返回值"}]},{"ID":"20240918013226-r9on837","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918013226-r9on837","style":"line-height: 22px;","updated":"20240918013245"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"Action a = () =\u003e\n{\n    Console.WriteLine(\"无参无返回值的lambda表达式\");\n};\na();\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918013247-3ljeg3h","Type":"NodeParagraph","Properties":{"id":"20240918013247-3ljeg3h","updated":"20240918013250"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240918013250-lqj0zri","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918013250-lqj0zri","style":"line-height: 22px;","updated":"20240918013545"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"无参无返回值的lambda表达式\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20240918013149-sgk2dgl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240918013149-sgk2dgl","updated":"20240918013149"},"Children":[{"ID":"20240918013149-aao0g9a","Type":"NodeParagraph","Properties":{"id":"20240918013149-aao0g9a","updated":"20240918013154"},"Children":[{"Type":"NodeText","Data":"有参"}]},{"ID":"20240918013205-nyjachq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918013205-nyjachq","style":"line-height: 22px;","updated":"20240918013553"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"Action\u003cint\u003e a2 = (int value) =\u003e\n{\n    Console.WriteLine(\"有参数的lambda表达式：{0}\", value);\n};\na2(100);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918013557-qdu0yre","Type":"NodeParagraph","Properties":{"id":"20240918013557-qdu0yre","updated":"20240918013558"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240918013600-qn2625m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918013600-qn2625m","style":"line-height: 22px;","updated":"20240918013605"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"有参数的lambda表达式：100\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918013154-geem5aq","Type":"NodeParagraph","Properties":{"id":"20240918013154-geem5aq","updated":"20240918013202"},"Children":[{"Type":"NodeText","Data":"甚至参数类型都可以省略 因为参数类型和委托或事件容器一致"}]},{"ID":"20240918013607-f3pzndf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918013607-f3pzndf","style":"line-height: 22px;","updated":"20240918013614"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"Action\u003cint, string\u003e a3 = (value, value2) =\u003e\n{\n    Console.WriteLine(\"省略参数类型的写法{0}，{1}\", value, value2);\n};\na3(200, \"123\");\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918013615-2jmwu5c","Type":"NodeParagraph","Properties":{"id":"20240918013615-2jmwu5c","updated":"20240918013616"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240918013616-ev48266","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918013616-ev48266","style":"line-height: 22px;","updated":"20240918013626"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"省略参数类型的写法200，123\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20240918013645-ak2f4pp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240918013645-ak2f4pp","updated":"20240918013707"},"Children":[{"ID":"20240918013645-f3mvckm","Type":"NodeParagraph","Properties":{"id":"20240918013645-f3mvckm","updated":"20240918013646"},"Children":[{"Type":"NodeText","Data":"有返回值"}]},{"ID":"20240918013646-z92mqyy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918013646-z92mqyy","style":"line-height: 22px;","updated":"20240918013656"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"Func\u003cstring, int\u003e a4 = (value) =\u003e\n{\n    Console.WriteLine(\"有返回值有参的lambda表达式{0}\", value);\n    return 1;\n};\nConsole.WriteLine(a4(\"123123\"));\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918013656-bz36i7l","Type":"NodeParagraph","Properties":{"id":"20240918013656-bz36i7l","updated":"20240918013704"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240918013704-4u6bwx2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918013704-4u6bwx2","style":"line-height: 22px;","updated":"20240918013707"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"Func\u003cstring, int\u003e a4 = (value) =\u003e\n{\n    Console.WriteLine(\"有返回值有参的lambda表达式{0}\", value);\n    return 1;\n};\nConsole.WriteLine(a4(\"123123\"));\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240918013216-kxxq9dc","Type":"NodeParagraph","Properties":{"id":"20240918013216-kxxq9dc","updated":"20240918013304"},"Children":[{"Type":"NodeText","Data":"如果函数逻辑非常简单，则可以进一步缩写，下面是缩写示例："}]},{"ID":"20240918013216-oer0bxe","Type":"NodeList","ListData":{},"Properties":{"id":"20240918013216-oer0bxe","updated":"20240918013216"},"Children":[{"ID":"20240918013216-2xgq7jq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240918013216-2xgq7jq","updated":"20240918013216"},"Children":[{"ID":"20240918013216-n1u3424","Type":"NodeParagraph","Properties":{"id":"20240918013216-n1u3424","updated":"20240918013216"},"Children":[{"Type":"NodeText","Data":"函数体只有一句表达式，可以省略大括号，如果有返回值，只要表达式返回值的类型是正确的，就可以直接省略 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"return"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240918013216-d6x4vw4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918013216-d6x4vw4","style":"line-height: 22px;","updated":"20240918013216"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"Action\u003cint\u003e printNumber = (int i) =\u003e Console.WriteLine(i);\nFunc\u003cint, string, bool\u003e isTooLong = (int x, string s) =\u003e s.Length \u003e x;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20240918013216-uerkdym","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240918013216-uerkdym","updated":"20240918013216"},"Children":[{"ID":"20240918013216-ikkqh7k","Type":"NodeParagraph","Properties":{"id":"20240918013216-ikkqh7k","updated":"20240918013216"},"Children":[{"Type":"NodeText","Data":"如果lambda表达式的参数列表的类型可以被编译器推断出来（例如可以由接收函数的委托决定各个参数类型）\n则参数列表内的参数可以省略类型（注意，lambda表达式的参数列表要么全部省略类型，要么全部指定类型，不能只省略部分）"}]},{"ID":"20240918013216-6rif4k6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918013216-6rif4k6","style":"line-height: 22px;","updated":"20240918013216"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"Func\u003cint, int, bool\u003e testForEquality = (x, y) =\u003e x == y;\t//这里x, y的类型都可以由前面的委托传入的泛型类型推断出来\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20240918013216-q8aa3ku","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240918013216-q8aa3ku","updated":"20240918013216"},"Children":[{"ID":"20240918013216-1j1r0v1","Type":"NodeParagraph","Properties":{"id":"20240918013216-1j1r0v1","updated":"20240918013216"},"Children":[{"Type":"NodeText","Data":"如果函数只有一个参数，则参数列表的小括号也可以省略"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"（没有参数时小括号不可省略！）"}]},{"ID":"20240918013216-4x95eua","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918013216-4x95eua","style":"line-height: 22px;","updated":"20240918013216"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"Func\u003cint[], int\u003e getFirstNumber = a =\u003e a[0];\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240918013340-4vpy3uy","Type":"NodeParagraph","Properties":{"id":"20240918013340-4vpy3uy","updated":"20241129115706"},"Children":[{"Type":"NodeText","Data":"这种缩写常用于传递委托参数，有些方法的参数需要执行对应格式的委托（例如："},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20231116175544-ctttufz","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"LINQ"},{"Type":"NodeText","Data":"），而如果我们传入的委托逻辑非常简单时，这种写法就很方便了"}]},{"ID":"20241129115028-4rv1fnw","Type":"NodeParagraph","Properties":{"id":"20241129115028-4rv1fnw","updated":"20241129120621"},"Children":[{"Type":"NodeText","Data":"以下面的筛选数字方法为例，它的筛选条件由外部传入，将元素传入到外部提供的方法，然后由外部传入的方法来判断元素是否符合筛选条件："}]},{"ID":"20241129114456-qax200n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241129114456-qax200n","updated":"20241129115410"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"List\u003cint\u003e numList = new List\u003cint\u003e();\n\npublic List\u003cint\u003e SelectNum(Func\u003cint, bool\u003e checkExpression)\n{\n    List\u003cint\u003e result = new List\u003cint\u003e();\n    foreach (int num in numList)\n    {\n        if (checkExpression(num))\n        {\n            result.Add(num);\n        }\n    }\n    return result;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241129115318-33oyygw","Type":"NodeParagraph","Properties":{"id":"20241129115318-33oyygw","updated":"20241129115627"},"Children":[{"Type":"NodeText","Data":"外部传入 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"checkExpression"},{"Type":"NodeText","Data":"​ 这个方法时，可以直接使用这种写法，非常简便"}]},{"ID":"20241129115345-sqaqvug","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241129115345-sqaqvug","updated":"20241129120450"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"List\u003cint\u003e selectNum1 = SelectNum(num =\u003e num == 10);\t\t\t\t\t// 筛选等于10的数字\nList\u003cint\u003e selectNum2 = SelectNum(num =\u003e num % 2 == 0);\t\t\t\t// 筛选偶数\nList\u003cint\u003e selectNum3 = SelectNum(num =\u003e num \u003e= 5);\t\t\t\t\t// 筛选大于等于5的数\nList\u003cint\u003e selectNum4 = SelectNum(num =\u003e num % 2 == 0 \u0026\u0026 num \u003e= 4);\t// 筛选大于4的偶数\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918013740-xaasgw7","Type":"NodeParagraph","Properties":{"id":"20240918013740-xaasgw7","updated":"20240918014338"},"Children":[{"Type":"NodeText","Data":"其他传参使用等和匿名函数一样，缺点也是和匿名函数一样的"}]},{"ID":"20240918011439-g4emvpj","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240918011439-g4emvpj","updated":"20240918023834"},"Children":[{"Type":"NodeText","Data":"闭包（非常重要！！！）"}]},{"ID":"20240918023543-rzr34lj","Type":"NodeParagraph","Properties":{"id":"20240918023543-rzr34lj","updated":"20240918023834"},"Children":[{"Type":"NodeText","Data":"闭包确保了内层的匿名函数可以引用包含在它外层的函数的变量，即使外层函数的执行已经终止"}]},{"ID":"20240918023543-tzn75r7","Type":"NodeBlockquote","Properties":{"id":"20240918023543-tzn75r7","style":"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);","updated":"20240918023827"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240918023724-1g76dk3","Type":"NodeParagraph","Properties":{"id":"20240918023724-1g76dk3","updated":"20240918023827"},"Children":[{"Type":"NodeText","Data":"注意：通过调用 使用闭包变量的匿名函数 时，闭包变量的值不是变量创建时的值，而是在父函数（严格来说是作用域）范围内的最终值！！！"}]}]},{"ID":"20240918015157-30akz6k","Type":"NodeParagraph","Properties":{"id":"20240918015157-30akz6k","updated":"20240918015637"},"Children":[{"Type":"NodeText","Data":"函数内部声明的局部变量，在函数执行完毕后就会被释放（以值类型变量为例），而无法再被使用"}]},{"ID":"20240918015239-p8xy0bh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918015239-p8xy0bh","style":"line-height: 22px;","updated":"20240918015319"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"public void TestFunc() \n{\n    int value = 10;\n    Console.WriteLine(value);\n}\t//value 在这里执行完了就被释放，之后再也不能使用了\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918014513-zgq6wqe","Type":"NodeParagraph","Properties":{"id":"20240918014513-zgq6wqe","updated":"20240918015721"},"Children":[{"Type":"NodeText","Data":"内层的匿名函数可以调用外层函数的变量，因为匿名函数很有可能会写在另一个函数内部，而匿名函数内经常会使用到外部函数的局部变量"}]},{"ID":"20240918014614-wv7poq1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918014614-wv7poq1","style":"line-height: 22px;","updated":"20240918014855"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"public event Action action;\n\npublic void TestFunc() \n{\n    int value = 10;\n    //内层的匿名函数可以调用外层函数的变量，比如下面的匿名函数就可以使用函数里定义的value;\n    action = () =\u003e\n    {\n        Console.WriteLine(value);\n    };\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918014726-95hupbn","Type":"NodeParagraph","Properties":{"id":"20240918014726-95hupbn","updated":"20240918020617"},"Children":[{"Type":"NodeText","Data":"当外层函数的某个局部变量，被内层的匿名函数使用，且这个内层的匿名函数，被传递到函数外部或者由函数外部的成员变量装载时\n我们就会说这个 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"被匿名函数使用的局部变量"},{"Type":"NodeText","Data":" 形成了"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"闭包"},{"Type":"NodeText","Data":"，因为这个局部变量的生命周期被改变了，它不会在外层函数执行完毕时就被释放"}]},{"ID":"20240918015343-ld95qr4","Type":"NodeParagraph","Properties":{"id":"20240918015343-ld95qr4","updated":"20240918020921"},"Children":[{"Type":"NodeText","Data":"如上面的代码，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TestFunc()"},{"Type":"NodeText","Data":"​ 函数执行完毕时，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"value"},{"Type":"NodeText","Data":"​ 不会因为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TestFunc()"},{"Type":"NodeText","Data":"​ 函数执行完毕而被释放\n​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"value"},{"Type":"NodeText","Data":"​ 会一直存在于外部的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"action"},{"Type":"NodeText","Data":"​ 内，确保调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"action"},{"Type":"NodeText","Data":"​的逻辑正常执行，除非手动将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"action"},{"Type":"NodeText","Data":"​ 置空"}]},{"ID":"20240918015146-2gp3kil","Type":"NodeParagraph","Properties":{"id":"20240918015146-2gp3kil","updated":"20240918021000"},"Children":[{"Type":"NodeTextMark","TextMarkType":"u","TextMarkTextContent":"闭包这个特性确保了匿名函数执行时可以使用其作用域以外的局部变量，并且可以不需要担心这个局部变量因为外层函数执行完毕而被释放的问题"}]},{"ID":"20240918023308-1a87pc9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240918023308-1a87pc9","updated":"20240918023512"},"Children":[{"Type":"NodeText","Data":"闭包带来的影响"}]},{"ID":"20240918020807-w4alt1m","Type":"NodeParagraph","Properties":{"id":"20240918020807-w4alt1m","updated":"20240918023336"},"Children":[{"Type":"NodeText","Data":"一个形成闭包的变量在被多个匿名函数使用时，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这个变量值是相同的，唯一的"},{"Type":"NodeText","Data":"，变量的值取决于 声明变量的作用域执行完毕时 的最终值"}]},{"ID":"20240918021350-xo8t4n5","Type":"NodeParagraph","Properties":{"id":"20240918021350-xo8t4n5","updated":"20240918021356"},"Children":[{"Type":"NodeText","Data":"以下面的代码为例："}]},{"ID":"20240918021108-73w0c2s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918021108-73w0c2s","style":"line-height: 22px;","updated":"20240918021500"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"class Test\n{\n    public event Action action;\n\n    public Test() \n    {\n        //闭包产生的影响\n        for (int i = 0; i \u003c 10; i++)\n        {\n            action += () =\u003e\n            {\n                Console.WriteLine(i);\n            };\n        }\n    }\n\n    public void DoSomething()\n    {\n        action();\n    }\n}\n\ninternal class Program\n{ \n    static void Main(string[] args)\n    {\n        Test t = new Test();\n        t.DoSomething();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918021320-9xatwy8","Type":"NodeParagraph","Properties":{"id":"20240918021320-9xatwy8","updated":"20240918021322"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240918021323-ystkuaj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918021323-ystkuaj","style":"line-height: 22px;","updated":"20240918021339"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918021514-t4fp0b3","Type":"NodeParagraph","Properties":{"id":"20240918021514-t4fp0b3","updated":"20240918021758"},"Children":[{"Type":"NodeText","Data":"和直觉不同，这里打印了 10 个 10，而不是 0 到 9"}]},{"ID":"20240918021600-q4qrk2y","Type":"NodeParagraph","Properties":{"id":"20240918021600-q4qrk2y","updated":"20240918022642"},"Children":[{"Type":"NodeText","Data":"这是因为，每次循环向 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"action"},{"Type":"NodeText","Data":"​ 添加的 所有的匿名函数，都共用该循环的同一个临时变量 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"i"},{"Type":"NodeText","Data":"​\n又因为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"i"},{"Type":"NodeText","Data":"​ 在这个循环里 是唯一的，因此每次循环改变 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"i"},{"Type":"NodeText","Data":"​ 时都会改变 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"action"},{"Type":"NodeText","Data":"​ 内所有匿名函数里的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"i"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240918022306-qctymyy","Type":"NodeParagraph","Properties":{"id":"20240918022306-qctymyy","updated":"20240918022353"},"Children":[{"Type":"NodeText","Data":"在我们调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"action"},{"Type":"NodeText","Data":"​ 输出值时，循环已经执行完毕，循环完毕时 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"i"},{"Type":"NodeText","Data":"​ 是 10，因此 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"action"},{"Type":"NodeText","Data":"​ 内部所有函数的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"i"},{"Type":"NodeText","Data":"​ 都是10，因此会打印 10 个 10"}]},{"ID":"20240918022302-ujmgrpg","Type":"NodeParagraph","Properties":{"id":"20240918022302-ujmgrpg","updated":"20240918022850"},"Children":[{"Type":"NodeText","Data":"如果我们要打印出 0 到 9，就需要让委托内部的函数引用不同的变量，且变量只存储当时循环时 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"i"},{"Type":"NodeText","Data":"​ 的值，后续循环不能影响到"}]},{"ID":"20240918022850-t4ox884","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918022850-t4ox884","style":"line-height: 22px;","updated":"20240918023512"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"class Test\n{\n    public event Action action;\n\n    public Test() \n    {\n        //闭包产生的影响\n        for (int i = 0; i \u003c 10; i++)\n        {\n            action += () =\u003e\n            {\n                Console.WriteLine(i);\n            };\n        }\n\n        //如何打印0-9\n        for (int i = 0; i \u003c 10; i++)\n        {\n            //这样就会打印0-9，每次循环都会重新声明一次index\n            int index = i;\n            action += () =\u003e\n            {\n                Console.WriteLine(index);\n            };\n        }\n    }\n\n    public void DoSomething()\n    {\n        action();\n    }\n}\n\ninternal class Program\n{ \n    static void Main(string[] args)\n    {\n        Test t = new Test();\n        t.DoSomething();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918022936-r20mkt8","Type":"NodeParagraph","Properties":{"id":"20240918022936-r20mkt8","updated":"20240918022938"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240918022938-b6rc82l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240918022938-b6rc82l","style":"line-height: 22px;","updated":"20240918022947"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240918022950-zt3csdk","Type":"NodeParagraph","Properties":{"id":"20240918022950-zt3csdk","updated":"20240918023426"},"Children":[{"Type":"NodeText","Data":"可见，匿名函数使用在循环内部声明的变量，而非声明循环时声明的变量 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"i"},{"Type":"NodeText","Data":"​ 时，就不会打印出 10 个 10，而是 0 到 9，"}]},{"ID":"20240918023431-ne2atk7","Type":"NodeParagraph","Properties":{"id":"20240918023431-ne2atk7","updated":"20240918023440"},"Children":[{"Type":"NodeText","Data":"因为每次循环，都会重新声明一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"index"},{"Type":"NodeText","Data":"​，且为其赋值当前循环时的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"i"},{"Type":"NodeText","Data":"​ 的值\n而每次循环并赋值的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"index"},{"Type":"NodeText","Data":"​，都是重新创建的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"index"},{"Type":"NodeText","Data":"​ ，不是上次循环的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"index"},{"Type":"NodeText","Data":"​，这个循环里的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"index"},{"Type":"NodeText","Data":"​ 不是唯一的\n因此 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"action"},{"Type":"NodeText","Data":"​ 内的各个函数的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"index"},{"Type":"NodeText","Data":"​ 都是不同的，一个函数对应一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"index"},{"Type":"NodeText","Data":"​，而这些 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"index"},{"Type":"NodeText","Data":"​ 的值各不相同，因此，会打印0-9"}]}]}