{
	"ID": "20240907202305-nj2su3x",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240907202305-nj2su3x",
		"title": "CS4L6——泛型约束",
		"type": "doc",
		"updated": "20240907205214"
	},
	"Children": [
		{
			"ID": "20240907202619-d5eg831",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240907202619-d5eg831",
				"updated": "20240907202624"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240907202604-9dfjitw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907202604-9dfjitw",
				"style": "line-height: 22px;",
				"updated": "20240907202617"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "where\t//泛型约束关键字\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907202305-ugsugad",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240907202305-ugsugad",
				"name": "where",
				"updated": "20240907205214"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "泛型约束"
				}
			]
		},
		{
			"ID": "20240907202328-x29bcjk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907202328-x29bcjk",
				"updated": "20240907205214"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让泛型的类型有一定的限制，关键字："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "where"
				},
				{
					"Type": "NodeText",
					"Data": "​，泛型约束一共有6种，可以组合使用（部分约束不能组合使用）"
				}
			]
		},
		{
			"ID": "20240907202355-y8vbq4k",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240907202355-y8vbq4k",
				"updated": "20240907202518"
			},
			"Children": [
				{
					"ID": "20240907202355-2kyy3hw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240907202355-2kyy3hw",
						"updated": "20240907202420"
					},
					"Children": [
						{
							"ID": "20240907202355-tlg66qt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240907202355-tlg66qt",
								"updated": "20240907202420"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "值类型 —— "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "where 泛型字母 : struct"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240907202355-t0i1zta",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240907202355-t0i1zta",
						"updated": "20240907202431"
					},
					"Children": [
						{
							"ID": "20240907202355-637oe0l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240907202355-637oe0l",
								"updated": "20240907202431"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "引用类型 —— "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "where 泛型字母 : class"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240907202355-08lm9gf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240907202355-08lm9gf",
						"updated": "20240907202441"
					},
					"Children": [
						{
							"ID": "20240907202355-sk4eybc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240907202355-sk4eybc",
								"updated": "20240907202441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "存在无参公共构造函数 —— "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "where 泛型字母 : new()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240907202355-qx6z2qi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240907202355-qx6z2qi",
						"updated": "20240907202451"
					},
					"Children": [
						{
							"ID": "20240907202355-bt19mdy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240907202355-bt19mdy",
								"updated": "20240907202451"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "某个类本身或者派生类 —— "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "where 泛型字母 : 类名"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240907202355-cbs2q5a",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20240907202355-cbs2q5a",
						"updated": "20240907202503"
					},
					"Children": [
						{
							"ID": "20240907202355-edrym35",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240907202355-edrym35",
								"updated": "20240907202503"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "某个接口的派生类型 —— "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "where 泛型字母 : 接口名"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240907202355-eixakvk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20240907202355-eixakvk",
						"updated": "20240907202518"
					},
					"Children": [
						{
							"ID": "20240907202355-o6hvaho",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240907202355-o6hvaho",
								"updated": "20240907202518"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "另一个泛型类型本身或者派生类型 —— "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "where 泛型字母 : 另一个泛型字母"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240907202328-q7hr1x6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907202328-q7hr1x6",
				"updated": "20240907202528"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "where 泛型字母 : (约束的类型)"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240907202537-42roj54",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240907202537-42roj54",
				"updated": "20240907202834"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "各泛型约束讲解"
				}
			]
		},
		{
			"ID": "20240907202541-g66nh2i",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240907202541-g66nh2i",
				"updated": "20240907202834"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "值类型约束"
				}
			]
		},
		{
			"ID": "20240907202641-c2p996t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907202641-c2p996t",
				"updated": "20240907202834"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "where 泛型字母 : struct"
				},
				{
					"Type": "NodeText",
					"Data": "​ 限定泛型只能为值类型"
				}
			]
		},
		{
			"ID": "20240907202642-x2p74jf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907202642-x2p74jf",
				"style": "line-height: 22px;",
				"updated": "20240907202738"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test1\u003cT\u003e where T : struct\n{\n    public T value;\n    public void TestFun\u003cK\u003e(K v) where K : struct { }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Test1\u003cint\u003e t = new Test1\u003cint\u003e();\t//泛型约束可以使得实例化时泛型的类型指定加上限制\n        t.TestFun(1.2f);\t//值类型约束 使得 泛型只能是值类型的\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907202748-dkkfwdg",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240907202748-dkkfwdg",
				"updated": "20240907202843"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "引用类型约束"
				}
			]
		},
		{
			"ID": "20240907202754-1h9os9o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907202754-1h9os9o",
				"updated": "20240907202839"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "where 泛型字母 : class"
				},
				{
					"Type": "NodeText",
					"Data": "​ 限定泛型只能是引用类型的"
				}
			]
		},
		{
			"ID": "20240907202755-2elutff",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907202755-2elutff",
				"style": "line-height: 22px;",
				"updated": "20240907202827"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test2\u003cT\u003e where T : class\n{\n    public T value;\n    public void TestFun\u003cK\u003e(K v) where K : class { }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        //引用类型约束 使得 泛型只能是引用类型的\n        Test2\u003cRandom\u003e t2 = new Test2\u003cRandom\u003e();\n        t2.value = new Random();\n        t2.TestFun(new object());\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907202843-grlecpm",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240907202843-grlecpm",
				"updated": "20240907203419"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "公共无参构造约束"
				}
			]
		},
		{
			"ID": "20240907203052-pvgkx12",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907203052-pvgkx12",
				"updated": "20240907203236"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "where 泛型字母 : new()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 使得泛型不能是没有 公共的无参构造函数 的非抽象类型（意味着抽象类是不能用的）\n结构体一定有公共无参构造函数，因此值类型是可以用的"
				}
			]
		},
		{
			"ID": "20240907203206-thhkody",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907203206-thhkody",
				"updated": "20240907203325"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果一个类，接口或者方法的泛型参数使用了公共无参构造约束，那么在内部，这个泛型参数就可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "new T()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来实例化"
				}
			]
		},
		{
			"ID": "20240907202905-14y9qek",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907202905-14y9qek",
				"style": "line-height: 22px;",
				"updated": "20240907203409"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test3\u003cT\u003e where T : new()\n{\n    public T value = new T();\t// 只有当T有公共无参构造约束时，才能使用new来实例化\n    public void TestFun\u003cK\u003e(K v) where K : new() { }\n}\n\nabstract class Test { }\t//这个类有无参构造函数，但抽象类不能实例化，因此有公共无参构造函数也没有用\n\nclass Test1 { }\t//这个类有无参构造函数\n\n//这个类没有无参构造函数\nclass Test2\n{\n    public Test2(int a) { }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"泛型约束\");\n\n        //泛型约束可以使得实例化时泛型的类型指定加上限制\n        Test1\u003cint\u003e t = new Test1\u003cint\u003e();\n\n        //值类型约束 使得 泛型只能是值类型的\n        t.TestFun(1.2f);\n\n        //引用类型约束 使得 泛型只能是引用类型的\n        Test2\u003cRandom\u003e t2 = new Test2\u003cRandom\u003e();\n        t2.value = new Random();\n        t2.TestFun(new object());\n\n        //公共无参构造约束使得 泛型 不能是 没有 公共的无参构造函数 的 非抽象类型（意味着抽象类是不能用的）\n        //结构体一定有公共无参构造函数，因此值类型是可以用的\n        //Test3\u003cTest2\u003e t3 = new Test3\u003cTest2\u003e();\n        Test3\u003cTest1\u003e t3 = new Test3\u003cTest1\u003e();\n        Test3\u003cint\u003e t4 = new Test3\u003cint\u003e();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907202942-r8c8qu7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240907202942-r8c8qu7",
				"updated": "20240907203714"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类约束"
				}
			]
		},
		{
			"ID": "20240907203520-p6cloa4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907203520-p6cloa4",
				"updated": "20240907203536"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "where 泛型字母 : 类名"
				},
				{
					"Type": "NodeText",
					"Data": "​ 使得泛型只能是，某个类及其子类（该类的父类也不行）"
				}
			]
		},
		{
			"ID": "20240907203440-zs58swt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907203440-zs58swt",
				"style": "line-height: 22px;",
				"updated": "20240907203702"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test1 { }\n\nclass Test4\u003cT\u003e where T : Test1\n{\n    public T value;\n    public void TestFun\u003cK\u003e(K v) where K : Test1 { }\n}\n//这是test1的子类\nclass Test3 : Test1 { }\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        //类约束使得 泛型 只能是某个类及其子类（该类的父类也不行）\n        Test4\u003cTest1\u003e t5 = new Test4\u003cTest1\u003e();\n        Test4\u003cTest3\u003e t6 = new Test4\u003cTest3\u003e();\n        t5.TestFun\u003cTest4\u003cTest1\u003e\u003e(t5);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907203713-m4g91nw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240907203713-m4g91nw",
				"updated": "20240907204701"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接口约束"
				}
			]
		},
		{
			"ID": "20240907203808-xl39at2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907203808-xl39at2",
				"updated": "20240907204512"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "where 泛型字母 : 接口名"
				},
				{
					"Type": "NodeText",
					"Data": "​ 使得泛型只能是某个接口及其派生类型（类和接口）\n（注意接口不可以实例化！！！）"
				}
			]
		},
		{
			"ID": "20240907203813-yku0ctu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907203813-yku0ctu",
				"style": "line-height: 22px;",
				"updated": "20240907204611"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "interface IFly { }\nclass Test4 : IFly { }\n\nclass Test5\u003cT\u003e where T : IFly\n{\n    public T value;\n    public void TestFun\u003cK\u003e(K v) where K : IFly { }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        //接口约束使得 泛型只能是 某个接口及其派生类型（类和接口）（注意接口不可以实例化！！！）\n        Test5\u003cIFly\u003e t7 = new Test5\u003cIFly\u003e();\n        t7.value = new Test4();\n        Test5\u003cTest4\u003e t8 = new Test5\u003cTest4\u003e();\n        t8.value = new Test4();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907204701-jawms1i",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240907204701-jawms1i",
				"updated": "20240907204958"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "另一个泛型类型的泛型约束"
				}
			]
		},
		{
			"ID": "20240907204721-hdsf868",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907204721-hdsf868",
				"updated": "20240907204958"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "where 泛型字母 : 另一个泛型字母"
				},
				{
					"Type": "NodeText",
					"Data": "​ 使得被约束的泛型只能是 约束泛型指定的类型本身及其派生类型\n（用于有多个泛型字母的类型，将特定字母的泛型，限定为其他字母指定的类型或是派生类型）"
				}
			]
		},
		{
			"ID": "20240907204725-muj9eog",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907204725-muj9eog",
				"style": "line-height: 22px;",
				"updated": "20240907204913"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "interface IFly { }\nclass Test4 : IFly { }\n\nclass Test6\u003cT, U\u003e where T : U\n{\n    public T value;\n    public void TestFun\u003cK, V\u003e(K v) where K : V { }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        //另一个泛型约束使得 被约束的泛型 只能是 约束泛型指定的类型本身及其派生类型（用于有多个泛型字母的类型，将该字母的泛型，限定为其他字母指定的类型）\n        Test6\u003cTest4, IFly\u003e t9 = new Test6\u003cTest4, IFly\u003e();\t//T必须是U或者派生于U的\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907204744-ct6k3b6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240907204744-ct6k3b6",
				"updated": "20240907205102"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "约束的组合使用"
				}
			]
		},
		{
			"ID": "20240907205014-lzalefj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907205014-lzalefj",
				"updated": "20240907205014"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以将多个约束类型以逗号分割的形式来组合使用"
				}
			]
		},
		{
			"ID": "20240907205018-x62kwpi",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240907205018-x62kwpi",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240907205034"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240907205034-eabcy7k",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240907205034-eabcy7k",
						"updated": "20240907205034"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意，有些类型不能被组合使用，例如值类型约束和引用类型约束，公共无参构造约束（"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "new()"
						},
						{
							"Type": "NodeText",
							"Data": "​）一定是写在最后一位！！！"
						}
					]
				}
			]
		},
		{
			"ID": "20240907205032-20fmsjf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907205032-20fmsjf",
				"style": "line-height: 22px;",
				"updated": "20240907205053"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test7\u003cT\u003e where T : class, new() { }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907205101-iuwgcv3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240907205101-iuwgcv3",
				"updated": "20240907205138"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多个泛型有约束"
				}
			]
		},
		{
			"ID": "20240907205110-lmbzcy7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907205110-lmbzcy7",
				"updated": "20240907205118"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多个泛型有约束时，分别对他们使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "where"
				},
				{
					"Type": "NodeText",
					"Data": "​ 关键字，使用约束类型即可\n用多个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "where"
				},
				{
					"Type": "NodeText",
					"Data": "​ 连接即可，不需要逗号等多余的符号\n建议继承和类的泛型约束分行写！以分清继承和泛型约束"
				}
			]
		},
		{
			"ID": "20240907205119-g49akvw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907205119-g49akvw",
				"style": "line-height: 22px;",
				"updated": "20240907205138"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test8\u003cT, K\u003e : Test4\n    where T : class, new() where K : struct\n{\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}