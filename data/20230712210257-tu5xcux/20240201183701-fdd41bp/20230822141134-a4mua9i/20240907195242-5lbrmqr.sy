{
	"ID": "20240907195242-5lbrmqr",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240907195242-5lbrmqr",
		"title": "CS4L5——泛型",
		"type": "doc",
		"updated": "20240907202248"
	},
	"Children": [
		{
			"ID": "20240907195242-mdnh7c2",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240907195242-mdnh7c2",
				"updated": "20240907202248"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "泛型"
				}
			]
		},
		{
			"ID": "20240907195301-x29ubg0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907195301-x29ubg0",
				"updated": "20240907195613"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "泛型实现了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类型参数化"
				},
				{
					"Type": "NodeText",
					"Data": "，达到代码重用目的，通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类型参数化"
				},
				{
					"Type": "NodeText",
					"Data": "来实现同一份代码上多种操作类型\n泛型相当于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类型占位符"
				},
				{
					"Type": "NodeText",
					"Data": "，定义类或方法时使用替代符代表变量类型，当真正使用类或者方法时在再具体指定类型"
				}
			]
		},
		{
			"ID": "20240907201944-bwu8ggy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907201944-bwu8ggy",
				"updated": "20240907202248"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "申明泛型时，它只是一个类型的占位符，泛型真正起作用的时候是在使用它的时候\n泛型占位字符可以有 n 个，用逗号隔开，泛型占位字母一般是大写字母\n不确定泛型类型时 获取默认值 可以用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "default(占位字符)"
				},
				{
					"Type": "NodeText",
					"Data": "​，看到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 包裹的字母 那肯定是泛型"
				}
			]
		},
		{
			"ID": "20240907201944-c8mzco4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907201944-c8mzco4",
				"updated": "20240907202011"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关键字："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240907195325-7w7nwav",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240907195325-7w7nwav",
				"updated": "20240907200247"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "泛型分类"
				}
			]
		},
		{
			"ID": "20240907195345-f5n0zb2",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240907195345-f5n0zb2",
				"updated": "20240907195411"
			},
			"Children": [
				{
					"ID": "20240907195345-rfnm0xb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240907195345-rfnm0xb",
						"updated": "20240907195406"
					},
					"Children": [
						{
							"ID": "20240907195339-daj12nv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240907195339-daj12nv",
								"updated": "20240907195339"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "泛型类和泛型接口\n"
								}
							]
						},
						{
							"ID": "20240907195348-0tgypof",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240907195348-0tgypof",
								"updated": "20240907195350"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "基本语法：\n"
								}
							]
						},
						{
							"ID": "20240907195354-lu8ti3p",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20240907195354-lu8ti3p",
								"updated": "20240907195406"
							},
							"Children": [
								{
									"ID": "20240907195353-kx6fekn",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240907195353-kx6fekn",
										"updated": "20240907195403"
									},
									"Children": [
										{
											"ID": "20240907195353-jwzi9c9",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240907195353-jwzi9c9",
												"updated": "20240907195403"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "class 类名\u0026lt;泛型占位字母\u0026gt;"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								},
								{
									"ID": "20240907195354-jq23bop",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240907195354-jq23bop",
										"updated": "20240907195406"
									},
									"Children": [
										{
											"ID": "20240907195354-4di5u7t",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240907195354-4di5u7t",
												"updated": "20240907195406"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "interface 接口名\u0026lt;泛型占位字母\u0026gt;"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240907195345-417nxbs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240907195345-417nxbs",
						"updated": "20240907195411"
					},
					"Children": [
						{
							"ID": "20240907195339-8ajwzq0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240907195339-8ajwzq0",
								"updated": "20240907195411"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "泛型函数\n基本语法："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "函数名\u0026lt;泛型占位字母\u0026gt;(参数列表)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240907195339-ryk6mwo",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240907195339-ryk6mwo",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240907200247"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240907195416-9iwfajh",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240907195416-9iwfajh",
						"updated": "20240907200247"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意：泛型占位字母可以有多个，用逗号分开，常用泛型占位字母是 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "T"
						},
						{
							"Type": "NodeText",
							"Data": "​"
						}
					]
				}
			]
		},
		{
			"ID": "20240907195420-1clvo49",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240907195420-1clvo49",
				"updated": "20240907200804"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "泛型类和泛型接口"
				}
			]
		},
		{
			"ID": "20240907195828-h2vcr6e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907195828-h2vcr6e",
				"updated": "20240907200102"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "泛型类在声明时，泛型参数可以替代成员的类型，实例化时，需要传入具体的类型，泛型就会替换为传入的类型"
				}
			]
		},
		{
			"ID": "20240907200206-vpca9at",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907200206-vpca9at",
				"updated": "20240907200207"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "泛型接口是同理的"
				}
			]
		},
		{
			"ID": "20240907195726-i09fsuo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907195726-i09fsuo",
				"style": "line-height: 22px;",
				"updated": "20240907200128"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class TestClass\u003cT\u003e\n{\n    //实例化时，T填入什么，里面的T代表的变量类型就是什么\n    public T Value;\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        //可以使用所有的变量类型，填入什么类型，泛型占位字母就代表是什么类型\n        TestClass\u003cint\u003e t = new TestClass\u003cint\u003e();\n        t.Value = 10;\t\t//t的Value类型就是int\n        Console.WriteLine(t.Value);\n\n        TestClass\u003cstring\u003e t2 = new TestClass\u003cstring\u003e();\n        t2.Value = \"hello\";\t//t的Value类型就是string\n        Console.WriteLine(t2.Value);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907195815-eh4sytg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907195815-eh4sytg",
				"updated": "20240907195820"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240907195820-wefslj2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907195820-wefslj2",
				"style": "line-height: 22px;",
				"updated": "20240907200028"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "10\nhello\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907195744-gkdopcr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907195744-gkdopcr",
				"updated": "20240907200234"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "泛型可以有多个，使用不同的占位符即可"
				}
			]
		},
		{
			"ID": "20240907200249-8q3wxqj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907200249-8q3wxqj",
				"style": "line-height: 22px;",
				"updated": "20240907200544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class TestClass2\u003cT1, T2, K, M, L, Key, Value\u003e\n{\n    public T1 value1;\n    public T2 value2;\n    public K key;\n    public M map;\n    public L l;\n    public L l2;\n    public Value value7;\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        //有多少个泛型就填入几个类型\n        TestClass2\u003cint, string, float, double, TestClass\u003cint\u003e, uint, ushort\u003e t3 \n            = new TestClass2\u003cint, string, float, double, TestClass\u003cint\u003e, uint, ushort\u003e();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907200355-qqcjb21",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907200355-qqcjb21",
				"updated": "20240907200654"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "泛型接口的声明和使用是同理的，继承有泛型的接口，接口的泛型必须要指定类型（可以是自己的泛型）"
				}
			]
		},
		{
			"ID": "20240907200618-8p5qcif",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907200618-8p5qcif",
				"style": "line-height: 22px;",
				"updated": "20240907200751"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "interface ITestInterface\u003cT\u003e\n{\n    T Value { get; set; }\n}\n\nclass Test : ITestInterface\u003cint\u003e    //继承有泛型的接口，接口的泛型必须要指定类型\n{\n    int ITestInterface\u003cint\u003e.Value { get; set; }\n}\n\nclass TestT\u003cT\u003e : ITestInterface\u003cT\u003e    //继承有泛型的接口，接口的泛型必须要指定类型\n{\n    int ITestInterface\u003cT\u003e.Value { get; set; }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907200804-tonlr0m",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240907200804-tonlr0m",
				"updated": "20240907202025"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "泛型方法"
				}
			]
		},
		{
			"ID": "20240907201215-kcq4y5i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907201215-kcq4y5i",
				"updated": "20240907201501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "普通类的泛型方法，使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20240902130104-jpg32aw",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "default"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以得到传入的类型的默认值"
				}
			]
		},
		{
			"ID": "20240907201231-vc69v8u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907201231-vc69v8u",
				"style": "line-height: 22px;",
				"updated": "20240907201520"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test2\n{\n    //泛型可以为参数, 实例化后使用该方法时要指定类型\n    public void TestFun\u003cT\u003e(T value)\n    {\n        Console.WriteLine(value);\n    }\n\n    //泛型可以既不作为返回值也不作为参数\n    public void TestFun\u003cT\u003e()\n    {\n        //无参方法也可以为泛型方法，用泛型类型在里面做一些逻辑类型\n        //不能对泛型变量直接赋一些指定类型的值，可以赋值默认值\n        T t = default(T);\n    }\n\n    //泛型可以作为返回值\n    public T TestFun\u003cT\u003e(string V)\n    {\n        return default(T);\n    }\n\n    //也可以使用多个泛型字母\n    public void TestFun\u003cT, K, M\u003e(T value, K key, M map) { }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Test2 tt = new Test2();\n        tt.TestFun(123);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907201408-rcg41uy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907201408-rcg41uy",
				"updated": "20240907201529"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240907201530-3vt812k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907201530-3vt812k",
				"style": "line-height: 22px;",
				"updated": "20240907201532"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "123\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907201613-72x0pzy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907201613-72x0pzy",
				"updated": "20240907201618"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "泛型类的泛型方法，泛型类和普通类可以共用一个类名，因为并不是一个类"
				}
			]
		},
		{
			"ID": "20240907201616-mwz85fg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907201616-mwz85fg",
				"style": "line-height: 22px;",
				"updated": "20240907201722"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test2\u003cT\u003e\n{\n    public T value;\n\n    //这种不是泛型方法，因为T在泛型类申明的时候就指定了 在使用这个函数的时候不能再去动态的变化了\n    public void TestFun(T t) { }\n\n    //只有带尖括号的方法才是泛型方法，注意泛型类里的泛型方法所用的泛型占位字符不能和类所用的泛型占位字符相同！\n    public void TestFun\u003cK\u003e(K k)\n    {\n        Console.WriteLine(k);\n    }\n}\n\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Test2\u003cint\u003e tt2 = new Test2\u003cint\u003e();\n        tt2.TestFun(10);\n        tt2.TestFun(\"hello\");   //泛型有时可以省略指明，因为参数里写的内容已经指明了泛型是什么类型\n        tt2.TestFun(1.2f);\n        tt2.TestFun\u003cint\u003e(20);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907201715-9cmcm6v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907201715-9cmcm6v",
				"updated": "20240907201725"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240907201725-fhzfha1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907201725-fhzfha1",
				"style": "line-height: 22px;",
				"updated": "20240907201735"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "123\nhello\n1.2\n20\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907202025-xxv1k4n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240907202025-xxv1k4n",
				"updated": "20240907202130"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "泛型的作用"
				}
			]
		},
		{
			"ID": "20240907202033-z97zofc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907202033-z97zofc",
				"updated": "20240907202130"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不同类型的对象的相同逻辑就可以选择泛型，使用泛型可以一定程度的避免装箱拆箱"
				}
			]
		},
		{
			"ID": "20240907202035-vb3ahyv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907202035-vb3ahyv",
				"updated": "20240907202039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "举例：优化 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ArrayList"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240907202041-co07q7r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240907202041-co07q7r",
				"style": "line-height: 22px;",
				"updated": "20240907202105"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class ArrayList\u003cT\u003e\n{\n    private T[] array;\n    public void Add(T value) { }\n    public void Remove(T value) { }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240907202114-ig8qgw0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240907202114-ig8qgw0",
				"updated": "20240907202114"
			}
		}
	]
}