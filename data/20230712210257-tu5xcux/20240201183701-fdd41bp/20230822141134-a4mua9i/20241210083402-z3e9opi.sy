{
	"ID": "20241210083402-z3e9opi",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20241210083402-z3e9opi",
		"title": "CS4L23——特殊语法",
		"type": "doc",
		"updated": "20241215024244"
	},
	"Children": [
		{
			"ID": "20241215020220-wpxz1nh",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241215020220-wpxz1nh",
				"updated": "20241215023446"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20241215020232-5u3am4a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215020232-5u3am4a",
				"style": "line-height: 22px;",
				"updated": "20241215023446"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "var\t\t\t\t\t\t\t\t\t// 隐式类型，用于声明临时变量，编译器会根据=右边的值的类型来判断变量是什么类型的，而不需要再指定变量类型\nnew()\t\t\t\t\t\t\t\t// 在已知变量类型的情况下，使用new实例化对象时可以直接省略掉new关键字后面的类型\n?\t\t\t\t\t\t\t\t\t// 可空类型\nNullable\u003c\u003e\t\t\t\t\t\t\t// 可空值类型的包装\nnullable\u003c\u003e.HasValue\t\t\t\t\t// 检查可空值类型是否为null\nnullable\u003c\u003e.GetValueOrDefault()\t\t// 安全获取可空值类型值，如果为值为空，返回默认值类型的默认值，如果此时还传入了参数，会返回传入的参数\n?.\t\t\t\t\t\t\t\t\t// 空检查字符串\n??\t\t\t\t\t\t\t\t\t// 空合并操作符，如果左边值为null就返回右边值，否则返回左边值\n??=\t\t\t\t\t\t\t\t\t// 空合并操作符的复合运算符，相当于若变量为null，就对其赋值\n$\"\"\t\t\t\t\t\t\t\t\t// 内插字符串\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241210083402-y6xuwvc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241210083402-y6xuwvc",
				"name": "var",
				"updated": "20241215004341"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "var"
				},
				{
					"Type": "NodeText",
					"Data": "​ 隐式类型"
				}
			]
		},
		{
			"ID": "20241215002728-zw58de7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215002728-zw58de7",
				"updated": "20241215004341"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "var"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是一种隐式类型，用于声明临时变量，编译器会根据 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "="
				},
				{
					"Type": "NodeText",
					"Data": "​ 右边的值的类型来判断变量是什么类型的，而不需要我们自己再指定类型"
				}
			]
		},
		{
			"ID": "20241215002919-hjlfdbu",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20241215002919-hjlfdbu",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);",
				"updated": "20241215003142"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20241215002919-rpyhem5",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241215002919-rpyhem5",
						"updated": "20241215003142"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "因此，"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "var"
						},
						{
							"Type": "NodeText",
							"Data": "​ 不能作为类的成员，只能用于临时变量申明时，也就是说一般写在函数语句块中。且 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "var"
						},
						{
							"Type": "NodeText",
							"Data": "​ 必须初始化\n​"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "var"
						},
						{
							"Type": "NodeText",
							"Data": "​ 也不能用于里氏替换，也就是父类装子类的情况，父类必须显式指定"
						}
					]
				}
			]
		},
		{
			"ID": "20241215003138-qq9vr84",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215003138-qq9vr84",
				"style": "line-height: 22px;",
				"updated": "20241215003309"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static void Main()\n{\n    var i = 5;\n    var s = \"Hello, world\";\n    var array = new int[] { 1, 2, 3, 4 };\n    var list = new List\u003cint\u003e();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215003311-vqrxg1f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215003311-vqrxg1f",
				"updated": "20241215003451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果需要知道 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "var"
				},
				{
					"Type": "NodeText",
					"Data": "​ 声明的变量实际是什么类型的，直接通过 IDE 来查看即可："
				}
			]
		},
		{
			"ID": "20241215003444-slhkzb6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215003444-slhkzb6",
				"updated": "20241215003444"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"style": "width: 309px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20241215003444-2vcoqzy.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 309px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241215003522-o16jkf4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241215003522-o16jkf4",
				"updated": "20241215010232"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目标类型化 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "new"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241215003526-tmc183j",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20241215003526-tmc183j",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);",
				"updated": "20241215010232"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20241215003748-70k9w2i",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241215003748-70k9w2i",
						"updated": "20241215010232"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！此语法是 C"
						},
						{
							"Type": "NodeBackslash",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "#"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 9 及其以后的版本才可以使用的，这意味着 Unity 2020 及以前的版本不可使用该方法！\n具体内容详见："
						},
						{
							"Type": "NodeTextMark",
							"Properties": {
								"style": "background-color: var(--b3-font-background6);"
							},
							"TextMarkType": "block-ref text",
							"TextMarkBlockRefID": "20231101210450-bm246ki",
							"TextMarkBlockRefSubtype": "d",
							"TextMarkTextContent": "CS5L11——CSharp 9 功能和语法"
						},
						{
							"Type": "NodeKramdownSpanIAL",
							"Data": "{: style=\"background-color: var(--b3-font-background6);\"}"
						}
					]
				}
			]
		},
		{
			"ID": "20241215010210-wqgz8bg",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20241215010210-wqgz8bg",
				"updated": "20241215010211"
			},
			"Children": [
				{
					"ID": "20241215010129-o6p9nvv",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241215010129-o6p9nvv",
						"updated": "20241215010211"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在已知变量类型的情况下，使用 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "new"
						},
						{
							"Type": "NodeText",
							"Data": "​ 实例化对象时可以直接省略掉 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "new"
						},
						{
							"Type": "NodeText",
							"Data": "​ 关键字后面的类型，使变量的赋值语句变得更简单\n相比 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "var"
						},
						{
							"Type": "NodeText",
							"Data": "​，它可以不仅可以用于临时变量初始化时，还可以用于类的成员变量以及对变量的重新赋值的情况"
						}
					]
				},
				{
					"ID": "20241215010129-rbizolk",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241215010129-rbizolk",
						"updated": "20241215010211"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "实际上，"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "new()"
						},
						{
							"Type": "NodeText",
							"Data": "​ 在所有可以推导出类型的上下文中，都可以使用，包括在初始化器内部，只要能够确定赋值类型是什么"
						}
					]
				},
				{
					"ID": "20241215010155-720955d",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241215010155-720955d",
						"updated": "20241215010211"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "不适用此特性的场景包括："
						}
					]
				},
				{
					"ID": "20241215010155-uatf49z",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20241215010155-uatf49z",
						"updated": "20241215010211"
					},
					"Children": [
						{
							"ID": "20241215010155-6gfk7er",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20241215010155-6gfk7er",
								"updated": "20241215010155"
							},
							"Children": [
								{
									"ID": "20241215010155-yiqmg3j",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241215010155-yiqmg3j",
										"updated": "20241215010155"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "该方法不适用于里氏替换，也就是父类装子类的情况，"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "new"
										},
										{
											"Type": "NodeText",
											"Data": "​ 的子类必须显式指定，否则会出现歧义！"
										}
									]
								}
							]
						},
						{
							"ID": "20241215010155-jex90dc",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20241215010155-jex90dc",
								"updated": "20241215010155"
							},
							"Children": [
								{
									"ID": "20241215010155-uhv1fta",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241215010155-uhv1fta",
										"updated": "20241215010155"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "使用 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "as"
										},
										{
											"Type": "NodeText",
											"Data": "​ 操作时无法正确推导，以 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "int"
										},
										{
											"Type": "NodeText",
											"Data": "​ 为例"
										}
									]
								},
								{
									"ID": "20241215010155-h88fjkl",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20241215010155-h88fjkl",
										"style": "line-height: 22px;",
										"updated": "20241215010155"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker",
											"CodeBlockInfo": "YyM="
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "Console.Write(new() as int); \t// error: \"new()\" 没有目标类型\n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								}
							]
						},
						{
							"ID": "20241215010155-l26p0wu",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20241215010155-l26p0wu",
								"updated": "20241215010155"
							},
							"Children": [
								{
									"ID": "20241215010155-cx5flj3",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241215010155-cx5flj3",
										"updated": "20241215010155"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "使用 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "var"
										},
										{
											"Type": "NodeText",
											"Data": "​ 时也无法推导"
										}
									]
								},
								{
									"ID": "20241215010155-p54kzlf",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20241215010155-p54kzlf",
										"style": "line-height: 22px;",
										"updated": "20241215010155"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker",
											"CodeBlockInfo": "YyM="
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "var x = new();\t// error: \"new()\" 没有目标类型\n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20241215010129-60ujimo",
					"Type": "NodeCodeBlock",
					"IsFencedCodeBlock": true,
					"Properties": {
						"id": "20241215010129-60ujimo",
						"style": "line-height: 22px;",
						"updated": "20241215010211"
					},
					"Children": [
						{
							"Type": "NodeCodeBlockFenceOpenMarker",
							"Data": "```"
						},
						{
							"Type": "NodeCodeBlockFenceInfoMarker",
							"CodeBlockInfo": "YyM="
						},
						{
							"Type": "NodeCodeBlockCode",
							"Data": "class Test {}\n\nclass Program\n{\n    List\u003cint\u003e numbers = new();\n    Test obj = new();\n    static Dictionary\u003cstring, List\u003cTest\u003e\u003e? testDict;\n\n    static void Main()\n    {\n        testDict = new() \n        {\n            {\"111\", new() { new() }},           //这里的第一个new()是List\u003cTest\u003e，后面的new()是Test\n            {\"222\", new() { new(), new() }},    //这里的第一个new()是List\u003cTest\u003e，后面的new()是Test\n        };\n    }\n}\n"
						},
						{
							"Type": "NodeCodeBlockFenceCloseMarker",
							"Data": "```"
						}
					]
				},
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				}
			]
		},
		{
			"ID": "20241215010221-q2fzx82",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241215010221-q2fzx82",
				"updated": "20241215010947"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "设置对象初始值"
				}
			]
		},
		{
			"ID": "20241215010322-72dir9x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215010322-72dir9x",
				"updated": "20241215010925"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "声明对象时，可以通过直接写大括号的形式初始化公共成员变量和属性\n圆括号在有无参构造的情况下可以省略（使用目标类型化 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20231101210450-j8h234k",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "new()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 时不可省略！），\n加了圆括号相当于调用了构造函数，再按照大括号快速初始化一遍"
				}
			]
		},
		{
			"ID": "20241215010351-ylmnizl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215010351-ylmnizl",
				"style": "line-height: 22px;",
				"updated": "20241215010819"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person\n{\n    private int money;\n    public bool sex;\n    public string? Name { get; set; }\n    public int Age { get; set; }\n}\n\nclass Program\n{\n\n    static void Main()\n    {\n        Person p = new()\n        {\n            sex = true,\n            Age = 18,\n            Name = \"MrTang\"\n        };\n\t\t// 等同于：\n\t\t// Person p = new();\n        // p.sex = true;\n        // p.Age = 18;\n        // p.Name = \"MrTang\";\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215010947-1n4rksl",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241215010947-1n4rksl",
				"updated": "20241215011342"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "设置集合初始值"
				}
			]
		},
		{
			"ID": "20241215010958-cby4qk4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215010958-cby4qk4",
				"updated": "20241215011021"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "声明集合对象（例如 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "List\u0026lt;\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 等）时，也可以通过大括号直接初始化内部属性"
				}
			]
		},
		{
			"ID": "20241215011024-tdhy9xp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215011024-tdhy9xp",
				"style": "line-height: 22px;",
				"updated": "20241215011040"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array2 = new int[] { 1, 2, 3, 4, 5 };\n\nList\u003cint\u003e listInt = new List\u003cint\u003e() { 1, 2, 3, 4, 5, 6 };\n\nList\u003cPerson\u003e listPerson = new List\u003cPerson\u003e() \n{\n    new Person(200),\n    new Person(100) {Age = 10},\n    new Person { sex = true, Age = 18, Name = \"liuqi\" }\n};\n\nDictionary\u003cint, string\u003e dic = new Dictionary\u003cint, string\u003e()\n{\n    {1, \"123\"},\n    {2, \"222\"}\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215011041-lcpeysd",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20241215011041-lcpeysd",
				"updated": "20241215011321"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20241215011100-nevwy10",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241215011100-nevwy10",
						"updated": "20241215011100"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "配合目标类型化 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code block-ref",
							"TextMarkBlockRefID": "20231101210450-j8h234k",
							"TextMarkBlockRefSubtype": "s",
							"TextMarkTextContent": "new()"
						},
						{
							"Type": "NodeText",
							"Data": "​ 可以进一步省略"
						}
					]
				},
				{
					"ID": "20241215011102-qh18hgn",
					"Type": "NodeCodeBlock",
					"IsFencedCodeBlock": true,
					"Properties": {
						"id": "20241215011102-qh18hgn",
						"style": "line-height: 22px;",
						"updated": "20241215011321"
					},
					"Children": [
						{
							"Type": "NodeCodeBlockFenceOpenMarker",
							"Data": "```"
						},
						{
							"Type": "NodeCodeBlockFenceInfoMarker",
							"CodeBlockInfo": "YyM="
						},
						{
							"Type": "NodeCodeBlockCode",
							"Data": "class Person\n{\n    private int money;\n    public bool sex;\n    public Person() {}\n    public Person(int money)\n    {\n        this.money = money;\n    }\n    public string? Name { get; set; }\n    public int Age { get; set; }\n}\n\nclass Program\n{\n\n    static void Main()\n    {\n        int[] array2 = new int[] { 1, 2, 3, 4, 5 };\n      \n        List\u003cint\u003e listInt = new() { 1, 2, 3, 4, 5, 6 };\n      \n        List\u003cPerson\u003e listPerson = new() \n        {\n            new(200),\n            new(100) { Age = 10 },\n            new() { sex = true, Age = 18, Name = \"MrTang\" }\n        };\n      \n        Dictionary\u003cint, string\u003e dic = new()\n        {\n            {1, \"123\"},\n            {2, \"222\"}\n        };\n    }\n}\n"
						},
						{
							"Type": "NodeCodeBlockFenceCloseMarker",
							"Data": "```"
						}
					]
				}
			]
		},
		{
			"ID": "20241215011342-78gkqv9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241215011342-78gkqv9",
				"updated": "20241215011538"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "匿名类型"
				}
			]
		},
		{
			"ID": "20241215011346-ja3pgbm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215011346-ja3pgbm",
				"updated": "20241215011400"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "var"
				},
				{
					"Type": "NodeText",
					"Data": "​ 变量可以申明为自定义的匿名类型，不能直接往里面装方法"
				}
			]
		},
		{
			"ID": "20241215011415-qhp1iob",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215011415-qhp1iob",
				"style": "line-height: 22px;",
				"updated": "20241215011417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "var v = new { age = 10, money = 11, name = \"小明\" };\nConsole.WriteLine(v.age);\nConsole.WriteLine(v.name);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215011457-md32441",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215011457-md32441",
				"updated": "20241215011505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241215011529-82f12v6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215011529-82f12v6",
				"style": "line-height: 22px;",
				"updated": "20241215011530"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "10\n小明\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215011538-loa3j68",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"alias": "Nullable\u0026lt;\u0026gt;",
				"id": "20241215011538-loa3j68",
				"name": "?",
				"updated": "20241215015859"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可空类型"
				}
			]
		},
		{
			"ID": "20241215011608-w90memu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215011608-w90memu",
				"updated": "20241215011710"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般来说，值类型是不能赋值为空的，但是如果在声明变量时，在值类型后面加 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "?"
				},
				{
					"Type": "NodeText",
					"Data": "​，可以赋值为空"
				}
			]
		},
		{
			"ID": "20241215011711-z02zmj5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215011711-z02zmj5",
				"style": "line-height: 22px;",
				"updated": "20241215011751"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int i1 = null;      // error: 无法将 null 转换为“int”，因为后者是不可为 null 的值类型\nint? i2 = null;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215015422-gri09yn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241215015422-gri09yn",
				"name": "nullable\u0026lt;\u0026gt;.HasValue",
				"updated": "20241215015859"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "判断可空值类型是否为空"
				}
			]
		},
		{
			"ID": "20241215015551-apr8ci5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215015551-apr8ci5",
				"updated": "20241215015826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可空值类型本质上是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Nullable\u0026lt;T\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​，也就是 C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 为值类型做了一个包装，也就是说可空值类型和原本的值类型并不一样\n而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Nullable\u0026lt;T\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 有一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "HasValue"
				},
				{
					"Type": "NodeText",
					"Data": "​ 属性可以判断是否为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241215015434-dt2u9rs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215015434-dt2u9rs",
				"style": "line-height: 22px;",
				"updated": "20241215015744"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int? i = null;\nif (i.HasValue)\n{\n    Console.WriteLine(i);\n    Console.WriteLine(i.Value);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215015853-k52enf0",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241215015853-k52enf0",
				"name": "nullable\u0026lt;\u0026gt;.GetValueOrDefault()",
				"updated": "20241215020130"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "安全获取可空类型值"
				}
			]
		},
		{
			"ID": "20241215015920-4ftnvn8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215015920-4ftnvn8",
				"updated": "20241215020115"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果为值为空，返回默认值类型的默认值，如果此时还传入了参数，会返回传入的参数"
				}
			]
		},
		{
			"ID": "20241215020052-ebvq9hh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215020052-ebvq9hh",
				"style": "line-height: 22px;",
				"updated": "20241215020121"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int? i = null;\nConsole.WriteLine(i.GetValueOrDefault());\nConsole.WriteLine(i.GetValueOrDefault(100));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215020122-b1sk17s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215020122-b1sk17s",
				"updated": "20241215020125"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241215020125-cabyp81",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215020125-cabyp81",
				"style": "line-height: 22px;",
				"updated": "20241215020130"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "0\n100\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215011806-gper66e",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20241215011806-gper66e",
				"updated": "20241215015310"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20241215012155-9a6noi6",
					"Type": "NodeHeading",
					"HeadingLevel": 3,
					"Properties": {
						"id": "20241215012155-9a6noi6",
						"updated": "20241215015310"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "空引用检查"
						}
					]
				},
				{
					"ID": "20241215012802-h0gc2xp",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241215012802-h0gc2xp",
						"updated": "20241215013026"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！Unity 的 C"
						},
						{
							"Type": "NodeBackslash",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "#"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 项目默认关闭了这个，即使设置开启也会被 Unity 关闭，因此这里只针对纯 C"
						},
						{
							"Type": "NodeBackslash",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "#"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 项目使用，Unity 项目可无视此内容"
						}
					]
				},
				{
					"ID": "20241215012213-7pcwf5d",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241215012213-7pcwf5d",
						"updated": "20241215012836"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "值得一提的是，C"
						},
						{
							"Type": "NodeBackslash",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "#"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 8 及其以后的版本为了尽量避免 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "NullReferenceException"
						},
						{
							"Type": "NodeText",
							"Data": "​ 异常（即常见的空引用异常），\n引入了空引用检查，并在 .NET 6 及以后的版本默认开启此功能（在 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "csproj"
						},
						{
							"Type": "NodeText",
							"Data": "​ 文件内可关闭，需将 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "\u0026lt;Nullable\u0026gt;"
						},
						{
							"Type": "NodeText",
							"Data": "​ 改为 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "disable"
						},
						{
							"Type": "NodeText",
							"Data": "​）"
						}
					]
				},
				{
					"ID": "20241215013903-elrtkpw",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241215013903-elrtkpw",
						"updated": "20241215014412"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "启用空引用检查的情况下，引用类型默认将不允许为 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "null"
						},
						{
							"Type": "NodeText",
							"Data": "​，包括但不限于以下常见情形会出现警告："
						}
					]
				},
				{
					"ID": "20241215012529-6mhcrmk",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20241215012529-6mhcrmk",
						"updated": "20241215015257"
					},
					"Children": [
						{
							"ID": "20241215013948-kwkxuw9",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20241215013948-kwkxuw9",
								"updated": "20241215013948"
							},
							"Children": [
								{
									"ID": "20241215013948-b87rmvx",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241215013948-b87rmvx",
										"updated": "20241215014006"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "对引用类型变量赋值为 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "null"
										},
										{
											"Type": "NodeText",
											"Data": "​，编译器会发出警告"
										}
									]
								}
							]
						},
						{
							"ID": "20241215013948-3semaii",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20241215013948-3semaii",
								"updated": "20241215013948"
							},
							"Children": [
								{
									"ID": "20241215013948-59tnbdd",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241215013948-59tnbdd",
										"updated": "20241215014010"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "对于返回值为不可为 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "null"
										},
										{
											"Type": "NodeText",
											"Data": "​ 的引用类型的函数，如果返回 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "null"
										},
										{
											"Type": "NodeText",
											"Data": "​，会被编译器发出警告"
										}
									]
								}
							]
						},
						{
							"ID": "20241215013949-21s366i",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20241215013949-21s366i",
								"updated": "20241215013949"
							},
							"Children": [
								{
									"ID": "20241215013949-bjs2zxn",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241215013949-bjs2zxn",
										"updated": "20241215014026"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "对于类的构造函数，如果存在类型不可为 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "null"
										},
										{
											"Type": "NodeText",
											"Data": "​ 且没有初始化的成员变量或自动属性，构造函数内也没有初始化，那么此构造函数将被警告"
										}
									]
								}
							]
						},
						{
							"ID": "20241215014031-fq1lnyw",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20241215014031-fq1lnyw",
								"updated": "20241215015257"
							},
							"Children": [
								{
									"ID": "20241215014031-7h6j767",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241215014031-7h6j767",
										"updated": "20241215015257"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "一个不可为 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "null"
										},
										{
											"Type": "NodeText",
											"Data": "​ 的变量接受了一个会返回可空类型的函数的返回值，编译器会发出警告"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20241215013316-rwm3lsm",
					"Type": "NodeCodeBlock",
					"IsFencedCodeBlock": true,
					"Properties": {
						"id": "20241215013316-rwm3lsm",
						"style": "line-height: 22px;",
						"updated": "20241215014300"
					},
					"Children": [
						{
							"Type": "NodeCodeBlockFenceOpenMarker",
							"Data": "```"
						},
						{
							"Type": "NodeCodeBlockFenceInfoMarker",
							"CodeBlockInfo": "YyM="
						},
						{
							"Type": "NodeCodeBlockCode",
							"Data": "class Program\n{\n    string text;\n\n\t// warning: 在退出构造函数时，不可为 null 的 字段 \"text\" 必须包含非 null 值。请考虑添加 \"required\" 修饰符或将该 字段 声明为可为 null。\n    public Program() {}   \n\n    static void Main()\n    {\n        string str = null;  \t\t\t// warning: 将 null 文本或可能的 null 值转换为不可为 null 类型\n        string str2 = NullableString(); // warning: 将 null 文本或可能的 null 值转换为不可为 null 类型\n    }\n\n    public string TestNullable()\n    {\n        return null;    // warning: 可能返回 null 引用\n    }\n\n    public static string? NullableString()\n    {\n        return null;\n    }   \n}\n"
						},
						{
							"Type": "NodeCodeBlockFenceCloseMarker",
							"Data": "```"
						}
					]
				},
				{
					"ID": "20241215014352-ddpa5se",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241215014352-ddpa5se",
						"updated": "20241215014630"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "编译器对空引用进行严格检查后，我们即可根据警告去处理问题："
						}
					]
				},
				{
					"ID": "20241215013326-ex1iz6v",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20241215013326-ex1iz6v",
						"updated": "20241215015244"
					},
					"Children": [
						{
							"ID": "20241215014351-7trwdnz",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20241215014351-7trwdnz",
								"updated": "20241215014351"
							},
							"Children": [
								{
									"ID": "20241215014351-bex0flr",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241215014351-bex0flr",
										"updated": "20241215014828"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "如果一个变量，返回值，参数可能为 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "null"
										},
										{
											"Type": "NodeText",
											"Data": "​，那就必须要在类型前加上 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "?"
										},
										{
											"Type": "NodeText",
											"Data": "​ 表示为可空类型"
										}
									]
								}
							]
						},
						{
							"ID": "20241215015201-1i454z7",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20241215015201-1i454z7",
								"updated": "20241215015244"
							},
							"Children": [
								{
									"ID": "20241215015201-pfk3ira",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241215015201-pfk3ira",
										"updated": "20241215015244"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "不可为 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "null"
										},
										{
											"Type": "NodeText",
											"Data": "​ 的成员变量必须要初始化，或者在构造函数内初始化，要么加上 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "?"
										},
										{
											"Type": "NodeText",
											"Data": "​ 表示为可空类型"
										}
									]
								}
							]
						},
						{
							"ID": "20241215014351-1rhw6dg",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20241215014351-1rhw6dg",
								"updated": "20241215014351"
							},
							"Children": [
								{
									"ID": "20241215014351-w54tn9g",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241215014351-w54tn9g",
										"updated": "20241215014939"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "根据空引用检查，IDE 可以帮助我们判断一个变量是否可能为 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "null"
										},
										{
											"Type": "NodeText",
											"Data": "​，以帮助我们准确的添加 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "null"
										},
										{
											"Type": "NodeText",
											"Data": "​ 判断"
										}
									]
								},
								{
									"ID": "20241215015112-xdww3vy",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241215015112-xdww3vy",
										"updated": "20241215015127"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "​"
										},
										{
											"Type": "NodeImage",
											"Data": "span",
											"Properties": {
												"style": "width: 258px;"
											},
											"Children": [
												{
													"Type": "NodeBang"
												},
												{
													"Type": "NodeOpenBracket"
												},
												{
													"Type": "NodeLinkText",
													"Data": "image"
												},
												{
													"Type": "NodeCloseBracket"
												},
												{
													"Type": "NodeOpenParen"
												},
												{
													"Type": "NodeLinkDest",
													"Data": "assets/image-20241215015112-6coeb9s.png"
												},
												{
													"Type": "NodeCloseParen"
												}
											]
										},
										{
											"Type": "NodeKramdownSpanIAL",
											"Data": "{: style=\"width: 258px;\"}"
										},
										{
											"Type": "NodeText",
											"Data": "​"
										},
										{
											"Type": "NodeImage",
											"Data": "span",
											"Properties": {
												"style": "width: 337px;"
											},
											"Children": [
												{
													"Type": "NodeBang"
												},
												{
													"Type": "NodeOpenBracket"
												},
												{
													"Type": "NodeLinkText",
													"Data": "image"
												},
												{
													"Type": "NodeCloseBracket"
												},
												{
													"Type": "NodeOpenParen"
												},
												{
													"Type": "NodeLinkDest",
													"Data": "assets/image-20241215015127-qdi0nmf.png"
												},
												{
													"Type": "NodeCloseParen"
												}
											]
										},
										{
											"Type": "NodeKramdownSpanIAL",
											"Data": "{: style=\"width: 337px;\"}"
										},
										{
											"Type": "NodeText",
											"Data": "​"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20241215014632-m3e3dpx",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241215014632-m3e3dpx",
						"updated": "20241215015310"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "借助空引用检查，我们可以很好的避免 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "NullReferenceException"
						},
						{
							"Type": "NodeText",
							"Data": "​ 异常"
						}
					]
				}
			]
		},
		{
			"ID": "20241215012402-l6s7773",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241215012402-l6s7773",
				"name": "?.",
				"updated": "20241215022230"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "空检查运算符"
				}
			]
		},
		{
			"ID": "20241215020354-73tktn7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215020354-73tktn7",
				"updated": "20241215020935"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于一个可能为空的引用类型变量，直接调用其方法可能会出现 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NullReferenceException"
				},
				{
					"Type": "NodeText",
					"Data": "​ 异常\n为此我们需要在调用时使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "if"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语句判断空，而 C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 提供了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "?."
				},
				{
					"Type": "NodeText",
					"Data": "​ 空检查运算符，\n相比直接用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "."
				},
				{
					"Type": "NodeText",
					"Data": "​ 调用，它会在发现对象为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 时不调用方法"
				}
			]
		},
		{
			"ID": "20241215021216-y8ciabm",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20241215021216-y8ciabm",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);",
				"updated": "20241215021628"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20241215021218-rgvcf7b",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241215021218-rgvcf7b",
						"updated": "20241215021628"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！大部分 Unity 提供的引用类型，诸如 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "GameObject"
						},
						{
							"Type": "NodeText",
							"Data": "​、"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "MonoBehaviour"
						},
						{
							"Type": "NodeText",
							"Data": "​ 等不可以使用此方法来判断此对象是否存在，\n因为 Unity 提供的引用类型重载了 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "!="
						},
						{
							"Type": "NodeText",
							"Data": "​，"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "=="
						},
						{
							"Type": "NodeText",
							"Data": "​ 运算符判空时的逻辑，使用非 C"
						},
						{
							"Type": "NodeBackslash",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "#"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 默认的逻辑以判断这些对象是否在 Unity 内被销毁，\n而 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "?."
						},
						{
							"Type": "NodeText",
							"Data": "​ 依然使用了 C"
						},
						{
							"Type": "NodeBackslash",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "#"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 默认的逻辑，就有可能出现虽然不为 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "null"
						},
						{
							"Type": "NodeText",
							"Data": "​，但实际上在 Unity 内部已经被销毁的情况，导致出错"
						}
					]
				}
			]
		},
		{
			"ID": "20241215020345-tmizhdx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215020345-tmizhdx",
				"style": "line-height: 22px;",
				"updated": "20241215020925"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "object? obj = null;\nstring? str = obj?.ToString()?.ToLower();\n// 等效于\n// object? obj = null;\n// string? str;\n// if (obj != null)\n// {\n//     str = obj.ToString();\n//     if (str != null)\n//     {\n//         str = str.ToLower();\n//     }\n// }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215021743-9jlfp2z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215021743-9jlfp2z",
				"updated": "20241215022230"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "索引器（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "?[]"
				},
				{
					"Type": "NodeText",
					"Data": "​），委托也可以使用"
				}
			]
		},
		{
			"ID": "20241215021744-fywtv8o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215021744-fywtv8o",
				"style": "line-height: 22px;",
				"updated": "20241215021859"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] arrayInt = null;\nConsole.WriteLine(arrayInt?[0]);\t//不加问号的话这样写会报错\n\n//委托也可以使用\nAction action = null;\naction?.Invoke();\n\n// 等效于\n// if (action != null)\n// {\n//     action();\n// }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215020557-4r7et7w",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241215020557-4r7et7w",
				"name": "??",
				"updated": "20241215022930"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "空合并操作符"
				}
			]
		},
		{
			"ID": "20241215021729-3ovs54d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215021729-3ovs54d",
				"updated": "20241215021944"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "空合并操作符 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "??"
				},
				{
					"Type": "NodeText",
					"Data": "​，使用方法：左边值 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "??"
				},
				{
					"Type": "NodeText",
					"Data": "​ 右边值\n如果左边值为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 就返回右边值 否则返回左边值，只要是可以为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的类型都可以用"
				}
			]
		},
		{
			"ID": "20241215022253-spkxel8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215022253-spkxel8",
				"style": "line-height: 22px;",
				"updated": "20241215022337"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int? intV = null;\nint intI = intV == null ? 100 : intV.Value; //注意这里int?不能直接转换为int，需要.Value\nintI = intV ?? 100; \t\t\t\t\t\t//上下两句是结果是一样的，这里就不需要value，因为??会自动完成.Value的操作\nConsole.WriteLine(intI);\n\nstring? str = null;\nstr = str ?? \"haha\";\nConsole.WriteLine(str);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215022304-zmcjy3i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215022304-zmcjy3i",
				"updated": "20241215022307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241215022307-5vto97j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215022307-5vto97j",
				"style": "line-height: 22px;",
				"updated": "20241215022346"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "100\nhaha\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215022408-ttbderb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241215022408-ttbderb",
				"name": "??=",
				"updated": "20241215022930"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "空复合分配运算符"
				}
			]
		},
		{
			"ID": "20241215022418-5vtj012",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215022418-5vtj012",
				"updated": "20241215022833"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "+="
				},
				{
					"Type": "NodeText",
					"Data": "​，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-="
				},
				{
					"Type": "NodeText",
					"Data": "​ 类似，当出现 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "variable = variable ?? value"
				},
				{
					"Type": "NodeText",
					"Data": "​ 时，可以直接使用复合分配："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "variable ??= value"
				},
				{
					"Type": "NodeText",
					"Data": "​，\n相当于如果一个变量为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​，就对其赋值"
				}
			]
		},
		{
			"ID": "20241215022523-95p7rcn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215022523-95p7rcn",
				"style": "line-height: 22px;",
				"updated": "20241215022910"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string? str = null;\nstr = str = \"haha\";\nstr ??= \"haha\";         //上下两句是结果是一样的\nConsole.WriteLine(str);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215022930-kfyu9j3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241215022930-kfyu9j3",
				"name": "$\u0026quot;\u0026quot;",
				"updated": "20241215023449"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "内插字符串"
				}
			]
		},
		{
			"ID": "20241215022938-zme8jj0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215022938-zme8jj0",
				"updated": "20241215023004"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关键符号："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "$"
				},
				{
					"Type": "NodeText",
					"Data": "​，用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "$"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来构造字符串，让字符串中可以拼接变量"
				}
			]
		},
		{
			"ID": "20241215023005-p123o3d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215023005-p123o3d",
				"style": "line-height: 22px;",
				"updated": "20241215023030"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string name = \"XiaoLi\";\nint age = 18;\nConsole.WriteLine($\"好好学习，{name}，年龄：{age}\");\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215023027-bndv9bo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215023027-bndv9bo",
				"updated": "20241215023028"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241215023029-g5f1vrm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215023029-g5f1vrm",
				"style": "line-height: 22px;",
				"updated": "20241215023047"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "好好学习，XiaoLi，年龄：18\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215023102-j8c742n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241215023102-j8c742n",
				"updated": "20241215024244"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "单句逻辑省略写法"
				}
			]
		},
		{
			"ID": "20241215023503-22taoyi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215023503-22taoyi",
				"updated": "20241215023525"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "if"
				},
				{
					"Type": "NodeText",
					"Data": "​ 或者循环只有一句代码时，就可以省略大括号而直接缩进，有多句代码就不可以省略"
				}
			]
		},
		{
			"ID": "20241215023526-ttubcbo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215023526-ttubcbo",
				"style": "line-height: 22px;",
				"updated": "20241215023608"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string str = \"\";\n\nif (str == null)\n    Console.WriteLine(\"123123\");\n\nfor (i = 0; i \u003c 10; i++)\n    Console.WriteLine(i);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215023606-qxwauo5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215023606-qxwauo5",
				"updated": "20241215024244"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类里的属性，函数等如果代码块只有一句代码，就可以直接用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 而不需要大括号 且不需要 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "return"
				},
				{
					"Type": "NodeText",
					"Data": "​\n其中，属性（索引器同理）只有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 且 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语句块只有一句代码时，属性的整个语句块，都可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来简写，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后跟要返回对应的表达式语句"
				}
			]
		},
		{
			"ID": "20241215023620-ak6rdkz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241215023620-ak6rdkz",
				"style": "line-height: 22px;",
				"updated": "20241215024205"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test\n{\n    public int GetConstNumber() =\u003e 100;\n    public void Output(string text) =\u003e Console.WriteLine(text);\n\n    private bool isSurvive;\n    public bool IsSurvive =\u003e isSurvive;\n\n    private int age;\n    public int Age\n    {\n        get =\u003e age;\n        set =\u003e Age = value;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241215024210-ulfv0hm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241215024210-ulfv0hm",
				"updated": "20241215024210"
			}
		}
	]
}