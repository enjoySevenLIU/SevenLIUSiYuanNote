{
	"ID": "20240918001212-mswvv1h",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240918001212-mswvv1h",
		"title": "CS4L13——事件",
		"type": "doc",
		"updated": "20240918002017"
	},
	"Children": [
		{
			"ID": "20240918001212-8p85zna",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240918001212-8p85zna",
				"updated": "20240918001956"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事件"
				}
			]
		},
		{
			"ID": "20240918001351-xnxzbyt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240918001351-xnxzbyt",
				"updated": "20240918001807"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "事件"
				},
				{
					"Type": "NodeText",
					"Data": "是基于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240911234624-jj6bba2",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "委托"
				},
				{
					"Type": "NodeText",
					"Data": "是存在，是委托的安全包裹\n事件用于修饰委托成员变量，让委托的使用更具有安全性"
				}
			]
		},
		{
			"ID": "20240918001811-j39s2u5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240918001811-j39s2u5",
				"updated": "20240918001821"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事件和委托的使用基本是一模一样的，事件就是特殊的委托"
				}
			]
		},
		{
			"ID": "20240918001823-7dh0xlz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240918001823-7dh0xlz",
				"updated": "20240918001835"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "委托和事件主要区别"
				}
			]
		},
		{
			"ID": "20240918001835-x1s91n9",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240918001835-x1s91n9",
				"updated": "20240918001845"
			},
			"Children": [
				{
					"ID": "20240918001835-norlgpa",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240918001835-norlgpa",
						"updated": "20240918001845"
					},
					"Children": [
						{
							"ID": "20240918001835-bulcfos",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240918001835-bulcfos",
								"updated": "20240918001845"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "事件 不能在外部使用赋值 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "="
								},
								{
									"Type": "NodeText",
									"Data": "​ 符号，只能使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "+="
								},
								{
									"Type": "NodeText",
									"Data": "​ 和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "-="
								},
								{
									"Type": "NodeText",
									"Data": "​，而委托哪里都能用\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240918001835-zf53s02",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240918001835-zf53s02",
						"updated": "20240918001835"
					},
					"Children": [
						{
							"ID": "20240918001835-knz72fw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240918001835-knz72fw",
								"updated": "20240918001835"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "事件 不能在外部执行 委托哪里都能执行\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240918001836-bsl0ra9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240918001836-bsl0ra9",
						"updated": "20240918001836"
					},
					"Children": [
						{
							"ID": "20240918001836-fbd82l9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240918001836-fbd82l9",
								"updated": "20240918001836"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "事件 不能作为函数中的临时变量 委托可以"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240918001420-ydwveky",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240918001420-ydwveky",
				"updated": "20240918001956"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事件的使用"
				}
			]
		},
		{
			"ID": "20240918001536-pyv5jif",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240918001536-pyv5jif",
				"updated": "20240918001545"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "申明语法："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "访问修饰符 event 委托类型 事件名;"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240918001536-b36gr7t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240918001536-b36gr7t",
				"updated": "20240918001554"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事件的使用："
				}
			]
		},
		{
			"ID": "20240918001551-2rml3l2",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240918001551-2rml3l2",
				"updated": "20240918001604"
			},
			"Children": [
				{
					"ID": "20240918001551-zs8mh8x",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240918001551-zs8mh8x",
						"updated": "20240918001604"
					},
					"Children": [
						{
							"ID": "20240918001551-rjogxbl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240918001551-rjogxbl",
								"updated": "20240918001604"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "事件是作为成员变量存在于类中"
								}
							]
						}
					]
				},
				{
					"ID": "20240918001551-73l218x",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240918001551-73l218x",
						"updated": "20240918001602"
					},
					"Children": [
						{
							"ID": "20240918001551-gcyizcv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240918001551-gcyizcv",
								"updated": "20240918001602"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "委托怎么用，事件就怎么用"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240918001536-jxv2c1a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240918001536-jxv2c1a",
				"updated": "20240918001655"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事件相对于委托的区别是，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "事件不能在类外部赋值和调用"
				}
			]
		},
		{
			"ID": "20240918001536-j62vuyj",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240918001536-j62vuyj",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240918001659"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240918001659-qoi301m",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240918001659-qoi301m",
						"updated": "20240918001659"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意：事件只能作为成员存在于类和接口和结构体中"
						}
					]
				}
			]
		},
		{
			"ID": "20240918001704-sds13zu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240918001704-sds13zu",
				"style": "line-height: 22px;",
				"updated": "20240918001928"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Test\n{\n    //委托成员变量 是用来存储 函数的\n    public Action myFun;\n    //事件成员变量 也是用来存储 函数的\n    public event Action myEvent;\n\n    public Test() \n    {\n        //事件的使用和委托 一模一样 只有一些 细微的区别\n        myFun = TestFun;\n        myFun += TestFun;\n        myFun -= TestFun;\n        myFun();\n        myFun.Invoke();\n        myFun = null;\n\n        myEvent = TestFun;\n        myEvent += TestFun;\n        myEvent -= TestFun;\n        myEvent();\n        myEvent.Invoke();\n        myEvent = null;\n\n    }\n\n    //如果要在外部使用事件，需要额外封装一个 在类内部使用事件的函数，以在外部间接使用函数\n    public void DoEvent()\n    {\n        if (myEvent != null)\n        {\n            myEvent.Invoke();\n        }\n    }\n\n    public void TestFun()\n    {\n        Console.WriteLine(\"123\");\n    }\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240918001956-9nubwqq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240918001956-9nubwqq",
				"updated": "20240918002017"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为什么有事件"
				}
			]
		},
		{
			"ID": "20240918002005-lo7k3j9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240918002005-lo7k3j9",
				"updated": "20240918002017"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "防止外部随意置空委托，同时也防止外部随意调用委托\n事件相当于对委托进行了一次封装，让其更加安全"
				}
			]
		}
	]
}