{
	"ID": "20241209042744-uv63u50",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20241209042744-uv63u50",
		"title": "CS4L17——协变逆变",
		"type": "doc",
		"updated": "20241210083136"
	},
	"Children": [
		{
			"ID": "20241210082946-yijbo3k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241210082946-yijbo3k",
				"updated": "20241210083136"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20241210083003-mgv74lg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241210083003-mgv74lg",
				"style": "line-height: 22px;",
				"updated": "20241210083136"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "out\t\t// 协变，它修饰泛型委托和泛型接口的泛型参数，使得此泛型参数只能作为返回值\nin\t\t// 逆变，它修饰泛型委托和泛型接口的泛型参数，使得此泛型参数只能作为参数\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241209042744-qx05hst",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"alias": "in",
				"id": "20241209042744-qx05hst",
				"name": "out",
				"updated": "20241210082935"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "协变和逆变"
				}
			]
		},
		{
			"ID": "20241209042837-10g9l89",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241209042837-10g9l89",
				"updated": "20241209043126"
			},
			"Children": [
				{
					"ID": "20241209042846-mhb3rpx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241209042846-mhb3rpx",
						"updated": "20241209043126"
					},
					"Children": [
						{
							"ID": "20241209042846-3w2g74j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209042846-3w2g74j",
								"updated": "20241209042855"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "协变：和谐的变化，自然的变化\n"
								}
							]
						},
						{
							"ID": "20241209042857-mrm75h7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209042857-mrm75h7",
								"updated": "20241209043126"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "因为 里氏替换原则 父类可以装子类，所以 子类变父类，比如 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "string"
								},
								{
									"Type": "NodeText",
									"Data": "​ 变成 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "object"
								},
								{
									"Type": "NodeText",
									"Data": "​，感受是和谐的"
								}
							]
						}
					]
				},
				{
					"ID": "20241209042848-elrk3gr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241209042848-elrk3gr",
						"updated": "20241209043121"
					},
					"Children": [
						{
							"ID": "20241209042848-jclnm6m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209042848-jclnm6m",
								"updated": "20241209042908"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "逆变：逆常规的变化，不正常的变化\n"
								}
							]
						},
						{
							"ID": "20241209042910-pr78n1q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209042910-pr78n1q",
								"updated": "20241209043121"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "因为 里氏替换原则 父类可以装子类 但是子类不能装父类，所以 父类变子类，比如 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "object"
								},
								{
									"Type": "NodeText",
									"Data": "​ 变成 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "string"
								},
								{
									"Type": "NodeText",
									"Data": "​，感受是不和谐的"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241209042845-10cphim",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209042845-10cphim",
				"updated": "20241209043204"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "协变和逆变是用来修饰泛型的："
				}
			]
		},
		{
			"ID": "20241209042929-m1faicl",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241209042929-m1faicl",
				"updated": "20241209042934"
			},
			"Children": [
				{
					"ID": "20241209042929-at9byvi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241209042929-at9byvi",
						"updated": "20241209042933"
					},
					"Children": [
						{
							"ID": "20241209042929-d0dooj7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209042929-d0dooj7",
								"updated": "20241209042933"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "协变："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "out"
								},
								{
									"Type": "NodeText",
									"Data": "​\n"
								}
							]
						}
					]
				},
				{
					"ID": "20241209042931-nlznzq0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241209042931-nlznzq0",
						"updated": "20241209042934"
					},
					"Children": [
						{
							"ID": "20241209042931-dg3d235",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209042931-dg3d235",
								"updated": "20241209042934"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "逆变："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "in"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241209042923-1px676d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209042923-1px676d",
				"updated": "20241209043004"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用于在泛型中 修饰 泛型字母的。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "只有 泛型接口 和 泛型委托 能使用"
				}
			]
		},
		{
			"ID": "20241209043009-8pxm51n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209043009-8pxm51n",
				"updated": "20241209043014"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它的作用主要是："
				}
			]
		},
		{
			"ID": "20241209042937-eyvrz6e",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241209042937-eyvrz6e",
				"updated": "20241209043052"
			},
			"Children": [
				{
					"ID": "20241209043017-fwg2gdl",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241209043017-fwg2gdl",
						"updated": "20241209043017"
					},
					"Children": [
						{
							"ID": "20241209043017-lljffps",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209043017-lljffps",
								"updated": "20241209043027"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "out"
								},
								{
									"Type": "NodeText",
									"Data": "​ 修饰的泛型类型，只能作为返回值类型，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "in"
								},
								{
									"Type": "NodeText",
									"Data": "​ 修饰的泛型类型 只能作为 参数类型"
								}
							]
						}
					]
				},
				{
					"ID": "20241209043017-arffgej",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241209043017-arffgej",
						"updated": "20241209043052"
					},
					"Children": [
						{
							"ID": "20241209043017-8w08nva",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209043017-8w08nva",
								"updated": "20241209043037"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "遵循里氏替换原则的 ，用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "out"
								},
								{
									"Type": "NodeText",
									"Data": "​ 和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "in"
								},
								{
									"Type": "NodeText",
									"Data": "​ 修饰的 泛型委托 可以相互装载（有父子关系的泛型）\n"
								}
							]
						},
						{
							"ID": "20241209043041-5zleov5",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20241209043041-5zleov5",
								"updated": "20241209043052"
							},
							"Children": [
								{
									"ID": "20241209043043-w3367h2",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20241209043043-w3367h2",
										"updated": "20241209043052"
									},
									"Children": [
										{
											"ID": "20241209043043-smblnnn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241209043043-smblnnn",
												"updated": "20241209043052"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "协变：父类泛型委托装子类泛型委托"
												}
											]
										}
									]
								},
								{
									"ID": "20241209043047-q8pyf96",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20241209043047-q8pyf96",
										"updated": "20241209043049"
									},
									"Children": [
										{
											"ID": "20241209043047-p18tcbr",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241209043047-p18tcbr",
												"updated": "20241209043049"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "逆变：子类泛型委托装父类泛型委托"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241209043112-q32rhxj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241209043112-q32rhxj",
				"updated": "20241210082636"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "协变逆变的作用"
				}
			]
		},
		{
			"ID": "20241209043222-bjp9osw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209043222-bjp9osw",
				"updated": "20241209043303"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最直观的理解其作用，就是从 返回值 和 参数 来看："
				}
			]
		},
		{
			"ID": "20241209043242-uyfvpac",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241209043242-uyfvpac",
				"updated": "20241209044328"
			},
			"Children": [
				{
					"ID": "20241209043309-wj0kr6r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241209043309-wj0kr6r",
						"updated": "20241209044328"
					},
					"Children": [
						{
							"ID": "20241209043309-s09mxta",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209043309-s09mxta",
								"updated": "20241209043417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "out"
								},
								{
									"Type": "NodeText",
									"Data": "​ 修饰的泛型，只能作为返回值"
								}
							]
						},
						{
							"ID": "20241209043403-m5bppzu",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209043403-m5bppzu",
								"style": "line-height: 22px;",
								"updated": "20241209044328"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "delegate T TestOut\u003cout T\u003e();\ndelegate T TestOut\u003cout T\u003e(T arg);\t// error: 变型无效: 类型参数“T”必须是在“TestOut\u003cT\u003e.Invoke(T)”上有效的 逆变式。“T”为 协变。\ndelegate T TestOut\u003cT\u003e(T arg);\ninterface ITestOut\u003cout T\u003e \n{\n    void Testin(T t);\t\t\t\t// error: 变型无效: 类型参数“T”必须是在“ITestOut\u003cT\u003e.Testin(T)”上有效的 逆变式。“T”为 协变。\n    T Testout();\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20241209043318-cgcqit6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241209043318-cgcqit6",
						"updated": "20241209044249"
					},
					"Children": [
						{
							"ID": "20241209043318-dciv2l8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209043318-dciv2l8",
								"updated": "20241209043337"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "in"
								},
								{
									"Type": "NodeText",
									"Data": "​ 修饰的泛型，只能作为参数"
								}
							]
						},
						{
							"ID": "20241209043414-gb6qs0d",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209043414-gb6qs0d",
								"style": "line-height: 22px;",
								"updated": "20241209044249"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "delegate void TestIn\u003cin T\u003e(T t);\ndelegate T TestIn\u003cin T\u003e(T t);\t\t// error: 变型无效: 类型参数“T”必须是在“TestIn\u003cT\u003e.Invoke(T)”上有效的 协变式。“T”为 逆变。\ndelegate T TestIn\u003cT\u003e(T t);\ninterface ITestIn\u003cin T\u003e \n{\n    void Testin(T t);\n    T Testout();\t\t\t\t\t// 变型无效: 类型参数“T”必须是在“ITestIn\u003cT\u003e.Testout()”上有效的 协变式。“T”为 逆变。\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241209043810-yc8ip9j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209043810-yc8ip9j",
				"updated": "20241209043852"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "in"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "out"
				},
				{
					"Type": "NodeText",
					"Data": "​ 只有 泛型接口 和 泛型委托 能使用"
				}
			]
		},
		{
			"ID": "20241209043854-meit84t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241209043854-meit84t",
				"style": "line-height: 22px;",
				"updated": "20241209044023"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "interface ITest\u003cin T\u003e {}\ndelegate T TestOut\u003cout T\u003e();\nclass Test\u003cout T\u003e {}\t\t\t// error: 变型修饰符无效。只有接口和委托类型的参数可以指定为变量。\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241209043852-3zjah83",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209043852-3zjah83",
				"updated": "20241209050604"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但如果需要深度理解其作用，就需要结合里氏替换原则原则去理解："
				}
			]
		},
		{
			"ID": "20241209045008-ybxqzd0",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241209045008-ybxqzd0",
				"updated": "20241210082636"
			},
			"Children": [
				{
					"ID": "20241209045008-8rxmdw5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241209045008-8rxmdw5",
						"updated": "20241210082636"
					},
					"Children": [
						{
							"ID": "20241209045008-hnfplft",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209045008-hnfplft",
								"updated": "20241210080323"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "协变：让 父类泛型委托"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "/"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "接口 可以装载 子类泛型委托"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "/"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "接口"
								}
							]
						},
						{
							"ID": "20241209045016-5fjmzeh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209045016-5fjmzeh",
								"updated": "20241209045016"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "先声明如下内容："
								}
							]
						},
						{
							"ID": "20241209045016-nuuxnxr",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209045016-nuuxnxr",
								"style": "line-height: 22px;",
								"updated": "20241209050659"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "delegate T TestOut\u003cT\u003e();\t// 这里没有使用协变\nclass Father {}\nclass Son : Father {}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241209045016-90j5iqe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209045016-90j5iqe",
								"updated": "20241210082348"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果要让一个 父类泛型委托 直接装载 子类泛型委托变量，让父类泛型委托可以返回一个子类变量，这是做不到的："
								}
							]
						},
						{
							"ID": "20241209045016-ejrsde3",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209045016-ejrsde3",
								"style": "line-height: 22px;",
								"updated": "20241210082416"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "TestOut\u003cSon\u003e sonFunc = () =\u003e new Son();\nTestOut\u003cFather\u003e fatherFunc = sonFunc;\t// error: 无法将类型“TestOut\u003cSon\u003e”隐式转换为“TestOut\u003cFather\u003e”\nFather f1 = fatherFunc();\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241209045159-06zishd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209045159-06zishd",
								"updated": "20241209051551"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这是因为，委托类型变量只能存储另一个类型完全相同的委托变量，因此，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "即使同一泛型委托类型的泛型参数存在父子关系，也不能装载"
								}
							]
						},
						{
							"ID": "20241209045641-288g7is",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209045641-288g7is",
								"updated": "20241209045649"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "接口也是同理："
								}
							]
						},
						{
							"ID": "20241209045649-z94sdy8",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209045649-z94sdy8",
								"style": "line-height: 22px;",
								"updated": "20241210082558"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "interface ITestOut\u003cT\u003e{}\t\t// 这里没有使用协变\nclass Father {}\nclass Son : Father {}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241209050440-m5gqkkq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209050440-m5gqkkq",
								"updated": "20241210082428"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果要让一个 父类泛型接口 直接装载 子类泛型接口变量，让父类泛型接口的方法可以返回一个子类变量，也是做不到的："
								}
							]
						},
						{
							"ID": "20241209050511-9ecm45e",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209050511-9ecm45e",
								"style": "line-height: 22px;",
								"updated": "20241210082636"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "ITestOut\u003cSon\u003e son = new TestClass\u003cSon\u003e();\nITestOut\u003cFather\u003e father = son;\t// error: 无法将类型“ITestOut\u003cSon\u003e”隐式转换为“ITestOut\u003cFather\u003e”\nFather f2 = father.TestOut();\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241209051213-p7h7dm7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209051213-p7h7dm7",
								"updated": "20241209051323"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "但是，如果给泛型接口或者委托的泛型参数加上 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "out"
								},
								{
									"Type": "NodeText",
									"Data": "​，就可以让父类泛型接口"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "/"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "委托变量可以装载子类泛型接口"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "/"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "委托变量了"
								}
							]
						},
						{
							"ID": "20241209051324-owavr7t",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209051324-owavr7t",
								"style": "line-height: 22px;",
								"updated": "20241210082603"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "delegate T TestOut\u003cout T\u003e();\n\ninterface ITestOut\u003cout T\u003e\n{\n    T TestOut();\n}\n\nclass TestClass\u003cT\u003e : ITestOut\u003cT\u003e\n{\n    public T? TestOut() =\u003e default;\n}\n\nclass Father {}\nclass Son : Father {}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241209051504-sryhsb8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209051504-sryhsb8",
								"updated": "20241210081452"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "out"
								},
								{
									"Type": "NodeText",
									"Data": "​ 修饰的泛型参数 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "T"
								},
								{
									"Type": "NodeText",
									"Data": "​，就可以让 父类泛型接口"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "/"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "委托变量 装载 子类泛型接口"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "/"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "委托变量"
								}
							]
						},
						{
							"ID": "20241209051416-n93pllr",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209051416-n93pllr",
								"style": "line-height: 22px;",
								"updated": "20241209052125"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "TestOut\u003cSon\u003e sonFunc = () =\u003e new Son();\nTestOut\u003cFather\u003e fatherFunc = sonFunc;\nFather f1 = fatherFunc();\n\nITestOut\u003cSon\u003e son = new TestClass\u003cSon\u003e();\nITestOut\u003cFather\u003e father = son;\nFather f2 = father.TestOut();\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241210081254-duohi9a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210081254-duohi9a",
								"updated": "20241210081534"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "由于是父类泛型容器装子类泛型容器，符合里氏替换原则，所以是和谐的"
								}
							]
						}
					]
				},
				{
					"ID": "20241210075630-bivvyr2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241210075630-bivvyr2",
						"updated": "20241210082154"
					},
					"Children": [
						{
							"ID": "20241210075630-05ng8qx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210075630-05ng8qx",
								"updated": "20241210080307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "逆变：让 子类泛型委托"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "/"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "接口 可以装载 父类泛型委托"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "/"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "接口"
								}
							]
						},
						{
							"ID": "20241210075732-f04tmwy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210075732-f04tmwy",
								"updated": "20241210075732"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "先声明如下内容："
								}
							]
						},
						{
							"ID": "20241210075732-5p7huyx",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241210075732-5p7huyx",
								"style": "line-height: 22px;",
								"updated": "20241210080304"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "delegate void TestIn\u003cT\u003e(T arg);\t\t// 这里没有使用逆变\n\nclass Father \n{\n    public void DoSomething() {}\n}\n\nclass Son : Father {}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241210075732-6ojg0l5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210075732-6ojg0l5",
								"updated": "20241210081142"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果要让一个 子类泛型委托变量 直接装载 父类泛型委托变量，然后将子类对象传入到泛型委托参数内，这是做不到的："
								}
							]
						},
						{
							"ID": "20241210075732-u2xup00",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241210075732-u2xup00",
								"style": "line-height: 22px;",
								"updated": "20241210080355"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "TestIn\u003cFather\u003e iF = f =\u003e f.DoSomething();\nTestIn\u003cSon\u003e iS = iF;\t// error: 无法将类型“TestIn\u003cFather\u003e”隐式转换为“TestIn\u003cSon\u003e”\niS(new Son());\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241210080358-gp2t68m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210080358-gp2t68m",
								"updated": "20241210080442"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "接口同理："
								}
							]
						},
						{
							"ID": "20241210080442-i5c8xel",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241210080442-i5c8xel",
								"style": "line-height: 22px;",
								"updated": "20241210080740"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "interface ITestIn\u003cT\u003e\n{\n    public void TestIn(T arg);\n}\n\nclass TestClass\u003cT\u003e : ITestIn\u003cT\u003e\n{\n    public T? value;\n\n    public void TestIn(T arg)\n    {\n        value = arg;\n    }\n}\n\nclass Father {}\nclass Son : Father {}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241210080745-lj9716y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210080745-lj9716y",
								"updated": "20241210081145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果要让一个 子类泛型接口变量 直接装载 父类泛型接口变量，然后让子类变量作为参数传入到泛型接口的方法内，也是做不到的："
								}
							]
						},
						{
							"ID": "20241210080806-7yayvmv",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241210080806-7yayvmv",
								"style": "line-height: 22px;",
								"updated": "20241210081229"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "ITestIn\u003cFather\u003e father = new TestClass\u003cFather\u003e();\nITestIn\u003cSon\u003e son = father;\t// error: 无法将类型“ITestIn\u003cFather\u003e”隐式转换为“ITestIn\u003cSon\u003e”\nson.TestIn(new Son());\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241210081428-crxra2a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210081428-crxra2a",
								"updated": "20241210081442"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "in"
								},
								{
									"Type": "NodeText",
									"Data": "​ 修饰的泛型参数 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "T"
								},
								{
									"Type": "NodeText",
									"Data": "​，就可以自动根据里氏替换原则，让 子类泛型接口"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "/"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "委托变量 装载 父类泛型接口"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "/"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "委托变量"
								}
							]
						},
						{
							"ID": "20241210081330-zkgfp4k",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241210081330-zkgfp4k",
								"style": "line-height: 22px;",
								"updated": "20241210081358"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "delegate void TestIn\u003cin T\u003e(T arg);\n\ninterface ITestIn\u003cin T\u003e\n{\n    public void TestIn(T arg);\n}\n\nclass TestClass\u003cT\u003e : ITestIn\u003cT\u003e\n{\n    public T? value;\n\n    public void TestIn(T arg)\n    {\n        value = arg;\n    }\n}\n\nclass Father \n{\n    public void DoSomething() {}\n}\n\nclass Son : Father {}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241210081239-26aqj4q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210081239-26aqj4q",
								"updated": "20241210081458"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "in"
								},
								{
									"Type": "NodeText",
									"Data": "​ 修饰的泛型参数 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "T"
								},
								{
									"Type": "NodeText",
									"Data": "​，就可以让 子类泛型接口"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "/"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "委托变量 装载 父类泛型接口"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "/"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "委托变量"
								}
							]
						},
						{
							"ID": "20241210081500-e8jhe8o",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241210081500-e8jhe8o",
								"style": "line-height: 22px;",
								"updated": "20241210081509"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "TestIn\u003cFather\u003e fatherAction = f =\u003e f.DoSomething();\nTestIn\u003cSon\u003e sonAction = fatherAction;\nsonAction(new Son());\n\nITestIn\u003cFather\u003e father = new TestClass\u003cFather\u003e();\nITestIn\u003cSon\u003e son = father;\nson.TestIn(new Son());\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241210081511-bsyumm7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210081511-bsyumm7",
								"updated": "20241210082154"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "由于是 子类泛型容器 装 父类泛型容器，看起来不符合里氏替换原则，所以是逆常规的"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241209044842-28ldngs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209044842-28ldngs",
				"updated": "20241209044842"
			}
		}
	]
}