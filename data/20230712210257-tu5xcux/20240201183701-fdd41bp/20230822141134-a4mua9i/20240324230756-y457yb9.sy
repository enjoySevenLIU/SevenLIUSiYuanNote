{
	"ID": "20240324230756-y457yb9",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240324230756-y457yb9",
		"title": "CS4L20——反射",
		"type": "doc",
		"updated": "20241210235709"
	},
	"Children": [
		{
			"ID": "20241211231821-50ovzik",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241211231821-50ovzik",
				"updated": "20250211230330"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20241211231825-b7jtesd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211231825-b7jtesd",
				"style": "line-height: 22px;",
				"updated": "20250211230330"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type\t\t\t\t\t\t// 类型信息类\nobject.GetType()\t\t\t// 获取一个变量的类型信息\ntypeof()\t\t\t\t\t// 通过类名去获取类型信息\nType.GetType()\t\t\t\t// 通过字符串获取类型信息\ntype.GetMembers()\t\t\t// 通过类型信息获取类的所有成员信息\n// 构造函数信息\ntype.GetConstructors()\t\t// 通过类型信息获取类的所有构造函数信息\ntype.GetConstructor()\t\t// 通过类型信息和参数列表信息，获取类的一个特定的构造函数信息\nConstructorInfo\t\t\t\t// 构造函数信息\nconstructorInfo.Invoke()\t// 通过构造函数信息实例化一个类对象，需要通过object数组传入参数\n// 公开变量信息\ntype.GetFields()\t\t\t// 通过类型信息获取类的所有公开成员变量信息\ntype.GetField()\t\t\t\t// 通过类型信息和成员变量名字符串，获取类的一个特定的公开成员变量信息\nFieldInfo\t\t\t\t\t// 公开成员变量信息\nfieldInfo.GetValue()\t\t// 获取某个类对象的某个成员变量的值\nfieldInfo.SetValue()\t\t// 设置某个类对象的某个成员变量的值\n// 公开方法信息\ntype.GetMethods()\t\t\t// 通过类型信息获取类的所有公开方法信息\ntype.GetMethod()\t\t\t// 通过类型信息和公开方法名字符串（还可能需要参数列表信息），获取类的一个特定的公开方法信息\nMethodInfo\t\t\t\t\t// 公开方法信息\nmethodInfo.Invoke()\t\t\t// 通过公开方法信息调用某个对象的公开方法，需要通过object数组传入参数\n// 属性信息\ntype.GetProperties()\t\t// 通过类型信息获取类的所有属性信息\ntype.GetProperty()\t\t\t// 通过类型信息和属性名字符串，获取类的一个特定的属性信息\nPropertyInfo\t\t\t\t// 属性信息\npropertyInfo.GetValue()\t\t// 获取某个类对象的某个属性的值\npropertyInfo.SetValue()\t\t// 设置某个类对象的某个属性的值\n// 枚举相关\ntype.IsEnum\t\t\t\t\t// 类型信息对应类型是否是枚举\ntype.GetEnumNames()\t\t\t// 获取枚举类型信息的所有枚举名\ntype.GetEnumName()\t\t\t// 获取对象在枚举类型中的枚举名\n// 其他\ntype.IsAbstract\t\t\t\t// 判断type表示的类型是否是抽象类\ntype.IsAssignableFrom()\t\t// 判断另一个类型是否与当前类型兼容\n// Activator 相关\nActivator.CreateInstance()\n// 程序集相关\nAssembly\t\t\t\t\t// 程序集类，主要用来加载其它程序集，加载后才能用Type来使用其它程序集中的信息\nAssembly.Load()\t\t\t\t// 加载在同一文件下的其它程序集\nAssembly.LoadFrom()\t\t\t// 通过包含程序集清单的文件的名称或路径加载不在同一文件下的其它程序集\nAssembly.LoadFile()\t\t\t// 通过文件的完全限定路径加载不在同一文件下的其它程序集\nassembly.GetTypes()\t\t\t// 获取一个程序集下的所有类型\nassembly.GetType()\t\t\t// 通过命名空间加类名，获取程序集下类名对应的类型\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240324230756-dbm166t",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240324230756-dbm166t",
				"updated": "20241210235709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "程序集"
				}
			]
		},
		{
			"ID": "20241210235622-w31aiux",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20241210235622-w31aiux",
				"updated": "20241210235649"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20241210235623-rhymc6f",
					"Type": "NodeHeading",
					"HeadingLevel": 3,
					"Properties": {
						"id": "20241210235623-rhymc6f",
						"updated": "20241210235649"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "编译器"
						}
					]
				},
				{
					"ID": "20241210235634-pqoidwu",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241210235634-pqoidwu",
						"updated": "20241210235634"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "编译器是一种翻译程序，它用于将源语言程序翻译成目标语言程序"
						}
					]
				},
				{
					"ID": "20241210235634-yhyoitq",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20241210235634-yhyoitq",
						"updated": "20241210235640"
					},
					"Children": [
						{
							"ID": "20241210235634-ihsvrl5",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20241210235634-ihsvrl5",
								"updated": "20241210235640"
							},
							"Children": [
								{
									"ID": "20241210235634-6t6djzz",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241210235634-6t6djzz",
										"updated": "20241210235640"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "源语言程序：某种程序设计语言写成的，比如 C"
										},
										{
											"Type": "NodeBackslash",
											"Data": "span",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "#"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "、C、C++、Java 等语言写的程序"
										}
									]
								}
							]
						},
						{
							"ID": "20241210235634-93e11bi",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20241210235634-93e11bi",
								"updated": "20241210235634"
							},
							"Children": [
								{
									"ID": "20241210235634-n0c4tra",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241210235634-n0c4tra",
										"updated": "20241210235634"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "目标语言程序：二进制数标识的伪机器代码写的程序"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20241210235634-9n0uk33",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241210235634-9n0uk33",
						"updated": "20241210235649"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "C"
						},
						{
							"Type": "NodeBackslash",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "#"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 的 Roslyn 编译器就会将我们编写的 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": ".cs"
						},
						{
							"Type": "NodeText",
							"Data": "​ 源代码文件编译为 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": ".exe"
						},
						{
							"Type": "NodeText",
							"Data": "​ 或者 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": ".dll"
						},
						{
							"Type": "NodeText",
							"Data": "​ 等可执行程序"
						}
					]
				}
			]
		},
		{
			"ID": "20241210235517-4lun7vu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241210235517-4lun7vu",
				"updated": "20241210235734"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "程序集是经由编译器编译得到的，供进一步编译执行的那个中间产物\n在 Windows 系统中，一般表现为后缀为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".dll"
				},
				{
					"Type": "NodeText",
					"Data": "​（库文件）或者是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".exe"
				},
				{
					"Type": "NodeText",
					"Data": "​（可执行文件）的格式\n其中："
				}
			]
		},
		{
			"ID": "20241210235734-6lrhqrh",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241210235734-6lrhqrh",
				"updated": "20241211000007"
			},
			"Children": [
				{
					"ID": "20241210235735-3lusfpa",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241210235735-3lusfpa",
						"updated": "20241210235904"
					},
					"Children": [
						{
							"ID": "20241210235735-9zm02n9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210235735-9zm02n9",
								"updated": "20241210235904"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": ".dll"
								},
								{
									"Type": "NodeText",
									"Data": "​ 是动态库，它可以被其他程序调用其中的函数、类等等，我们也可以调用其中的库函数或者类型等等"
								}
							]
						}
					]
				},
				{
					"ID": "20241210235856-jv30fqq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241210235856-jv30fqq",
						"updated": "20241211000007"
					},
					"Children": [
						{
							"ID": "20241210235856-iihqhaa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241210235856-iihqhaa",
								"updated": "20241211000007"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": ".exe"
								},
								{
									"Type": "NodeText",
									"Data": "​ 是可执行文件，就是那些可以被双击点击启动的运行的应用程序，我们编写的代码最终就是被编译为 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "exe"
								},
								{
									"Type": "NodeText",
									"Data": "​ 再运行"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241210235517-j74kug4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241210235517-j74kug4",
				"updated": "20241210235709"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单来说：\n程序集就是我们写的一个代码集合，我现在写的所有代码\n最终都会被编译器翻译为一个程序集供别人使用\n比如一个代码库文件（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".dll"
				},
				{
					"Type": "NodeText",
					"Data": "​）或者一个可执行文件（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".exe"
				},
				{
					"Type": "NodeText",
					"Data": "​）"
				}
			]
		},
		{
			"ID": "20241211000527-7uku607",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211000527-7uku607",
				"updated": "20241211000527"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"style": "width: 331px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20241211000527-falq37p.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 331px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241211000011-9wphlvo",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20241211000011-9wphlvo",
				"updated": "20241211000226"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "元数据"
				}
			]
		},
		{
			"ID": "20241211000047-pzo99fs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211000047-pzo99fs",
				"updated": "20241211000049"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "元数据就是用来描述数据的数据，这个概念不仅仅用于程序上，在别的领域也有元数据"
				}
			]
		},
		{
			"ID": "20241211000047-y5b481s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211000047-y5b481s",
				"updated": "20241211000140"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单来说，程序中的类、类中的函数、变量等等信息就是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "程序的元数据"
				},
				{
					"Type": "NodeText",
					"Data": "\n有关程序以及类型的数据被称为 元数据，他们被保存在程序集中"
				}
			]
		},
		{
			"ID": "20241211000141-rnbbiyd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211000141-rnbbiyd",
				"updated": "20241211000226"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "也就是说，我们自定义的类，接口，结构体，函数等等，C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 自带的类型，都存储在元数据内部"
				}
			]
		},
		{
			"ID": "20241211000114-i4qkhc7",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20241211000114-i4qkhc7",
				"updated": "20241214170254"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "反射"
				}
			]
		},
		{
			"ID": "20241211000123-s9iaa8p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211000123-s9iaa8p",
				"updated": "20241211000617"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "程序在运行时，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "可以查看其他程序集或者自身的元数据"
				},
				{
					"Type": "NodeText",
					"Data": "，一个运行的程序查看本身或者其他程序的元数据的行为就叫做"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "反射"
				}
			]
		},
		{
			"ID": "20241211000123-e1263o4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211000123-e1263o4",
				"updated": "20241211000253"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单来说就是，在程序运行时，通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "反射"
				},
				{
					"Type": "NodeText",
					"Data": " 可以得到其他程序集或者自己程序集代码的各种信息\n类 函数 变量 对象 等等，实例化它们，执行它们，操作它们"
				}
			]
		},
		{
			"ID": "20241211000619-mewjso2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211000619-mewjso2",
				"updated": "20241211000940"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "直观来说，通过反射，我们可以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "使用 字符串 去从元数据中获取我们想要的类，方法等等"
				},
				{
					"Type": "NodeText",
					"Data": "，然后调用他们\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "这个 字符串 可以是程序运行期间得到的，由外部传入的"
				},
				{
					"Type": "NodeText",
					"Data": "，而不一定是在源代码里写出来的，"
				}
			]
		},
		{
			"ID": "20241211000943-kx0p01k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211000943-kx0p01k",
				"updated": "20241211000943"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前我们调用一个类，一个方法，都是在源代码里写明调用的类和方法，\n而通过反射，我们可以通过一个字符串变量去调用一个类或者方法"
				}
			]
		},
		{
			"ID": "20241211000955-bx20dfp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241211000955-bx20dfp",
				"updated": "20241214170254"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "反射的作用"
				}
			]
		},
		{
			"ID": "20241211001005-sn5qpv4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211001005-sn5qpv4",
				"updated": "20241211001018"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为反射可以在程序编译后获得信息，所以它提高了程序的拓展性和灵活性："
				}
			]
		},
		{
			"ID": "20241211001012-a4nctgj",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241211001012-a4nctgj",
				"updated": "20241211001012"
			},
			"Children": [
				{
					"ID": "20241211001012-gwikqqk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241211001012-gwikqqk",
						"updated": "20241211001012"
					},
					"Children": [
						{
							"ID": "20241211001012-3lau9yp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241211001012-3lau9yp",
								"updated": "20241211001025"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "程序在运行时得到的所有元数据，包括元数据的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20240905135633-odvd8tj",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "特性"
								}
							]
						}
					]
				},
				{
					"ID": "20241211001012-4syotig",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241211001012-4syotig",
						"updated": "20241211001012"
					},
					"Children": [
						{
							"ID": "20241211001012-1au3qpb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241211001012-1au3qpb",
								"updated": "20241211001012"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "程序运行时，实例化对象，操作对象"
								}
							]
						}
					]
				},
				{
					"ID": "20241211001012-5re0bbm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20241211001012-5re0bbm",
						"updated": "20241211001012"
					},
					"Children": [
						{
							"ID": "20241211001012-40dpbhf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241211001012-40dpbhf",
								"updated": "20241211001012"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "程序运行时创建新对象，用这些对象执行任务"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241211001029-mo02q86",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211001029-mo02q86",
				"updated": "20241211001538"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如，我们可以通过在配置文件里，例如 Json文件 等等，\n写一个类的名字，然后读取这个配置文件，拿到类名的字符串，通过反射，我们就可以实例化甚至调用这个类\n这样便不需要去源代码内自己写出类的调用，也可以调用一个类\n又比如，我们可以在一个程序集内部，通过反射调用另一个程序集内的类，方法"
				}
			]
		},
		{
			"ID": "20241211001316-qtqgkyw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211001316-qtqgkyw",
				"updated": "20241211001554"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以后学习了序列化和反序列化，可以加深对反射的作用的理解"
				}
			]
		},
		{
			"ID": "20241214165251-pw4l2sh",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20241214165251-pw4l2sh",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);",
				"updated": "20241214170254"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20241214165253-7gtereq",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241214165253-7gtereq",
						"updated": "20241214170254"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！反射可以让我们通过更灵活的方式调用类和方法 ，但反射调用的性能一般是不如代码直接调用的\n因此，除了必要的情况（例如"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "u",
							"TextMarkTextContent": "程序运行时才能知道需要调用哪个类"
						},
						{
							"Type": "NodeText",
							"Data": "，"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "u",
							"TextMarkTextContent": "外部代码随时可能变化"
						},
						{
							"Type": "NodeText",
							"Data": "，性能不敏感的情况），最好少用反射调用外部的类和方法"
						}
					]
				}
			]
		},
		{
			"ID": "20241211222414-xtri8j4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241211222414-xtri8j4",
				"name": "Type",
				"updated": "20241212012052"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Type"
				}
			]
		},
		{
			"ID": "20241211222418-eqnhqzp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211222418-eqnhqzp",
				"updated": "20241211222535"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​（类的信息类），它是反射功能的基础！它是访问元数据的主要方式。\n使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的成员获取有关类型声明的信息，有关类型的成员（如构造函数、方法、字段、属性和类的事件）"
				}
			]
		},
		{
			"ID": "20241211222540-v02yr2k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211222540-v02yr2k",
				"updated": "20241211222638"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单来说，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 本身是一个类，它记录了某个类的所有成员信息，包括成员变量，函数，构造函数，属性，事件等等"
				}
			]
		},
		{
			"ID": "20241212000427-61o6m6v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212000427-61o6m6v",
				"updated": "20241212000435"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来的示例以下面的类作为反射获取的目标："
				}
			]
		},
		{
			"ID": "20241212000427-6r4grgp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212000427-6r4grgp",
				"style": "line-height: 22px;",
				"updated": "20241212012052"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace ReflectionSample\n{\n    class Test\n    {\n        private int i = 1;\n        public int j = 0;\n        public string str = \"123\";\n    \n        public Test() {}\n    \n        public Test(int i)\n        {\n            this.i = i;\n        }\n  \n        public Test(int i, string str) : this(i)\n        {\n            this.str = str;\n        }\n  \n        public void Speak()\n        {\n            Console.WriteLine(\"[无参重载]说话内容是：\" + str);\n        }\n\n        public void Speak(string speakText)\n        {\n            Console.WriteLine(\"[有参重载]说话内容是：\" + speakText);\n        }\n\n        public static int StaticTestFunc()\n        {\n            Console.WriteLine(\"静态方法调用测试\");\n            return 999;\n        }\n\n        public int Number \n        {\n            get =\u003e i;\n            set =\u003e i = value;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211001311-w0550dt",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241211001311-w0550dt",
				"updated": "20241211223949"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取 Type"
				}
			]
		},
		{
			"ID": "20241211223206-ww3mwcx",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241211223206-ww3mwcx",
				"name": "object.GetType()",
				"updated": "20241211223949"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过 object 的 GetType() 获取 Type"
				}
			]
		},
		{
			"ID": "20241211223523-3iymujl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211223523-3iymujl",
				"updated": "20241211223628"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为它是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20240903134526-vdrqc8q",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "object"
				},
				{
					"Type": "NodeText",
					"Data": "​ 就有的方法，因此实际上所有的类和结构体都可以通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetType()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来获取其 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 信息"
				}
			]
		},
		{
			"ID": "20241211223509-w3dhpxc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211223509-w3dhpxc",
				"style": "line-height: 22px;",
				"updated": "20241211224017"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 42;\nType type = a.GetType();\nConsole.WriteLine(type);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211223951-l4459pd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211223951-l4459pd",
				"updated": "20241211224020"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241211224020-pgzo8lg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211224020-pgzo8lg",
				"style": "line-height: 22px;",
				"updated": "20241211224029"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "System.Int32\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211224030-h85wnl6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211224030-h85wnl6",
				"updated": "20241211224331"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "该方法可以获取一个类对象真正的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​，即使这个对象是父类装子类的变量，也可以得到它真正的类型\n因此，如果一个方法传入的是一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object"
				},
				{
					"Type": "NodeText",
					"Data": "​ 类型的参数，我们也可以通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetType()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 得到其真正的类型 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241211223630-cy6qmiy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211223630-cy6qmiy",
				"style": "line-height: 22px;",
				"updated": "20241211224436"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static void Main()\n{\n    int a = 42;\n    string str = \"aaa\";\n    Test testObj = new Test();\n    OutputType(a);\n    OutputType(str);\n    OutputType(testObj);\n}\n\nstatic void OutputType(object obj)\n{\n    // 我们并不能在这个函数内知道传入的obj到底是什么类的对象，但我们可以通过GetType()去获取，它会返回这个obj真正的类型信息\n    Type type = obj.GetType();\n    Console.WriteLine(type);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211223932-4o6j1xb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211223932-4o6j1xb",
				"updated": "20241211223942"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241211223942-dy4yii5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211223942-dy4yii5",
				"style": "line-height: 22px;",
				"updated": "20241211223949"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "System.Int32\nSystem.String\nTest\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211223214-eaa71gi",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241211223214-eaa71gi",
				"name": "typeof()",
				"updated": "20241211225137"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过 typeof 关键字传入类名获取 Type"
				}
			]
		},
		{
			"ID": "20241211223155-1dhhq2l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211223155-1dhhq2l",
				"updated": "20241211225123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个方法相当于直接获取某个类的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 值，它可以存储到一个变量内，可以参与传参，也可以用于比较\n而原本我们是不能直接将类名去存储或者传参的，因为类名不是一个值"
				}
			]
		},
		{
			"ID": "20241211224754-1jafoe9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211224754-1jafoe9",
				"style": "line-height: 22px;",
				"updated": "20241211224846"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type type = typeof(int);\nConsole.WriteLine(type);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211224847-0g0j3jg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211224847-0g0j3jg",
				"updated": "20241211224849"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241211224849-hm1p3s9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211224849-hm1p3s9",
				"style": "line-height: 22px;",
				"updated": "20241211224903"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "System.Int32\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211225137-alj8tuz",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241211225137-alj8tuz",
				"name": "Type.GetType()",
				"updated": "20241211231746"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过类名字符串去获取类型"
				}
			]
		},
		{
			"ID": "20241211225216-jorpm7u",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20241211225216-jorpm7u",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);",
				"updated": "20241211225406"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20241211225228-dli93pw",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241211225228-dli93pw",
						"updated": "20241211225406"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！类名必须包含命名空间，不然找不到！"
						}
					]
				}
			]
		},
		{
			"ID": "20241211225957-q9aqjls",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211225957-q9aqjls",
				"updated": "20241211230353"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过类名的字符串获取一个类的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 信息是反射中非常重要的功能之一，\n通过这个功能，我们才可以在程序运行时通过外部传入的字符串来获取一个类的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​\n进而通过这个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 去调用对应的类的各种成员（变量，方法等），\n这样调用一个类就不需要一定要在代码内写清楚调用语句，提高了程序的灵活性"
				}
			]
		},
		{
			"ID": "20241211225412-u7owneh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211225412-u7owneh",
				"style": "line-height: 22px;",
				"updated": "20241211225901"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace TestSpace\n{\n    class Test {}\n}\n\nclass Program\n{\n    static void Main()\n    {\n        GetTypeFromString(\"Int32\");\n        GetTypeFromString(\"System.Int32\");\n        GetTypeFromString(\"TestSpace.Test\");\n    }\n\n    static void GetTypeFromString(string typeName)\n    {\n        Type? type = Type.GetType(typeName);\n        if (type != null)\n        {\n            Console.WriteLine(\"得到类型：\" + type);\n        }\n        else\n        {\n            Console.WriteLine(\"没有从字符串内得到类型\");\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211225905-2tk4v6s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211225905-2tk4v6s",
				"updated": "20241211225914"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241211225914-fc9ut1p",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211225914-fc9ut1p",
				"style": "line-height: 22px;",
				"updated": "20241211225919"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "没有从字符串内得到类型\n得到类型：System.Int32  \n得到类型：TestSpace.Test\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211230447-65d1epu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241211230447-65d1epu",
				"updated": "20241211231752"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于不同的Type变量"
				}
			]
		},
		{
			"ID": "20241211230459-gyh0h0o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211230459-gyh0h0o",
				"updated": "20241211230811"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果多个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 变量存储的是同一个类的类型信息，那么这几个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 变量肯定是存储的同一个地址信息\n因此，我们就可以通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "!="
				},
				{
					"Type": "NodeText",
					"Data": "​，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "=="
				},
				{
					"Type": "NodeText",
					"Data": "​ 来判断两个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是不是存储的同一个类的类型信息，\n也可以判断一个变量的类型或者字符串是不是某一个类的"
				}
			]
		},
		{
			"ID": "20241211230813-d5yj5nh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211230813-d5yj5nh",
				"style": "line-height: 22px;",
				"updated": "20241211231709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Program\n{\n    static void Main()\n    {\n        Type type = typeof(int);\n        Type? type2 = Type.GetType(\"System.Int32\");\n        if (type == type2)\n        {\n            Console.WriteLine(\"两个Type相等\");\n        }\n\n        int i = 9;\n        long l = 10;\n        CheckType(i);\n        CheckType(l);\n    }\n\n    static void CheckType(object obj)\n    {\n        Type type = obj.GetType();\n        if (type == typeof(int))\n        {\n            Console.WriteLine(\"传入的变量类型是int类型\");\n        }\n        else\n        {\n            Console.WriteLine(\"传入的变量类型不是int类型\");\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211231711-pt7qsmy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211231711-pt7qsmy",
				"updated": "20241211231712"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241211231713-ny1kra9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211231713-ny1kra9",
				"style": "line-height: 22px;",
				"updated": "20241211231724"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "两个Type相等\n传入的变量类型是int类型  \n传入的变量类型不是int类型\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211231018-j4n1psg",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241211231018-j4n1psg",
				"name": "type.Assembly",
				"updated": "20241211232312"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到类所在的程序集信息"
				}
			]
		},
		{
			"ID": "20241211232211-x3qoe2y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211232211-x3qoe2y",
				"updated": "20241211232226"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以得到类型所在的程序集信息，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Assembly"
				},
				{
					"Type": "NodeText",
					"Data": "​ 就是程序集类"
				}
			]
		},
		{
			"ID": "20241211231807-hxdj28v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211231807-hxdj28v",
				"style": "line-height: 22px;",
				"updated": "20241211232301"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Reflection;\n\nclass Program\n{\n    static void Main()\n    {\n        int a = 42;\n        Type type = a.GetType();\n        Console.WriteLine(type);\n        Type type2 = typeof(int);\n        Console.WriteLine(type2);\n        Type? type3 = Type.GetType(\"System.Int32\");\n        Console.WriteLine(type3);\n      \n        Assembly assembly = type.Assembly;\n        Console.WriteLine(assembly);\n        Console.WriteLine(type2.Assembly);\n        Console.WriteLine(type3?.Assembly);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211232147-25jy4a9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211232147-25jy4a9",
				"updated": "20241211232149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241211232150-tg3xm78",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211232150-tg3xm78",
				"style": "line-height: 22px;",
				"updated": "20241211232203"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "System.Int32\nSystem.Int32\nSystem.Int32\nSystem.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\nSystem.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\nSystem.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211232312-0fw1lhs",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"alias": "MemberInfo",
				"id": "20241211232312-0fw1lhs",
				"name": "type.GetMembers()",
				"updated": "20241212020204"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取类中的所有公共成员"
				}
			]
		},
		{
			"ID": "20241211233013-wuishcq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211233013-wuishcq",
				"updated": "20241211233119"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 获取该类的所有成员信息，成员信息的类型是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MemberInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetMembers()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以一次获取所有的成员信息数组"
				}
			]
		},
		{
			"ID": "20241211232837-bm9kuvl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211232837-bm9kuvl",
				"updated": "20241211233011"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例（下面的代码中用于反射的类已经在上文定义）："
				}
			]
		},
		{
			"ID": "20241211232323-hzczvin",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211232323-hzczvin",
				"style": "line-height: 22px;",
				"updated": "20241211232829"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\nMemberInfo[] infos = type.GetMembers();\nfor (int i = 0; i \u003c infos.Length; i++)\n{\n    Console.WriteLine(\"ReflectionSample.Test 成员\" + i + \": \" + infos[i]);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211232855-i01x9kr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211232855-i01x9kr",
				"updated": "20241211232856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241211232857-c71kxje",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211232857-c71kxje",
				"style": "line-height: 22px;",
				"updated": "20241212012020"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ReflectionSample.Test 成员0: Void Speak()\nReflectionSample.Test 成员1: Void Speak(System.String)\nReflectionSample.Test 成员2: Int32 StaticTestFunc()\nReflectionSample.Test 成员3: Int32 get_Number()\nReflectionSample.Test 成员4: Void set_Number(Int32)\nReflectionSample.Test 成员5: System.Type GetType()\nReflectionSample.Test 成员6: System.String ToString()\nReflectionSample.Test 成员7: Boolean Equals(System.Object)\nReflectionSample.Test 成员8: Int32 GetHashCode()\nReflectionSample.Test 成员9: Void .ctor()\nReflectionSample.Test 成员10: Void .ctor(Int32)\nReflectionSample.Test 成员11: Void .ctor(Int32, System.String)\nReflectionSample.Test 成员12: Int32 Number\nReflectionSample.Test 成员13: Int32 j\nReflectionSample.Test 成员14: System.String str\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211233125-9am81x9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211233125-9am81x9",
				"updated": "20241211233537"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可见，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Test"
				},
				{
					"Type": "NodeText",
					"Data": "​ 类的所有成员都被获取到了，包括成员变量、方法、属性，其中 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".ctor"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是构造方法\n而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get_Number()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set_Number(Int32)"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是属性 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Number"
				},
				{
					"Type": "NodeText",
					"Data": "​ 编译后生成的两个方法，可见，属性本质上就是两个方法"
				}
			]
		},
		{
			"ID": "20241211233304-ebsbkn6",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241211233304-ebsbkn6",
				"name": "ConstructorInfo",
				"updated": "20241212020208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "公共构造函数信息"
				}
			]
		},
		{
			"ID": "20241211233600-qq0e3kv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211233600-qq0e3kv",
				"updated": "20241212000807"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 获取该类的所有构造函数，构造函数成员信息的类型是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ConstructorInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​\n通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ConstructorInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 构造函数信息，我们可以反射调用其对应的构造方法，来实例化一个类"
				}
			]
		},
		{
			"ID": "20241212000716-jnuvi2d",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212000716-jnuvi2d",
				"name": "type.GetConstructors()",
				"updated": "20241212000850"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到所有公共构造函数信息"
				}
			]
		},
		{
			"ID": "20241211234208-p6wd3v3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211234208-p6wd3v3",
				"updated": "20241212000808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetConstructors()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以一次获取所有的构造函数信息数组"
				}
			]
		},
		{
			"ID": "20241211233747-zfh5lx0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211233747-zfh5lx0",
				"updated": "20241211233747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例（下面的代码中用于反射的类已经在上文定义）："
				}
			]
		},
		{
			"ID": "20241211233854-435yiww",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211233854-435yiww",
				"style": "line-height: 22px;",
				"updated": "20241211234338"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\nConstructorInfo[] infos = type.GetConstructors();\nfor (int i = 0; i \u003c infos.Length; i++)\n{\n    Console.WriteLine(\"ReflectionSample.Test 构造方法\" + i + \": \" + infos[i]);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211234401-m9d9sud",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211234401-m9d9sud",
				"updated": "20241211234410"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241211234410-le3ulp0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211234410-le3ulp0",
				"style": "line-height: 22px;",
				"updated": "20241212000848"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ReflectionSample.Test 构造方法0: Void .ctor()\nReflectionSample.Test 构造方法1: Void .ctor(Int32)\nReflectionSample.Test 构造方法2: Void .ctor(Int32, System.String)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212000849-6pmksp2",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212000849-6pmksp2",
				"name": "type.GetConstructor()",
				"updated": "20241212001007"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到特定的公开构造函数信息"
				}
			]
		},
		{
			"ID": "20241211234441-jmsw3ju",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211234441-jmsw3ju",
				"updated": "20241212000814"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetConstructor()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以获取一个特定的构造函数，需要传入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type[]"
				},
				{
					"Type": "NodeText",
					"Data": "​ 数组，\n也就是说，获取某个特定的构造函数，需要传入参数列表的各个参数类型去获取，\n例如，无参构造函数，就可以直接传入一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type[0]"
				},
				{
					"Type": "NodeText",
					"Data": "​，也就是没有参数，\n又比如，对于参数列表为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "(int i, string s)"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的构造函数，就需要传入包括 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Int32"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "String"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 数组（顺序不允许错！）"
				}
			]
		},
		{
			"ID": "20241212000918-1yt7pat",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212000918-1yt7pat",
				"style": "line-height: 22px;",
				"updated": "20241212001004"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 通过字符串获取类型信息\nType? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\n// 调用无参构造函数\nConstructorInfo? info1 = type.GetConstructor(new Type[0]);\n// 调用有参构造函数\nConstructorInfo? info2 = type.GetConstructor(new Type[] { typeof(int), typeof(string) });\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212001007-hn4gvym",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212001007-hn4gvym",
				"name": "constructorInfo.Invoke()",
				"updated": "20241212001021"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过公开构造函数信息实例化对象"
				}
			]
		},
		{
			"ID": "20241211235023-3sgo9p1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211235023-3sgo9p1",
				"updated": "20241212000035"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ConstructorInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后，使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Invoke()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 即可通过反射实例化类，\n其中 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Invoke()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 需要传入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object[]"
				},
				{
					"Type": "NodeText",
					"Data": "​ 数组，数组内容就是要传递到构造函数的参数，如果是无参构造函数传入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 即可\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Invoke()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 返回的是一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对象，我们需要手动转换成对应的类型"
				}
			]
		},
		{
			"ID": "20241212000533-vl1wafq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212000533-vl1wafq",
				"updated": "20241212000534"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例（下面的代码中用于反射的类已经在上文定义）："
				}
			]
		},
		{
			"ID": "20241211235322-hsp7qxu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211235322-hsp7qxu",
				"style": "line-height: 22px;",
				"updated": "20241212000516"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 通过字符串获取类型信息\nType? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\n// 调用无参构造函数\nConstructorInfo? info1 = type.GetConstructor(new Type[0]);\nif (info1 == null)\n{\n    Console.WriteLine(\"ReflectionSample.Test 构造方法获取失败\");\n    return;\n}\nobject obj1 = info1.Invoke(null);\nConsole.WriteLine((obj1 as ReflectionSample.Test)?.Number);\n// 调用有参构造函数\nConstructorInfo? info2 = type.GetConstructor(new Type[] { typeof(int), typeof(string) });\nif (info2 == null)\n{\n    Console.WriteLine(\"ReflectionSample.Test 构造方法获取失败\");\n    return;\n}\nobject obj2 = info2.Invoke(new object[] { 123, \"通过反射调用有参构造函数\" });\nConsole.WriteLine((obj2 as ReflectionSample.Test)?.Number);\nConsole.WriteLine((obj2 as ReflectionSample.Test)?.str);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211235836-rm62zp8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211235836-rm62zp8",
				"updated": "20241211235838"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241211235838-v2hbazv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241211235838-v2hbazv",
				"style": "line-height: 22px;",
				"updated": "20241211235845"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1\n123\n通过反射调用有参构造函数\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241211235105-ub0fs9s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241211235105-ub0fs9s",
				"updated": "20241212000007"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到，我们通过反射调用构造函数，实例化了两个对象"
				}
			]
		},
		{
			"ID": "20241212000538-um97wqb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241212000538-um97wqb",
				"name": "FieldInfo",
				"updated": "20241214165027"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "公共成员变量信息"
				}
			]
		},
		{
			"ID": "20241212001205-qnd8oe2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212001205-qnd8oe2",
				"updated": "20241212004957"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 获取该类的公共成员变量，公共成员变量信息的类型是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FieldInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​\n通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FieldInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 公共成员变量信息，我们可以反射调用某个对象的公共成员变量，对该对象的公共成员变量进行读取或赋值操作"
				}
			]
		},
		{
			"ID": "20241214165006-fpzxyi9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214165006-fpzxyi9",
				"updated": "20241214165027"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FieldInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 也可以获取枚举类型的枚举值，详见下文："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20241214163902-3grl75t",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "反射获取枚举值"
				}
			]
		},
		{
			"ID": "20241212000723-lu8oa8k",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212000723-lu8oa8k",
				"name": "type.GetFields()",
				"updated": "20241212001801"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到所有成员变量"
				}
			]
		},
		{
			"ID": "20241212001752-tkozhff",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212001752-tkozhff",
				"updated": "20241212001801"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetFields()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以一次获取所有的公共成员变量信息数组"
				}
			]
		},
		{
			"ID": "20241212001752-r5675gj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212001752-r5675gj",
				"updated": "20241212001752"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例（下面的代码中用于反射的类已经在上文定义）："
				}
			]
		},
		{
			"ID": "20241212001149-02hl765",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212001149-02hl765",
				"style": "line-height: 22px;",
				"updated": "20241212001548"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\nFieldInfo[] infos = type.GetFields();\nfor (int i = 0; i \u003c infos.Length; i++)\n{\n    Console.WriteLine(\"ReflectionSample.Test 公开变量\" + i + \": \" + infos[i]);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212001550-gj32nv2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212001550-gj32nv2",
				"updated": "20241212001551"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241212001552-xa8b14k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212001552-xa8b14k",
				"style": "line-height: 22px;",
				"updated": "20241212001605"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ReflectionSample.Test 公开变量0: Int32 j\nReflectionSample.Test 公开变量1: System.String str\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212000700-hreu58j",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212000700-hreu58j",
				"name": "type.GetField()",
				"updated": "20241212001955"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到指定名称的成员变量"
				}
			]
		},
		{
			"ID": "20241212001805-va682a4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212001805-va682a4",
				"updated": "20241212001853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetField()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以获取特定的公共成员变量信息，我们需要传入这个成员变量的名字的字符串"
				}
			]
		},
		{
			"ID": "20241212001955-m7a5ytd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212001955-m7a5ytd",
				"updated": "20241212001955"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例（下面的代码中用于反射的类已经在上文定义）："
				}
			]
		},
		{
			"ID": "20241212001854-futtr04",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212001854-futtr04",
				"style": "line-height: 22px;",
				"updated": "20241212001941"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\nFieldInfo? info = type.GetField(\"str\");\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212000618-124kdzf",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212000618-124kdzf",
				"name": "fieldInfo.GetValue()",
				"updated": "20241212004112"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过反射获取对象的某个变量的值"
				}
			]
		},
		{
			"ID": "20241212003749-ttbr6zn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212003749-ttbr6zn",
				"updated": "20241212004023"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FieldInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后，使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetValue()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 即可通过获取对象的成员变量的值\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetValue()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 需要传入一个类对象（且这个类对象的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 必须包含此 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FieldInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​），\n返回值就是传入的类对象中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FieldInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对应的那个成员变量的值"
				}
			]
		},
		{
			"ID": "20241212004025-t0pv7dn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212004025-t0pv7dn",
				"style": "line-height: 22px;",
				"updated": "20241212004103"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\n// 通过反射调用无参构造函数去构造一个对象\nobject? testObj = type.GetConstructor(new Type[0])?.Invoke(null);\nFieldInfo? info = type.GetField(\"str\");\nif (testObj != null \u0026\u0026 info != null \u0026\u0026 testObj is ReflectionSample.Test)\n{\n    ((ReflectionSample.Test)testObj).str = \"aaaa\";\n    // 通过反射获取str这个成员变量值\n    Console.WriteLine(info.GetValue(testObj));\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212004104-i832b9y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212004104-i832b9y",
				"updated": "20241212004106"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241212004107-z6pjmmt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212004107-z6pjmmt",
				"style": "line-height: 22px;",
				"updated": "20241212004112"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "aaaa\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212001129-6uhcqni",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212001129-6uhcqni",
				"name": "fieldInfo.SetValue()",
				"updated": "20241212004854"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过反射设置对象的某个变量的值"
				}
			]
		},
		{
			"ID": "20241212001731-s752vn1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212001731-s752vn1",
				"updated": "20241212004310"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FieldInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后，使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SetValue()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 即可对类对象的成员变量赋值\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SetValue()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 需要传入一个类对象和要赋的值（且这个类对象的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 必须包含此 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FieldInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​），\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SetValue()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 就会将传入的类对象的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FieldInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对应的那个成员变量的值修改为传入的值"
				}
			]
		},
		{
			"ID": "20241212004311-m68v2xs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212004311-m68v2xs",
				"style": "line-height: 22px;",
				"updated": "20241212004416"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\n// 通过反射调用无参构造函数去构造一个对象\nobject? testObj = type.GetConstructor(new Type[0])?.Invoke(null);\nFieldInfo? info = type.GetField(\"str\");\nif (testObj != null \u0026\u0026 info != null)\n{\n    // 通过反射修改testObj的str成员变量值\n    info.SetValue(testObj, \"通过反射修改的值！\");\n    // 通过反射获取testObj的str成员变量值\n    Console.WriteLine(info.GetValue(testObj));\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212004417-ps0pibx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212004417-ps0pibx",
				"updated": "20241212004419"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241212004419-1k1nmo9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212004419-1k1nmo9",
				"style": "line-height: 22px;",
				"updated": "20241212004424"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "通过反射修改的值！\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212004853-trn36cj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241212004853-trn36cj",
				"name": "MethodInfo",
				"updated": "20241212020219"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "公共成员方法信息"
				}
			]
		},
		{
			"ID": "20241212004914-4s1fk7t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212004914-4s1fk7t",
				"updated": "20241212005023"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 获取该类的公共成员方法，公共成员方法信息的类型是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​\n通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 公共成员方法信息，我们可以反射调用某个对象的公共成员方法"
				}
			]
		},
		{
			"ID": "20241212005353-yqcgyuk",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212005353-yqcgyuk",
				"name": "type.GetMethods()",
				"updated": "20241212011327"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到所有公开成员方法信息"
				}
			]
		},
		{
			"ID": "20241212005353-a9g5dk9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212005353-a9g5dk9",
				"updated": "20241212005501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetMethods()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以一次获取所有的公共成员变量信息数组"
				}
			]
		},
		{
			"ID": "20241212005353-s468cy8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212005353-s468cy8",
				"updated": "20241212005353"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例（下面的代码中用于反射的类已经在上文定义）："
				}
			]
		},
		{
			"ID": "20241212005353-rox6dnz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212005353-rox6dnz",
				"style": "line-height: 22px;",
				"updated": "20241212005454"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\nMethodInfo[] infos = type.GetMethods();\nfor (int i = 0; i \u003c infos.Length; i++)\n{\n    Console.WriteLine(\"ReflectionSample.Test 公开方法\" + i + \": \" + infos[i]);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212005353-c26ykrb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212005353-c26ykrb",
				"updated": "20241212005353"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241212005353-csb6lhf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212005353-csb6lhf",
				"style": "line-height: 22px;",
				"updated": "20241212005826"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ReflectionSample.Test 公开方法0: Void Speak()\nReflectionSample.Test 公开方法1: Void Speak(System.String)\nReflectionSample.Test 公开方法2: Void StaticTestFunc()\nReflectionSample.Test 公开方法3: Int32 get_Number()\nReflectionSample.Test 公开方法4: Void set_Number(Int32)\nReflectionSample.Test 公开方法5: System.Type GetType()\nReflectionSample.Test 公开方法6: System.String ToString()\nReflectionSample.Test 公开方法7: Boolean Equals(System.Object)\nReflectionSample.Test 公开方法8: Int32 GetHashCode()\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212005522-65du3op",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212005522-65du3op",
				"updated": "20241212005606"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "值得一提的是，由属性生成的两个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "set"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法也是包含在该类型的公开方法里的"
				}
			]
		},
		{
			"ID": "20241212005852-0ycf4pw",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212005852-0ycf4pw",
				"name": "type.GetMethod()",
				"updated": "20241212011512"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到特定的公开成员方法信息"
				}
			]
		},
		{
			"ID": "20241212005930-qo9dims",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212005930-qo9dims",
				"updated": "20241212010249"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetMethod()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以获取一个特定的公开成员方法，需要传入函数名，\n如果函数存在重载，还需要传入参数列表的对应 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type[]"
				},
				{
					"Type": "NodeText",
					"Data": "​ 数组，根据参数类型列表以确定需要获取的是哪个函数重载\n如果是无参方法，就可以直接传入一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type[0]"
				},
				{
					"Type": "NodeText",
					"Data": "​，也就是没有参数，\n如果是有参方法，例如参数列表为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "(int i, string s)"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的方法，就需要传入包括 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Int32"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "String"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 数组（顺序不允许错！）"
				}
			]
		},
		{
			"ID": "20241212011512-zowgz4r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212011512-zowgz4r",
				"updated": "20241212011512"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例（下面的代码中用于反射的类已经在上文定义）："
				}
			]
		},
		{
			"ID": "20241212010227-ilf9uk3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212010227-ilf9uk3",
				"style": "line-height: 22px;",
				"updated": "20241212011312"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\nMethodInfo? info1 = type.GetMethod(\"StaticTestFunc\");\nMethodInfo? info2 = type.GetMethod(\"Speak\", new Type[0]);\nMethodInfo? info3 = type.GetMethod(\"Speak\", new Type[1] { typeof(string) });\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212011440-4g4n40j",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212011440-4g4n40j",
				"name": "methodInfo.Invoke()",
				"updated": "20241212014230"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过公开成员方法信息调用方法"
				}
			]
		},
		{
			"ID": "20241212011509-kbrz6xe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212011509-kbrz6xe",
				"updated": "20241212012238"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后，使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Invoke()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 即可通过调用类对象的方法\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Invoke()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 需要 要调用方法的对象 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object[]"
				},
				{
					"Type": "NodeText",
					"Data": "​ 数组，其中数组内容就是要传递到构造函数的参数\n如果是静态方法，第一个参数传入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​，如果是无参方法，第二个参数传入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 即可\n如果调用的方法有返回值，则会返回一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对象，如果无返回值则返回 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241212011509-l84wfu7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212011509-l84wfu7",
				"updated": "20241212011509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例（下面的代码中用于反射的类已经在上文定义）："
				}
			]
		},
		{
			"ID": "20241212011701-7dh8mpp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212011701-7dh8mpp",
				"style": "line-height: 22px;",
				"updated": "20241212012911"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\nMethodInfo? info1 = type.GetMethod(\"StaticTestFunc\");\nMethodInfo? info2 = type.GetMethod(\"Speak\", new Type[0]);                       // 获取无参重载\nMethodInfo? info3 = type.GetMethod(\"Speak\", new Type[1] { typeof(string) });    // 获取有参重载\n// 通过反射调用无参构造函数去构造一个对象\nobject? testObj = type.GetConstructor(new Type[0])?.Invoke(null);\nif (testObj != null)\n{\n    object? result = info1?.Invoke(null, null);                                 // 调用静态有返回值方法\n    Console.WriteLine(\"result: \" + (result == null ? \"NULL\" : result));\n    result = info2?.Invoke(testObj, null);                                      // 调用无参无返回值方法\n    Console.WriteLine(\"result: \" + (result == null ? \"NULL\" : result));\n    result = info3?.Invoke(testObj, new object[] { \"通过反射调用的方法\" });        // 调用有参无返回值方法\n    Console.WriteLine(\"result: \" + (result == null ? \"NULL\" : result));\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212012633-cehqfv8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212012633-cehqfv8",
				"updated": "20241212012643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241212012643-0i4sdtm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212012643-0i4sdtm",
				"style": "line-height: 22px;",
				"updated": "20241212012647"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "静态方法调用测试\n999\n[无参重载]说话内容是：123\nNULL\n[有参重载]说话内容是：通过反射调用的方法\nNULL\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212014230-ccx61f3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241212014230-ccx61f3",
				"name": "PropertyInfo",
				"updated": "20241212022501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "属性信息"
				}
			]
		},
		{
			"ID": "20241212014230-84lxs1j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212014230-84lxs1j",
				"updated": "20241212014931"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 获取该类的属性，属性信息的类型是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PropertyInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​\n通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PropertyInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 属性信息，我们可以反射调用某个对象的属性，对该对象的属性进行读取或赋值操作"
				}
			]
		},
		{
			"ID": "20241212022447-zl277hk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212022447-zl277hk",
				"updated": "20241212022501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以这个类为例："
				}
			]
		},
		{
			"ID": "20241212022447-worph7y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212022447-worph7y",
				"style": "line-height: 22px;",
				"updated": "20241212022447"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace ReflectionSample\n{\n    class PropertyTest\n    {\n        private int i = 1;\n        public string str = \"123\";\n        public int Number \n        {\n            get =\u003e i;\n            set =\u003e i = value;\n        }\n        public string Text\n        {\n            get \n            {\n                Console.WriteLine(\"读取属性\");\n                return str;\n            }\n            set\n            {\n                str = value;\n                Console.WriteLine(\"写入属性\");\n            }\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212014230-xghu36q",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212014230-xghu36q",
				"name": "type.GetProperties()",
				"updated": "20241212014935"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到所有成员属性"
				}
			]
		},
		{
			"ID": "20241212014230-txrvzil",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212014230-txrvzil",
				"updated": "20241212014935"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetProperties()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以一次获取所有的属性信息数组"
				}
			]
		},
		{
			"ID": "20241212014230-4h05wlk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212014230-4h05wlk",
				"style": "line-height: 22px;",
				"updated": "20241212014734"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.PropertyTest\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\nPropertyInfo[] infos = type.GetProperties();\nfor (int i = 0; i \u003c infos.Length; i++)\n{\n    Console.WriteLine(\"ReflectionSample.Test 属性\" + i + \": \" + infos[i]);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212014230-dzdqb9q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212014230-dzdqb9q",
				"updated": "20241212014230"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241212014230-xiyjr0t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212014230-xiyjr0t",
				"style": "line-height: 22px;",
				"updated": "20241212014741"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ReflectionSample.Test 属性0: Int32 Number\nReflectionSample.Test 属性1: System.String Text\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212014230-3goz0in",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212014230-3goz0in",
				"name": "type.GetProperties()",
				"updated": "20241212015114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到指定名称的属性"
				}
			]
		},
		{
			"ID": "20241212014230-qm292wu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212014230-qm292wu",
				"updated": "20241212014946"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetProperties()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以获取特定的属性信息，我们需要传入这个属性的名字的字符串"
				}
			]
		},
		{
			"ID": "20241212014230-045qejg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212014230-045qejg",
				"updated": "20241212014230"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例（下面的代码中用于反射的类已经在上文定义）："
				}
			]
		},
		{
			"ID": "20241212014230-dkl9mqj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212014230-dkl9mqj",
				"style": "line-height: 22px;",
				"updated": "20241212015114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.PropertyTest\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\nPropertyInfo? info1 = type.GetProperty(\"Number\");\nPropertyInfo? info2 = type.GetProperty(\"Text\");\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212014230-2gaf4gk",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212014230-2gaf4gk",
				"name": "propertyInfo.GetValue()",
				"updated": "20241212015838"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过反射获取对象的某个属性的值"
				}
			]
		},
		{
			"ID": "20241212014230-riqgfde",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212014230-riqgfde",
				"updated": "20241212015818"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PropertyInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后，使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetValue()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 即可通过获取对象的属性的值\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetValue()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 需要传入一个类对象（且这个类对象的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 必须包含此 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PropertyInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​），\n返回值就是传入的类对象中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PropertyInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对应的那个属性的值"
				}
			]
		},
		{
			"ID": "20241212014230-pdctxo8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212014230-pdctxo8",
				"style": "line-height: 22px;",
				"updated": "20241212015718"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.PropertyTest\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\n// 通过反射构造一个对象\nobject? testObj = type.GetConstructor(new Type[0])?.Invoke(null);\n// 通过反射读取属性的值\nPropertyInfo? info1 = type.GetProperty(\"Number\");\nConsole.WriteLine(info1?.GetValue(testObj));\nPropertyInfo? info2 = type.GetProperty(\"Text\");\nConsole.WriteLine(info2?.GetValue(testObj));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212014230-htapu8s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212014230-htapu8s",
				"updated": "20241212014230"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241212014230-viqcltu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212014230-viqcltu",
				"style": "line-height: 22px;",
				"updated": "20241212015838"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1\n读取属性\n123\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212014230-0jxe56j",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212014230-0jxe56j",
				"name": "propertyInfo.SetValue()",
				"updated": "20241212020719"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过反射设置对象的某个变量的值"
				}
			]
		},
		{
			"ID": "20241212014230-5duh0an",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212014230-5duh0an",
				"updated": "20241212015821"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PropertyInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 后，使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SetValue()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 即可对类对象的属性赋值\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SetValue()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 需要传入一个类对象和要赋的值（且这个类对象的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 必须包含此 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PropertyInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​），\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SetValue()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 就会将传入的类对象的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PropertyInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对应的那个属性的值修改为传入的值"
				}
			]
		},
		{
			"ID": "20241212014230-diu9ykb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212014230-diu9ykb",
				"style": "line-height: 22px;",
				"updated": "20241212015742"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.PropertyTest\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\n// 通过反射构造一个对象\nobject? testObj = type.GetConstructor(new Type[0])?.Invoke(null);\nif (testObj != null)\n{\n    PropertyInfo? info1 = type.GetProperty(\"Number\");\n    info1?.SetValue(testObj, 9999999);\t\t\t\t\t// 通过反射赋值\n    Console.WriteLine(info1?.GetValue(testObj));\t\t// 通过反射读取值\n    PropertyInfo? info2 = type.GetProperty(\"Text\");\n    info2?.SetValue(testObj, \"测试反射写入\");\n    Console.WriteLine(info2?.GetValue(testObj));\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212014230-p149dgc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212014230-p149dgc",
				"updated": "20241212014230"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241212014230-ql6l3yk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212014230-ql6l3yk",
				"style": "line-height: 22px;",
				"updated": "20241212015846"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "9999999\n写入属性\n读取属性\n测试反射写入\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212020719-cpixjzg",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241212020719-cpixjzg",
				"updated": "20241212021218"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "枚举相关"
				}
			]
		},
		{
			"ID": "20241212021135-x5r7y4g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212021135-x5r7y4g",
				"updated": "20241212021144"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以这个枚举为例："
				}
			]
		},
		{
			"ID": "20241212021144-ky19xnn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212021144-ky19xnn",
				"style": "line-height: 22px;",
				"updated": "20241212021153"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace ReflectionSample\n{\n    enum EnumTest\n    {\n        A, B, C, D, E, F\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212021038-8g3hjau",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212021038-8g3hjau",
				"name": "type.IsEnum",
				"updated": "20241212021218"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "判断类型是否是枚举"
				}
			]
		},
		{
			"ID": "20241212021048-q7wbivc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212021048-q7wbivc",
				"style": "line-height: 22px;",
				"updated": "20241212021205"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.EnumTest\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\nif (type.IsEnum)\n{\n    Console.WriteLine(\"是枚举类型\");\n}\nelse\n{\n    Console.WriteLine(\"不是枚举类型\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212021206-1epz9pc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212021206-1epz9pc",
				"updated": "20241212021207"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241212021208-bjtw849",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212021208-bjtw849",
				"style": "line-height: 22px;",
				"updated": "20241212021218"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "是枚举类型\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212020727-4hxp4rv",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212020727-4hxp4rv",
				"name": "type.GetEnumNames()",
				"updated": "20241212021728"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取所有枚举名"
				}
			]
		},
		{
			"ID": "20241212020744-m8eyijm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212020744-m8eyijm",
				"updated": "20241212020852"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetEnumNames()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以一次该获取该类型的所有枚举名，如果此类型不是枚举类型，则报错"
				}
			]
		},
		{
			"ID": "20241212020853-5jtrbtl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212020853-5jtrbtl",
				"style": "line-height: 22px;",
				"updated": "20241212021409"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.EnumTest\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\nif (type.IsEnum)\n{\n    string[] enumNames = type.GetEnumNames();\n    for (int i = 0; i \u003c enumNames.Length; i++)\n    {\n        Console.WriteLine(\"enum \" + i + \": \" + enumNames[i]);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212021409-5p2pz2b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212021409-5p2pz2b",
				"updated": "20241212021412"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241212021412-4jppm9l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212021412-4jppm9l",
				"style": "line-height: 22px;",
				"updated": "20241212021417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "enum 0: A\nenum 1: B\nenum 2: C\nenum 3: D\nenum 4: E\nenum 5: F\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212021419-1n18odw",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241212021419-1n18odw",
				"name": "type.GetEnumName()",
				"updated": "20241214163903"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取对象的枚举名"
				}
			]
		},
		{
			"ID": "20241212021741-349lj7h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212021741-349lj7h",
				"updated": "20241214163844"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetEnumName()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以用于获取枚举对象的名字，可用于得到枚举值但是不知道其名字的情况"
				}
			]
		},
		{
			"ID": "20241212021830-gol1er3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212021830-gol1er3",
				"style": "line-height: 22px;",
				"updated": "20241212022210"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.EnumTest\");\nif (type == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\nint enumValue = 1;\nif (type.IsEnum)\n{\n    string? name = type.GetEnumName(enumValue);\n    Console.Write(name != null ? (\"Enum Name: \" + name) : \"Enum value is null\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212022212-24gbwmk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212022212-24gbwmk",
				"updated": "20241212022215"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241212022215-k7wanxw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241212022215-k7wanxw",
				"style": "line-height: 22px;",
				"updated": "20241212022226"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Enum Name: B\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214163902-3grl75t",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20241214163902-3grl75t",
				"updated": "20250211225203"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "反射获取枚举值"
				}
			]
		},
		{
			"ID": "20241214163917-f7mmxsq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214163917-f7mmxsq",
				"updated": "20241214164950"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取某个枚举的枚举值实际上和获取公开成员方法一样，都是使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetField()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来获取，\n其中 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetField()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 需要先传入枚举名，然后从获取到的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "fieldInfo.GetValue(null)"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来获取枚举值"
				}
			]
		},
		{
			"ID": "20241214164020-s4tjq81",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214164020-s4tjq81",
				"style": "line-height: 22px;",
				"updated": "20241214164849"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? testEnum = Type.GetType(\"ReflectionSample.EnumTest\");\nif (testEnum == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\n// 获取多个枚举信息值\nFieldInfo[] enumValues = testEnum.GetFields();\nfor (int i = 0; i \u003c enumValues.Length; i++)\n{\n    Console.WriteLine(enumValues[i]);\n}\n// 通过枚举值名获取枚举值\nFieldInfo? enumValueInfo = testEnum.GetField(\"A\");\nobject? enumValue = enumValueInfo?.GetValue(null);\nif (enumValue != null)\n{   \n    string? name = testEnum.GetEnumName(enumValue);\n    Console.WriteLine(name != null ? (\"Enum Name: \" + name) : \"Enum value is null\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214164503-wsga63x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214164503-wsga63x",
				"updated": "20241214164506"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241214164506-11mxhum",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214164506-11mxhum",
				"style": "line-height: 22px;",
				"updated": "20241214164513"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Int32 value__\nReflectionSample.EnumTest A\nReflectionSample.EnumTest B\nReflectionSample.EnumTest C\nReflectionSample.EnumTest D\nReflectionSample.EnumTest E\nReflectionSample.EnumTest F\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20250211225203-v1nobfn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20250211225203-v1nobfn",
				"name": "type.IsAssignableFrom()",
				"updated": "20250211230127"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "判断另一个类型是否与当前类型兼容"
				}
			]
		},
		{
			"ID": "20250211225251-b2tah7i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250211225251-b2tah7i",
				"updated": "20250211225651"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.IsAssignableFrom()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 用于确定 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对象本身所表示的类型是否兼容另外一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对象表示的类型"
				}
			]
		},
		{
			"ID": "20250211225557-nbhlc0c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250211225557-nbhlc0c",
				"updated": "20250211225557"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所谓的兼容包括："
				}
			]
		},
		{
			"ID": "20250211225554-x2as4mm",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20250211225554-x2as4mm",
				"updated": "20250211225731"
			},
			"Children": [
				{
					"ID": "20250211225555-9soryf1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20250211225555-9soryf1",
						"updated": "20250211225555"
					},
					"Children": [
						{
							"ID": "20250211225555-kz7ikm7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250211225555-kz7ikm7",
								"updated": "20250211225648"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "type"
								},
								{
									"Type": "NodeText",
									"Data": "​ 对象是相同类型"
								}
							]
						}
					]
				},
				{
					"ID": "20250211225639-e3g096x",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20250211225639-e3g096x",
						"updated": "20250211225731"
					},
					"Children": [
						{
							"ID": "20250211225639-d1i80sn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250211225639-d1i80sn",
								"updated": "20250211225731"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "派生自 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "type"
								},
								{
									"Type": "NodeText",
									"Data": "​ 对象表示的类型，也就是可以父类装子类"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20250211225546-1qmy19d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250211225546-1qmy19d",
				"updated": "20250211225546"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单来说，此方法通常用于检查某个类型是否能安全地转换为另一类型，尤其是在涉及多态性时非常有用。\n例如，它可以用来检查某个类是否实现了特定的接口，或者某个派生类是否可以从特定的基类转换而来。"
				}
			]
		},
		{
			"ID": "20250211225846-5chm0nf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20250211225846-5chm0nf",
				"style": "line-height: 22px;",
				"updated": "20250211225855"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Animal {}\nclass Dog : Animal {}\n\nType dogType = typeof(Dog);\nType animalType = typeof(Animal);\n\nbool result = animalType.IsAssignableFrom(dogType); // 返回 true，因为 Dog 类是从 Animal 类派生的\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20250211230127-9g6hyy6",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20250211230127-9g6hyy6",
				"name": "type.IsAbstract",
				"updated": "20250211230257"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "是否是抽象类"
				}
			]
		},
		{
			"ID": "20250211230221-h6amx2a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250211230221-h6amx2a",
				"updated": "20250211230257"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "判断当前 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对象所表示的类型是否为抽象类型。"
				}
			]
		},
		{
			"ID": "20250211230257-pu4rusw",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20250211230257-pu4rusw",
				"updated": "20250211230257"
			},
			"Children": [
				{
					"ID": "20250211230257-ozjutbd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20250211230257-ozjutbd",
						"updated": "20250211230257"
					},
					"Children": [
						{
							"ID": "20250211230257-i6nodd2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250211230257-i6nodd2",
								"updated": "20250211230257"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果返回 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "true"
								},
								{
									"Type": "NodeText",
									"Data": "​，则表示这个类型是抽象的；\n"
								}
							]
						}
					]
				},
				{
					"ID": "20250211230257-e306j2p",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20250211230257-e306j2p",
						"updated": "20250211230257"
					},
					"Children": [
						{
							"ID": "20250211230257-t184ezg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250211230257-t184ezg",
								"updated": "20250211230257"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果返回 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "false"
								},
								{
									"Type": "NodeText",
									"Data": "​，则表示这个类型不是抽象的。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20250211230133-jh8pmc4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20250211230133-jh8pmc4",
				"style": "line-height: 22px;",
				"updated": "20250211230217"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public abstract class Animal\n{\n    public abstract void Eat();\n}\n\npublic class Dog : Animal\n{\n    public override void Eat()\n    {\n        // 实现Eat方法\n    }\n}\n\nType animalType = typeof(Animal);\nbool isAnimalAbstract = animalType.IsAbstract; // 返回 true, 因为 Animal 是一个抽象类\n\nType dogType = typeof(Dog);\nbool isDogAbstract = dogType.IsAbstract; // 返回 false, 因为 Dog 不是抽象类\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212012942-g51e5tl",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241212012942-g51e5tl",
				"updated": "20241212020415"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其他"
				}
			]
		},
		{
			"ID": "20241212013003-iabpu4y",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241212013003-iabpu4y",
				"updated": "20241212020415"
			},
			"Children": [
				{
					"ID": "20241212013020-t208gqh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241212013020-t208gqh",
						"updated": "20241212013020"
					},
					"Children": [
						{
							"ID": "20241212013020-5fa1mnf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241212013020-5fa1mnf",
								"updated": "20241212013026"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取事件信息："
								}
							]
						},
						{
							"ID": "20241212013648-3t72ye8",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20241212013648-3t72ye8",
								"updated": "20241212013648"
							},
							"Children": [
								{
									"ID": "20241212013648-pu81fsy",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20241212013648-pu81fsy",
										"updated": "20241212013648"
									},
									"Children": [
										{
											"ID": "20241212013648-xy9cu9z",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241212013648-xy9cu9z",
												"updated": "20241212013932"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "获取事件信息的方法："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "type.GetEvent()"
												},
												{
													"Type": "NodeText",
													"Data": "​，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "type.GetEvents()"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								},
								{
									"ID": "20241212013717-sn785gd",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20241212013717-sn785gd",
										"updated": "20241212013717"
									},
									"Children": [
										{
											"ID": "20241212013717-qxga52f",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241212013717-qxga52f",
												"updated": "20241212013727"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "事件信息："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "EventInfo"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20241212013026-snf3o3c",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241212013026-snf3o3c",
						"updated": "20241212013026"
					},
					"Children": [
						{
							"ID": "20241212013026-yv3wpva",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241212013026-yv3wpva",
								"updated": "20241212013038"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取接口信息："
								}
							]
						},
						{
							"ID": "20241212013804-p167ano",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20241212013804-p167ano",
								"updated": "20241212013804"
							},
							"Children": [
								{
									"ID": "20241212013831-svbprgn",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20241212013831-svbprgn",
										"updated": "20241212013831"
									},
									"Children": [
										{
											"ID": "20241212013831-rfdhxxu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241212013831-rfdhxxu",
												"updated": "20241212013935"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "获取实现接口的方法："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "type.GetInterface()"
												},
												{
													"Type": "NodeText",
													"Data": "​，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "type.GetInterfaces()"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								},
								{
									"ID": "20241212013804-jrbrhml",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20241212013804-jrbrhml",
										"updated": "20241212013804"
									},
									"Children": [
										{
											"ID": "20241212013804-9itfvnw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241212013804-9itfvnw",
												"updated": "20241212013830"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "该类实现的接口的信息："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "InterfaceInfo"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241212013140-ulfhum5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241212013140-ulfhum5",
				"name": "Activator",
				"updated": "20241214170411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Activator"
				}
			]
		},
		{
			"ID": "20241212122912-5g8nzgj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212122912-5g8nzgj",
				"updated": "20241214154732"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用于快速实例化对象的类，用于将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对象快捷实例化为对象，先得到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​，然后直接实例化一个对象\n原来我们需要通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 去获取构造函数信息，再通过函数构造信息去反射实例化对象，"
				}
			]
		},
		{
			"ID": "20241214155416-qz8pm99",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214155416-qz8pm99",
				"updated": "20241214155416"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来的示例以下面的类作为反射获取的目标："
				}
			]
		},
		{
			"ID": "20241214155416-mjd0dkh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214155416-mjd0dkh",
				"style": "line-height: 22px;",
				"updated": "20241214162607"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace ReflectionSample\n{\n    class Test\n    {\n        private int i = 1;\n        public int j = 0;\n        public string str = \"123\";\n  \n        public Test() {}\n  \n        public Test(int i)\n        {\n            this.i = i;\n        }\n  \n        public Test(int i, string str) : this(i)\n        {\n            this.str = str;\n        }\n  \n        public void Speak()\n        {\n            Console.WriteLine(\"[无参重载]说话内容是：\" + str);\n        }\n\n        public void Speak(string speakText)\n        {\n            Console.WriteLine(\"[有参重载]说话内容是：\" + speakText);\n        }\n\n        public static int StaticTestFunc()\n        {\n            Console.WriteLine(\"静态方法调用测试\");\n            return 999;\n        }\n\n        public int Number \n        {\n            get =\u003e i;\n            set =\u003e i = value;\n        }\n    }\n\n    class Test1 {};\n    class Test2 {};\n    interface Itest {};\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214154652-31qdnus",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241214154652-31qdnus",
				"name": "Activator.CreateInstance()",
				"updated": "20241214170411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Activator 实例化对象"
				}
			]
		},
		{
			"ID": "20241214155203-57anr21",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214155203-57anr21",
				"updated": "20241214155335"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Activator.CreateInstance()"
				},
				{
					"Type": "NodeText",
					"Data": "​（返回值是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object"
				},
				{
					"Type": "NodeText",
					"Data": "​）可以直接从一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 实例化对象\n如果调用的是无参构造，则 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Activator.CreateInstance()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 只需要传入一个需要实例化对象的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对象即可"
				}
			]
		},
		{
			"ID": "20241214155144-9m1i7c4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214155144-9m1i7c4",
				"style": "line-height: 22px;",
				"updated": "20241214155147"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"获取类型失败！\");\n    return;\n}\n      \nReflectionSample.Test? obj = Activator.CreateInstance(type) as ReflectionSample.Test;\nConsole.WriteLine(obj?.str);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214155154-8siz01x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214155154-8siz01x",
				"updated": "20241214155346"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241214155157-gb0t901",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214155157-gb0t901",
				"style": "line-height: 22px;",
				"updated": "20241214155348"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "123\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214155352-uzn8d6x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214155352-uzn8d6x",
				"updated": "20241214155612"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果调用的是有参构造，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Activator.CreateInstance()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 需要先传入一个需要实例化对象的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对象，再在后续直接对照参数传入对象\n（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Activator.CreateInstance()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 参数列表是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240717231457-h5bb7m2",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "变长参数"
				},
				{
					"Type": "NodeText",
					"Data": "，因此可以接收足够多的传入到构造函数的参数）"
				}
			]
		},
		{
			"ID": "20241214155945-u6trp69",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20241214155945-u6trp69",
				"style": "color: var(--b3-card-warning-color); background-color: var(--b3-card-warning-background); --b3-parent-background: var(--b3-card-warning-background);",
				"updated": "20241214155946"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20241214155946-fua1jkp",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241214155946-fua1jkp",
						"updated": "20241214160206"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "type"
						},
						{
							"Type": "NodeText",
							"Data": "​ 参数后边传入的参数必须和要 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "type"
						},
						{
							"Type": "NodeText",
							"Data": "​ 的构造函数的参数列表对应，如果后续传入的参数有缺失、多余，或者错误，都会直接导致报错"
						}
					]
				}
			]
		},
		{
			"ID": "20241214155419-85qiegz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214155419-85qiegz",
				"style": "line-height: 22px;",
				"updated": "20241214155906"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Type? type = Type.GetType(\"ReflectionSample.Test\");\nif (type == null)\n{\n    Console.WriteLine(\"获取类型失败！\");\n    return;\n}\n// 无参构造\nReflectionSample.Test? obj = Activator.CreateInstance(type) as ReflectionSample.Test;\nConsole.WriteLine(\"1: \" + obj?.str);\n// 有参构造\nReflectionSample.Test? obj1 = Activator.CreateInstance(type, 99) as ReflectionSample.Test;\nConsole.WriteLine(\"2: \" + obj1?.Number);\nReflectionSample.Test? obj2 = Activator.CreateInstance(type, 888, \"ActivatorTest\") as ReflectionSample.Test;\nConsole.WriteLine(\"3.Number: \" + obj1?.Number);\nConsole.WriteLine(\"3.str: \" + obj2?.str);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214155907-kdfm81g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214155907-kdfm81g",
				"updated": "20241214155911"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241214155912-wxykfb5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214155912-wxykfb5",
				"style": "line-height: 22px;",
				"updated": "20241214155919"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1: 123\n2: 99     \n3.Number: 99\n3.str: ActivatorTest\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214170410-8ax8vvr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241214170410-8ax8vvr",
				"updated": "20241214173043"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建类库"
				}
			]
		},
		{
			"ID": "20241214170509-pe69omg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214170509-pe69omg",
				"updated": "20241214172536"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类库，顾名思义是类的集合仓库，类库项目会编译出 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dll"
				},
				{
					"Type": "NodeText",
					"Data": "​ 文件，它不会直接运行，而是被其他的项目调用其中的类与方法\n我们可以将一些通用的类和方法作为一个模块放到类库工程内，然后被其他的类调用，这样，这些通用的类和方法就可以跨工程使用\n将不同模块的代码划分到不同工程，也可以减少各个工程的编译时间，因为一个工程所需要编译的代码量减少了"
				}
			]
		},
		{
			"ID": "20241214172639-5pwapfv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214172639-5pwapfv",
				"updated": "20241214172707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Visual Studio 可以直接选择 类库 来创建类库工程"
				}
			]
		},
		{
			"ID": "20241214172636-6ij02be",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214172636-6ij02be",
				"updated": "20241214172636"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"style": "width: 544px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20241214172636-c4p2egh.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 544px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241214172711-gvqo5i2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214172711-gvqo5i2",
				"updated": "20241214172846"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果不使用 Visual Studio，也可以使用终端（cmd 或 powershell）去创建类库，在需要创建工程的路径下使用如下命令即可"
				}
			]
		},
		{
			"ID": "20241214172847-5l7hpfu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214172847-5l7hpfu",
				"style": "line-height: 22px;",
				"updated": "20241214173043"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cG93ZXJzaGVsbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "dotnet new classlib\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241212013047-rt8pul2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241212013047-rt8pul2",
				"name": "Assembly",
				"updated": "20241214172950"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Assembly"
				}
			]
		},
		{
			"ID": "20241212122735-scoxery",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241212122735-scoxery",
				"updated": "20241212122803"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "程序集类，主要用来加载其它程序集，加载后才能用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来使用其它程序集中的信息\n如果想要使用不是自己程序集中的内容，需要先加载程序集，比如 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".dll"
				},
				{
					"Type": "NodeText",
					"Data": "​ 文件(库文件)\n简单的把库文件看成一种代码仓库，它提供给使用者一些可以直接拿来用的变量、函数或类三种加载程序集的函数"
				}
			]
		},
		{
			"ID": "20241212122814-byrr7kg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241212122814-byrr7kg",
				"updated": "20241214172950"
			},
			"Children": [
				{
					"ID": "20241212122819-ztkhzq3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241212122819-ztkhzq3",
						"updated": "20241214162733"
					},
					"Children": [
						{
							"ID": "20241212122819-dpo8yq1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241212122819-dpo8yq1",
								"updated": "20241212122826"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加载在同一文件下的其它程序集"
								}
							]
						},
						{
							"ID": "20241212122826-1rufwmn",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241212122826-1rufwmn",
								"style": "line-height: 22px;",
								"updated": "20241214162733"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Assembly asembly1 = Assembly.Load(\"程序集名称\");\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20241212122822-v6z3ez6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241212122822-v6z3ez6",
						"updated": "20241214172950"
					},
					"Children": [
						{
							"ID": "20241212122822-5kf9nz3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241212122822-5kf9nz3",
								"updated": "20241214172950"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加载不在同一文件下的其它程序集"
								}
							]
						},
						{
							"ID": "20241212122833-v31tkrz",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241212122833-v31tkrz",
								"style": "line-height: 22px;",
								"updated": "20241214162732"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Assembly asembly2 = Assembly.LoadFrom(\"包含程序集清单的文件的名称或路径\");\nAssembly asembly3 = Assembly.LoadFile(\"要加载的文件的完全限定路径\");\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241214160526-r0v4mjt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214160526-r0v4mjt",
				"updated": "20241214161617"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设，目前存在如下的类库，代码如下："
				}
			]
		},
		{
			"ID": "20241214161518-2seamel",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214161518-2seamel",
				"style": "line-height: 22px;",
				"updated": "20241214161520"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace GetAssemblyTest\n{\n    class Test\n    {\n        private int i = 1;\n        public int j = 0;\n        public string str = \"123\";\n      \n        public Test() {}\n      \n        public Test(int i)\n        {\n            this.i = i;\n        }\n  \n        public Test(int i, string str) : this(i)\n        {\n            this.str = str;\n        }\n  \n        public void Speak()\n        {\n            Console.WriteLine(\"[无参重载]说话内容是：\" + str);\n        }\n\n        public void Speak(string speakText)\n        {\n            Console.WriteLine(\"[有参重载]说话内容是：\" + speakText);\n        }\n\n        public static int StaticTestFunc()\n        {\n            Console.WriteLine(\"静态方法调用测试\");\n            return 999;\n        }\n\n        public int Number \n        {\n            get =\u003e i;\n            set =\u003e i = value;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214161618-ydlx95m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214161618-ydlx95m",
				"updated": "20241214161936"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个类库工程处于另一个工程内，编译出来的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dll"
				},
				{
					"Type": "NodeText",
					"Data": "​ 文件位于："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "E:\\CodeField\\CSharpProjects\\GetAssemblyTest\\bin\\Debug\\net8.0"
				},
				{
					"Type": "NodeText",
					"Data": "​\n如果要在不直接引用这个工程的情况下调用上面的类，就可以通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Assembly"
				},
				{
					"Type": "NodeText",
					"Data": "​ 这个类来读取程序集，进而获取其 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ ，再反射调用各种成员"
				}
			]
		},
		{
			"ID": "20241214161938-i1a242d",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241214161938-i1a242d",
				"name": "assembly.GetTypes()",
				"updated": "20241214163002"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取程序集下所有的类型"
				}
			]
		},
		{
			"ID": "20241214162947-5a1yza2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214162947-5a1yza2",
				"updated": "20241214163002"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "assembly.GetTypes()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以获取一个程序集下的所有类型"
				}
			]
		},
		{
			"ID": "20241214162055-4ni5mf2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214162055-4ni5mf2",
				"style": "line-height: 22px;",
				"updated": "20241214162704"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Assembly assembly = Assembly.LoadFrom(\"E:/CodeField/CSharpProjects/GetAssemblyTest/bin/Debug/net8.0/GetAssemblyTest\");\nType[] types = assembly.GetTypes();\nfor (int i = 0; i \u003c types.Length; i++)\n{\n    Console.WriteLine(\"type\" + i + \": \" + types[i]);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214162705-n6l9b7j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214162705-n6l9b7j",
				"updated": "20241214162708"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241214162708-1jeo8p3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214162708-1jeo8p3",
				"style": "line-height: 22px;",
				"updated": "20241214162712"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "type0: GetAssemblyTest.Test\ntype1: GetAssemblyTest.Test1\ntype2: GetAssemblyTest.Test2\ntype3: GetAssemblyTest.Itest\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214162804-h50lwpj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241214162804-h50lwpj",
				"name": "assembly.GetType()",
				"updated": "20241214164606"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取程序集下的某一个类型"
				}
			]
		},
		{
			"ID": "20241214163007-1y0368p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214163007-1y0368p",
				"updated": "20241214164606"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "assembly.GetType()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 传入类名，获取程序集下类名对应的类型 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​\n接下来就可以通过反射，去反射实例化，调用其中的各种成员方法等等\n（注意！如果工程内没有引用外部的类库工程，我们不能直接写代码来调用外部类的方法，因为无法直接找到类型）"
				}
			]
		},
		{
			"ID": "20241214162834-4kb8qw1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214162834-4kb8qw1",
				"style": "line-height: 22px;",
				"updated": "20241214163711"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Assembly assembly = Assembly.LoadFrom(\"E:/CodeField/CSharpProjects/GetAssemblyTest/bin/Debug/net8.0/GetAssemblyTest\");\nType? testType = assembly.GetType(\"GetAssemblyTest.Test\");\nif (testType == null)\n{\n    Console.WriteLine(\"类型获取失败！\");\n    return;\n}\n      \nobject? test = Activator.CreateInstance(testType);\n// 调用反射得到的类的各种方法\nMethodInfo? info1 = testType.GetMethod(\"StaticTestFunc\");\nMethodInfo? info2 = testType.GetMethod(\"Speak\", new Type[0]);                       // 获取无参重载\nMethodInfo? info3 = testType.GetMethod(\"Speak\", new Type[1] { typeof(string) });    // 获取有参重载\nif (test != null)\n{\n    object? result = info1?.Invoke(null, null);                             // 调用静态有返回值方法\n    Console.WriteLine(\"result: \" + (result == null ? \"NULL\" : result));\n    result = info2?.Invoke(test, null);                                     // 调用无参无返回值方法\n    Console.WriteLine(\"result: \" + (result == null ? \"NULL\" : result));\n    result = info3?.Invoke(test, new object[] { \"通过反射调用的方法\" });     // 调用有参无返回值方法\n    Console.WriteLine(\"result: \" + (result == null ? \"NULL\" : result));\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214163712-sdh9e1u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214163712-sdh9e1u",
				"updated": "20241214163715"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241214163715-pyysqzh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214163715-pyysqzh",
				"style": "line-height: 22px;",
				"updated": "20241214163719"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "静态方法调用测试\nresult: 999\n[无参重载]说话内容是：123\nresult: NULL\n[有参重载]说话内容是：通过反射调用的方法\nresult: NULL\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}