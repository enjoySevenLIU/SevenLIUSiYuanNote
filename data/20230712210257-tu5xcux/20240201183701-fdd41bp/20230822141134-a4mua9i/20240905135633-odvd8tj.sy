{
	"ID": "20240905135633-odvd8tj",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240905135633-odvd8tj",
		"title": "CS4L21——特性",
		"type": "doc",
		"updated": "20241230032400"
	},
	"Children": [
		{
			"ID": "20241214191338-4crawcq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241214191338-4crawcq",
				"updated": "20241214192233"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20241214191345-cqyasbo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214191345-cqyasbo",
				"style": "line-height: 22px;",
				"updated": "20241214192233"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Attribute\t\t\t\t\t\t\t// 特性基类，声明特性类时需要继承此类\n[特性名()]\t\t\t\t\t\t\t// 添加特性语法\ntype.IsDefined()\t\t\t\t\t// 判断类似是否添加了某个特性\ntype.GetCustomAttribute()\t\t\t// 获取类型添加的特定特性信息\ntype.GetCustomAttributes()\t\t\t// 获取类型添加的所有特性信息\nmemberInfo.GetCustomAttribute()\t\t// 获取类型添加的特定特性信息\nmemberInfo.GetCustomAttributes()\t// 获取类型添加的所有特性信息\n[AttributeUsage()]\t\t\t\t\t// 限制自定义特性的使用范围\n[Obsolete]\t\t\t\t\t\t\t// 过时特性，被添加此特性的类或者方法等调用时会被警告或者报错\n[CallerFilePath]\t\t\t\t\t// 调用者信息特性，添加到需要得到哪个文件调用的参数（string类型，且需要初始化默认值）\n[CallerLineNumber]\t\t\t\t\t// 调用者信息特性，添加到需要得到哪个行号调用的参数（int类型，且需要初始化默认值）\n[CallerMemberName]\t\t\t\t\t// 调用者信息特性，添加到需要得到哪个函数调用的参数（string类型，且需要初始化默认值）\n[Conditional()]\t\t\t\t\t\t// 条件编译特性，需要传入#define的符号，如果此符号未定义，则调用添加此特性的方法不会执行\n[DllImport()]\t\t\t\t\t\t// 外部引用dll特性，需要传入外部的dll文件路径，修饰一个extern函数，一般用来调用C和C++的写好的方法\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240905135633-bux7h7k",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240905135633-bux7h7k",
				"name": "Attribute",
				"updated": "20241230032400"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特性"
				}
			]
		},
		{
			"ID": "20241214173131-mrdjz1e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214173131-mrdjz1e",
				"updated": "20241214173144"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特性是一种允许我们向程序的程序集添加元数据的语言结构，它是用于保存程序结构信息的某种特殊类型的类\n特性提供功能强大的方法以将声明信息与 C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 代码（类型、方法、属性等）相关联"
				}
			]
		},
		{
			"ID": "20241214173149-1cwkan8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214173149-1cwkan8",
				"updated": "20241230032329"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特性与程序实体关联后，即可在运行时使用反射（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20241211222414-xtri8j4",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20241211232312-0fw1lhs",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "MemberInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 等等）查询特性信息，\n特性的目的是告诉编译器把程序结构的某种元数据嵌入程序集中，它可以放置在几乎所有的声明中（类、变量、函数等等声明语句前）"
				}
			]
		},
		{
			"ID": "20241230032330-rms1spf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241230032330-rms1spf",
				"updated": "20241230032337"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特性的作用包括："
				}
			]
		},
		{
			"ID": "20241230032337-r870y7f",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241230032337-r870y7f",
				"updated": "20241230032400"
			},
			"Children": [
				{
					"ID": "20241230032400-7423ys6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241230032400-7423ys6",
						"updated": "20241230032400"
					},
					"Children": [
						{
							"ID": "20241230032400-eh7w6pk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241230032400-eh7w6pk",
								"updated": "20241230032400"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "标记和描述代码元素特性可以用来为代码提供额外信息。"
								}
							]
						}
					]
				},
				{
					"ID": "20241230032406-yqsu1qi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241230032406-yqsu1qi",
						"updated": "20241230032434"
					},
					"Children": [
						{
							"ID": "20241230032406-bq7r0iw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241230032406-bq7r0iw",
								"updated": "20241230032406"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "控制编译器行为特性可以用于影响编译器的某些行为，"
								}
							]
						},
						{
							"ID": "20241230032410-35cbi4f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241230032410-35cbi4f",
								"updated": "20241230032434"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "例如："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "[Obsolete]"
								},
								{
									"Type": "NodeText",
									"Data": "​：标记某个方法或类已被弃用，调用时会产生警告或错误。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "[Conditional]"
								},
								{
									"Type": "NodeText",
									"Data": "​：决定某段代码是否编译。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241214173157-hnxunkh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214173157-hnxunkh",
				"updated": "20241214190324"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单来说就是，特性本质上就是个类，我们可以利用特性类为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20241211000011-9wphlvo",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "元数据"
				},
				{
					"Type": "NodeText",
					"Data": " 添加额外信息\n比如一个类、成员变量、成员方法等等为他们添加更多的额外信息，之后可以通过反射来获取这些额外信息"
				}
			]
		},
		{
			"ID": "20241214173207-gb549fw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241214173207-gb549fw",
				"updated": "20241214180759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "声明自定义特性"
				}
			]
		},
		{
			"ID": "20241214173328-xqaiusa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214173328-xqaiusa",
				"updated": "20241214173426"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "声明特性类需要继承特性基类 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Attribute"
				},
				{
					"Type": "NodeText",
					"Data": "​，同时，特性类的命名需要添加后缀 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Attribute"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241214173429-z8vqweo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214173429-z8vqweo",
				"style": "line-height: 22px;",
				"updated": "20241214180759"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class CustomAttribute : Attribute\n{\n    // 特性中的成员一般根据需求来写\n    public string info;\n    public int number;\n\n    public CustomAttribute(string info)\n    {\n        this.info = info;\n    }\n\n    public void TestFun()\n    {\n        Console.WriteLine(\"特性的方法被执行了！\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214173348-tt6rzab",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241214173348-tt6rzab",
				"updated": "20241214190138"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特性的使用"
				}
			]
		},
		{
			"ID": "20241214180155-574m6z4",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241214180155-574m6z4",
				"updated": "20241214190138"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特性的添加"
				}
			]
		},
		{
			"ID": "20241214173650-928my4r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214173650-928my4r",
				"updated": "20241214180843"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本语法：在类、变量、函数声明语句前加上："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[特性名(参数列表)]"
				},
				{
					"Type": "NodeText",
					"Data": "​，表示它们具有该特性信息，它的本质就是在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "调用特性类的构造函数"
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				}
			]
		},
		{
			"ID": "20241214173756-d86yzip",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214173756-d86yzip",
				"updated": "20241214180026"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "添加特性时，特性类的后缀 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Attribute"
				},
				{
					"Type": "NodeText",
					"Data": "​ 在使用特性时可以省略掉"
				}
			]
		},
		{
			"ID": "20241214173827-206lcev",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214173827-206lcev",
				"style": "line-height: 22px;",
				"updated": "20241214190138"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "[Custom(\"这是 TestClass 类\")]\nclass TestClass \n{\n    [Custom(\"这是 TestClass.number 变量\")]\n    public int number = 0;\n\n    [Custom(\"这是 TestClass.MyClass 方法\")]\n    public void TestFun() {}\n\n    [Custom(\"这是 TestClass.Add 方法\")]\n    public int Add([Custom(\"这是 TestClass.Add 方法的参数 a\")] int a, int b)\n    {\n        return a + b;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214180000-5j61qpx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214180000-5j61qpx",
				"updated": "20241214180042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "TestClass"
				},
				{
					"Type": "NodeText",
					"Data": "​ 这个类型就被添加了特性，之后可以通过其对应的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对象获取这些类型"
				}
			]
		},
		{
			"ID": "20241214180845-h6musca",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214180845-h6musca",
				"updated": "20241214181112"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于特性类的公开变量，可以在添加特性时直接对特性类的某个公开变量赋值，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意，它和构造函数传参不一样！"
				},
				{
					"Type": "NodeText",
					"Data": "\n在参数列表左边赋值即可，可以赋值多个变量，即： "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[特性名(参数列表, 公开变量 = 值, ...)]"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241214180848-xql796c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214180848-xql796c",
				"style": "line-height: 22px;",
				"updated": "20241214181030"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "[Custom(\"这是 TestClass 类\", number = 10)]\nclass TestClass {}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214174409-ajkrtv1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241214174409-ajkrtv1",
				"name": "type.IsDefined()",
				"updated": "20241214175540"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "判断某个类型是否使用了某个特性"
				}
			]
		},
		{
			"ID": "20241214175510-rvdq2ps",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214175510-rvdq2ps",
				"updated": "20241214175540"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.IsDefined()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以判断某个类型是否使用了某个特性"
				}
			]
		},
		{
			"ID": "20241214174604-t60i7gk",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241214174604-t60i7gk",
				"updated": "20241214174736"
			},
			"Children": [
				{
					"ID": "20241214174607-3w3pr5x",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214174607-3w3pr5x",
						"updated": "20241214174607"
					},
					"Children": [
						{
							"ID": "20241214174607-88upw30",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214174607-88upw30",
								"updated": "20241214174633"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "参数一：特性的类型 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Type"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20241214174610-tuyop1e",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214174610-tuyop1e",
						"updated": "20241214174610"
					},
					"Children": [
						{
							"ID": "20241214174610-ia8ulag",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214174610-ia8ulag",
								"updated": "20241214174728"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "参数二：是否要顺着继承链向上搜索父类是否使用参数一传入的特性（属性和事件忽略此参数）"
								}
							]
						}
					]
				},
				{
					"ID": "20241214174728-wkqk8uf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214174728-wkqk8uf",
						"updated": "20241214174736"
					},
					"Children": [
						{
							"ID": "20241214174728-tc4cvla",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214174728-tc4cvla",
								"updated": "20241214174736"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回值：是否使用特性"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241214174421-5ik1a0r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214174421-5ik1a0r",
				"style": "line-height: 22px;",
				"updated": "20241214175517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "TestClass obj = new TestClass();\nType type = obj.GetType();\n// 判断是否使用了某个特性\nif (type.IsDefined(typeof(CustomAttribute), false))\n{\n    Console.WriteLine(\"该类型应用了Custom特性\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214174856-tj029af",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214174856-tj029af",
				"updated": "20241214174858"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241214174858-4oswudg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214174858-4oswudg",
				"style": "line-height: 22px;",
				"updated": "20241214174913"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "该类型应用了Custom特性\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214174955-r9kbkuf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241214174955-r9kbkuf",
				"name": "type.GetCustomAttributes()",
				"updated": "20241214191443"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取某个类型使用的所有特性"
				}
			]
		},
		{
			"ID": "20241214175614-t95prti",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214175614-t95prti",
				"updated": "20241214191025"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetCustomAttributes()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以获取此类型所有特性对象"
				}
			]
		},
		{
			"ID": "20241214175010-wy13217",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241214175010-wy13217",
				"updated": "20241214175443"
			},
			"Children": [
				{
					"ID": "20241214175443-tu9zsoq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214175443-tu9zsoq",
						"updated": "20241214175443"
					},
					"Children": [
						{
							"ID": "20241214175443-xs0jhdd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214175443-xs0jhdd",
								"updated": "20241214175454"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "参数一：是否要顺着继承链向上搜索父类使用的特性（属性和事件忽略此参数）"
								}
							]
						}
					]
				},
				{
					"ID": "20241214175506-i2e2pvm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214175506-i2e2pvm",
						"updated": "20241214175506"
					},
					"Children": [
						{
							"ID": "20241214175506-7d5130o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214175506-7d5130o",
								"updated": "20241214175608"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回值：使用的所有特性对象数组"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241214175816-kuop38l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214175816-kuop38l",
				"updated": "20241214175916"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认返回的是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object[]"
				},
				{
					"Type": "NodeText",
					"Data": "​，可以转成对应的特性类型对象，并执行特性中的成员变量和方法"
				}
			]
		},
		{
			"ID": "20241214175611-7pf3z47",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214175611-7pf3z47",
				"style": "line-height: 22px;",
				"updated": "20241214175755"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "TestClass obj = new TestClass();\nType type = obj.GetType();\nobject[] attributes = type.GetCustomAttributes(true);\nfor (int i = 0; i \u003c attributes.Length; i++)\n{\n    if (attributes[i] is CustomAttribute)\n    {\n        // 获取此类型拥有的特性的信息\n        Console.WriteLine((attributes[i] as CustomAttribute)?.info);\n        (attributes[i] as CustomAttribute)?.TestFun();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214175756-l5ros9d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214175756-l5ros9d",
				"updated": "20241214175759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241214175800-c4u3ut2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214175800-c4u3ut2",
				"style": "line-height: 22px;",
				"updated": "20241214191443"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "这是 MyClass 类\n特性的方法被执行了！type.GetCustomAttribute()\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214190209-9tac4pr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241214190209-9tac4pr",
				"name": "type.GetCustomAttribute()",
				"updated": "20241214191251"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取某个类型使用的某个特性"
				}
			]
		},
		{
			"ID": "20241214191008-89p8nd0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214191008-89p8nd0",
				"updated": "20241214191251"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "type.GetCustomAttribute()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以获取此类型特定的特性对象，它有泛型参数重载和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 参数重载"
				}
			]
		},
		{
			"ID": "20241214191058-cbqjrwf",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241214191058-cbqjrwf",
				"updated": "20241214191224"
			},
			"Children": [
				{
					"ID": "20241214191100-c9sxf8o",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214191100-c9sxf8o",
						"updated": "20241214191100"
					},
					"Children": [
						{
							"ID": "20241214191100-w0lmpqf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214191100-w0lmpqf",
								"updated": "20241214191133"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果使用泛型函数，则直接在泛型参数内填入特性名即可，返回值也是对应的特性"
								}
							]
						}
					]
				},
				{
					"ID": "20241214191133-0v6fa3f",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214191133-0v6fa3f",
						"updated": "20241214191133"
					},
					"Children": [
						{
							"ID": "20241214191133-29tmc3r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214191133-29tmc3r",
								"updated": "20241214191156"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Type"
								},
								{
									"Type": "NodeText",
									"Data": "​ 参数函数，需要传入特性对应的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Type"
								},
								{
									"Type": "NodeText",
									"Data": "​，返回值是 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "object"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20241214191157-v6of10b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214191157-v6of10b",
						"updated": "20241214191224"
					},
					"Children": [
						{
							"ID": "20241214191157-xbhbi88",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214191157-xbhbi88",
								"updated": "20241214191224"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "泛型参数重载和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Type"
								},
								{
									"Type": "NodeText",
									"Data": "​ 参数重载都有一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bool"
								},
								{
									"Type": "NodeText",
									"Data": "​ 参数，即是否要顺着继承链向上搜索父类使用的特性（属性和事件忽略此参数）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241214190931-pt4yaht",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20241214190931-pt4yaht",
				"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color); --b3-parent-background: var(--b3-card-error-background);",
				"updated": "20241214190931"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20241214190931-3l6zm3c",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20241214190931-3l6zm3c",
						"updated": "20241214191003"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "警告！如果这个特性被重复添加到这个类型上，那么使用此函数获取特性将会报错！"
						}
					]
				}
			]
		},
		{
			"ID": "20241214190222-ki3pq7b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214190222-ki3pq7b",
				"style": "line-height: 22px;",
				"updated": "20241214190925"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "TestClass obj = new TestClass();\nType type = obj.GetType();\n// 使用泛型尝试获取某个特性\nCustomAttribute? attributeObj1 = type.GetCustomAttribute\u003cCustomAttribute\u003e(true);\nConsole.WriteLine(attributeObj1?.info);\nattributeObj1?.TestFun();\n// 使用Type尝试获取某个特性\nobject? attributeObj2 = type.GetCustomAttribute(typeof(CustomAttribute), true);\nif (attributeObj2 != null \u0026\u0026 attributeObj2 is CustomAttribute)\n{\n    Console.WriteLine((attributeObj2 as CustomAttribute)?.info);\n    (attributeObj2 as CustomAttribute)?.TestFun();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214190741-grvuvyo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214190741-grvuvyo",
				"updated": "20241214190742"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241214190743-9gdpak7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214190743-9gdpak7",
				"style": "line-height: 22px;",
				"updated": "20241214190929"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "这是 TestClass 类\n特性的方法被执行了！\n这是 TestClass 类\n特性的方法被执行了！\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214185307-mn7zygf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"alias": "memberInfo.GetCustomAttributes()",
				"id": "20241214185307-mn7zygf",
				"name": "memberInfo.GetCustomAttribute()",
				"updated": "20241214191331"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取某个成员使用的特性"
				}
			]
		},
		{
			"ID": "20241214185808-s3s4jzc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214185808-s3s4jzc",
				"updated": "20241214190049"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果要获取类型中某个成员使用的特性，需要通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来获取 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20241211232312-0fw1lhs",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "MemberInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​（也可以是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20241212000538-um97wqb",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "FieldInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20241212004853-trn36cj",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "MethodInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 等等）\n然后通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MemberInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来调用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetCustomAttribute()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 或者 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetCustomAttributes()"
				},
				{
					"Type": "NodeText",
					"Data": "​，即可得到某个成员使用的特性"
				}
			]
		},
		{
			"ID": "20241214191237-lc6cq5l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214191237-lc6cq5l",
				"updated": "20241214191331"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参数和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20241214190209-9tac4pr",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "type.GetCustomAttribute()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 与 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20241214174955-r9kbkuf",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "type.GetCustomAttributes()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 一致"
				}
			]
		},
		{
			"ID": "20241214185805-d4pqqqv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214185805-d4pqqqv",
				"style": "line-height: 22px;",
				"updated": "20241214185807"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "TestClass obj = new TestClass();\nType type = obj.GetType();\nMemberInfo[] infos = type.GetMembers();\nfor (int i = 0; i \u003c infos.Length; i++)\n{\n    object[] attributes = infos[i].GetCustomAttributes(true);\n    for (int j = 0; j \u003c attributes.Length; j++)\n    {\n        if (attributes[j] is CustomAttribute)\n        {\n            // 获取此类型拥有的特性的信息\n            Console.WriteLine((attributes[j] as CustomAttribute)?.info);\n            (attributes[j] as CustomAttribute)?.TestFun();\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214190111-jryup0n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214190111-jryup0n",
				"updated": "20241214190115"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241214190115-ld81l2y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214190115-ld81l2y",
				"style": "line-height: 22px;",
				"updated": "20241214190119"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "这是 TestClass.MyClass 方法\n特性的方法被执行了！\n这是 TestClass.Add 方法\n特性的方法被执行了！\n这是 TestClass.number 变量\n特性的方法被执行了！\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214174237-9bsqyoc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241214174237-9bsqyoc",
				"name": "[AttributeUsage()]",
				"updated": "20241214184353"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "限制自定义特性的使用范围"
				}
			]
		},
		{
			"ID": "20241214174313-hgm7ewx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214174313-hgm7ewx",
				"updated": "20241214180234"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过为特性类添加 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[AttributeUsage()]"
				},
				{
					"Type": "NodeText",
					"Data": "​ 特性，可以限制其使用范围"
				}
			]
		},
		{
			"ID": "20241214180241-jxmhzf1",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241214180241-jxmhzf1",
				"updated": "20241214182620"
			},
			"Children": [
				{
					"ID": "20241214180300-he0wdm9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214180300-he0wdm9",
						"updated": "20241214182620"
					},
					"Children": [
						{
							"ID": "20241214180300-m3hqn3e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214180300-m3hqn3e",
								"updated": "20241214181219"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "参数一："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "validOn"
								},
								{
									"Type": "NodeText",
									"Data": "​ —— 特性能够添加在哪些地方（注意这里用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20230616144304-h2uystd",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "位或"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "|"
								},
								{
									"Type": "NodeText",
									"Data": "​ 来表示两个条件都可以）"
								}
							]
						},
						{
							"ID": "20241214180415-c0x23z4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214180415-c0x23z4",
								"updated": "20241214181211"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "此参数需要传入 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "AttributeTargets"
								},
								{
									"Type": "NodeText",
									"Data": "​ 枚举类型参数，可以传入多个，所有位或 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "|"
								},
								{
									"Type": "NodeText",
									"Data": "​ 连接"
								}
							]
						},
						{
							"ID": "20241214181214-fqjo21w",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241214181214-fqjo21w",
								"style": "line-height: 22px;",
								"updated": "20241214181709"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "[Flags]\npublic enum AttributeTargets\n{\n        Assembly = 1,\t\t\t\t\t// 特性可以添加在程序集前\n        Module = 2,\t\t\t\t\t\t// 特性可以添加在模块前\n        Class = 4,\t\t\t\t\t\t// 特性可以添加在类声明前\n        Struct = 8,\t\t\t\t\t\t// 特性可以添加在结构体声明前\n        Enum = 16,\t\t\t\t\t\t// 特性可以添加在枚举声明前\n        Constructor = 32,\t\t\t\t// 特性可以添加在构造函数声明前\n        Method = 64,\t\t\t\t\t// 特性可以添加在方法声明前\n        Property = 128,\t\t\t\t\t// 特性可以添加在属性声明前\n        Field = 256,\t\t\t\t\t// 特性可以添加在成员变量声明前\n        Event = 512,\t\t\t\t\t// 特性可以添加在事件声明前\n        Interface = 1024,\t\t\t\t// 特性可以添加在接口声明前\n        Parameter = 2048,\t\t\t\t// 特性可以添加在方法的参数前\n        Delegate = 4096,\t\t\t\t// 特性可以添加在委托前\n        ReturnValue = 8192,\t\t\t\t// 特性可以添加在方法的返回值前\n        GenericParameter = 16384,\t\t// 特性可以添加在泛型参数前\n        All = 32767\t\t\t\t\t\t// 特性可以添加在所有的目标前\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241214182327-svq7jkf",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241214182327-svq7jkf",
								"style": "line-height: 22px;",
								"updated": "20241214182620"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "[AttributeUsage(AttributeTargets.Class)]\nclass CustomAttribute : Attribute {}\n\n[Custom] \nclass TestClass {}\n\n[Custom]\t\t\t\t// error: 特性“Custom”对此声明类型无效。它仅对“类”声明有效。\nstruct TestStruct {}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241214181130-uf246sa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214181130-uf246sa",
				"updated": "20241214181141"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此外，还有两个公共变量可以赋值："
				}
			]
		},
		{
			"ID": "20241214181124-edd5nt2",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241214181124-edd5nt2",
				"updated": "20241214181145"
			},
			"Children": [
				{
					"ID": "20241214181145-q3v2v21",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214181145-q3v2v21",
						"updated": "20241214181145"
					},
					"Children": [
						{
							"ID": "20241214181145-sz1idhk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214181145-sz1idhk",
								"updated": "20241214181151"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "变量一："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "AllowMultiple"
								},
								{
									"Type": "NodeText",
									"Data": "​ —— 是否允许多个特性实例用在同一个目标上"
								}
							]
						},
						{
							"ID": "20241214181759-qtvhgqy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214181759-qtvhgqy",
								"updated": "20241214182301"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果此变量为 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "true"
								},
								{
									"Type": "NodeText",
									"Data": "​，则此特性可以一次在同一目标上重复添加多个"
								}
							]
						},
						{
							"ID": "20241214181845-n3cmnky",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241214181845-n3cmnky",
								"style": "line-height: 22px;",
								"updated": "20241214181943"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "[Custom(\"这是 TestClass 类\", number = 10)]\n[Custom(\"重复添加的类\")]\nclass TestClass {}\n\n[AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = true)]\nclass CustomAttribute : Attribute\n{\n    // 特性中的成员一般根据需求来写\n    public string info;\n    public int number;\n\n    public CustomAttribute(string info)\n    {\n        this.info = info;\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20241214181147-7ef0wzb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214181147-7ef0wzb",
						"updated": "20241214181147"
					},
					"Children": [
						{
							"ID": "20241214181147-3k7z2bb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214181147-3k7z2bb",
								"updated": "20241214181154"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "变量二："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Inherited"
								},
								{
									"Type": "NodeText",
									"Data": "​ —— 特性是否能被派生类和重写成员继承"
								}
							]
						},
						{
							"ID": "20241214182253-0zne24n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214182253-0zne24n",
								"updated": "20241214182315"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果此变量为 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "true"
								},
								{
									"Type": "NodeText",
									"Data": "​，父类添加的特性，在子类同样有效"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241214184353-2nh7lmb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241214184353-2nh7lmb",
				"updated": "20241214183111"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "系统自带特性"
				}
			]
		},
		{
			"ID": "20241214182638-i50d813",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241214182638-i50d813",
				"name": "[Obsolete]",
				"updated": "20241214183111"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "过时特性"
				}
			]
		},
		{
			"ID": "20241214182657-pzmb4ms",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214182657-pzmb4ms",
				"updated": "20241214182736"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "过时特性 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[Obsolete]"
				},
				{
					"Type": "NodeText",
					"Data": "​，用于提示用户使用的方法等成员已经过时，建议使用新方法，一般加在函数前的特性"
				}
			]
		},
		{
			"ID": "20241214182957-6bepq9n",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241214182957-6bepq9n",
				"updated": "20241214183111"
			},
			"Children": [
				{
					"ID": "20241214182958-hv3eq5q",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214182958-hv3eq5q",
						"updated": "20241214183052"
					},
					"Children": [
						{
							"ID": "20241214182958-hrlfzk7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214182958-hrlfzk7",
								"updated": "20241214183052"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "参数一："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "message"
								},
								{
									"Type": "NodeText",
									"Data": "​，调用过时内容时提示内容"
								}
							]
						}
					]
				},
				{
					"ID": "20241214183012-q5z9d2d",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214183012-q5z9d2d",
						"updated": "20241214183111"
					},
					"Children": [
						{
							"ID": "20241214183012-0wdvbqk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214183012-0wdvbqk",
								"updated": "20241214183111"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "参数二："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "error"
								},
								{
									"Type": "NodeText",
									"Data": "​，调用目标时是否报错（默认是警告）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241214182831-cutt5cs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214182831-cutt5cs",
				"style": "line-height: 22px;",
				"updated": "20241214182837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "[Obsolete]\nclass OldClass {}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214182737-marrz4d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214182737-marrz4d",
				"style": "line-height: 22px;",
				"updated": "20241214182901"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "OldClass old = new OldClass();\t\t// warning: “OldClass”已过时\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214182913-daqrjzu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"alias": "[CallerLineNumber],[CallerMemberName]",
				"id": "20241214182913-daqrjzu",
				"name": "[CallerFilePath]",
				"updated": "20241214184341"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "调用者信息特性"
				}
			]
		},
		{
			"ID": "20241214183255-2z3w7gt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214183255-2z3w7gt",
				"updated": "20241214183634"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以下特性只能为参数使用，且使用调用者信息特性的参数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "必须初始化为默认值"
				},
				{
					"Type": "NodeText",
					"Data": "！调用者信息特性会自动将对应参数的默认值改为相应的数据"
				}
			]
		},
		{
			"ID": "20241214183212-vynh0id",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241214183212-vynh0id",
				"updated": "20241214184249"
			},
			"Children": [
				{
					"ID": "20241214183250-cy84liv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214183250-cy84liv",
						"updated": "20241214184233"
					},
					"Children": [
						{
							"ID": "20241214183250-9liapxg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214183250-9liapxg",
								"updated": "20241214184233"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "得到哪个文件调用需要对参数添加 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "[CallerFilePath]"
								},
								{
									"Type": "NodeText",
									"Data": "​ 特性"
								}
							]
						}
					]
				},
				{
					"ID": "20241214183251-5kdgl1l",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214183251-5kdgl1l",
						"updated": "20241214184244"
					},
					"Children": [
						{
							"ID": "20241214183251-ik6ycyc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214183251-ik6ycyc",
								"updated": "20241214184244"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "得到哪一行调用需要对参数添加 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "[CallerLineNumber]"
								},
								{
									"Type": "NodeText",
									"Data": "​ 特性"
								}
							]
						}
					]
				},
				{
					"ID": "20241214183252-bs4sjue",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241214183252-bs4sjue",
						"updated": "20241214184249"
					},
					"Children": [
						{
							"ID": "20241214183252-sxke30x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241214183252-sxke30x",
								"updated": "20241214184249"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "得到哪个函数调用对参数添加 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "[CallerMemberName]"
								},
								{
									"Type": "NodeText",
									"Data": "​ 特性"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241214183212-874zbes",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214183212-874zbes",
				"updated": "20241214183242"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "using System.Runtime.CompilerServices;"
				},
				{
					"Type": "NodeText",
					"Data": "​，以上的特性一般作为函数参数的特性"
				}
			]
		},
		{
			"ID": "20241214183639-h4wylde",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214183639-h4wylde",
				"style": "line-height: 22px;",
				"updated": "20241214184126"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Runtime.CompilerServices;\n\nclass Program\n{\n    static void Main()\n    {\n        TestClass obj = new TestClass();\n        obj.SpeakCaller(\"测试调用者信息特性\");\n    }\n}\n\nclass TestClass \n{\n    public void SpeakCaller(\n        string str, \n        [CallerFilePath] string fileName = \"\", \n        [CallerLineNumber] int line = 0, \n        [CallerMemberName] string target = \"\")\n    {\n        Console.WriteLine(\"说话内容：\" + str);\n        Console.WriteLine(\"调用者所在文件：\" + fileName);\n        Console.WriteLine(\"调用者所在行数：\" + line);\n        Console.WriteLine(\"调用者函数：\" + target);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214183601-l500gd3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214183601-l500gd3",
				"updated": "20241214184052"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20241214184052-x4pmibr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214184052-x4pmibr",
				"style": "line-height: 22px;",
				"updated": "20241214184133"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "说话内容：测试调用者信息特性\n调用者所在文件：e:\\CodeField\\CSharpProjects\\CSharpTest\\Program.cs\n调用者所在行数：8\n调用者函数：Main\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214184341-wm9re0t",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241214184341-wm9re0t",
				"name": "[Conditional]",
				"updated": "20241214185245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "条件编译特性"
				}
			]
		},
		{
			"ID": "20241214184430-o9w0epm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214184430-o9w0epm",
				"updated": "20241214185245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "条件编译特性 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[Conditional]"
				},
				{
					"Type": "NodeText",
					"Data": "​，它会和预处理指令 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20241210231629-5uucys4",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "#define"
				},
				{
					"Type": "NodeText",
					"Data": "​ 配合使用，\n此特性需要传入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "#define"
				},
				{
					"Type": "NodeText",
					"Data": "​ 定义的符号，如果此符号未定义，则该函数不调用\n需要引用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "using System.Diagnostics;"
				},
				{
					"Type": "NodeText",
					"Data": "​，主要可以用在一些调试代码上，有时想执行有时不想执行的代码"
				}
			]
		},
		{
			"ID": "20241214184530-m1nkd8q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214184530-m1nkd8q",
				"style": "line-height: 22px;",
				"updated": "20241214184739"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#define Debug\nusing System.Runtime.CompilerServices;\n\nclass Program\n{\n    static void Main()\n    {\n        DebugFunc();\n    }\n\n    [Conditional(\"Debug\")]\n    static void DebugFunc()\n    {\n        Console.WriteLine(\"调试函数执行\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214184740-obalmq2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214184740-obalmq2",
				"updated": "20241214184811"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出（如果 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Debug"
				},
				{
					"Type": "NodeText",
					"Data": "​ 未定义，则不会输出此内容）："
				}
			]
		},
		{
			"ID": "20241214184743-exztugg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214184743-exztugg",
				"style": "line-height: 22px;",
				"updated": "20241214184747"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "调试函数执行\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241214184837-1hfw4cu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241214184837-1hfw4cu",
				"name": "[DllImport]",
				"updated": "20241214185254"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "外部Dll包特性"
				}
			]
		},
		{
			"ID": "20241214184849-f35rzk1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214184849-f35rzk1",
				"updated": "20241214185254"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[DllImport]"
				},
				{
					"Type": "NodeText",
					"Data": "​ 用来标记非 .NET(C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ") 的函数，表明该函数在一个外部的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dll"
				},
				{
					"Type": "NodeText",
					"Data": "​ 文件中定义，此特性需要传入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dll"
				},
				{
					"Type": "NodeText",
					"Data": "​ 文件所在路径\n一般用来调用 C 和 C++ 的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dll"
				},
				{
					"Type": "NodeText",
					"Data": "​ 包写好的方法，需要引用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "using System.Runtime.InteropServices;"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241214185109-y8bvbdz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241214185109-y8bvbdz",
				"updated": "20241214185155"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "固定写法如下（假设同级目录下存在一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Test.dll"
				},
				{
					"Type": "NodeText",
					"Data": "​ 文件）："
				}
			]
		},
		{
			"ID": "20241214184931-lq8zm04",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241214184931-lq8zm04",
				"style": "line-height: 22px;",
				"updated": "20241214185106"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Program\n{\n    [DllImport(\"Test.dll\")]\n    public static extern int Add(int a, int b);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}