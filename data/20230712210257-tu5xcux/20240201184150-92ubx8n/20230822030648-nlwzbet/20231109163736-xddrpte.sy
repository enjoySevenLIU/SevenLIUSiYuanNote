{
	"ID": "20231109163736-xddrpte",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20231109163736-xddrpte",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231109163736-xddrpte\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231109170905-qgvn8zt\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231109170852-2mzt3vg\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20231109170854-vxbhbd2\u0026quot;,\u0026quot;focusStart\u0026quot;:182,\u0026quot;focusEnd\u0026quot;:182\u0026#125;",
		"title": "UD4L5——C#类对象的序列化",
		"type": "doc",
		"updated": "20240717151608"
	},
	"Children": [
		{
			"ID": "20231109170905-qgvn8zt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231109170905-qgvn8zt",
				"updated": "20231109170924"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20231109170854-vxbhbd2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231109170854-vxbhbd2",
				"style": "line-height: 22px;",
				"updated": "20240320213148"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "BinaryFormatter                 //二进制序列化类\nbinaryFormatter.Serialize()     //将对象序列化为二进制字节数组，并传入到流内\nMemoryStream                    //内存流\nmemoryStream.GetBuffer()        //获取内存流的缓存\nmemoryStream.ToArray()\t\t\t//使用字节数组获取内存流内数据\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231109163736-7qcr9yq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231109163736-7qcr9yq",
				"updated": "20231109164005"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "申明类对象"
				}
			]
		},
		{
			"ID": "20231109164010-pdds2d1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231109164010-pdds2d1",
				"updated": "20231109165750"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：如果要使用C#自带的序列化2进制方法，申明类时需要添加"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref code",
					"TextMarkBlockRefID": "20230708154218-a79peh7",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "[System.Serializable]"
				},
				{
					"Type": "NodeText",
					"Data": "​特性\n"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "注意，如果类里有另外一个类或者结构体的成员，这些类或者结构体也必须要加上"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code text",
					"TextMarkTextContent": "[System.Serializable]"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "特性！！！"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20231109164101-t2wpumt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231109164101-t2wpumt",
				"style": "line-height: 22px;",
				"updated": "20231109165910"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "[System.Serializable]\npublic class Person\n{\n    public int age = 1;\n    public string name = \"唐老狮\";\n    public int[] ints = new int[] { 1, 2, 3, 4 };\n    public List\u003cint\u003e list = new List\u003cint\u003e() { 1, 2, 3, 4, 5 };\n    public Dictionary\u003cint, string\u003e dic = new Dictionary\u003cint, string\u003e() { { 1, \"123\" }, { 2, \"1223\" }, { 3, \"435345\" } };\n    public StructTest st = new StructTest(2, \"123\");\n    public ClassTest ct = new ClassTest();\n}\n//如果某个需要序列化的类里包括了这个结构体类型的成员，则该结构体也需要添加该特效\n[System.Serializable]\npublic struct StructTest\n{\n    public int i;\n    public string s;\n\n    public StructTest(int i, string s)\n    {\n        this.i = i;\n        this.s = s;\n    }\n}\n//如果某个需要序列化的类里包括了这个类的类型的成员，则该类也需要添加该特效\n[System.Serializable]\npublic class ClassTest\n{\n    public int i = 1;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231109164817-oi5ur77",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231109164817-oi5ur77",
				"name": "binaryFormatter.Serialize()",
				"updated": "20240717151608"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将对象进行2进制序列化"
				}
			]
		},
		{
			"ID": "20231109170911-zvw0z9h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231109170911-zvw0z9h",
				"updated": "20231109170912"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C#提供的类对象2进制序列化主要类是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BinaryFormatter"
				},
				{
					"Type": "NodeText",
					"Data": "​\n通过其中的序列化方法即可进行序列化生成字节数组"
				}
			]
		},
		{
			"ID": "20240717151339-gnnzylg",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240717151339-gnnzylg",
				"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);",
				"updated": "20240717151608"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240717151339-8hvqzpk",
					"Type": "NodeHeading",
					"HeadingLevel": 3,
					"Properties": {
						"id": "20240717151339-8hvqzpk",
						"updated": "20240717151608"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！"
						}
					]
				},
				{
					"ID": "20240717151349-dxmp64n",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240717151349-dxmp64n",
						"updated": "20240717151354"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "a",
							"TextMarkAHref": "https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter",
							"TextMarkTextContent": "BinaryFormatter"
						},
						{
							"Type": "NodeText",
							"Data": " 类型会带来风险，不建议将其用于数据处理。 即使应用程序认为自己正在处理的数据是可信的，\n也应尽快停止使用 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "BinaryFormatter"
						},
						{
							"Type": "NodeText",
							"Data": "​。 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "BinaryFormatter"
						},
						{
							"Type": "NodeText",
							"Data": "​ 不安全，无法确保安全。"
						}
					]
				},
				{
					"ID": "20240717151511-qu7hnae",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240717151511-qu7hnae",
						"updated": "20240717151608"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "最新的.NET版本已将 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "BinaryFormatter"
						},
						{
							"Type": "NodeText",
							"Data": "​ 标为过时的，而Unity内没有标注"
						}
					]
				},
				{
					"ID": "20240717151431-7ocoe4c",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240717151431-7ocoe4c",
						"updated": "20240717151458"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "详见："
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "a",
							"TextMarkAHref": "https://learn.microsoft.com/zh-cn/dotnet/standard/serialization/binaryformatter-security-guide",
							"TextMarkTextContent": "使用 BinaryFormatter 和相关类型时的反序列化风险 - .NET | Microsoft Learn"
						}
					]
				}
			]
		},
		{
			"ID": "20231109164836-oken1qe",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20231109164836-oken1qe",
				"updated": "20240717151345"
			},
			"Children": [
				{
					"ID": "20231109164917-z1z07fr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231109164917-z1z07fr",
						"name": "memoryStream.GetBuffer()",
						"updated": "20231109170218"
					},
					"Children": [
						{
							"ID": "20231109164917-w9k0var",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231109164917-w9k0var",
								"updated": "20231109165016"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法一：使用内存流得到2进制字节数组\n主要用于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "得到字节数组，可以用于网络传输"
								},
								{
									"Type": "NodeText",
									"Data": "\n新知识点"
								}
							]
						},
						{
							"ID": "20231109164815-x8cz91o",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20231109164815-x8cz91o",
								"updated": "20231109170218"
							},
							"Children": [
								{
									"ID": "20231109164836-3jntoio",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20231109164836-3jntoio",
										"name": "MemoryStream",
										"updated": "20231109170216"
									},
									"Children": [
										{
											"ID": "20231109170216-nynpmk8",
											"Type": "NodeHeading",
											"HeadingLevel": 3,
											"Properties": {
												"id": "20231109170216-nynpmk8",
												"updated": "20231109170216"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "内存流对象"
												}
											]
										},
										{
											"ID": "20231109164836-scfx95t",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20231109164836-scfx95t",
												"updated": "20231109170216"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "类名："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "MemoryStream"
												},
												{
													"Type": "NodeText",
													"Data": "​\n命名空间："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "System.IO"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								},
								{
									"ID": "20231109164836-jkhxvd7",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20231109164836-jkhxvd7",
										"name": "BinaryFormatter",
										"updated": "20231109170218"
									},
									"Children": [
										{
											"ID": "20231109170218-vbzn3b7",
											"Type": "NodeHeading",
											"HeadingLevel": 3,
											"Properties": {
												"id": "20231109170218-vbzn3b7",
												"updated": "20231109170218"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "2进制格式化对象"
												}
											]
										},
										{
											"ID": "20231109164836-d3ohfbc",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20231109164836-d3ohfbc",
												"updated": "20231109170218"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "类名："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "BinaryFormatter"
												},
												{
													"Type": "NodeText",
													"Data": "​\n命名空间："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "System.Runtime.Serialization.Formatters.Binary"
												},
												{
													"Type": "NodeText",
													"Data": "​\n主要方法：序列化方法 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Serialize()"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20231109165036-ssdlbwg",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231109165036-ssdlbwg",
								"style": "line-height: 22px;",
								"updated": "20231109170205"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Person p = new Person();\nusing (MemoryStream memoryStream = new MemoryStream())\n{\n    //实例化一个二进制序列化对象，并使用其序列化方法，传入内存流对象，和要序列化的对象\n    BinaryFormatter binaryFormatter = new BinaryFormatter();\n    binaryFormatter.Serialize(memoryStream, p);\n    //从内存流对象获取缓冲，得到字节数组\n    byte[] bytes = memoryStream.GetBuffer();\n    //存储字节\n    File.WriteAllBytes(Application.dataPath + \"/Lesson5.person\", bytes);\n    //关闭内存流\n    memoryStream.Close();\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231109164932-y4xc45a",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231109164932-y4xc45a",
						"updated": "20231109170722"
					},
					"Children": [
						{
							"ID": "20231109164932-16cb95x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231109164932-16cb95x",
								"updated": "20231109165018"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法二：使用文件流进行存储\n主要用于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "存储到文件中"
								}
							]
						},
						{
							"ID": "20231109165022-rf1vjrl",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231109165022-rf1vjrl",
								"style": "line-height: 22px;",
								"updated": "20231109170722"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Person p = new Person();\nusing (FileStream fileStream = new FileStream(Application.dataPath + \"/Lesson5_2.person\",\n                                              FileMode.OpenOrCreate,\n                                              FileAccess.Write))\n{\n    //实例化一个二进制序列化对象，并使用其序列化方法，传入文件流对象，和要序列化的对象，直接写入到文件流内\n    BinaryFormatter binaryFormatter = new BinaryFormatter();\n    binaryFormatter.Serialize(fileStream, p);\n    //将字节写入到文件里，并关闭文件流\n    fileStream.Flush();\n    fileStream.Close();\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231109170852-2mzt3vg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231109170852-2mzt3vg",
				"updated": "20240320212945"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "补充：从内存流内获取字节数组"
				}
			]
		},
		{
			"ID": "20240320213033-btuqzoa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320213033-btuqzoa",
				"updated": "20240320213109"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "内存流内若有数据，则可以从内存流内通过字节数组的形式获取数据"
				}
			]
		},
		{
			"ID": "20240320212946-mlt1k49",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240320212946-mlt1k49",
				"style": "line-height: 22px;",
				"updated": "20240320212945"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "byte[] bytes = memoryStream.ToArray();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}