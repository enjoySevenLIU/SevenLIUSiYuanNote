{
	"ID": "20230823173705-yu9cim0",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230823173705-yu9cim0",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230823173705-yu9cim0\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230823173705-zks8m6v\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230824173206-c7svwd7\u0026quot;,\u0026quot;scrollTop\u0026quot;:3160,\u0026quot;focusId\u0026quot;:\u0026quot;20230825145905-d7g5yk7\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;",
		"title": "UF_OLDL3——事件中心模块",
		"type": "doc",
		"updated": "20231223160928"
	},
	"Children": [
		{
			"ID": "20230823173705-zks8m6v",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230823173705-zks8m6v",
				"updated": "20230823174043"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事件中心"
				}
			]
		},
		{
			"ID": "20230823174043-ush72k6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823174043-ush72k6",
				"updated": "20230823193142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事件中心是基于观察者设计模式来设计的，目的是降低程序耦合性，减少程序复杂度，会使用委托，字典"
				}
			]
		},
		{
			"ID": "20230823192748-yrpwl2m",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230823192748-yrpwl2m",
				"updated": "20230823192801"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为何要用事件中心"
				}
			]
		},
		{
			"ID": "20230823192600-x65bvuj",
			"Type": "NodeSuperBlock",
			"Properties": {
				"id": "20230823192600-x65bvuj",
				"updated": "20230823192556"
			},
			"Children": [
				{
					"Type": "NodeSuperBlockOpenMarker"
				},
				{
					"Type": "NodeSuperBlockLayoutMarker",
					"Data": "col"
				},
				{
					"ID": "20230823185200-63cek01",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230823185200-63cek01",
						"updated": "20230823192611"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在以前，没有事件中心的时候，\n面对一个对象被修改时其它对象要做自动更新的问题：\n例如一个怪物死亡，需要让其它对象例如玩家执行什么方法，\n我们可能就会让怪物关联这些对象，然后在死亡的方法里调用这些对象"
						}
					]
				},
				{
					"ID": "20230823192556-jt5qwk0",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230823192556-jt5qwk0",
						"updated": "20230823192556"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "​"
						},
						{
							"Type": "NodeImage",
							"Data": "span",
							"Properties": {
								"parent-style": "max-width: 229px;",
								"style": "width: 219px;"
							},
							"Children": [
								{
									"Type": "NodeBang"
								},
								{
									"Type": "NodeOpenBracket"
								},
								{
									"Type": "NodeLinkText",
									"Data": "image"
								},
								{
									"Type": "NodeCloseBracket"
								},
								{
									"Type": "NodeOpenParen"
								},
								{
									"Type": "NodeLinkDest",
									"Data": "assets/image-20230823192556-yc5fl0p.png"
								},
								{
									"Type": "NodeCloseParen"
								}
							]
						},
						{
							"Type": "NodeKramdownSpanIAL",
							"Data": "{: style=\"width: 219px;\" parent-style=\"max-width: 229px;\"}"
						},
						{
							"Type": "NodeText",
							"Data": "​\n"
						}
					]
				},
				{
					"Type": "NodeSuperBlockCloseMarker"
				}
			]
		},
		{
			"ID": "20230823192428-gruza3v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823192428-gruza3v",
				"updated": "20230823192435"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是，这种方法让几个不相关的类之间的耦合度增加了，修改其中一个类，就有可能影响另几个类，这显然不利于我们程序后续的编写和维护\n基于观察者设计模式来设计的事件中心可以解决这种"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "一个对象状态改变给其他对象通知的问题"
				}
			]
		},
		{
			"ID": "20230823173737-arzt3a6",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230823173737-arzt3a6",
				"updated": "20230823173805"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "观察者设计模式"
				}
			]
		},
		{
			"ID": "20230823185518-wpxahu6",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230823185518-wpxahu6",
				"updated": "20230823200145"
			},
			"Children": [
				{
					"ID": "20230823185709-ybafl0q",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230823185709-ybafl0q",
						"updated": "20230823185724"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "a",
							"TextMarkAHref": "https://www.runoob.com/design-pattern/observer-pattern.html",
							"TextMarkTextContent": "观察者模式 | 菜鸟教程 (runoob.com)"
						}
					]
				},
				{
					"ID": "20230823185518-eizjrm0",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230823185518-eizjrm0",
						"updated": "20230823185518"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "观察者模式是一种行为型设计模式，它定义了一种一对多的依赖关系，当一个对象的状态发生改变时，其所有依赖者都会收到通知并自动更新。"
						}
					]
				},
				{
					"ID": "20230823185518-yt5moas",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230823185518-yt5moas",
						"updated": "20230823200145"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。\n比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。"
						}
					]
				},
				{
					"ID": "20230823185543-uuv83kn",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230823185543-uuv83kn",
						"updated": "20230823185543"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "意图："
						},
						{
							"Type": "NodeText",
							"Data": "定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。"
						}
					]
				},
				{
					"ID": "20230823185543-68ty4w4",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230823185543-68ty4w4",
						"updated": "20230823185543"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "主要解决："
						},
						{
							"Type": "NodeText",
							"Data": "一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。"
						}
					]
				},
				{
					"ID": "20230823185543-xn6ifq7",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230823185543-xn6ifq7",
						"updated": "20230823185543"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "何时使用："
						},
						{
							"Type": "NodeText",
							"Data": "一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。"
						}
					]
				},
				{
					"ID": "20230823185543-w8111il",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230823185543-w8111il",
						"updated": "20230823185600"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "优点："
						},
						{
							"Type": "NodeText",
							"Data": "\n1、观察者和被观察者是抽象耦合的。\n2、建立一套触发机制。"
						}
					]
				},
				{
					"ID": "20230823185543-egdfcob",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230823185543-egdfcob",
						"updated": "20230823185609"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "缺点："
						},
						{
							"Type": "NodeText",
							"Data": "\n1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。\n2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。\n3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。"
						}
					]
				},
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				}
			]
		},
		{
			"ID": "20230823192536-xt6j1v2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230823192536-xt6j1v2",
				"updated": "20230823192945"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事件中心的思路"
				}
			]
		},
		{
			"ID": "20230823192858-o9mojwf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823192858-o9mojwf",
				"updated": "20230823193100"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "还是假设我们需要一个怪物对象死亡后，玩家，任务记录，和其它需要执行相对应的方法\n"
				}
			]
		},
		{
			"ID": "20230823193439-230xxbu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823193439-230xxbu",
				"updated": "20230823193439"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设我们已经有了一个事件中心"
				}
			]
		},
		{
			"ID": "20230823193103-vhn804d",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230823193103-vhn804d",
				"updated": "20230823195459"
			},
			"Children": [
				{
					"ID": "20230823193439-ptyohia",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230823193439-ptyohia",
						"updated": "20230823195440"
					},
					"Children": [
						{
							"ID": "20230823193439-qpilh59",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230823193439-qpilh59",
								"updated": "20230823195440"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "玩家，任务记录，和其它这三个对象，它们需要提前告知事件中心：我们要监听 怪物死亡事件，"
								}
							]
						}
					]
				},
				{
					"ID": "20230823193441-4sf2fco",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230823193441-4sf2fco",
						"updated": "20230823193946"
					},
					"Children": [
						{
							"ID": "20230823193441-s0i7lkc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230823193441-s0i7lkc",
								"updated": "20230823193946"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "之后怪物对象死亡，怪物将怪物死亡事件告诉给事件中心，\n"
								}
							]
						}
					]
				},
				{
					"ID": "20230823193441-bf6p3mg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230823193441-bf6p3mg",
						"updated": "20230823195456"
					},
					"Children": [
						{
							"ID": "20230823193441-snzosq8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230823193441-snzosq8",
								"updated": "20230823195456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "事件中心接收到怪物死亡事件后，发现玩家，任务记录，和其它这三个对象要在这件事后执行方法"
								}
							]
						}
					]
				},
				{
					"ID": "20230823193540-r4zh80v",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230823193540-r4zh80v",
						"updated": "20230823195459"
					},
					"Children": [
						{
							"ID": "20230823193540-8rfjpo1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230823193540-8rfjpo1",
								"updated": "20230823195459"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "事件中心告诉玩家，任务记录，和其它这三个对象：应该触发怪物死亡事件之后要执行的方法了"
								}
							]
						}
					]
				},
				{
					"ID": "20230823193653-o0n4j6o",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230823193653-o0n4j6o"
					},
					"Children": [
						{
							"ID": "20230823193653-kpn0vnf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230823193653-kpn0vnf",
								"updated": "20230823193708"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "玩家，任务记录，和其它这三个对象执行怪物对象死亡后需要执行相对应的方法"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230823193908-p35vn21",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823193908-p35vn21",
				"updated": "20230823194211"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以上是使用事件中心处理一次"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "color: var(--b3-protyle-inline-strong-color); font-weight: bold; background-color: var(--b3-theme-background); font-family: var(--b3-font-family);"
					},
					"TextMarkType": "text",
					"TextMarkTextContent": "一个对象状态改变给其他对象通知"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"color: var(--b3-protyle-inline-strong-color); font-weight: bold; background-color: var(--b3-theme-background); font-family: var(--b3-font-family);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "，其它的类似的情况也可以用这种思路来进行"
				}
			]
		},
		{
			"ID": "20230823194036-jotzbmm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823194036-jotzbmm",
				"updated": "20230823213415"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到，使用事件中心可以避免几个毫不相关的类关联起来\n对象只要向事件中心"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "告知要监听什么事件"
				},
				{
					"Type": "NodeText",
					"Data": "，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "告知什么事件发生了"
				},
				{
					"Type": "NodeText",
					"Data": "，\n之后就由"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "事件中心传达监听者需要执行方法了（事件中心也不需要知道这个方法是什么）"
				},
				{
					"Type": "NodeText",
					"Data": "\n对象和事件中心只需要传达事件和委托，而不需要知道除了自己以外的类要执行什么方法"
				}
			]
		},
		{
			"ID": "20230823194434-5eu92e2",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230823194434-5eu92e2",
				"updated": "20230823195745"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "事件中心模块"
				}
			]
		},
		{
			"ID": "20230823212915-ixfsq9d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823212915-ixfsq9d",
				"updated": "20230823212925"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "知识点：字典，委托"
				}
			]
		},
		{
			"ID": "20230823212915-4svpgsl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823212915-4svpgsl",
				"updated": "20230823213217"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用：通过一个指定的事件名，设置事件监听委托，当有对象使用该事件名触发事件时，执行该事件名对应的委托里的所有方法"
				}
			]
		},
		{
			"ID": "20230825145901-00iy8q3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230825145901-00iy8q3",
				"updated": "20230825145901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用方法："
				}
			]
		},
		{
			"ID": "20230823212915-5z9ov1a",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230823212915-5z9ov1a",
				"updated": "20230825145901"
			},
			"Children": [
				{
					"ID": "20230825145901-domhk3y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230825145901-domhk3y",
						"updated": "20230825145901"
					},
					"Children": [
						{
							"ID": "20230825145901-hqi7go1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145901-hqi7go1",
								"updated": "20230825145901"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "添加事件监听，传入事件名和用来处理事件的委托函数（"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "需要object类型参数，传入触发事件者的消息，用于监听者区分不同对象触发的消息"
								},
								{
									"Type": "NodeText",
									"Data": "）\n"
								}
							]
						}
					]
				},
				{
					"ID": "20230825145902-ef2orr7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230825145902-ef2orr7"
					},
					"Children": [
						{
							"ID": "20230825145902-xy8g4s9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145902-xy8g4s9"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "移除事件监听，要注意！至少要在"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-font-background1);"
									},
									"TextMarkType": "strong block-ref text",
									"TextMarkBlockRefID": "20230708151011-urczphz",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "对象销毁生命函数"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-font-background1);\"}"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "里设置移除对应的事件监听，否则在监听者被销毁后，还执行其委托会造成内存泄漏等问题！"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								},
								{
									"Type": "NodeText"
								}
							]
						}
					]
				},
				{
					"ID": "20230825145903-rjpo0z0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230825145903-rjpo0z0"
					},
					"Children": [
						{
							"ID": "20230825145903-b1xaflf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145903-b1xaflf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "触发事件，触发者"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "需要传入自己的消息（object）提供给监听者"
								},
								{
									"Type": "NodeText",
									"Data": "，若字典内存在该事件名，就执行该事件名对应的委托\n"
								}
							]
						}
					]
				},
				{
					"ID": "20230825145905-wkhn393",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230825145905-wkhn393"
					},
					"Children": [
						{
							"ID": "20230825145905-d7g5yk7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145905-d7g5yk7"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "清空事件中心，一般用于过场景时"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230823214559-s32iidt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823214559-s32iidt",
				"updated": "20230824173039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：\n"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "添加事件监听一定要配套移除事件监听，至少要在"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-font-background1);"
					},
					"TextMarkType": "strong block-ref text",
					"TextMarkBlockRefID": "20230708151011-urczphz",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "对象销毁生命函数"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-font-background1);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "里设置移除对应的事件监听，否则在监听者被销毁后，还执行其委托会造成内存泄漏等问题！"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				},
				{
					"Type": "NodeText"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "这意味着，事件中心模块使用匿名函数必须慎重！因为匿名函数不能移除，只能全部清理！"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				},
				{
					"Type": "NodeText"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "要注意确认输入的事件名是否正确！以确保事件正常触发"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20230823195745-mgf7569",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230823195745-mgf7569",
				"updated": "20230823214243"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Collections.Generic;\nusing UnityEngine.Events;\n\n/// \u003csummary\u003e\n/// 事件中心模块\n/// \u003c/summary\u003e\npublic class EventCenter : BaseManager\u003cEventCenter\u003e\n{\n    /// \u003csummary\u003e\n    /// 存储事件名字和监听事件的执行委托的字典，键为事件名字，值为监听这个事件对应的委托函数们\n    /// \u003c/summary\u003e\n    private Dictionary\u003cstring, UnityAction\u003cobject\u003e\u003e eventDic = new Dictionary\u003cstring, UnityAction\u003cobject\u003e\u003e();\n\n    /// \u003csummary\u003e\n    /// 添加事件监听，必须要设置对应的移除事件监听！至少要在被销毁的生命周期内执行！以免出现问题\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"eventName\"\u003e事件的名字\u003c/param\u003e\n    /// \u003cparam name=\"action\"\u003e准备用来处理事件的委托函数(需要object参数，用于传入触发事件者的消息)\u003c/param\u003e\n    public void AddEventListener(string eventName, UnityAction\u003cobject\u003e action)\n    {\n        //已经存在该事件，就直接把传入的方法加进对应的委托内\n        if (eventDic.ContainsKey(eventName))\n        {\n            eventDic[eventName] += action;\n        }\n        //没有该事件，在字典内直接添加键值对\n        else\n        {\n            eventDic.Add(eventName, action);\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 事件触发\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"eventName\"\u003e哪一个名字的事件触发了\u003c/param\u003e\n    /// \u003cparam name=\"info\"\u003e传入自己的相关消息，可以用于监听者区分不同对象\u003c/param\u003e\n    public void EventTrigger(string eventName, object info) \n    {\n        //若字典内存在这个事件，就执行其中的所有事件\n        if (eventDic.ContainsKey(eventName))\n        {\n            eventDic[eventName].Invoke(info);\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 移除对应的事件监听\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"eventName\"\u003e事件名\u003c/param\u003e\n    /// \u003cparam name=\"action\"\u003e要移除的方法(需要object参数)\u003c/param\u003e\n    public void RemoveEventListener(string eventName, UnityAction\u003cobject\u003e action)\n    {\n        if (eventDic.ContainsKey(eventName))\n            eventDic[eventName] -= action;\n    }\n\n    /// \u003csummary\u003e\n    /// 清空事件中心，主要用在切换场景时\n    /// \u003c/summary\u003e\n    public void Clear()\n    {\n        eventDic.Clear();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230824161031-qd6k4g1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230824161031-qd6k4g1",
				"updated": "20230824161032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "优化装箱拆箱的事件中心模块"
				}
			]
		},
		{
			"ID": "20230824161033-fy4295c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230824161033-fy4295c",
				"updated": "20230824173204"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在原来的事件中心模块内，触发事件者要上传的所用的参数是object，这不可避免的会遇到装箱拆箱的问题（值类型和引用类型之间的问题）\n因此我们需要利用泛型来解决我们的方法"
				}
			]
		},
		{
			"ID": "20230824173157-nzpch3q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230824173157-nzpch3q",
				"updated": "20230824173544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于新的泛型方法实现和原来的旧事件中心模块实现方法有冲突（两者的数据不能共通，原事件触发方法被其泛型方法屏蔽），两者难以共存，\n因此在原有的基础上重写了事件中心模块，和原来的事件中心模块并不兼容！"
				}
			]
		},
		{
			"ID": "20230825145847-gvxdoav",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230825145847-gvxdoav",
				"updated": "20230825145847"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用方法："
				}
			]
		},
		{
			"ID": "20230825145843-2g6qxrw",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230825145843-2g6qxrw",
				"updated": "20230825145847"
			},
			"Children": [
				{
					"ID": "20230825145847-oy18azo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230825145847-oy18azo",
						"updated": "20230825145847"
					},
					"Children": [
						{
							"ID": "20230825145847-1kvufbb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145847-1kvufbb",
								"updated": "20230825145847"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "添加泛型事件监听，传入事件名和用来处理事件的委托函数（"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "由泛型参数决定传入触发事件者的消息参数的类型，用于监听者区分不同对象触发的消息"
								},
								{
									"Type": "NodeText",
									"Data": "）\n"
								}
							]
						}
					]
				},
				{
					"ID": "20230825145848-n2k8z4b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230825145848-n2k8z4b"
					},
					"Children": [
						{
							"ID": "20230825145848-bwczhub",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145848-bwczhub"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "添加无参事件监听，传入事件名和用来处理事件的委托函数（触发者不需要传入任何参数）\n"
								}
							]
						}
					]
				},
				{
					"ID": "20230825145848-3tb8zs6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230825145848-3tb8zs6"
					},
					"Children": [
						{
							"ID": "20230825145848-72tg8o7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145848-72tg8o7"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "移除泛型事件监听，"
								},
								{
									"Type": "NodeText",
									"Data": "传入事件名和用来处理事件的委托函数（"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "由泛型参数决定传入触发事件者的消息参数的类型，用于监听者区分不同对象触发的消息）"
								},
								{
									"Type": "NodeText"
								}
							]
						}
					]
				},
				{
					"ID": "20230825145848-ibynqzw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230825145848-ibynqzw"
					},
					"Children": [
						{
							"ID": "20230825145848-3rs7qx9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145848-3rs7qx9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "移除无参事件监听，传入事件名和用来处理事件的委托函数\n"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "注意！至少要在"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-font-background1);"
									},
									"TextMarkType": "strong block-ref text",
									"TextMarkBlockRefID": "20230708151011-urczphz",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "对象销毁生命函数"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-font-background1);\"}"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "里设置移除对应的事件监听，否则在监听者被销毁后，还执行其委托会造成内存泄漏等问题"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								},
								{
									"Type": "NodeText"
								}
							]
						}
					]
				},
				{
					"ID": "20230825145852-6yy2w37",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230825145852-6yy2w37"
					},
					"Children": [
						{
							"ID": "20230825145852-16ykugy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145852-16ykugy"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "触发泛型事件，触发者"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "需要传入自己的消息（类型由泛型决定）提供给监听者"
								},
								{
									"Type": "NodeText",
									"Data": "，若字典内存在该事件名，就执行该事件名对应的委托\n"
								}
							]
						}
					]
				},
				{
					"ID": "20230825145853-r1azvyp",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230825145853-r1azvyp"
					},
					"Children": [
						{
							"ID": "20230825145853-5b0il7p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145853-5b0il7p"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "触发无参事件，触发者不需要传入任何参数，若字典内存在该事件名，就执行该事件名对应的委托\n"
								}
							]
						}
					]
				},
				{
					"ID": "20230825145853-vm0ug2u",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20230825145853-vm0ug2u"
					},
					"Children": [
						{
							"ID": "20230825145853-vyc11zt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145853-vyc11zt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "清空事件中心，一般用于过场景时"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230824174144-ncxgiao",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230824174144-ncxgiao",
				"updated": "20230825145327"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意："
				},
				{
					"Type": "NodeText"
				}
			]
		},
		{
			"ID": "20230825145112-hfccizy",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230825145112-hfccizy",
				"updated": "20230825145726"
			},
			"Children": [
				{
					"ID": "20230825145112-8cjuzo3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230825145112-8cjuzo3"
					},
					"Children": [
						{
							"ID": "20230825145108-0in1v29",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145108-0in1v29",
								"updated": "20230825145119"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "添加事件监听一定要配套移除事件监听，至少要在"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-font-background1);"
									},
									"TextMarkType": "strong block-ref text",
									"TextMarkBlockRefID": "20230708151011-urczphz",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "对象销毁生命函数"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-font-background1);\"}"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "里设置移除对应的事件监听，\n否则在监听者被销毁后，还执行其委托会造成内存泄漏等问题！"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								},
								{
									"Type": "NodeText"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "这意味着，事件中心模块使用匿名函数必须慎重！因为匿名函数不能移除，只能全部清理！"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								}
							]
						}
					]
				},
				{
					"ID": "20230825145115-tvqtxrh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230825145115-tvqtxrh"
					},
					"Children": [
						{
							"ID": "20230825145115-ylpuhyy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145115-ylpuhyy"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "要注意确认输入的事件名是否正确！以确保事件正常触发"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
								},
								{
									"Type": "NodeText"
								}
							]
						}
					]
				},
				{
					"ID": "20230825145116-8du52h0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230825145116-8du52h0",
						"updated": "20230825145726"
					},
					"Children": [
						{
							"ID": "20230825145116-uc92pxd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230825145116-uc92pxd",
								"updated": "20230825145726"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "注意！一个事件所用的监听函数一定是对应唯一一个参数类型（哪怕是无参的）\n或者说，对于同一事件，所有监听者和所有上传者所使用的泛型参数必须一致（无参的也必须都是无参）"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								},
								{
									"Type": "NodeText"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "否则，触发者上传事件后执行监听委托时会出现报错！"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230824173545-a0416tc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230824173545-a0416tc",
				"updated": "20230824173616"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Collections.Generic;\nusing UnityEngine.Events;\n\n/// \u003csummary\u003e\n/// 空接口，用于作为两种事件的父类，使两种事件在事件中心的字典内作为值时，可以使用该类型替换，使两者可以一起被存储于一个字典内\n/// \u003c/summary\u003e\npublic interface IEventInfo { }\n\n/// \u003csummary\u003e\n/// 泛型事件类，让传入事件中心的监听函数可以使用泛型来决定触发者传入的参数的类型，而不使用object，避免装箱拆箱，需要继承非泛型接口\n/// \u003c/summary\u003e\n/// \u003ctypeparam name=\"T\"\u003e触发者传入的参数类型\u003c/typeparam\u003e\npublic class EventInfo\u003cT\u003e : IEventInfo\n{\n    public UnityAction\u003cT\u003e actions;\n\n    public EventInfo(UnityAction\u003cT\u003e action)\n    {\n        actions += action;\n    }\n}\n\n/// \u003csummary\u003e\n/// 无参事件类，用于不需要触发者传入消息参数的监听函数，需要继承和泛型事件类相同的父接口\n/// \u003c/summary\u003e\npublic class EventInfo : IEventInfo\n{\n    public UnityAction actions;\n    public EventInfo(UnityAction action)\n    {\n        actions += action;\n    }\n}\n\n/// \u003csummary\u003e\n/// 事件中心模块\n/// \u003c/summary\u003e\npublic class EventCenter : BaseManager\u003cEventCenter\u003e\n{\n    /// \u003csummary\u003e\n    /// 存储事件名字和泛型监听事件的执行委托的字典，键为事件名字，值为监听这个事件对应的泛型委托函数们\n    /// \u003c/summary\u003e\n    private Dictionary\u003cstring, IEventInfo\u003e eventDic = new Dictionary\u003cstring, IEventInfo\u003e();\n\n    /// \u003csummary\u003e\n    /// 添加泛型事件监听，使用泛型来决定触发者需要传入参数的类型，注意要设置对应的移除事件监听！\n    /// \u003c/summary\u003e\n    /// \u003ctypeparam name=\"T\"\u003e触发者要传入的消息参数的类型\u003c/typeparam\u003e\n    /// \u003cparam name=\"eventName\"\u003e事件的名字\u003c/param\u003e\n    /// \u003cparam name=\"action\"\u003e准备用来处理事件的委托函数(由泛型参数决定类型，用于传入触发事件者的消息)\u003c/param\u003e\n    public void AddEventListener\u003cT\u003e(string eventName, UnityAction\u003cT\u003e action)\n    {\n        //已经存在该事件，就直接把传入的方法加进对应的委托内\n        if (eventDic.ContainsKey(eventName))\n        {\n            (eventDic[eventName] as EventInfo\u003cT\u003e).actions += action;\n        }\n        //没有该事件，在字典内直接添加键值对\n        else\n        {\n            eventDic.Add(eventName, new EventInfo\u003cT\u003e(action));\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 添加无参事件监听，触发者不需要传入参数，必须要设置对应的移除事件监听！至少要在被销毁的生命周期内执行！以免出现问题\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"eventName\"\u003e事件的名字\u003c/param\u003e\n    /// \u003cparam name=\"action\"\u003e准备用来处理事件的委托函数(触发者不传入参数)\u003c/param\u003e\n    public void AddEventListener(string eventName, UnityAction action)\n    {\n        if (eventDic.ContainsKey(eventName))\n        {\n            (eventDic[eventName] as EventInfo).actions += action;\n        }\n        else\n        {\n            eventDic.Add(eventName, new EventInfo(action));\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 泛型事件触发\n    /// \u003c/summary\u003e\n    /// \u003ctypeparam name=\"T\"\u003e触发者传入的消息参数类型\u003c/typeparam\u003e\n    /// \u003cparam name=\"eventName\"\u003e哪一个名字的事件触发了\u003c/param\u003e\n    /// \u003cparam name=\"info\"\u003e传入自己的相关消息，可以用于监听者区分不同对象\u003c/param\u003e\n    public void EventTrigger\u003cT\u003e(string eventName, T info)\n    {\n        //若字典内存在这个事件，就执行其中的所有事件\n        if (eventDic.ContainsKey(eventName))\n        {\n            (eventDic[eventName] as EventInfo\u003cT\u003e).actions?.Invoke(info);\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 无参事件触发，触发者不需要传入参数的重载\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"eventName\"\u003e哪一个名字的事件触发了\u003c/param\u003e\n    public void EventTrigger(string eventName)\n    {\n        //若字典内存在这个事件，就执行其中的所有事件\n        if (eventDic.ContainsKey(eventName))\n        {\n            (eventDic[eventName] as EventInfo).actions?.Invoke();\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 移除对应的泛型事件监听\n    /// \u003c/summary\u003e\n    /// \u003ctypeparam name=\"T\"\u003e触发者要传入的消息参数类型\u003c/typeparam\u003e\n    /// \u003cparam name=\"eventName\"\u003e事件名\u003c/param\u003e\n    /// \u003cparam name=\"action\"\u003e要移除的方法(参数由泛型类型决定)\u003c/param\u003e\n    public void RemoveEventListener\u003cT\u003e(string eventName, UnityAction\u003cT\u003e action)\n    {\n        if (eventDic.ContainsKey(eventName))\n            (eventDic[eventName] as EventInfo\u003cT\u003e).actions -= action;\n    }\n\n    /// \u003csummary\u003e\n    /// 移除对应的无参事件监听\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"eventName\"\u003e事件名\u003c/param\u003e\n    /// \u003cparam name=\"action\"\u003e要移除的方法（不需要触发者传入参数的方法）\u003c/param\u003e\n    public void RemoveEventListener(string eventName, UnityAction action)\n    {\n        if (eventDic.ContainsKey(eventName))\n            (eventDic[eventName] as EventInfo).actions -= action;\n    }\n\n    /// \u003csummary\u003e\n    /// 清空事件中心，主要用在切换场景时\n    /// \u003c/summary\u003e\n    public void Clear()\n    {\n        eventDic.Clear();\n    }\n\n    #region 委托参数使用object的旧实现（全部废弃）\n    /// \u003csummary\u003e\n    /// 存储事件名字和监听事件的执行委托的字典，键为事件名字，值为监听这个事件对应的委托函数们\n    /// \u003c/summary\u003e\n    //private Dictionary\u003cstring, UnityAction\u003cobject\u003e\u003e eventDic = new Dictionary\u003cstring, UnityAction\u003cobject\u003e\u003e();\n\n    /// \u003csummary\u003e\n    /// 添加事件监听，必须要设置对应的移除事件监听！至少要在被销毁的生命周期内执行！以免出现问题\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"eventName\"\u003e事件的名字\u003c/param\u003e\n    /// \u003cparam name=\"action\"\u003e准备用来处理事件的委托函数(需要object参数，用于传入触发事件者的消息)\u003c/param\u003e\n    //public void AddEventListener(string eventName, UnityAction\u003cobject\u003e action)\n    //{\n    //    //已经存在该事件，就直接把传入的方法加进对应的委托内\n    //    if (eventDic.ContainsKey(eventName))\n    //    {\n    //        eventDic[eventName] += action;\n    //    }\n    //    //没有该事件，在字典内直接添加键值对\n    //    else\n    //    {\n    //        eventDic.Add(eventName, action);\n    //    }\n    //}\n\n    /// \u003csummary\u003e\n    /// 事件触发\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"eventName\"\u003e哪一个名字的事件触发了\u003c/param\u003e\n    /// \u003cparam name=\"info\"\u003e传入自己的相关消息，可以用于监听者区分不同对象\u003c/param\u003e\n    //public void EventTrigger(string eventName, object info)\n    //{\n    //    //若字典内存在这个事件，就执行其中的所有事件\n    //    if (eventDic.ContainsKey(eventName))\n    //    {\n    //        eventDic[eventName]?.Invoke(info);\n    //    }\n    //}\n\n    /// \u003csummary\u003e\n    /// 移除对应的事件监听\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"eventName\"\u003e事件名\u003c/param\u003e\n    /// \u003cparam name=\"action\"\u003e要移除的方法(需要object参数)\u003c/param\u003e\n    //public void RemoveEventListener(string eventName, UnityAction\u003cobject\u003e action)\n    //{\n    //    if (eventDic.ContainsKey(eventName))\n    //        eventDic[eventName] -= action;\n    //}\n\n    /// \u003csummary\u003e\n    /// 清空事件中心，主要用在切换场景时\n    /// \u003c/summary\u003e\n    //public void Clear()\n    //{\n    //    eventDic.Clear();\n    //}\n    #endregion\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230824173206-c7svwd7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230824173206-c7svwd7"
			}
		}
	]
}