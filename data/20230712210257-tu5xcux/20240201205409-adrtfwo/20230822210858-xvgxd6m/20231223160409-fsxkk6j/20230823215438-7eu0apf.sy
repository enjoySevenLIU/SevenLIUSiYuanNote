{
	"ID": "20230823215438-7eu0apf",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230823215438-7eu0apf",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230823215438-7eu0apf\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230823215438-0co40jq\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230823234849-xqdxos8\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230823215930-dqbwnoe\u0026quot;,\u0026quot;focusStart\u0026quot;:86,\u0026quot;focusEnd\u0026quot;:86\u0026#125;",
		"title": "UF_OLDL4——公共Mono模块",
		"updated": "20231223160933"
	},
	"Children": [
		{
			"ID": "20230823215438-0co40jq",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230823215438-0co40jq",
				"updated": "20230823215538"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "公共Mono模块"
				}
			]
		},
		{
			"ID": "20230823215538-m1hnpio",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823215538-m1hnpio",
				"updated": "20230823215924"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230712214614-4ja3qtk",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "Unity协程"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230708150946-fi9ybwn",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "Update()"
				},
				{
					"Type": "NodeText",
					"Data": "帧更新等只有在继承"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230708163049-sje2nzo",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "MonoBehaviour"
				},
				{
					"Type": "NodeText",
					"Data": "的类里才能使用，\n但我们有不少类是不继承MonoBehaviour的，那我们应该如何让它们能够使用Update()和开启协程呢？"
				}
			]
		},
		{
			"ID": "20230823215930-dqbwnoe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823215930-dqbwnoe",
				"updated": "20230823220056"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用公共Mono模块，来让不继承MonoBehaviour的类来使用上一些MonoBehaviour的内容，\n例如开启协程，可以Update更新，并统一管理Update()"
				}
			]
		},
		{
			"ID": "20230823220019-d42aon5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823220019-d42aon5",
				"updated": "20230824000100"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "知识点："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230708144948-o5ngoop",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "生命周期函数"
				},
				{
					"Type": "NodeText",
					"Data": "，事件，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230712214614-4ja3qtk",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "协同程序"
				}
			]
		},
		{
			"ID": "20230823234247-k0164l3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230823234247-k0164l3",
				"updated": "20230823234448"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对外开放部分——公共Mono模块管理者"
				}
			]
		},
		{
			"ID": "20230823234310-999w0n5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823234310-999w0n5",
				"updated": "20230823234725"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "单例公共Mono模块的管理者，封装一个唯一的Mono模块控制者用于对外开放和统一管理\n可以给外部添加帧更新事件方法，也可以通过该模块为非继承MonoBehavior的类开启协程"
				}
			]
		},
		{
			"ID": "20230823234325-pcp7gat",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823234325-pcp7gat",
				"updated": "20230823234426"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "封装了一个唯一的公共MonoBehaviour模块控制者\n对外实现了帧更新和开启协程的方法"
				}
			]
		},
		{
			"ID": "20230823234312-zzb1ygf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230823234312-zzb1ygf",
				"updated": "20230823234322"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Collections;\nusing System.ComponentModel;\nusing UnityEngine;\nusing UnityEngine.Events;\n\n/// \u003csummary\u003e\n/// 单例公共Mono模块的管理者，封装一个唯一的Mono模块控制者用于统一管理，可以给外部添加帧更新事件方法\n/// 也可以通过该模块为非继承MonoBehavior的类开启协程\n/// \u003c/summary\u003e\npublic class MonoManager : BaseManager\u003cMonoManager\u003e\n{\n    private MonoController controller;\n\n    /// \u003csummary\u003e\n    /// 在第一次调用该模块时，会进入该构造方法在场景上创建空对象，并把Mono模块控制器挂载在某个对象上\n    /// \u003c/summary\u003e\n    public MonoManager()\n    {\n        //保证了MonoControllor对象的唯一性，使该管理器私有变量一定装载的是这里构造函数实例化的Mono控制器\n        GameObject obj = new GameObject(\"MonoController\");\n        controller = obj.AddComponent\u003cMonoController\u003e();\n    }\n\n    /// \u003csummary\u003e\n    /// 提供给外部的添加Update()帧更新事件的函数，注意要配套使用移除方法，至少要在对象被销毁前使用移除方法以避免内存泄露\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"func\"\u003e要帧更新的方法\u003c/param\u003e\n    public void AddUpdateListener(UnityAction func)\n    {\n        controller.AddUpdateListener(func);\n    }\n\n    /// \u003csummary\u003e\n    /// 提供给外部的移除Update()帧更新事件的函数\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"func\"\u003e要移除的方法\u003c/param\u003e\n    public void RemoveUpdateListener(UnityAction func)\n    {\n        controller.RemoveUpdateListener(func);\n    }\n\n    /// \u003csummary\u003e\n    /// 提供给外部开启协程的方法\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"routine\"\u003e协程所用的迭代器函数\u003c/param\u003e\n    /// \u003creturns\u003e在Mono模块开启的协程\u003c/returns\u003e\n    public Coroutine StartCoroutine(IEnumerator routine)\n    {\n        return controller.StartCoroutine(routine);\n    }\n\n    public Coroutine StartCoroutine(string routine, [DefaultValue(\"null\")] object value)\n    {\n        return controller.StartCoroutine(routine, value);\n    }\n\n    /// \u003csummary\u003e\n    /// Controller内部函数开启协程的方法，只适用于开启Controller内的函数，外部不能使用\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"methodName\"\u003e函数名\u003c/param\u003e\n    /// \u003creturns\u003e开启的协程\u003c/returns\u003e\n    public Coroutine StartCoroutine(string methodName)\n    {\n        return controller.StartCoroutine(methodName);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230823234428-jhp5il7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230823234428-jhp5il7",
				"updated": "20230823234508"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "底层实际执行部分——公共Mono模块控制者"
				}
			]
		},
		{
			"ID": "20230823234508-zkn6tmq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230823234508-zkn6tmq",
				"updated": "20230823234848"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "公共Mono模块控制者，是实际继承MonoBehaviour的类，需要依附一个对象，过场景不销毁\n不是单例，不单独使用，一般被单例管理者封装管理，通过管理者获取要执行的帧更新函数和用于开启协程的迭代器函数\n传入管理者的帧更新函数和迭代器函数，都实际在这个类里下执行"
				}
			]
		},
		{
			"ID": "20230823234849-xqdxos8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230823234849-xqdxos8",
				"updated": "20230823234904"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine;\nusing UnityEngine.Events;\n\n/// \u003csummary\u003e\n/// 公共Mono模块控制者，实际继承MonoBehaviour的类，不是单例，不单独使用，一般被单例管理者封装管理\n/// \u003c/summary\u003e\npublic class MonoController : MonoBehaviour\n{\n    public event UnityAction updateEvent;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        //过场景时，要确保该公共Mono控制者模块不会被移除\n        DontDestroyOnLoad(this.gameObject);\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        if (updateEvent != null)\n            updateEvent.Invoke();\n    }\n\n    /// \u003csummary\u003e\n    /// 提供给外部的添加Update()帧更新事件的函数，注意要配套使用移除方法，至少要在对象被销毁前使用移除方法以避免内存泄露\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"func\"\u003e要帧更新的方法\u003c/param\u003e\n    public void AddUpdateListener(UnityAction func)\n    {\n        updateEvent += func;\n    }\n\n    /// \u003csummary\u003e\n    /// 提供给外部的移除Update()帧更新事件的函数\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"func\"\u003e要移除的方法\u003c/param\u003e\n    public void RemoveUpdateListener(UnityAction func)\n    {\n        updateEvent -= func;\n    }\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}