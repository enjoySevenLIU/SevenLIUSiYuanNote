{
	"ID": "20240425164711-jxalvr7",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240425164711-jxalvr7",
		"title": "UFL12-2——数字转字符串相关",
		"type": "doc",
		"updated": "20240425182925"
	},
	"Children": [
		{
			"ID": "20240425164711-3rh35kq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240425164711-3rh35kq",
				"updated": "20240425165902"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "转字符串数字前补0 的方法"
				}
			]
		},
		{
			"ID": "20240425165248-458r9xk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240425165248-458r9xk",
				"updated": "20240425165925"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们在游戏开发中界面显示时，经常可能会有这样的需求，要在界面中显示："
				}
			]
		},
		{
			"ID": "20240425165934-fi9no6c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240425165934-fi9no6c",
				"style": "line-height: 22px;",
				"updated": "20240425165937"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "0001\n01\n010\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240425165945-ntftq4y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240425165945-ntftq4y",
				"updated": "20240425170134"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "举例："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 223px;",
						"style": "width: 213px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240425170134-3ddpl0v.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 213px;\" parent-style=\"width: 223px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240425165930-oyydeqm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240425165930-oyydeqm",
				"updated": "20240425170154"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "也就是说想要让某个数字在转换为字符串时，可以指定转换的字符串长度，并且能够在数字前自动的添加0"
				}
			]
		},
		{
			"ID": "20240425170728-k6nx0xv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240425170728-k6nx0xv",
				"style": "line-height: 22px;",
				"updated": "20240425171002"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/// \u003csummary\u003e\n/// 将数值转换为字符串，可以指定长度，长度不足时自动在前面补充0\n/// \u003c/summary\u003e\n/// \u003cparam name=\"value\"\u003e要转换的数值\u003c/param\u003e\n/// \u003cparam name=\"len\"\u003e最短长度，传入的数值长度不足时会补充0\u003c/param\u003e\n/// \u003creturns\u003e转换出来的字符串\u003c/returns\u003e\npublic static string GetNumStr(int value, int len)\n{\n    //int.ToString如果传入一个\"Dn\"（n是数值）的字符串，\n    //代表想要将数值转换为长度为n的字符串，如果长度不够，会在前面补充0\n    return value.ToString($\"D{len}\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240425170606-cxfnqxf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240425170606-cxfnqxf",
				"updated": "20240425170614"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用示例"
				}
			]
		},
		{
			"ID": "20240425170615-4ukdlil",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240425170615-4ukdlil",
				"style": "line-height: 22px;",
				"updated": "20240425170703"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    print(TextUtil.GetNumStr(1, 4));    //0001\n    print(TextUtil.GetNumStr(10, 3));   //010\n    print(TextUtil.GetNumStr(1000, 4)); //当长度超出时不会截断，而是原模原样输出，1000\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240425170704-lxgmzz3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240425170704-lxgmzz3",
				"updated": "20240425170724"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 368px;",
						"style": "width: 358px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240425170724-mik2maf.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 358px;\" parent-style=\"width: 368px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240425171337-7964xvz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240425171337-7964xvz",
				"updated": "20240425171356"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "转字符串保留n位小数 的方法"
				}
			]
		},
		{
			"ID": "20240425171428-r375u6e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240425171428-r375u6e",
				"updated": "20240425174950"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们在游戏开发中界面显示时，经常可能会有这样的需求，要在界面中显示，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "3.1415926"
				},
				{
					"Type": "NodeText",
					"Data": "​ 保留两位小数 只显示 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "3.14"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240425171441-mvn0dxh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240425171441-mvn0dxh",
				"updated": "20240425171442"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "也就是说想要让某个数字在转换为字符串时，可以指定保留小数点后的位数"
				}
			]
		},
		{
			"ID": "20240425171340-jcj9l9d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240425171340-jcj9l9d",
				"style": "line-height: 22px;",
				"updated": "20240425171356"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/// \u003csummary\u003e\n/// 让指定的浮点数保留小数点后n位\n/// \u003c/summary\u003e\n/// \u003cparam name=\"value\"\u003e要转换的浮点数\u003c/param\u003e\n/// \u003cparam name=\"len\"\u003e保留小数位数\u003c/param\u003e\n/// \u003creturns\u003e转换出来的字符串\u003c/returns\u003e\npublic static string GetDecimalStr(float value, int len)\n{\n    //float.ToString如果传入一个\"Fn\"（n是数值）的字符串，\n    //代表想要保留小数点后几位小数\n    return value.ToString($\"F{len}\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240425171446-4sxrbse",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240425171446-4sxrbse",
				"updated": "20240425172040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用示例"
				}
			]
		},
		{
			"ID": "20240425172048-v5edszs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240425172048-v5edszs",
				"style": "line-height: 22px;",
				"updated": "20240425174946"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    print(TextUtil.GetDecimalStr(3.1415926f, 2));   //3.14\n    print(TextUtil.GetDecimalStr(3.1415926f, 4));   //3.1415\n    print(TextUtil.GetDecimalStr(0.000006f, 2));    //0.00\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240425174931-sdirm3t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240425174931-sdirm3t",
				"updated": "20240425174933"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240425174931-ytbsgj9.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240425182909-a1x1qlq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240425182909-a1x1qlq",
				"updated": "20240425182913"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体代码"
				}
			]
		},
		{
			"ID": "20240425182914-p48o6ri",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240425182914-p48o6ri",
				"style": "line-height: 22px;",
				"updated": "20240425182925"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Text;\nusing UnityEngine;\nusing UnityEngine.Events;\n\n/// \u003csummary\u003e\n/// 用于处理字符串的一些公共功能\n/// \u003c/summary\u003e\npublic class TextUtil\n{\n    #region 字符串拆分相关\n    /// \u003csummary\u003e\n    /// 拆分字符串，返回字符串数组\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"str\"\u003e想要被拆分的字符串\u003c/param\u003e\n    /// \u003cparam name=\"type\"\u003e拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003creturns\u003e拆分出来的数组\u003c/returns\u003e\n    public static string[] SplitStr(string str, int type = 1)\n    {\n        if (str == \"\")\n            return new string[0];\n        string newStr = str;\n        if (type == 1)\n        {\n            //为了避免英文符号填成中文符号，我们先进行一个替换\n            while (newStr.IndexOf(\"；\") != -1)\n            {\n                newStr = newStr.Replace(\"；\", \";\");\n            }\n            return newStr.Split(';');\n        }\n        else if (type == 2)\n        {\n            //为了避免英文符号填成中文符号，我们先进行一个替换\n            while (newStr.IndexOf(\"，\") != -1)\n            {\n                newStr = newStr.Replace(\"，\", \",\");\n            }\n            return newStr.Split(',');\n        }\n        else if (type == 3)\n        {\n            return newStr.Split('%');\n        }\n        else if (type == 4)\n        {\n            //为了避免英文符号填成中文符号，我们先进行一个替换\n            while (newStr.IndexOf(\"：\") != -1)\n            {\n                newStr = newStr.Replace(\"：\", \":\");\n            }\n            return newStr.Split(':');\n        }\n        else if (type == 5)\n        {\n            return newStr.Split(' ');\n        }\n        else if (type == 6)\n        {\n            return newStr.Split('|');\n        }\n        else if (type == 7)\n        {\n            return newStr.Split('_');\n        }\n        return new string[0];\n    }\n\n    /// \u003csummary\u003e\n    /// 拆分字符串 返回整形数组\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"str\"\u003e想要被拆分的字符串\u003c/param\u003e\n    /// \u003cparam name=\"type\"\u003e拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003creturns\u003e拆分出来的数组\u003c/returns\u003e\n    public static int[] SplitStrToIntArr(string str, int type = 1)\n    {\n        string[] strs = SplitStr(str, type);\n        if (str.Length == 0)\n            return new int[0];\n        //将字符串数组转换为整形数组\n        return Array.ConvertAll\u003cstring, int\u003e(strs, (str) =\u003e\n        {\n            return int.Parse(str);\n        });\n    }\n\n    /// \u003csummary\u003e\n    /// 专门用来处理拆分类似于\"1,10;2,20;3,30\"这样的数值对信息，并将其转换为整形数\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"str\"\u003e待拆分的字符串\u003c/param\u003e\n    /// \u003cparam name=\"typeOne\"\u003e数值对的分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003cparam name=\"typeTwo\"\u003e数值对内部的分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003cparam name=\"callBack\"\u003e传递数值对的回调函数\u003c/param\u003e\n    public static void SplitStrToIntArrTwice(string str, int typeOne, int typeTwo, UnityAction\u003cint, int\u003e callBack)\n    {\n        string[] strs = SplitStr(str, typeOne);\n        if (strs.Length == 0)\n            return;\n        int[] ints;\n        for (int i = 0; i \u003c strs.Length; i++)\n        {\n            ints = SplitStrToIntArr(strs[i], typeTwo);\n            if (ints.Length == 0)\n                continue;\n            callBack.Invoke(ints[0], ints[1]);\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 专门用来处理拆分类似于\"1,10;2,20;3,30\"这样的键值对信息，拆分为字符串\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"str\"\u003e待拆分的字符串\u003c/param\u003e\n    /// \u003cparam name=\"typeOne\"\u003e键值对分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003cparam name=\"typeTwo\"\u003e键值对内部的分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003cparam name=\"callBack\"\u003e传递字符串对的回调函数\u003c/param\u003e\n    public static void SplitStrwice(string str, int typeOne, int typeTwo, UnityAction\u003cstring, string\u003e callBack)\n    {\n        string[] strs1 = SplitStr(str, typeOne);\n        if (strs1.Length == 0)\n            return;\n        string[] strs2;\n        for (int i = 0; i \u003c strs1.Length; i++)\n        {\n            strs2 = SplitStr(strs1[i], typeTwo);\n            if (strs2.Length == 0)\n                continue;\n            callBack.Invoke(strs2[0], strs2[1]);\n        }\n    }\n    #endregion\n\n    #region 数值转字符串相关\n    /// \u003csummary\u003e\n    /// 将数值转换为字符串，可以指定长度，长度不足时自动在前面补充0\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"value\"\u003e要转换的数值\u003c/param\u003e\n    /// \u003cparam name=\"len\"\u003e最短长度，传入的数值长度不足时会补充0\u003c/param\u003e\n    /// \u003creturns\u003e转换出来的字符串\u003c/returns\u003e\n    public static string GetNumStr(int value, int len)\n    {\n        //int.ToString如果传入一个\"Dn\"（n是数值）的字符串，\n        //代表想要将数值转换为长度为n的字符串，如果长度不够，会在前面补充0\n        return value.ToString($\"D{len}\");\n    }\n\n    /// \u003csummary\u003e\n    /// 让指定的浮点数保留小数点后n位\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"value\"\u003e要转换的浮点数\u003c/param\u003e\n    /// \u003cparam name=\"len\"\u003e保留小数位数\u003c/param\u003e\n    /// \u003creturns\u003e转换出来的字符串\u003c/returns\u003e\n    public static string GetDecimalStr(float value, int len)\n    {\n        //float.ToString如果传入一个\"Fn\"（n是数值）的字符串，\n        //代表想要保留小数点后几位小数\n        return value.ToString($\"F{len}\");\n    }\n    #endregion\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}