{
	"ID": "20240425183439-hb6rr7y",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240425183439-hb6rr7y",
		"title": "UFL12-4——大数据数值转字符串方法",
		"type": "doc",
		"updated": "20240425190854"
	},
	"Children": [
		{
			"ID": "20240425183439-da1du5o",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240425183439-da1du5o",
				"updated": "20240425183525"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "大数据数值转字符串 的方法"
				}
			]
		},
		{
			"ID": "20240425183530-bz9ertx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240425183530-bz9ertx",
				"updated": "20240425183535"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们在游戏开发时，为了避免在界面中显示过长的数值，往往需要把过长数值进行转换"
				}
			]
		},
		{
			"ID": "20240425183537-07bjj67",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240425183537-07bjj67",
				"updated": "20240425183603"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "1198678978"
				},
				{
					"Type": "NodeText",
					"Data": "​ 转换为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "11亿9千万"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "5328987"
				},
				{
					"Type": "NodeText",
					"Data": "​ 转换为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "532万8千"
				},
				{
					"Type": "NodeText",
					"Data": "​\n因为如果直接在界面上显示过长的数值可能会影响UI布局，而过大的数也可以直接粗略显示可以直接省略后面的内容，显示一个大概数值"
				}
			]
		},
		{
			"ID": "20240425183530-p9hv8ig",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240425183530-p9hv8ig",
				"updated": "20240425183530"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此我们可以将其封装为一个常用方法"
				}
			]
		},
		{
			"ID": "20240425183530-2ckud5l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240425183530-2ckud5l",
				"updated": "20240425183805"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需求：以 亿 和 万 作为转换临界点，超过亿，则显示为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "n亿n千万"
				},
				{
					"Type": "NodeText",
					"Data": "​，超过万，则显示为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "n万n千"
				},
				{
					"Type": "NodeText",
					"Data": "​ 这种形式"
				}
			]
		},
		{
			"ID": "20240425190049-kvu67mq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240425190049-kvu67mq",
				"style": "line-height: 22px;",
				"updated": "20240425190100"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/// \u003csummary\u003e\n/// 把大数值转换为精简了位数的字符串，大于一亿的转换为n亿n千万，大于一万的转换为n万n千\n/// \u003c/summary\u003e\n/// \u003cparam name=\"num\"\u003e要转换的数值\u003c/param\u003e\n/// \u003creturns\u003e转换出来的字符串\u003c/returns\u003e\npublic static string GetBigDataToString(int num)\n{\n    //如果大于一亿，就显示为n亿n千万\n    if (num \u003e= 100000000)\n    {\n        return BigDataChange(num, 100000000, \"亿\", \"千万\");\n    }\n    //如果大于一万，就显示为n万n千\n    else if (num \u003e= 10000)\n    {\n        return BigDataChange(num, 10000, \"万\", \"千\");\n    }\n    //都不满足，直接显示数值本身\n    else\n    {\n        return num.ToString();\n    }\n}\n\n/// \u003csummary\u003e\n/// 把大数值转换为精简了位数的字符串，可以自定义分割位数，如n亿n千万，n万n千\n/// \u003c/summary\u003e\n/// \u003cparam name=\"num\"\u003e要转换的数值\u003c/param\u003e\n/// \u003cparam name=\"company\"\u003e分割单位，可填100000000（亿），10000（万）等等\u003c/param\u003e\n/// \u003cparam name=\"bigCompany\"\u003e大单位 亿、万 等等\u003c/param\u003e\n/// \u003cparam name=\"littleCompany\"\u003e小单位 千万、千 等等\u003c/param\u003e\n/// \u003creturns\u003e转换出来的数值\u003c/returns\u003e\nprivate static string BigDataChange(int num, int company, string bigCompany, string littleCompany)\n{\n    resultStr.Clear();\n    resultStr.Append(num / company);\n    resultStr.Append(bigCompany);\n    int tmpNum = num % company;\n    tmpNum /= (company / 10);\n    //算出来不为0\n    if (tmpNum != 0)\n    {\n        resultStr.Append(tmpNum);\n        resultStr.Append(littleCompany);\n    }\n    return resultStr.ToString();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240425183609-ajz5sgp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240425183609-ajz5sgp",
				"updated": "20240425185943"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用示例"
				}
			]
		},
		{
			"ID": "20240425185944-w4oc3t3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240425185944-w4oc3t3",
				"style": "line-height: 22px;",
				"updated": "20240425185951"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    print(TextUtil.GetBigDataToString(1245000000));\n    print(TextUtil.GetBigDataToString(5689523));\n    print(TextUtil.GetBigDataToString(5869));\n    print(TextUtil.GetBigDataToString(1));\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240425185952-73sv24y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240425185952-73sv24y",
				"updated": "20240425190045"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 357px;",
						"style": "width: 347px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240425190045-7mcbeyb.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 347px;\" parent-style=\"width: 357px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240425190827-sf9nlp6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240425190827-sf9nlp6",
				"updated": "20240425190832"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体代码"
				}
			]
		},
		{
			"ID": "20240425190832-9fdnvw1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240425190832-9fdnvw1",
				"style": "line-height: 22px;",
				"updated": "20240425190854"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Text;\nusing UnityEngine;\nusing UnityEngine.Events;\n\n/// \u003csummary\u003e\n/// 用于处理字符串的一些公共功能\n/// \u003c/summary\u003e\npublic class TextUtil\n{\n    private static StringBuilder resultStr = new StringBuilder(\"\");\n\n    #region 字符串拆分相关\n    /// \u003csummary\u003e\n    /// 拆分字符串，返回字符串数组\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"str\"\u003e想要被拆分的字符串\u003c/param\u003e\n    /// \u003cparam name=\"type\"\u003e拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003creturns\u003e拆分出来的数组\u003c/returns\u003e\n    public static string[] SplitStr(string str, int type = 1)\n    {\n        if (str == \"\")\n            return new string[0];\n        string newStr = str;\n        if (type == 1)\n        {\n            //为了避免英文符号填成中文符号，我们先进行一个替换\n            while (newStr.IndexOf(\"；\") != -1)\n            {\n                newStr = newStr.Replace(\"；\", \";\");\n            }\n            return newStr.Split(';');\n        }\n        else if (type == 2)\n        {\n            //为了避免英文符号填成中文符号，我们先进行一个替换\n            while (newStr.IndexOf(\"，\") != -1)\n            {\n                newStr = newStr.Replace(\"，\", \",\");\n            }\n            return newStr.Split(',');\n        }\n        else if (type == 3)\n        {\n            return newStr.Split('%');\n        }\n        else if (type == 4)\n        {\n            //为了避免英文符号填成中文符号，我们先进行一个替换\n            while (newStr.IndexOf(\"：\") != -1)\n            {\n                newStr = newStr.Replace(\"：\", \":\");\n            }\n            return newStr.Split(':');\n        }\n        else if (type == 5)\n        {\n            return newStr.Split(' ');\n        }\n        else if (type == 6)\n        {\n            return newStr.Split('|');\n        }\n        else if (type == 7)\n        {\n            return newStr.Split('_');\n        }\n        return new string[0];\n    }\n\n    /// \u003csummary\u003e\n    /// 拆分字符串 返回整形数组\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"str\"\u003e想要被拆分的字符串\u003c/param\u003e\n    /// \u003cparam name=\"type\"\u003e拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003creturns\u003e拆分出来的数组\u003c/returns\u003e\n    public static int[] SplitStrToIntArr(string str, int type = 1)\n    {\n        string[] strs = SplitStr(str, type);\n        if (str.Length == 0)\n            return new int[0];\n        //将字符串数组转换为整形数组\n        return Array.ConvertAll\u003cstring, int\u003e(strs, (str) =\u003e\n        {\n            return int.Parse(str);\n        });\n    }\n\n    /// \u003csummary\u003e\n    /// 专门用来处理拆分类似于\"1,10;2,20;3,30\"这样的数值对信息，并将其转换为整形数\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"str\"\u003e待拆分的字符串\u003c/param\u003e\n    /// \u003cparam name=\"typeOne\"\u003e数值对的分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003cparam name=\"typeTwo\"\u003e数值对内部的分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003cparam name=\"callBack\"\u003e传递数值对的回调函数\u003c/param\u003e\n    public static void SplitStrToIntArrTwice(string str, int typeOne, int typeTwo, UnityAction\u003cint, int\u003e callBack)\n    {\n        string[] strs = SplitStr(str, typeOne);\n        if (strs.Length == 0)\n            return;\n        int[] ints;\n        for (int i = 0; i \u003c strs.Length; i++)\n        {\n            ints = SplitStrToIntArr(strs[i], typeTwo);\n            if (ints.Length == 0)\n                continue;\n            callBack.Invoke(ints[0], ints[1]);\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 专门用来处理拆分类似于\"1,10;2,20;3,30\"这样的键值对信息，拆分为字符串\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"str\"\u003e待拆分的字符串\u003c/param\u003e\n    /// \u003cparam name=\"typeOne\"\u003e键值对分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003cparam name=\"typeTwo\"\u003e键值对内部的分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003cparam name=\"callBack\"\u003e传递字符串对的回调函数\u003c/param\u003e\n    public static void SplitStrwice(string str, int typeOne, int typeTwo, UnityAction\u003cstring, string\u003e callBack)\n    {\n        string[] strs1 = SplitStr(str, typeOne);\n        if (strs1.Length == 0)\n            return;\n        string[] strs2;\n        for (int i = 0; i \u003c strs1.Length; i++)\n        {\n            strs2 = SplitStr(strs1[i], typeTwo);\n            if (strs2.Length == 0)\n                continue;\n            callBack.Invoke(strs2[0], strs2[1]);\n        }\n    }\n    #endregion\n\n    #region 数值转字符串相关\n    /// \u003csummary\u003e\n    /// 将数值转换为字符串，可以指定长度，长度不足时自动在前面补充0\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"value\"\u003e要转换的数值\u003c/param\u003e\n    /// \u003cparam name=\"len\"\u003e最短长度，传入的数值长度不足时会补充0\u003c/param\u003e\n    /// \u003creturns\u003e转换出来的字符串\u003c/returns\u003e\n    public static string GetNumStr(int value, int len)\n    {\n        //int.ToString如果传入一个\"Dn\"（n是数值）的字符串，\n        //代表想要将数值转换为长度为n的字符串，如果长度不够，会在前面补充0\n        return value.ToString($\"D{len}\");\n    }\n\n    /// \u003csummary\u003e\n    /// 让指定的浮点数保留小数点后n位\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"value\"\u003e要转换的浮点数\u003c/param\u003e\n    /// \u003cparam name=\"len\"\u003e保留小数位数\u003c/param\u003e\n    /// \u003creturns\u003e转换出来的字符串\u003c/returns\u003e\n    public static string GetDecimalStr(float value, int len)\n    {\n        //float.ToString如果传入一个\"Fn\"（n是数值）的字符串，\n        //代表想要保留小数点后几位小数\n        return value.ToString($\"F{len}\");\n    }\n\n    /// \u003csummary\u003e\n    /// 把大数值转换为精简了位数的字符串，大于一亿的转换为n亿n千万，大于一万的转换为n万n千\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"num\"\u003e要转换的数值\u003c/param\u003e\n    /// \u003creturns\u003e转换出来的字符串\u003c/returns\u003e\n    public static string GetBigDataToString(int num)\n    {\n        //如果大于一亿，就显示为n亿n千万\n        if (num \u003e= 100000000)\n        {\n            return BigDataChange(num, 100000000, \"亿\", \"千万\");\n        }\n        //如果大于一万，就显示为n万n千\n        else if (num \u003e= 10000)\n        {\n            return BigDataChange(num, 10000, \"万\", \"千\");\n        }\n        //都不满足，直接显示数值本身\n        else\n        {\n            return num.ToString();\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 把大数值转换为精简了位数的字符串，可以自定义分割位数，如n亿n千万，n万n千\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"num\"\u003e要转换的数值\u003c/param\u003e\n    /// \u003cparam name=\"company\"\u003e分割单位，可填100000000（亿），10000（万）等等\u003c/param\u003e\n    /// \u003cparam name=\"bigCompany\"\u003e大单位 亿、万 等等\u003c/param\u003e\n    /// \u003cparam name=\"littleCompany\"\u003e小单位 千万、千 等等\u003c/param\u003e\n    /// \u003creturns\u003e转换出来的数值\u003c/returns\u003e\n    private static string BigDataChange(int num, int company, string bigCompany, string littleCompany)\n    {\n        resultStr.Clear();\n        resultStr.Append(num / company);\n        resultStr.Append(bigCompany);\n        int tmpNum = num % company;\n        tmpNum /= (company / 10);\n        //算出来不为0\n        if (tmpNum != 0)\n        {\n            resultStr.Append(tmpNum);\n            resultStr.Append(littleCompany);\n        }\n        return resultStr.ToString();\n    }\n    #endregion\n\n    #region 时间转化相关\n    /// \u003csummary\u003e\n    /// 将秒数转换为时分秒字符串\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"timeSec\"\u003e秒数\u003c/param\u003e\n    /// \u003cparam name=\"egZero\"\u003e是否忽略0\u003c/param\u003e\n    /// \u003cparam name=\"isKeepLength\"\u003e是否保留最短两位长度，即存在类似与这样的格式\"01:05:35\"\u003c/param\u003e\n    /// \u003cparam name=\"hourStr\"\u003e小时的拼接字符\u003c/param\u003e\n    /// \u003cparam name=\"minuteStr\"\u003e分钟的拼接字符\u003c/param\u003e\n    /// \u003cparam name=\"secondStr\"\u003e秒数的拼接字符\u003c/param\u003e\n    /// \u003creturns\u003e转换好的时间字符串\u003c/returns\u003e\n    public static string SecondToHMS(int timeSec, bool egZero = false, bool isKeepLength = false, string hourStr = \"时\", string minuteStr = \"分\", string secondStr = \"秒\")\n    {\n        //时间不会有负数，如果发现了负数，就直接归0\n        if (timeSec \u003c 0)\n            timeSec = 0;\n\n        //计算小时\n        int hour = timeSec / 3600;\n        //计算分钟\n        //除去小时后的剩余秒\n        int second = timeSec % 3600;\n        //剩余秒转分钟数\n        int minute = second / 60;\n        //计算秒\n        second = timeSec % 60;\n        //拼接\n        resultStr.Clear();\n        //如果小时不为0，或者不忽略0\n        if (hour != 0 || !egZero)\n        {\n            //具体几个小时\n            resultStr.Append(isKeepLength ? GetNumStr(hour, 2) : hour);\n            resultStr.Append(hourStr);\n        }\n        //如果分钟不为0，或者不忽略0，或者小时不为0\n        if (minute != 0 || !egZero || hour != 0)\n        {\n            //具体几分钟\n            resultStr.Append(isKeepLength ? GetNumStr(minute, 2) : minute);\n            resultStr.Append(minuteStr);\n        }\n        //如果秒不为0 或者 不忽略0 或者 小时和分钟都不为0\n        if (second != 0 || !egZero || hour != 0 || minute != 0)\n        {\n            //具体多少秒\n            resultStr.Append(isKeepLength ? GetNumStr(second, 2) : second);\n            resultStr.Append(secondStr);\n        }\n\n        //如果传入的是0秒，则需要特别输出一个0秒\n        if (resultStr.Length == 0)\n        {\n            resultStr.Append(0);\n            resultStr.Append(secondStr);\n        }\n\n        return resultStr.ToString();\n    }\n\n    /// \u003csummary\u003e\n    /// 返回类似于00:00:00这样格式的时间字符串\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"s\"\u003e要转换的字符串\u003c/param\u003e\n    /// \u003cparam name=\"egZero\"\u003e是否忽略0\u003c/param\u003e\n    /// \u003creturns\u003e转换出来的字符串\u003c/returns\u003e\n    public static string SecondToColonStr(int s, bool egZero = false)\n    {\n        return SecondToHMS(s, egZero, true, \":\", \":\", \"\");\n    }\n    #endregion\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}