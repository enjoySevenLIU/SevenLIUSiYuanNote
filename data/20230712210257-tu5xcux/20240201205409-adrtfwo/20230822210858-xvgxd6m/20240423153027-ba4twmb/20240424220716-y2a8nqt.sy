{
	"ID": "20240424220716-y2a8nqt",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240424220716-y2a8nqt",
		"title": "UFL12-1——字符串拆分方法",
		"type": "doc",
		"updated": "20240424225658"
	},
	"Children": [
		{
			"ID": "20240424220716-d2oiu3w",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240424220716-d2oiu3w",
				"updated": "20240424220910"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240424220852-jqw01uo",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240424220852-jqw01uo",
						"updated": "20240424220910"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "前置知识点："
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "string"
						},
						{
							"Type": "NodeText",
							"Data": "​ 中 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "Split"
						},
						{
							"Type": "NodeText",
							"Data": "​ 相关知识点（C#四部曲中）"
						}
					]
				}
			]
		},
		{
			"ID": "20240424220912-ibguxxq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240424220912-ibguxxq",
				"updated": "20240424220917"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现文本工具类中的 字符串拆分方法"
				}
			]
		},
		{
			"ID": "20240424220924-aonviti",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240424220924-aonviti",
				"updated": "20240424220917"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们在配置表中，经常会配置如下格式的字符串数据，例如："
				}
			]
		},
		{
			"ID": "20240424220943-ji8bge9",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240424220943-ji8bge9",
				"updated": "20240424220917"
			},
			"Children": [
				{
					"ID": "20240424220953-tauhekt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240424220953-tauhekt",
						"updated": "20240424220956"
					},
					"Children": [
						{
							"ID": "20240424220953-nc2stjp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240424220953-nc2stjp",
								"updated": "20240424220956"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "1,10;2,4;32,1"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240424220954-ku7jf3a",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240424220954-ku7jf3a"
					},
					"Children": [
						{
							"ID": "20240424220954-3m3rbgq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240424220954-3m3rbgq"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "2,11|3,12|4,55"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240424220951-e5p7dww",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240424220951-e5p7dww",
				"updated": "20240424220917"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "遇到这种数据时，我们往往会使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "string"
				},
				{
					"Type": "NodeText",
					"Data": "​中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Split"
				},
				{
					"Type": "NodeText",
					"Data": "​方法进行拆分"
				}
			]
		},
		{
			"ID": "20240424220924-vslk1uj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240424220924-vslk1uj",
				"updated": "20240424220917"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们想要通过封装满足以下的需求"
				}
			]
		},
		{
			"ID": "20240424221014-3ylef2m",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240424221014-3ylef2m",
				"updated": "20240424224205"
			},
			"Children": [
				{
					"ID": "20240424221014-i8hv3cj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240424221014-i8hv3cj",
						"updated": "20240424223412"
					},
					"Children": [
						{
							"ID": "20240424221014-fuvk4if",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240424221014-fuvk4if",
								"updated": "20240424221014"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "避免符号填写错误，英文字符填写成中文字符"
								}
							]
						},
						{
							"ID": "20240424223128-vj42vxn",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240424223128-vj42vxn",
								"style": "line-height: 22px;",
								"updated": "20240424223412"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "/// \u003csummary\u003e\n/// 拆分字符串，返回字符串数组\n/// \u003c/summary\u003e\n/// \u003cparam name=\"str\"\u003e想要被拆分的字符串\u003c/param\u003e\n/// \u003cparam name=\"type\"\u003e拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n/// \u003creturns\u003e拆分出来的数组\u003c/returns\u003e\npublic static string[] SplitStr(string str, int type = 1)\n{\n    if (str == \"\")\n        return new string[0];\n    string newStr = str;\n    if (type == 1)\n    {\n        //为了避免英文符号填成中文符号，我们先进行一个替换\n        while (newStr.IndexOf(\"；\") != -1)\n        {\n            newStr = newStr.Replace(\"；\", \";\");\n        }\n        return newStr.Split(';');\n    }\n    else if (type == 2)\n    {\n        //为了避免英文符号填成中文符号，我们先进行一个替换\n        while (newStr.IndexOf(\"，\") != -1)\n        {\n            newStr = newStr.Replace(\"，\", \",\");\n        }\n        return newStr.Split(',');\n    }\n    else if (type == 3)\n    {\n        return newStr.Split('%');\n    }\n    else if (type == 4)\n    {\n        //为了避免英文符号填成中文符号，我们先进行一个替换\n        while (newStr.IndexOf(\"：\") != -1)\n        {\n            newStr = newStr.Replace(\"：\", \":\");\n        }\n        return newStr.Split(':');\n    }\n    else if (type == 5)\n    {\n        return newStr.Split(' ');\n    }\n    else if (type == 6)\n    {\n        return newStr.Split('|');\n    }\n    else if (type == 7)\n    {\n        return newStr.Split('_');\n    }\n    return new string[0];\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240424221014-h84m0mm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240424221014-h84m0mm",
						"updated": "20240424224205"
					},
					"Children": [
						{
							"ID": "20240424221014-z4ozyir",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240424221014-z4ozyir",
								"updated": "20240424221017"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "能够直接拆分获取到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "int"
								},
								{
									"Type": "NodeText",
									"Data": "​数组"
								}
							]
						},
						{
							"ID": "20240424223310-xrp1w7t",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240424223310-xrp1w7t",
								"style": "line-height: 22px;",
								"updated": "20240424224205"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "/// \u003csummary\u003e\n/// 拆分字符串 返回整形数组\n/// \u003c/summary\u003e\n/// \u003cparam name=\"str\"\u003e想要被拆分的字符串\u003c/param\u003e\n/// \u003cparam name=\"type\"\u003e拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n/// \u003creturns\u003e拆分出来的数组\u003c/returns\u003e\npublic static int[] SplitStrToIntArr(string str, int type = 1)\n{\n    string[] strs = SplitStr(str, type);\n    if (str.Length == 0)\n        return new int[0];\n    //将字符串数组转换为整形数组\n    return Array.ConvertAll\u003cstring, int\u003e(strs, (str) =\u003e\n    {\n        return int.Parse(str);\n    });\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240424221103-kagu1x4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240424221103-kagu1x4",
				"updated": "20240424224144"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用示例"
				}
			]
		},
		{
			"ID": "20240424224146-t4e24db",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240424224146-t4e24db",
				"style": "line-height: 22px;",
				"updated": "20240424224148"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    string str = \"1,10;2,4;32,1\";\n    string[] strs = TextUtil.SplitStr(str, 1);\n    for (int i = 0; i \u003c strs.Length; i++)\n    {\n        int[] ints = TextUtil.SplitStrToIntArr(strs[i], 2);\n        print(\"道具ID：\" + ints[0]);\n        print(\"道具数量：\" + ints[1]);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240424224149-5ei60l5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240424224149-5ei60l5",
				"updated": "20240424224151"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出：​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 280px;",
						"style": "width: 270px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240424224225-btmr5yh.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 270px;\" parent-style=\"width: 280px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240424224926-669zr8h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240424224926-669zr8h",
				"updated": "20240424224938"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "补充：拆分数值对的方法"
				}
			]
		},
		{
			"ID": "20240424224938-k1mhzsl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240424224938-k1mhzsl",
				"updated": "20240424225648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于类似于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026quot;1,10;2,4;32,1\u0026quot;"
				},
				{
					"Type": "NodeText",
					"Data": "​拆分为一个个键值对的需求较多，因此可以补充实现拆分键值对的方法"
				}
			]
		},
		{
			"ID": "20240424225007-f8tjx6u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240424225007-f8tjx6u",
				"style": "line-height: 22px;",
				"updated": "20240424225635"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/// \u003csummary\u003e\n/// 专门用来处理拆分类似于\"1,10;2,20;3,30\"这样的数值对信息，并将其转换为整形数\n/// \u003c/summary\u003e\n/// \u003cparam name=\"str\"\u003e待拆分的字符串\u003c/param\u003e\n/// \u003cparam name=\"typeOne\"\u003e数值对的分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n/// \u003cparam name=\"typeTwo\"\u003e数值对内部的分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n/// \u003cparam name=\"callBack\"\u003e传递数值对的回调函数\u003c/param\u003e\npublic static void SplitStrToIntArrTwice(string str, int typeOne, int typeTwo, UnityAction\u003cint, int\u003e callBack)\n{\n    string[] strs = SplitStr(str, typeOne);\n    if (strs.Length == 0)\n        return;\n    int[] ints;\n    for (int i = 0; i \u003c strs.Length; i++)\n    {\n        ints = SplitStrToIntArr(strs[i], typeTwo);\n        if (ints.Length == 0)\n            continue;\n        callBack.Invoke(ints[0], ints[1]);\n    }\n}\n\n/// \u003csummary\u003e\n/// 专门用来处理拆分类似于\"1,10;2,20;3,30\"这样的键值对信息，拆分为字符串\n/// \u003c/summary\u003e\n/// \u003cparam name=\"str\"\u003e待拆分的字符串\u003c/param\u003e\n/// \u003cparam name=\"typeOne\"\u003e键值对分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n/// \u003cparam name=\"typeTwo\"\u003e键值对内部的分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n/// \u003cparam name=\"callBack\"\u003e传递字符串对的回调函数\u003c/param\u003e\npublic static void SplitStrwice(string str, int typeOne, int typeTwo, UnityAction\u003cstring, string\u003e callBack)\n{\n    string[] strs1 = SplitStr(str, typeOne);\n    if (strs1.Length == 0)\n        return;\n    string[] strs2;\n    for (int i = 0; i \u003c strs1.Length; i++)\n    {\n        strs2 = SplitStr(strs1[i], typeTwo);\n        if (strs2.Length == 0)\n            continue;\n        callBack.Invoke(strs2[0], strs2[1]);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240424225049-27m5cte",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240424225049-27m5cte",
				"updated": "20240424225102"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用示例："
				}
			]
		},
		{
			"ID": "20240424225102-cizsauo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240424225102-cizsauo",
				"style": "line-height: 22px;",
				"updated": "20240424225315"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    string str = \"1,10;2,4;32,1\";\n    TextUtil.SplitStrToIntArrTwice(str, 1, 2, (id, num) =\u003e\n    {\n        print(\"道具ID\" + id);\n        print(\"道具数量\" + num);\n    });\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240424225212-raxbsrv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240424225212-raxbsrv",
				"updated": "20240424225234"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 355px;",
						"style": "width: 345px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240424225234-vvj31ug.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 345px;\" parent-style=\"width: 355px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240424224244-c0cfiqu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240424224244-c0cfiqu",
				"updated": "20240424224248"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体代码"
				}
			]
		},
		{
			"ID": "20240424225651-ama5j37",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240424225651-ama5j37",
				"style": "line-height: 22px;",
				"updated": "20240424225658"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Events;\n\n/// \u003csummary\u003e\n/// 用于处理字符串的一些公共功能\n/// \u003c/summary\u003e\npublic class TextUtil\n{\n    /// \u003csummary\u003e\n    /// 拆分字符串，返回字符串数组\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"str\"\u003e想要被拆分的字符串\u003c/param\u003e\n    /// \u003cparam name=\"type\"\u003e拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003creturns\u003e拆分出来的数组\u003c/returns\u003e\n    public static string[] SplitStr(string str, int type = 1)\n    {\n        if (str == \"\")\n            return new string[0];\n        string newStr = str;\n        if (type == 1)\n        {\n            //为了避免英文符号填成中文符号，我们先进行一个替换\n            while (newStr.IndexOf(\"；\") != -1)\n            {\n                newStr = newStr.Replace(\"；\", \";\");\n            }\n            return newStr.Split(';');\n        }\n        else if (type == 2)\n        {\n            //为了避免英文符号填成中文符号，我们先进行一个替换\n            while (newStr.IndexOf(\"，\") != -1)\n            {\n                newStr = newStr.Replace(\"，\", \",\");\n            }\n            return newStr.Split(',');\n        }\n        else if (type == 3)\n        {\n            return newStr.Split('%');\n        }\n        else if (type == 4)\n        {\n            //为了避免英文符号填成中文符号，我们先进行一个替换\n            while (newStr.IndexOf(\"：\") != -1)\n            {\n                newStr = newStr.Replace(\"：\", \":\");\n            }\n            return newStr.Split(':');\n        }\n        else if (type == 5)\n        {\n            return newStr.Split(' ');\n        }\n        else if (type == 6)\n        {\n            return newStr.Split('|');\n        }\n        else if (type == 7)\n        {\n            return newStr.Split('_');\n        }\n        return new string[0];\n    }\n\n    /// \u003csummary\u003e\n    /// 拆分字符串 返回整形数组\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"str\"\u003e想要被拆分的字符串\u003c/param\u003e\n    /// \u003cparam name=\"type\"\u003e拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003creturns\u003e拆分出来的数组\u003c/returns\u003e\n    public static int[] SplitStrToIntArr(string str, int type = 1)\n    {\n        string[] strs = SplitStr(str, type);\n        if (str.Length == 0)\n            return new int[0];\n        //将字符串数组转换为整形数组\n        return Array.ConvertAll\u003cstring, int\u003e(strs, (str) =\u003e\n        {\n            return int.Parse(str);\n        });\n    }\n\n    /// \u003csummary\u003e\n    /// 专门用来处理拆分类似于\"1,10;2,20;3,30\"这样的数值对信息，并将其转换为整形数\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"str\"\u003e待拆分的字符串\u003c/param\u003e\n    /// \u003cparam name=\"typeOne\"\u003e数值对的分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003cparam name=\"typeTwo\"\u003e数值对内部的分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003cparam name=\"callBack\"\u003e传递数值对的回调函数\u003c/param\u003e\n    public static void SplitStrToIntArrTwice(string str, int typeOne, int typeTwo, UnityAction\u003cint, int\u003e callBack)\n    {\n        string[] strs = SplitStr(str, typeOne);\n        if (strs.Length == 0)\n            return;\n        int[] ints;\n        for (int i = 0; i \u003c strs.Length; i++)\n        {\n            ints = SplitStrToIntArr(strs[i], typeTwo);\n            if (ints.Length == 0)\n                continue;\n            callBack.Invoke(ints[0], ints[1]);\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 专门用来处理拆分类似于\"1,10;2,20;3,30\"这样的键值对信息，拆分为字符串\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"str\"\u003e待拆分的字符串\u003c/param\u003e\n    /// \u003cparam name=\"typeOne\"\u003e键值对分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003cparam name=\"typeTwo\"\u003e键值对内部的分隔符，拆分字符类型：1-; 2-, 3-% 4-: 5-空格 6-| 7-_\u003c/param\u003e\n    /// \u003cparam name=\"callBack\"\u003e传递字符串对的回调函数\u003c/param\u003e\n    public static void SplitStrwice(string str, int typeOne, int typeTwo, UnityAction\u003cstring, string\u003e callBack)\n    {\n        string[] strs1 = SplitStr(str, typeOne);\n        if (strs1.Length == 0)\n            return;\n        string[] strs2;\n        for (int i = 0; i \u003c strs1.Length; i++)\n        {\n            strs2 = SplitStr(strs1[i], typeTwo);\n            if (strs2.Length == 0)\n                continue;\n            callBack.Invoke(strs2[0], strs2[1]);\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}