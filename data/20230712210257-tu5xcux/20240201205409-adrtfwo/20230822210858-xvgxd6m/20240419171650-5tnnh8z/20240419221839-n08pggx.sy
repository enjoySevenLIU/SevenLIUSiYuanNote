{
	"ID": "20240419221839-n08pggx",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240419221839-n08pggx",
		"title": "UFL7-2——UI管理器",
		"type": "doc",
		"updated": "20240420224044"
	},
	"Children": [
		{
			"ID": "20240419221839-m9iasa6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240419221839-m9iasa6",
				"updated": "20240419221858"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "制作UI管理器的目的"
				}
			]
		},
		{
			"ID": "20240419221901-im2uorb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240419221901-im2uorb",
				"updated": "20240419221922"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "方便管理所有UI面板，控制UI面板的显示隐藏，提供公共API供外部使用，比如："
				}
			]
		},
		{
			"ID": "20240419221917-yrx8w71",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240419221917-yrx8w71",
				"updated": "20240419221917"
			},
			"Children": [
				{
					"ID": "20240419221917-1o473zv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240419221917-1o473zv",
						"updated": "20240419221917"
					},
					"Children": [
						{
							"ID": "20240419221917-s6zfq8a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419221917-s6zfq8a",
								"updated": "20240419221917"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "显示面板"
								}
							]
						}
					]
				},
				{
					"ID": "20240419221917-d3jthrz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240419221917-d3jthrz",
						"updated": "20240419221917"
					},
					"Children": [
						{
							"ID": "20240419221917-6aedkuv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419221917-6aedkuv",
								"updated": "20240419221917"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "隐藏面板"
								}
							]
						}
					]
				},
				{
					"ID": "20240419221917-mvmeetq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240419221917-mvmeetq",
						"updated": "20240419221917"
					},
					"Children": [
						{
							"ID": "20240419221917-wwpqf7k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419221917-wwpqf7k",
								"updated": "20240419221917"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取面板"
								}
							]
						}
					]
				},
				{
					"ID": "20240419221917-fo4euub",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240419221917-fo4euub",
						"updated": "20240419221917"
					},
					"Children": [
						{
							"ID": "20240419221917-5yogyzx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419221917-5yogyzx",
								"updated": "20240419221917"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "添加自定义事件"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240419221910-ll41ues",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240419221910-ll41ues",
				"updated": "20240419221910"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "等等"
				}
			]
		},
		{
			"ID": "20240419221925-vsri3t5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240419221925-vsri3t5",
				"updated": "20240420205348"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "UI管理器层级规划"
				}
			]
		},
		{
			"ID": "20240419221937-smt5l58",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240419221937-smt5l58",
				"updated": "20240420205348"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主要思路："
				}
			]
		},
		{
			"ID": "20240419221941-ea9d9s0",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240419221941-ea9d9s0",
				"updated": "20240420205815"
			},
			"Children": [
				{
					"ID": "20240419221941-9wawhxk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240419221941-9wawhxk",
						"updated": "20240419224931"
					},
					"Children": [
						{
							"ID": "20240419221941-8tjeeq2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419221941-8tjeeq2",
								"updated": "20240419222001"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "UI面板在任何场景都会显示，因此"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Canvas"
								},
								{
									"Type": "NodeText",
									"Data": "​和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "EventSystem"
								},
								{
									"Type": "NodeText",
									"Data": "​对象应该过场景不移除，并且保证唯一性和动态创建"
								}
							]
						},
						{
							"ID": "20240419221949-q61zjne",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20240419221949-q61zjne",
								"updated": "20240419224931"
							},
							"Children": [
								{
									"ID": "20240419221949-621atyu",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20240419221949-621atyu",
										"updated": "20240419221949"
									},
									"Children": [
										{
											"ID": "20240419221949-si9d8aq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240419221949-si9d8aq",
												"updated": "20240419222010"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "UI管理器 为 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "block-ref",
													"TextMarkBlockRefID": "20240104151530-3axozd7",
													"TextMarkBlockRefSubtype": "s",
													"TextMarkTextContent": "不继承MonoBehaviour的单例模式"
												}
											]
										},
										{
											"ID": "20240419224559-atdb6jc",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20240419224559-atdb6jc",
												"style": "line-height: 22px;",
												"updated": "20240419224636"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YyM="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "public class UIManager : BaseManager\u003cUIManager\u003e\n{\n    private UIManager() { }\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								},
								{
									"ID": "20240419221949-arofl2h",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20240419221949-arofl2h",
										"updated": "20240419224931"
									},
									"Children": [
										{
											"ID": "20240419221949-st8pfwe",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240419221949-st8pfwe",
												"updated": "20240419222018"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在构造函数中动态创建设置好的 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Canvas"
												},
												{
													"Type": "NodeText",
													"Data": "​ 和 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "EventSystem"
												},
												{
													"Type": "NodeText",
													"Data": "​ 预设体(如果使用了UI摄像机，也需要单独处理摄像机预设体)"
												}
											]
										},
										{
											"ID": "20240419224654-yuxsby8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240419224654-yuxsby8",
												"updated": "20240419224738"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "先在场景上创建 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Canvas"
												},
												{
													"Type": "NodeText",
													"Data": "​ 和 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "EventSystem"
												},
												{
													"Type": "NodeText",
													"Data": "​ 以及 UI摄像机 预设体"
												}
											]
										},
										{
											"ID": "20240419224752-gju26yk",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240419224752-gju26yk",
												"updated": "20240419224752"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeImage",
													"Data": "span",
													"Children": [
														{
															"Type": "NodeBang"
														},
														{
															"Type": "NodeOpenBracket"
														},
														{
															"Type": "NodeLinkText",
															"Data": "image"
														},
														{
															"Type": "NodeCloseBracket"
														},
														{
															"Type": "NodeOpenParen"
														},
														{
															"Type": "NodeLinkDest",
															"Data": "assets/image-20240419224752-mc3k77s.png"
														},
														{
															"Type": "NodeCloseParen"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										},
										{
											"ID": "20240419224753-limugqz",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240419224753-limugqz",
												"updated": "20240419224926"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "然后，在UI管理器的构造函数内动态创建这三个预设体（方便在切换场景的情况下使用）"
												}
											]
										},
										{
											"ID": "20240419224639-zzujenh",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20240419224639-zzujenh",
												"style": "line-height: 22px;",
												"updated": "20240419224652"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YyM="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "using UnityEngine;\nusing UnityEngine.EventSystems;\n\npublic class UIManager : BaseManager\u003cUIManager\u003e\n{\n    private Camera uiCamara;\n    private Canvas uiCanvas;\n    private EventSystem uiEventSystem;\n\n    private UIManager()\n    {\n        //动态创建唯一的Canvas和EventSystem（摄像机）\n        uiCamara = GameObject.Instantiate(ResManager.Instance.Load\u003cGameObject\u003e(\"UI/UICamera\")).GetComponent\u003cCamera\u003e();\n        //UI摄像机过场景不可移除，它专门用来渲染UI面板\n        GameObject.DontDestroyOnLoad(uiCamara);\n        //动态创建Canvas，并设置使用的UI摄像机，设置过场景不可移除\n        uiCanvas = GameObject.Instantiate(ResManager.Instance.Load\u003cGameObject\u003e(\"UI/Canvas\")).GetComponent\u003cCanvas\u003e();\n        uiCanvas.worldCamera = uiCamara;\n        GameObject.DontDestroyOnLoad(uiCanvas);\n        uiEventSystem = GameObject.Instantiate(ResManager.Instance.Load\u003cGameObject\u003e(\"UI/EventSystem\")).GetComponent\u003cEventSystem\u003e();\n        GameObject.DontDestroyOnLoad(uiEventSystem);\n    }\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240419221941-zat3wws",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240419221941-zat3wws",
						"updated": "20240420205815"
					},
					"Children": [
						{
							"ID": "20240419221941-2gwszrk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419221941-2gwszrk",
								"updated": "20240419221955"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "UI面板的显示可以存在层级（前后）关系，我们可以预先创建好层级对象，提供获取层级对象的方法"
								}
							]
						},
						{
							"ID": "20240419221955-9om8hz1",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20240419221955-9om8hz1",
								"updated": "20240420205815"
							},
							"Children": [
								{
									"ID": "20240419221955-yzsnqgv",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20240419221955-yzsnqgv",
										"updated": "20240419221955"
									},
									"Children": [
										{
											"ID": "20240419221955-jnu2juf",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240419221955-jnu2juf",
												"updated": "20240419222027"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Canvas"
												},
												{
													"Type": "NodeText",
													"Data": "​ 下创建好管理层级的子对象，之后面板作为对应层级对象的子对象达到分层作用"
												}
											]
										},
										{
											"ID": "20240419225102-aax7ub5",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240419225102-aax7ub5",
												"updated": "20240419225102"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeImage",
													"Data": "span",
													"Children": [
														{
															"Type": "NodeBang"
														},
														{
															"Type": "NodeOpenBracket"
														},
														{
															"Type": "NodeLinkText",
															"Data": "image"
														},
														{
															"Type": "NodeCloseBracket"
														},
														{
															"Type": "NodeOpenParen"
														},
														{
															"Type": "NodeLinkDest",
															"Data": "assets/image-20240419225102-85744x7.png"
														},
														{
															"Type": "NodeCloseParen"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								},
								{
									"ID": "20240419221955-7cmdexs",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20240419221955-7cmdexs",
										"updated": "20240420205815"
									},
									"Children": [
										{
											"ID": "20240419221955-6u6adqn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240419221955-6u6adqn",
												"updated": "20240419221955"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "提供获取层级对象的方法"
												}
											]
										},
										{
											"ID": "20240420205359-03zmtim",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240420205359-03zmtim",
												"updated": "20240420205815"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在构造函数内从"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Canvas"
												},
												{
													"Type": "NodeText",
													"Data": "​上获取四个层级对象，声明一个枚举代表四个层级，通过传入的枚举来返回对应的层级对象"
												}
											]
										},
										{
											"ID": "20240419225935-rgzy6ac",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20240419225935-rgzy6ac",
												"style": "line-height: 22px;",
												"updated": "20240419225944"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YyM="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "using UnityEngine;\nusing UnityEngine.EventSystems;\n\n/// \u003csummary\u003e\n/// 层级枚举\n/// \u003c/summary\u003e\npublic enum E_UILayer\n{\n    Bottom,\n    Middle,\n    Top,\n    System,\n}\n\npublic class UIManager : BaseManager\u003cUIManager\u003e\n{\n    private Camera uiCamara;\n    private Canvas uiCanvas;\n    private EventSystem uiEventSystem;\n    //层级父对象\n    private Transform bottomLayer;\n    private Transform middleLayer;\n    private Transform topLayer;\n    private Transform systemLayer;\n\n    private UIManager()\n    {\n        //动态创建唯一的Canvas和EventSystem（摄像机）\n        uiCamara = GameObject.Instantiate(ResManager.Instance.Load\u003cGameObject\u003e(\"UI/UICamera\")).GetComponent\u003cCamera\u003e();\n        //UI摄像机过场景不可移除，它专门用来渲染UI面板\n        GameObject.DontDestroyOnLoad(uiCamara);\n        //动态创建Canvas，并设置使用的UI摄像机，设置过场景不可移除\n        uiCanvas = GameObject.Instantiate(ResManager.Instance.Load\u003cGameObject\u003e(\"UI/Canvas\")).GetComponent\u003cCanvas\u003e();\n        uiCanvas.worldCamera = uiCamara;\n        GameObject.DontDestroyOnLoad(uiCanvas);\n        //找到层级父对象\n        bottomLayer = uiCanvas.transform.Find(\"Bottom\");\n        middleLayer = uiCanvas.transform.Find(\"Middle\");\n        topLayer = uiCanvas.transform.Find(\"Top\");\n        systemLayer = uiCanvas.transform.Find(\"System\");\n        //动态创建EventSystem\n        uiEventSystem = GameObject.Instantiate(ResManager.Instance.Load\u003cGameObject\u003e(\"UI/EventSystem\")).GetComponent\u003cEventSystem\u003e();\n        GameObject.DontDestroyOnLoad(uiEventSystem);\n    }\n\n    /// \u003csummary\u003e\n    /// 获取对应层级的父对象\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"layer\"\u003e层级枚举值\u003c/param\u003e\n    /// \u003creturns\u003e层级父对象\u003c/returns\u003e\n    public Transform GetLayerObj(E_UILayer layer)\n    {\n        switch (layer)\n        {\n            case E_UILayer.Bottom:\n                return bottomLayer;\n            case E_UILayer.Middle:\n                return middleLayer;\n            case E_UILayer.Top:\n                return topLayer;\n            case E_UILayer.System:\n                return systemLayer;\n            default:\n                return null;\n        }\n    }\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240420205944-9uv7yas",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240420205944-9uv7yas",
				"updated": "20240420210055"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体实现"
				}
			]
		},
		{
			"ID": "20240420210053-ozoyeq3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240420210053-ozoyeq3",
				"updated": "20240420210058"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主要实现内容："
				}
			]
		},
		{
			"ID": "20240420210058-iw8k83g",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240420210058-iw8k83g",
				"updated": "20240420222915"
			},
			"Children": [
				{
					"ID": "20240420210058-5iyhpqn",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240420210058-5iyhpqn",
						"updated": "20240420222829"
					},
					"Children": [
						{
							"ID": "20240420210058-vu3khy9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240420210058-vu3khy9",
								"updated": "20240420210058"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "存储面板的容器"
								}
							]
						},
						{
							"ID": "20240420222819-l70ou2q",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240420222819-l70ou2q",
								"style": "line-height: 22px;",
								"updated": "20240420222829"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "/// \u003csummary\u003e\n/// 用于存储所有的面板对象\n/// \u003c/summary\u003e\nprivate Dictionary\u003cstring, BasePanel\u003e panelDic = new Dictionary\u003cstring, BasePanel\u003e();\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240420210058-bq0ox2m",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240420210058-bq0ox2m",
						"updated": "20240420222915"
					},
					"Children": [
						{
							"ID": "20240420210058-tzru80p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240420210058-tzru80p",
								"updated": "20240420210058"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "显示面板"
								}
							]
						},
						{
							"ID": "20240420222833-mmcwk2a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240420222833-mmcwk2a",
								"updated": "20240420222915"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "由于面板的加载可能会不可避免的是异步的"
								}
							]
						},
						{
							"ID": "20240420222741-lyxzjho",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240420222741-lyxzjho",
								"style": "line-height: 22px;",
								"updated": "20240420222745"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "/// \u003csummary\u003e\n/// 显示面板\n/// \u003c/summary\u003e\n/// \u003ctypeparam name=\"T\"\u003e面板的类型\u003c/typeparam\u003e\n/// \u003cparam name=\"layer\"\u003e面板要显示在哪个层级下\u003c/param\u003e\n/// \u003cparam name=\"callBack\"\u003e面板加载出来后的接收面板的回调函数\u003c/param\u003e\n/// \u003cparam name=\"isSync\"\u003e是否同步加载 默认为false\u003c/param\u003e\npublic void ShowPanel\u003cT\u003e(E_UILayer layer = E_UILayer.Middle, UnityAction\u003cT\u003e callBack = null, bool isSync = false) where T : BasePanel\n{\n    //获取面板名，预设体名必须与面板类名一致\n    string panelName = typeof(T).Name;\n    //存在面板\n    if (panelDic.ContainsKey(panelName)) \n    {\n        panelDic[panelName].ShowMe();\n        //直接执行回调，直接传递出去即可\n        callBack?.Invoke(panelDic[panelName] as T);\n        return;\n    }\n    //不存在面板\n    ABResManager.Instance.LoadResAsync\u003cGameObject\u003e(\"ui\", panelName, (res) =\u003e\n    {\n        //层级的处理\n        Transform layerObj = GetLayerObj(layer);\n        //避免没有按照指定规则传递参数，避免为空\n        if (layerObj == null)\n            layerObj = middleLayer;\n        //将面板预设体创建到对应父对象下，并且保持原本的缩放大小\n        GameObject panelObj = GameObject.Instantiate(res, layerObj, false);\n        T panel = panelObj.GetComponent\u003cT\u003e();   //获取对应的UI控件返回出去\n        panel.ShowMe();                         //显示面板时执行的默认方法\n        callBack?.Invoke(panel);                //传递到外部使用\n        panelDic.Add(panelName, panel);         //将显示出来的面板添加到字典内\n    }, isSync);\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240420210058-gt2mnd6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240420210058-gt2mnd6",
						"updated": "20240420210058"
					},
					"Children": [
						{
							"ID": "20240420210058-qcn31rh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240420210058-qcn31rh",
								"updated": "20240420210058"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "隐藏面板"
								}
							]
						},
						{
							"ID": "20240420222747-717rqg8",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240420222747-717rqg8",
								"style": "line-height: 22px;",
								"updated": "20240420222758"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "/// \u003csummary\u003e\n/// 隐藏面板\n/// \u003c/summary\u003e\n/// \u003ctypeparam name=\"T\"\u003e面板名\u003c/typeparam\u003e\npublic void HidePanel\u003cT\u003e() where T : BasePanel\n{\n    string panelName = typeof(T).Name;\n    if (panelDic.ContainsKey(panelName))\n    {\n        //销毁后从容器中移除\n        panelDic[panelName].HideMe();\n        GameObject.Destroy(panelDic[panelName].gameObject);\n        panelDic.Remove(panelName);\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240420210058-3u82sfz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240420210058-3u82sfz",
						"updated": "20240420210058"
					},
					"Children": [
						{
							"ID": "20240420210058-a2s31d9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240420210058-a2s31d9",
								"updated": "20240420210058"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取面板"
								}
							]
						},
						{
							"ID": "20240420222800-n8lrvtv",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240420222800-n8lrvtv",
								"style": "line-height: 22px;",
								"updated": "20240420222815"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "/// \u003csummary\u003e\n/// 获取面板\n/// \u003c/summary\u003e\n/// \u003ctypeparam name=\"T\"\u003e面板名\u003c/typeparam\u003e\npublic T GetPanel\u003cT\u003e() where T : BasePanel\n{\n    string panelName = typeof(T).Name;\n    if (panelDic.ContainsKey(panelName))\n        return panelDic[panelName] as T;\n    return null;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240420222756-4ifdehk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240420222756-4ifdehk",
				"updated": "20240420223642"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用示例"
				}
			]
		},
		{
			"ID": "20240420223725-5dfnkvt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240420223725-5dfnkvt",
				"style": "line-height: 22px;",
				"updated": "20240420223735"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine.UI;\n\npublic class BeginPanel : BasePanel\n{\n    private void Start()\n    {\n        string name = GetControl\u003cButton\u003e(\"btnBegin\").name;\n        print(name);\n    }\n\n    protected override void ClickButton(string btnName)\n    {\n        switch (btnName)\n        {\n            case \"btnBegin\":\n                print(\"开始按钮被点击\");\n                break;\n            case \"btnSetting\":\n                print(\"设置按钮被点击\");\n                break;\n            case \"btnQuit\":\n                print(\"退出按钮被点击\");\n                break;\n        }\n    }\n\n    public override void ShowMe()\n    {\n        print(\"显示面板时 BeginPanel会执行的默认逻辑\");\n    }\n\n    public override void HideMe()\n    {\n        print(\"隐藏面板时 BeginPanel会执行的默认逻辑\");\n    }\n\n    public void TestFun()\n    {\n        print(\"想要执行BeginPanel的逻辑\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240420223640-ru7h9u8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240420223640-ru7h9u8",
				"style": "line-height: 22px;",
				"updated": "20240420223642"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Update()\n{\n    if (Input.GetKeyDown(KeyCode.S))\n    {\n        UIManager.Instance.ShowPanel\u003cBeginPanel\u003e(E_UILayer.System, (panel) =\u003e\n        {\n            panel.TestFun();\n        });\n    }\n    if (Input.GetKeyDown(KeyCode.H))\n    {\n        UIManager.Instance.HidePanel\u003cBeginPanel\u003e();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240420223736-9w0rgbi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240420223736-9w0rgbi",
				"updated": "20240420223831"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "按下S键显示面板："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 580px;",
						"style": "width: 570px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240420223831-ak4b6gg.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 570px;\" parent-style=\"width: 580px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240420223834-hd6a5yb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240420223834-hd6a5yb",
				"updated": "20240420223901"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "显示面板时输出："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 352px;",
						"style": "width: 342px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240420223901-dsxr09v.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 342px;\" parent-style=\"width: 352px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240420223902-jng4mu6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240420223902-jng4mu6",
				"updated": "20240420223929"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "隐藏面板时输出："
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 351px;",
						"style": "width: 341px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240420223925-hqp3lto.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 341px;\" parent-style=\"width: 351px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240420223924-srf3rmd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240420223924-srf3rmd",
				"updated": "20240420223950"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抛出问题"
				}
			]
		},
		{
			"ID": "20240420223950-c11bb39",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240420223950-c11bb39",
				"updated": "20240420224024"
			},
			"Children": [
				{
					"ID": "20240420224003-30diu3z",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240420224003-30diu3z",
						"updated": "20240420224024"
					},
					"Children": [
						{
							"ID": "20240420224003-onvyq6z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240420224003-onvyq6z",
								"updated": "20240420224024"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果同一帧连续显示同一个面板（可能导致重复加载面板的问题），应该如何处理？"
								}
							]
						}
					]
				},
				{
					"ID": "20240420224003-2oypy3u",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240420224003-2oypy3u",
						"updated": "20240420224003"
					},
					"Children": [
						{
							"ID": "20240420224003-07ua38v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240420224003-07ua38v",
								"updated": "20240420224003"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果不想要直接销毁面板，应该如何处理？"
								}
							]
						}
					]
				},
				{
					"ID": "20240420224003-k2kubfb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240420224003-k2kubfb",
						"updated": "20240420224003"
					},
					"Children": [
						{
							"ID": "20240420224003-ltakg1w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240420224003-ltakg1w",
								"updated": "20240420224003"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果想要为控件添加一些非默认事件应该处理？"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240420224031-jzy23mx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240420224031-jzy23mx",
				"updated": "20240420224034"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体代码"
				}
			]
		},
		{
			"ID": "20240420224035-29o6rpw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240420224035-29o6rpw",
				"style": "line-height: 22px;",
				"updated": "20240420224044"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Events;\nusing UnityEngine.EventSystems;\n\n/// \u003csummary\u003e\n/// 层级枚举\n/// \u003c/summary\u003e\npublic enum E_UILayer\n{\n    Bottom,\n    Middle,\n    Top,\n    System,\n}\n\n/// \u003csummary\u003e\n/// 管理所有UI面板的管理器，注意：面板预设体名要和面板名一致\n/// \u003c/summary\u003e\npublic class UIManager : BaseManager\u003cUIManager\u003e\n{\n    private Camera uiCamara;\n    private Canvas uiCanvas;\n    private EventSystem uiEventSystem;\n    //层级父对象\n    private Transform bottomLayer;\n    private Transform middleLayer;\n    private Transform topLayer;\n    private Transform systemLayer;\n\n    /// \u003csummary\u003e\n    /// 用于存储所有的面板对象\n    /// \u003c/summary\u003e\n    private Dictionary\u003cstring, BasePanel\u003e panelDic = new Dictionary\u003cstring, BasePanel\u003e();\n\n    private UIManager()\n    {\n        //动态创建唯一的Canvas和EventSystem（摄像机）\n        uiCamara = GameObject.Instantiate(ResManager.Instance.Load\u003cGameObject\u003e(\"UI/UICamera\")).GetComponent\u003cCamera\u003e();\n        //UI摄像机过场景不可移除，它专门用来渲染UI面板\n        GameObject.DontDestroyOnLoad(uiCamara);\n        //动态创建Canvas，并设置使用的UI摄像机，设置过场景不可移除\n        uiCanvas = GameObject.Instantiate(ResManager.Instance.Load\u003cGameObject\u003e(\"UI/Canvas\")).GetComponent\u003cCanvas\u003e();\n        uiCanvas.worldCamera = uiCamara;\n        GameObject.DontDestroyOnLoad(uiCanvas);\n        //找到层级父对象\n        bottomLayer = uiCanvas.transform.Find(\"Bottom\");\n        middleLayer = uiCanvas.transform.Find(\"Middle\");\n        topLayer = uiCanvas.transform.Find(\"Top\");\n        systemLayer = uiCanvas.transform.Find(\"System\");\n        //动态创建EventSystem\n        uiEventSystem = GameObject.Instantiate(ResManager.Instance.Load\u003cGameObject\u003e(\"UI/EventSystem\")).GetComponent\u003cEventSystem\u003e();\n        GameObject.DontDestroyOnLoad(uiEventSystem);\n    }\n\n    /// \u003csummary\u003e\n    /// 获取对应层级的父对象\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"layer\"\u003e层级枚举值\u003c/param\u003e\n    /// \u003creturns\u003e层级父对象\u003c/returns\u003e\n    public Transform GetLayerObj(E_UILayer layer)\n    {\n        switch (layer)\n        {\n            case E_UILayer.Bottom:\n                return bottomLayer;\n            case E_UILayer.Middle:\n                return middleLayer;\n            case E_UILayer.Top:\n                return topLayer;\n            case E_UILayer.System:\n                return systemLayer;\n            default:\n                return null;\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 显示面板\n    /// \u003c/summary\u003e\n    /// \u003ctypeparam name=\"T\"\u003e面板的类型\u003c/typeparam\u003e\n    /// \u003cparam name=\"layer\"\u003e面板要显示在哪个层级下\u003c/param\u003e\n    /// \u003cparam name=\"callBack\"\u003e面板加载出来后的接收面板的回调函数\u003c/param\u003e\n    /// \u003cparam name=\"isSync\"\u003e是否同步加载 默认为false\u003c/param\u003e\n    public void ShowPanel\u003cT\u003e(E_UILayer layer = E_UILayer.Middle, UnityAction\u003cT\u003e callBack = null, bool isSync = false) where T : BasePanel\n    {\n        //获取面板名，预设体名必须与面板类名一致\n        string panelName = typeof(T).Name;\n        //存在面板\n        if (panelDic.ContainsKey(panelName)) \n        {\n            panelDic[panelName].ShowMe();\n            //直接执行回调，直接传递出去即可\n            callBack?.Invoke(panelDic[panelName] as T);\n            return;\n        }\n        //不存在面板\n        ABResManager.Instance.LoadResAsync\u003cGameObject\u003e(\"ui\", panelName, (res) =\u003e\n        {\n            //层级的处理\n            Transform layerObj = GetLayerObj(layer);\n            //避免没有按照指定规则传递参数，避免为空\n            if (layerObj == null)\n                layerObj = middleLayer;\n            //将面板预设体创建到对应父对象下，并且保持原本的缩放大小\n            GameObject panelObj = GameObject.Instantiate(res, layerObj, false);\n            T panel = panelObj.GetComponent\u003cT\u003e();   //获取对应的UI控件返回出去\n            panel.ShowMe();                         //显示面板时执行的默认方法\n            callBack?.Invoke(panel);                //传递到外部使用\n            panelDic.Add(panelName, panel);         //将显示出来的面板添加到字典内\n        }, isSync);\n    }\n\n    /// \u003csummary\u003e\n    /// 隐藏面板\n    /// \u003c/summary\u003e\n    /// \u003ctypeparam name=\"T\"\u003e面板名\u003c/typeparam\u003e\n    public void HidePanel\u003cT\u003e() where T : BasePanel\n    {\n        string panelName = typeof(T).Name;\n        if (panelDic.ContainsKey(panelName))\n        {\n            //销毁后从容器中移除\n            panelDic[panelName].HideMe();\n            GameObject.Destroy(panelDic[panelName].gameObject);\n            panelDic.Remove(panelName);\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 获取面板\n    /// \u003c/summary\u003e\n    /// \u003ctypeparam name=\"T\"\u003e面板名\u003c/typeparam\u003e\n    public T GetPanel\u003cT\u003e() where T : BasePanel\n    {\n        string panelName = typeof(T).Name;\n        if (panelDic.ContainsKey(panelName))\n            return panelDic[panelName] as T;\n        return null;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}