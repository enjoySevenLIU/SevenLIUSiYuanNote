{
	"ID": "20240419205108-zpj5wd4",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240419205108-zpj5wd4",
		"title": "UFL7-1——UI面板基类",
		"type": "doc",
		"updated": "20240419221704"
	},
	"Children": [
		{
			"ID": "20240419205108-wgycwlx",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240419205108-wgycwlx",
				"updated": "20240419205627"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240419205507-mju4uzb",
					"Type": "NodeHeading",
					"HeadingLevel": 3,
					"Properties": {
						"id": "20240419205507-mju4uzb",
						"updated": "20240419205507"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "前置知识点"
						}
					]
				},
				{
					"ID": "20240419205507-prof6wj",
					"Type": "NodeList",
					"ListData": {
						"Typ": 1
					},
					"Properties": {
						"id": "20240419205507-prof6wj",
						"updated": "20240419205627"
					},
					"Children": [
						{
							"ID": "20240419205507-wans7u0",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "MS4=",
								"Num": 1
							},
							"Properties": {
								"id": "20240419205507-wans7u0",
								"updated": "20240419205558"
							},
							"Children": [
								{
									"ID": "20240419205507-xuvlz4i",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240419205507-xuvlz4i",
										"updated": "20240419205558"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "里氏替换原则"
										}
									]
								}
							]
						},
						{
							"ID": "20240419205507-jn0x6n6",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "Mi4=",
								"Num": 2
							},
							"Properties": {
								"id": "20240419205507-jn0x6n6",
								"updated": "20240419205507"
							},
							"Children": [
								{
									"ID": "20240419205507-bmuua5m",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240419205507-bmuua5m",
										"updated": "20240419205507"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "​"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "Dictionary"
										},
										{
											"Type": "NodeText",
											"Data": "​ 相关知识点（C"
										},
										{
											"Type": "NodeBackslash",
											"Data": "span",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "#"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "四部曲之C"
										},
										{
											"Type": "NodeBackslash",
											"Data": "span",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "#"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "进阶中）"
										}
									]
								}
							]
						},
						{
							"ID": "20240419205507-i8jktaw",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "My4=",
								"Num": 3
							},
							"Properties": {
								"id": "20240419205507-i8jktaw",
								"updated": "20240419205525"
							},
							"Children": [
								{
									"ID": "20240419205507-t9mk3jx",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240419205507-t9mk3jx",
										"updated": "20240419205525"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "委托 闭包 相关知识点（C"
										},
										{
											"Type": "NodeBackslash",
											"Data": "span",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "#"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "四部曲之C"
										},
										{
											"Type": "NodeBackslash",
											"Data": "span",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "#"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "进阶中）"
										}
									]
								}
							]
						},
						{
							"ID": "20240419205507-1svzubp",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "NC4=",
								"Num": 4
							},
							"Properties": {
								"id": "20240419205507-1svzubp",
								"updated": "20240419205627"
							},
							"Children": [
								{
									"ID": "20240419205507-t09b9qm",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240419205507-t09b9qm",
										"updated": "20240419205627"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "​"
										},
										{
											"Type": "NodeTextMark",
											"Properties": {
												"style": "background-color: var(--b3-font-background3);"
											},
											"TextMarkType": "code block-ref text",
											"TextMarkBlockRefID": "20230708175455-zm29l8o",
											"TextMarkBlockRefSubtype": "s",
											"TextMarkTextContent": "GetComponentsInChildren"
										},
										{
											"Type": "NodeKramdownSpanIAL",
											"Data": "{: style=\"background-color: var(--b3-font-background3);\"}"
										},
										{
											"Type": "NodeText",
											"Data": "​（Unity四部曲之Unity入门中）"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240419205628-szrk08r",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240419205628-szrk08r",
				"updated": "20240419210622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现UI面板基类"
				}
			]
		},
		{
			"ID": "20240419210627-hudlaf3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240419210627-hudlaf3",
				"updated": "20240419210627"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主要实现思路：\n在基类中完成声明组件、查找组件、监听组件相关功能\n让子类可以直接处理事件逻辑，获取指定控件"
				}
			]
		},
		{
			"ID": "20240419210627-3sx9snv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240419210627-3sx9snv",
				"updated": "20240419210638"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主要实现内容："
				}
			]
		},
		{
			"ID": "20240419210638-eqr3fv0",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240419210638-eqr3fv0",
				"updated": "20240419221250"
			},
			"Children": [
				{
					"ID": "20240419210638-apapzes",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240419210638-apapzes",
						"updated": "20240419210638"
					},
					"Children": [
						{
							"ID": "20240419210638-rjxtge2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419210638-rjxtge2",
								"updated": "20240419210638"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通用的查找组件功能"
								}
							]
						},
						{
							"ID": "20240419210641-d5e4wss",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419210641-d5e4wss",
								"updated": "20240419211053"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们可以使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "GetComponentsInChildren"
								},
								{
									"Type": "NodeText",
									"Data": "​方法，来查找面板下所有的UI控件，将其添加到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Dictionary\u0026lt;string, UIBehaviour\u0026gt;"
								},
								{
									"Type": "NodeText",
									"Data": "​字典内统一管理"
								}
							]
						},
						{
							"ID": "20240419212313-0jz7vic",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419212313-0jz7vic",
								"updated": "20240419212440"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "注意，往往面板上会存在一般不会使用的同名的默认名控件，如"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Text (TMP)"
								},
								{
									"Type": "NodeText",
									"Data": "​，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Image"
								},
								{
									"Type": "NodeText",
									"Data": "​等等\n因此我们声明一个列表，记录各个控件的默认名，当获取到控件和默认名一致时，就跳过该控件"
								}
							]
						},
						{
							"ID": "20240419212319-3ozapzm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419212319-3ozapzm",
								"updated": "20240419213312"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "还有一种情况是，一个UI对象上挂载了多个不同的控件脚本，对于这种情况，我们可以调整控件查找的先后顺序，越重要的越先找\n重要的控件就会先被记录，而后面即使找到了同一UI对象上的另外一个控件，它也不会覆盖原来在字典内的记录的控件\n这样，即使我们需要这个另外一个控件，我们也可以通过记录的控件找到依附的对象，进而找到另外一个控件"
								}
							]
						},
						{
							"ID": "20240419210930-5404vip",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240419210930-5404vip",
								"style": "line-height: 22px;",
								"updated": "20240419213612"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "/// \u003csummary\u003e\n/// 用于存储所有要用到的UI控件，用里氏替换原则 父类装子类（所有UI控件）\n/// \u003c/summary\u003e\nprotected Dictionary\u003cstring, UIBehaviour\u003e controlDic = new Dictionary\u003cstring, UIBehaviour\u003e();\n\n/// \u003csummary\u003e\n/// 控件的默认名，如果得到的控件名字存在于这个容器，则说明该容器我们不会使用，它只是会起到显示作用的控件\n/// \u003c/summary\u003e\nprivate static List\u003cstring\u003e defaultNameList = new List\u003cstring\u003e\n{\n    \"Image\",\n    \"Text (TMP)\",\n    \"RawImage\",\n    \"Background\",\n    \"Checkmark\",\n    \"Label\",\n    \"Text (Legacy)\",\n    \"Arrow\",\n    \"Placeholder\",\n    \"Fill\",\n    \"Handle\",\n    \"Viewport\",\n    \"Scrollbar Horizontal\",\n    \"Scrollbar Vertical\"\n};\n\nprotected virtual void Awake()\n{\n    FindChildrenControl\u003cButton\u003e();\n    FindChildrenControl\u003cToggle\u003e();\n    FindChildrenControl\u003cSlider\u003e();\n    FindChildrenControl\u003cInputField\u003e();\n    FindChildrenControl\u003cScrollRect\u003e();\n    FindChildrenControl\u003cDropdown\u003e();\n    //即使对象上挂载了多个组件，只要优先找到了重要组件，之后也可以通过重要组件，得到身上其他的挂载的内容\n    FindChildrenControl\u003cText\u003e();\n    FindChildrenControl\u003cTextMeshPro\u003e();\n    FindChildrenControl\u003cImage\u003e();\n}\n\nprivate void FindChildrenControl\u003cT\u003e() where T : UIBehaviour\n{\n    T[] controls = this.GetComponentsInChildren\u003cT\u003e(true);\n    for (int i = 0; i \u003c controls.Length; i++)\n    {\n        //通过正在方式，将对应组件记录到字典中\n        if (!controlDic.ContainsKey(controls[i].gameObject.name))\n        {\n            if (!defaultNameList.Contains(controls[i].gameObject.name))\n                controlDic.Add(controls[i].gameObject.name, controls[i]);\n        }\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240419210638-dxfunpm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240419210638-dxfunpm",
						"updated": "20240419210638"
					},
					"Children": [
						{
							"ID": "20240419210638-xzm5iu8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419210638-xzm5iu8",
								"updated": "20240419210638"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通用的添加事件功能"
								}
							]
						},
						{
							"ID": "20240419214132-au8yq4y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419214132-au8yq4y",
								"updated": "20240419220129"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们可以在每次找到一个控件时，就根据控件的类型来添加对应的监听方法，监听方法内执行通用的监听方法，通用方法在子类重写\n为了区分不同的控件，我们利用闭包，将装载控件名字的临时变量传入到通用监听方法内，\n这样，子类在重写通用监听方法时可以根据传入的控件名不同执行不同的逻辑"
								}
							]
						},
						{
							"ID": "20240419215744-skvz4j4",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240419215744-skvz4j4",
								"style": "line-height: 22px;",
								"updated": "20240419220056"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "protected Dictionary\u003cstring, UIBehaviour\u003e controlDic = new Dictionary\u003cstring, UIBehaviour\u003e();\n\nprivate void FindChildrenControl\u003cT\u003e() where T : UIBehaviour\n{\n    T[] controls = this.GetComponentsInChildren\u003cT\u003e(true);\n    for (int i = 0; i \u003c controls.Length; i++)\n    {\n        string controlName = controls[i].gameObject.name;\n        //通过正在方式，将对应组件记录到字典中\n        if (!controlDic.ContainsKey(controlName))\n        {\n            if (!defaultNameList.Contains(controlName))\n            {\n                controlDic.Add(controlName, controls[i]);\n                //根据控件的类型，决定是否加事件监听\n                if (controls[i] is Button btn)\n                {\n                    btn.onClick.AddListener(() =\u003e\n                    {\n                        ClickButton(controlName);\n                    });\n                }\n                else if (controls[i] is Toggle tog)\n                {\n                    tog.onValueChanged.AddListener((value) =\u003e\n                    {\n                        ToggleValueChange(controlName, value);\n                    });\n                }\n                else if (controls[i] is Slider slider)\n                {\n                    slider.onValueChanged.AddListener((value) =\u003e\n                    {\n                        SliderValueChange(controlName, value);\n                    });\n                }\n            }\n        }\n    }\n}\n\nprotected virtual void ClickButton(string btnName) { }\n\nprotected virtual void SliderValueChange(string sliderName, float value) { }\n\nprotected virtual void ToggleValueChange(string toggleName, bool value) { }\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240419220031-v53589k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419220031-v53589k",
								"updated": "20240419220108"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用示例："
								}
							]
						},
						{
							"ID": "20240419220035-uo72gyj",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240419220035-uo72gyj",
								"style": "line-height: 22px;",
								"updated": "20240419220044"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class BeginPanel : BasePanel\n{\n    private void Start()\n    {\n        foreach (string item in controlDic.Keys)\n        {\n            print(item);\n        }\n    }\n\n    protected override void ClickButton(string btnName)\n    {\n        switch (btnName)\n        {\n            case \"btnBegin\":\n                print(\"开始按钮被点击\");\n                break;\n            case \"btnSetting\":\n                print(\"设置按钮被点击\");\n                break;\n            case \"btnQuit\":\n                print(\"退出按钮被点击\");\n                break;\n        }\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240419210638-h6yctis",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240419210638-h6yctis",
						"updated": "20240419210638"
					},
					"Children": [
						{
							"ID": "20240419210638-5v1eeus",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419210638-5v1eeus",
								"updated": "20240419210638"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "显示面板、隐藏面板时的逻辑执行虚函数"
								}
							]
						},
						{
							"ID": "20240419220530-oqfgt2h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419220530-oqfgt2h",
								"updated": "20240419220610"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将基类声明为抽象类，将显示和隐藏方法声明为抽象方法，这样，子类面板类就必须要实现它们"
								}
							]
						},
						{
							"ID": "20240419220136-ebvgfo1",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240419220136-ebvgfo1",
								"style": "line-height: 22px;",
								"updated": "20240419220524"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public abstract class BasePanel : MonoBehaviour\n{\n    /// \u003csummary\u003e\n    /// 面板显示时会调用的逻辑\n    /// \u003c/summary\u003e\n    public abstract void ShowMe();\n\n    /// \u003csummary\u003e\n    /// 面板隐藏时会调用的逻辑\n    /// \u003c/summary\u003e\n    public abstract void HideMe();\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240419210638-cfnyfxc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240419210638-cfnyfxc",
						"updated": "20240419221250"
					},
					"Children": [
						{
							"ID": "20240419210638-75dmxz2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419210638-75dmxz2",
								"updated": "20240419210638"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取指定组件的功能"
								}
							]
						},
						{
							"ID": "20240419220612-5rdy6w2",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240419220612-5rdy6w2",
								"style": "line-height: 22px;",
								"updated": "20240419221250"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public T GetControl\u003cT\u003e(string name) where T : UIBehaviour\n{\n    if (controlDic.ContainsKey(name))\n    {\n        T control = controlDic[name] as T;\n        if (control == null)\n        {\n            Debug.LogError($\"不存在对应名字{name}类型为{typeof(T)}的组件\");\n            return null;\n        }\n        return control;\n    }\n    else\n    {\n        Debug.LogError($\"不存在对应名字{name}的组件\");\n        return null;\n    }  \n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240419210636-v8aqbu5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240419210636-v8aqbu5",
				"updated": "20240419210636"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "等等"
				}
			]
		},
		{
			"ID": "20240419210627-mk8paeg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240419210627-mk8paeg",
				"updated": "20240419221349"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "关键点：制定控件命名规则"
				}
			]
		},
		{
			"ID": "20240419210631-0t7ulqz",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240419210631-0t7ulqz",
				"updated": "20240419210631"
			},
			"Children": [
				{
					"ID": "20240419210631-82utox9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240419210631-82utox9",
						"updated": "20240419210631"
					},
					"Children": [
						{
							"ID": "20240419210631-2i2jf6t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419210631-2i2jf6t",
								"updated": "20240419221352"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "要使用的组件需要改名"
								}
							]
						}
					]
				},
				{
					"ID": "20240419210631-c5t3atr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240419210631-c5t3atr",
						"updated": "20240419210631"
					},
					"Children": [
						{
							"ID": "20240419210631-jnwxfzt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240419210631-jnwxfzt",
								"updated": "20240419221358"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "不使用只用于显示的组件可以使用默认名"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240419221416-6396kas",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240419221416-6396kas",
				"updated": "20240419221420"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用示例"
				}
			]
		},
		{
			"ID": "20240419221432-7udvvpi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240419221432-7udvvpi",
				"updated": "20240419221704"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要挂载到面板对象上面板类需要继承"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BasePanel"
				},
				{
					"Type": "NodeText",
					"Data": "​，需要重写"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ShowMe"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "HideMe"
				},
				{
					"Type": "NodeText",
					"Data": "​供UI管理器显示面板时调用\n如果要为面板上的控件添加监听方法，需要就需要重写通用监听方法，通过传入的控件名来执行不同的逻辑"
				}
			]
		},
		{
			"ID": "20240419221420-6c82z5b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240419221420-6c82z5b",
				"style": "line-height: 22px;",
				"updated": "20240419221420"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine.UI;\n\npublic class BeginPanel : BasePanel\n{\n    private void Start()\n    {\n        string name = GetControl\u003cButton\u003e(\"btnBegin\").name;\n        print(name);\n    }\n\n    protected override void ClickButton(string btnName)\n    {\n        switch (btnName)\n        {\n            case \"btnBegin\":\n                print(\"开始按钮被点击\");\n                break;\n            case \"btnSetting\":\n                print(\"设置按钮被点击\");\n                break;\n            case \"btnQuit\":\n                print(\"退出按钮被点击\");\n                break;\n        }\n    }\n\n    public override void ShowMe()\n    {\n    }\n\n    public override void HideMe()\n    {\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240419221358-b5qe8g2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240419221358-b5qe8g2",
				"updated": "20240419221405"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体代码"
				}
			]
		},
		{
			"ID": "20240419221344-lqqmn09",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240419221344-lqqmn09",
				"style": "line-height: 22px;",
				"updated": "20240419221412"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Collections.Generic;\nusing TMPro;\nusing UnityEngine;\nusing UnityEngine.EventSystems;\nusing UnityEngine.UI;\n\npublic abstract class BasePanel : MonoBehaviour\n{\n    /// \u003csummary\u003e\n    /// 用于存储所有要用到的UI控件，用里氏替换原则 父类装子类（所有UI控件）\n    /// \u003c/summary\u003e\n    protected Dictionary\u003cstring, UIBehaviour\u003e controlDic = new Dictionary\u003cstring, UIBehaviour\u003e();\n\n    /// \u003csummary\u003e\n    /// 控件的默认名，如果得到的控件名字存在于这个容器，则说明该容器我们不会使用，它只是会起到显示作用的控件\n    /// \u003c/summary\u003e\n    private static List\u003cstring\u003e defaultNameList = new List\u003cstring\u003e\n    {\n        \"Image\",\n        \"Text (TMP)\",\n        \"RawImage\",\n        \"Background\",\n        \"Checkmark\",\n        \"Label\",\n        \"Text (Legacy)\",\n        \"Arrow\",\n        \"Placeholder\",\n        \"Fill\",\n        \"Handle\",\n        \"Viewport\",\n        \"Scrollbar Horizontal\",\n        \"Scrollbar Vertical\"\n    };\n\n    protected virtual void Awake()\n    {\n        FindChildrenControl\u003cButton\u003e();\n        FindChildrenControl\u003cToggle\u003e();\n        FindChildrenControl\u003cSlider\u003e();\n        FindChildrenControl\u003cInputField\u003e();\n        FindChildrenControl\u003cScrollRect\u003e();\n        FindChildrenControl\u003cDropdown\u003e();\n        //即使对象上挂载了多个组件，只要优先找到了重要组件\n        //之后也可以通过重要组件，得到身上其他的挂载的内容\n        FindChildrenControl\u003cText\u003e();\n        FindChildrenControl\u003cTextMeshPro\u003e();\n        FindChildrenControl\u003cImage\u003e();\n    }\n\n    /// \u003csummary\u003e\n    /// 面板显示时会调用的逻辑\n    /// \u003c/summary\u003e\n    public abstract void ShowMe();\n\n    /// \u003csummary\u003e\n    /// 面板隐藏时会调用的逻辑\n    /// \u003c/summary\u003e\n    public abstract void HideMe();\n\n    /// \u003csummary\u003e\n    /// 获取指定名字以及指定类型的组件\n    /// \u003c/summary\u003e\n    /// \u003ctypeparam name=\"T\"\u003e组件类型\u003c/typeparam\u003e\n    /// \u003cparam name=\"name\"\u003e组件名字\u003c/param\u003e\n    /// \u003creturns\u003e找到的组件（如果找不到会返回null）\u003c/returns\u003e\n    public T GetControl\u003cT\u003e(string name) where T : UIBehaviour\n    {\n        if (controlDic.ContainsKey(name))\n        {\n            T control = controlDic[name] as T;\n            if (control == null)\n            {\n                Debug.LogError($\"不存在对应名字{name}类型为{typeof(T)}的组件\");\n                return null;\n            }\n            return control;\n        }\n        else\n        {\n            Debug.LogError($\"不存在对应名字{name}的组件\");\n            return null;\n        }  \n    }\n\n    private void FindChildrenControl\u003cT\u003e() where T : UIBehaviour\n    {\n        T[] controls = this.GetComponentsInChildren\u003cT\u003e(true);\n        for (int i = 0; i \u003c controls.Length; i++)\n        {\n            string controlName = controls[i].gameObject.name;\n            //通过正在方式，将对应组件记录到字典中\n            if (!controlDic.ContainsKey(controlName))\n            {\n                if (!defaultNameList.Contains(controlName))\n                {\n                    controlDic.Add(controlName, controls[i]);\n                    //根据控件的类型，决定是否加事件监听\n                    if (controls[i] is Button btn)\n                    {\n                        btn.onClick.AddListener(() =\u003e\n                        {\n                            ClickButton(controlName);\n                        });\n                    }\n                    else if (controls[i] is Toggle tog)\n                    {\n                        tog.onValueChanged.AddListener((value) =\u003e\n                        {\n                            ToggleValueChange(controlName, value);\n                        });\n                    }\n                    else if (controls[i] is Slider slider)\n                    {\n                        slider.onValueChanged.AddListener((value) =\u003e\n                        {\n                            SliderValueChange(controlName, value);\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    protected virtual void ClickButton(string btnName) { }\n\n    protected virtual void SliderValueChange(string sliderName, float value) { }\n\n    protected virtual void ToggleValueChange(string toggleName, bool value) { }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}