{
	"ID": "20240415150008-2ba7e98",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240415150008-2ba7e98",
		"title": "UFL1-4——“饿汉”单例模式与“懒汉”单例模式",
		"type": "doc",
		"updated": "20240416221415"
	},
	"Children": [
		{
			"ID": "20240415150031-x2iqtws",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240415150031-x2iqtws",
				"updated": "20240415150031"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "“饿汉”单例模式与“懒汉单例模式”"
				}
			]
		},
		{
			"ID": "20240415150031-zgu4qnk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240415150031-zgu4qnk",
				"updated": "20240415150031"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "“懒汉”单例模式"
				}
			]
		},
		{
			"ID": "20240415150031-x5ewong",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240415150031-x5ewong",
				"updated": "20240415150031"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们在课程中学习的都是“懒汉”单例模式。主要特点是在属性或者方法中进行判空后再实例化。如下："
				}
			]
		},
		{
			"ID": "20240415150031-ml7dv2f",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240415150031-ml7dv2f",
				"style": "line-height: 22px;",
				"updated": "20240415150139"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class BaseManager\u003cT\u003e where T : class, new()\n{\n    private static T instance;\n\n    public static T Instance\n    {\n        get\n        {\n            if (instance == null)\n                instance = new T();\n            return instance;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240415150031-u50buak",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240415150031-u50buak",
				"updated": "20240415150031"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "懒"
				},
				{
					"Type": "NodeText",
					"Data": "字体现在："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "这种单例模式只会在第一次使用时才创建事例，而不是应用程序启动时就创建。"
				},
				{
					"Type": "NodeText",
					"Data": "\n有一种“敌不动我不动”，“催一下动一下”的感觉"
				}
			]
		},
		{
			"ID": "20240415150031-h9pty82",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240415150031-h9pty82",
				"updated": "20240415150031"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它的好处也在于此，因为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "只有当我们代码中需要用到某个单例模式对象时才会去实例化分配内存"
				},
				{
					"Type": "NodeText",
					"Data": "。\n在商业项目中，游戏系统是非常多的，内存开销也是较大的，懒汉模式的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "延迟实例化特点"
				},
				{
					"Type": "NodeText",
					"Data": "可以帮助我们在一定程度上缓解一丁点的内存压力。\n（因为用才分配，不用不分配）"
				}
			]
		},
		{
			"ID": "20240415150031-e3aaaop",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240415150031-e3aaaop",
				"updated": "20240415150031"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "“饿汉”单例模式"
				}
			]
		},
		{
			"ID": "20240415150031-41xw8fp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240415150031-41xw8fp",
				"updated": "20240415150031"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "“饿汉”单例模式的特点是：通过静态变量在程序开始时就会声明的特性，使单例对象在在程序开始时就实例化，传统写法如下"
				}
			]
		},
		{
			"ID": "20240415150031-tgedpwr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240415150031-tgedpwr",
				"style": "line-height: 22px;",
				"updated": "20240415150031"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class GameManager\n{\n    private static GameManager instance = new GameManager();\n    public static GameManager Instance =\u003e instance;\n    private GameManager() { }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240415150031-bmb7h6h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240415150031-bmb7h6h",
				"updated": "20240415150031"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "饿"
				},
				{
					"Type": "NodeText",
					"Data": "字的体现在："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "这种单例模式在应用程序启动时就创建事例，无论是否使用该事例"
				},
				{
					"Type": "NodeText",
					"Data": "。\n相当于不管我“吃不吃”，我就要创建它，先放在那，一种“饥不择食”的感觉。"
				}
			]
		},
		{
			"ID": "20240415150031-j57wdgk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240415150031-j57wdgk",
				"updated": "20240415150031"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虽然看起来“饿汉”没有“懒汉”那么好，但实际上，“饿汉”最大的优点就是“懒汉”的缺点，\n因为“饿汉”不用在实例化时考虑线程安全问题，它具有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "天生的线程安全"
				},
				{
					"Type": "NodeText",
					"Data": "。\n而“懒汉”在接下来的学习中，就可以感受到，我们需要考虑多线程的并发访问问题。"
				}
			]
		},
		{
			"ID": "20240415150031-44i2k3l",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240415150031-44i2k3l",
				"updated": "20240415150031"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "两者如何选择"
				}
			]
		},
		{
			"ID": "20240415150031-2cb52ng",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240415150031-2cb52ng",
				"updated": "20240415150031"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实际开发当中，我们"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "使用“懒汉”单例模式更多"
				},
				{
					"Type": "NodeText",
					"Data": "，因为它"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "延迟性实例化"
				},
				{
					"Type": "NodeText",
					"Data": "的特点的诱惑力更强。"
				}
			]
		}
	]
}