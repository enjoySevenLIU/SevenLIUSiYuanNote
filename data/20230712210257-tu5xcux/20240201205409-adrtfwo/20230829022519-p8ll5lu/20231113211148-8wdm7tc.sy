{
	"ID": "20231113211148-8wdm7tc",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20231113211148-8wdm7tc",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231113211148-8wdm7tc\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231113211148-wul4i8v\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231113212536-4wnu47e\u0026quot;,\u0026quot;scrollTop\u0026quot;:1123,\u0026quot;focusId\u0026quot;:\u0026quot;20231113211148-wul4i8v\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;",
		"title": "UMVCL8——MVX 之 MVVM",
		"updated": "20231114121920"
	},
	"Children": [
		{
			"ID": "20231113211148-wul4i8v",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20231113211148-wul4i8v",
				"updated": "20231113211418"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MVVM"
				}
			]
		},
		{
			"ID": "20231113211418-0sbg1rx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113211418-0sbg1rx",
				"updated": "20231113211502"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "全称为模型(Model)—视图(View)—视图模型(ViewModel)\nModel提供数据，View负责界面，ViewModel负责逻辑的处理\nMVVM的由来是MVP（Model-View-Presenter）模式与WPF结合应用时发展演变过来的一种新型框架"
				}
			]
		},
		{
			"ID": "20231113211621-969ydd3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231113211621-969ydd3",
				"updated": "20231113211622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MVVM和MVP的对比"
				}
			]
		},
		{
			"ID": "20231113211629-695f22b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113211629-695f22b",
				"updated": "20231113211629"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 639px;",
						"style": "width: 629px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20231113211629-ysv5dxe.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 629px;\" parent-style=\"width: 639px;\"}"
				}
			]
		},
		{
			"ID": "20231113211632-10qtyyq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231113211632-10qtyyq",
				"updated": "20231113211638"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "什么是数据绑定"
				}
			]
		},
		{
			"ID": "20231113211702-p9i3wt1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113211702-p9i3wt1",
				"updated": "20231113211953"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将一个用户界面元素（控件）的属性，绑定到一个类型（对象）实例上的某个属性的方法。\n如果开发者有一个MainViewMode类型的实例，那么他就可以把MainViewMode的“Lev”属性绑定到一个UI中Text的“Text”属性上。\n“绑定”了这2个属性之后，对Text的Text属性的更改将“传播”到MainViewMode的Lev属性，\n而对MainViewMode的Lev属性的更改同样 会“传播”到Text的Text属性"
				}
			]
		},
		{
			"ID": "20231113212009-1pphhcz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113212009-1pphhcz",
				"updated": "20231113212009"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 599px;",
						"style": "width: 589px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20231113212009-p387be6.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 589px;\" parent-style=\"width: 599px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20231113212040-zlgo98a",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231113212040-zlgo98a",
				"updated": "20231113212042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MVVM在Unity中水土不服"
				}
			]
		},
		{
			"ID": "20231113212053-r7cmx5i",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231113212053-r7cmx5i",
				"updated": "20231113212125"
			},
			"Children": [
				{
					"ID": "20231113212103-0jfov44",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231113212103-0jfov44",
						"updated": "20231113212103"
					},
					"Children": [
						{
							"ID": "20231113212103-6qx8qj4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231113212103-6qx8qj4",
								"updated": "20231113212103"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "View对象始终由我们来书写，并没有UI配置文件（如WPF中的XAML）的存在"
								}
							]
						}
					]
				},
				{
					"ID": "20231113212103-rb823cp",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231113212103-rb823cp",
						"updated": "20231113212125"
					},
					"Children": [
						{
							"ID": "20231113212103-vry02iq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231113212103-vry02iq",
								"updated": "20231113212125"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "硬要在Unity中实现MVVM，需要写三模块，并且还要对V和VM进行数据绑定，工作量大，好处也不够明显"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231113212134-1macjwn",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231113212134-1macjwn",
				"updated": "20231113212142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Unity的第三方MVVM框架"
				}
			]
		},
		{
			"ID": "20231113212142-1e3lklg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20231113212142-1e3lklg",
				"updated": "20231113212215"
			},
			"Children": [
				{
					"ID": "20231113212151-qocx2hc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231113212151-qocx2hc",
						"updated": "20231113212211"
					},
					"Children": [
						{
							"ID": "20231113212151-ixfmmy8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231113212151-ixfmmy8",
								"updated": "20231113212159"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Loxodon Framework"
								}
							]
						},
						{
							"ID": "20231113212159-ynqtgms",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231113212159-ynqtgms",
								"updated": "20231113212211"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://github.com/vovgou/loxodon-framework",
									"TextMarkTextContent": "https://github.com/vovgou/loxodon-framework"
								}
							]
						}
					]
				},
				{
					"ID": "20231113212154-aa88g2w",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231113212154-aa88g2w",
						"updated": "20231113212215"
					},
					"Children": [
						{
							"ID": "20231113212154-y04ndmw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231113212154-y04ndmw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "uMVVM "
								}
							]
						},
						{
							"ID": "20231113212157-xvnqnqr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231113212157-xvnqnqr",
								"updated": "20231113212215"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://github.com/MEyes/uMVVM",
									"TextMarkTextContent": "https://github.com/MEyes/uMVVM"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231113212224-uqki7ti",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231113212224-uqki7ti",
				"updated": "20231113212235"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "唐老狮的MVVM粗暴变式——MP"
				}
			]
		},
		{
			"ID": "20231113212312-owjhga0",
			"Type": "NodeSuperBlock",
			"Properties": {
				"id": "20231113212312-owjhga0",
				"updated": "20231113212315"
			},
			"Children": [
				{
					"Type": "NodeSuperBlockOpenMarker"
				},
				{
					"Type": "NodeSuperBlockLayoutMarker",
					"Data": "col"
				},
				{
					"ID": "20231113212239-balfvk0",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20231113212239-balfvk0",
						"updated": "20231113212315"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "MVVM中的关键是V和VM的数据双向绑定，即改变V或者VM对方的属性，对方也会随之变化，一切对外的的处理都通过VM来处理了，\nV只负责更新和显示。"
						}
					]
				},
				{
					"ID": "20231113212309-b6p5tlc",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20231113212309-b6p5tlc",
						"updated": "20231113212312"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "​"
						},
						{
							"Type": "NodeImage",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeBang"
								},
								{
									"Type": "NodeOpenBracket"
								},
								{
									"Type": "NodeLinkText",
									"Data": "image"
								},
								{
									"Type": "NodeCloseBracket"
								},
								{
									"Type": "NodeOpenParen"
								},
								{
									"Type": "NodeLinkDest",
									"Data": "assets/image-20231113212309-a6oki6u.png"
								},
								{
									"Type": "NodeCloseParen"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "​"
						}
					]
				},
				{
					"Type": "NodeSuperBlockCloseMarker"
				}
			]
		},
		{
			"ID": "20231113212256-89s290d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113212256-89s290d"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那么我们尝试将他们合二为一，并且达到将界面和逻辑某种意义上的解耦即可。"
				}
			]
		},
		{
			"ID": "20231113212536-4wnu47e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113212536-4wnu47e"
			}
		}
	]
}