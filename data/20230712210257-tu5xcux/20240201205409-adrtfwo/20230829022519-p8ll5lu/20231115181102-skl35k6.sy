{
	"ID": "20231115181102-skl35k6",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20231115181102-skl35k6",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231115181102-skl35k6\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231115181102-gkr72dl\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231115205851-mb6x0ga\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20231115192236-hdsv9pf\u0026quot;,\u0026quot;focusStart\u0026quot;:14,\u0026quot;focusEnd\u0026quot;:14\u0026#125;",
		"title": "UMVCSL7——PureMVC框架UI实例",
		"updated": "20231115215024"
	},
	"Children": [
		{
			"ID": "20231115181102-gkr72dl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115181102-gkr72dl",
				"updated": "20231115181212"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意！需要先将前面6节课的内容看完再来接着看这里的内容"
				}
			]
		},
		{
			"ID": "20231115213608-t6o4z5i",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231115213608-t6o4z5i",
				"updated": "20231115213611"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20231115213611-197agcr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115213611-197agcr",
				"style": "line-height: 22px;",
				"updated": "20231115215024"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Notifier.Facade                //继承了Notifier的类（SimpleCommand、Mediator、Proxy都继承了该类）可以直接调用场景上唯一的Facade\nNotifier.SendNotification()    //继承了Notifier的类可以直接发送通知\nFacade.HasMediator()           //传入Mediator的名字，检测是否有该Mediator\nFacade.RegisterMediator()      //传入Mediator对象，注册Mediator\nFacade.RetrieveMediator()      //传入Mediator的名字，获取特定的Mediator\nFacade.HasProxy()              //传入Proxy的名字，检测是否有该Proxy\nFacade.RegisterProxy()         //传入Proxy对象，注册Proxy\nFacade.RetrieveProxy()         //传入Proxy的名字，检测是否有该Proxy\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115181158-w5faq11",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231115181158-w5faq11",
				"updated": "20231115184756"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "显示面板"
				}
			]
		},
		{
			"ID": "20231115192030-me4lah4",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20231115192030-me4lah4",
				"updated": "20231115192502"
			},
			"Children": [
				{
					"ID": "20231115192034-u1zacur",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231115192034-u1zacur",
						"updated": "20231115192034"
					},
					"Children": [
						{
							"ID": "20231115192034-nmxnosx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231115192034-nmxnosx",
								"updated": "20231115192220"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Command"
								},
								{
									"Type": "NodeText",
									"Data": "​命令与显示面板的通知绑定"
								}
							]
						}
					]
				},
				{
					"ID": "20231115192220-yjy4jxo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231115192220-yjy4jxo"
					},
					"Children": [
						{
							"ID": "20231115192220-t115cdt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231115192220-t115cdt",
								"updated": "20231115192305"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在该"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Command"
								},
								{
									"Type": "NodeText",
									"Data": "​命令的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Execute()"
								},
								{
									"Type": "NodeText",
									"Data": "​方法内实现显示面板"
								}
							]
						}
					]
				},
				{
					"ID": "20231115192236-czbpbje",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231115192236-czbpbje",
						"updated": "20231115192502"
					},
					"Children": [
						{
							"ID": "20231115192236-hdsv9pf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231115192236-hdsv9pf",
								"updated": "20231115192502"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "首先检测是否注册过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Mediator"
								},
								{
									"Type": "NodeText",
									"Data": "​，没有就注册"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Mediator"
								},
								{
									"Type": "NodeText",
									"Data": "​，并将该"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Mediator"
								},
								{
									"Type": "NodeText",
									"Data": "​关联到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "View"
								},
								{
									"Type": "NodeText",
									"Data": "​控件"
								}
							]
						}
					]
				},
				{
					"ID": "20231115192433-gqqgel7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231115192433-gqqgel7",
						"updated": "20231115192444"
					},
					"Children": [
						{
							"ID": "20231115192433-5lqp8iq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231115192433-5lqp8iq",
								"updated": "20231115192444"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Mediator"
								},
								{
									"Type": "NodeText",
									"Data": "​来执行显示面板方法"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231115184756-xeqf34o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115184756-xeqf34o",
				"updated": "20231115184946"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先我们需要声明一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ShowPanelCommand"
				},
				{
					"Type": "NodeText",
					"Data": "​的命令，在该命令里实现显示面板的方法"
				}
			]
		},
		{
			"ID": "20231115184859-ndapny2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115184859-ndapny2",
				"style": "line-height: 22px;",
				"updated": "20231115184934"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using PureMVC.Interfaces;\nusing PureMVC.Patterns.Command;\nusing UnityEngine;\n\npublic class ShowPanelCommand : SimpleCommand\n{\n    public override void Execute(INotification notification)\n    {\n        base.Execute(notification);\n        //写面板创建的逻辑\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115184939-ldq3016",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115184939-ldq3016",
				"updated": "20231115185104"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后将该命令在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Facade"
				},
				{
					"Type": "NodeText",
					"Data": "​类里注册，与"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SHOW_PANEL"
				},
				{
					"Type": "NodeText",
					"Data": "​这个通知绑定"
				}
			]
		},
		{
			"ID": "20231115185010-ssf68s5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115185010-ssf68s5",
				"style": "line-height: 22px;",
				"updated": "20231115185139"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using PureMVC.Patterns.Facade;\n\npublic class GameFacade : Facade\n{\n    //套路写法\n    //1.继承PureMVC中的Facade脚本\n    //2.为了方便使用Facade 我们需要自己写一个单例模式的属性\n    //3.初始化 控制层相关的内容\n    //4.必须定义一个启动函数\n\n    //2.为了方便使用Facade 我们需要自己写一个单例模式的属性 ??= 是空赋值运算符，当instance为null时，执行运算符后面的表达式\n    public static GameFacade Instance =\u003e (instance ??= new GameFacade()) as GameFacade;\n\n    //3.初始化 控制层相关的内容\n    protected override void InitializeController()\n    {\n        base.InitializeController();\n        //这里面要写一些 关于 命令和通知 绑定的逻辑\n        RegisterCommand(PureNotification.START_UP, () =\u003e { return new StartUpCommand(); });\n        RegisterCommand(PureNotification.SHOW_PANEL, () =\u003e { return new ShowPanelCommand(); });\n    }\n\n    //4.必须定义一个启动函数\n    public void StartUp()\n    {\n        //发送通知，发送通知时可以传入object参数，供监听者调用这个object，就像事件中心那样\n        SendNotification(PureNotification.START_UP);  \n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115185743-w2yw925",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115185743-w2yw925",
				"updated": "20231115185916"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来即可在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ShowPanelCommand"
				},
				{
					"Type": "NodeText",
					"Data": "​内实现显示面板的方法\n我们可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Execute()"
				},
				{
					"Type": "NodeText",
					"Data": "​传入的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "notification.body"
				},
				{
					"Type": "NodeText",
					"Data": "​（通知者传入的对象参数）来判断显示的是哪个面板"
				}
			]
		},
		{
			"ID": "20231115185937-mc3u8ka",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115185937-mc3u8ka",
				"style": "line-height: 22px;",
				"updated": "20231115190014"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine;\n\npublic class Main : MonoBehaviour\n{\n    void Start()\n    {\n        GameFacade.Instance.StartUp();\n    }\n\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.M))\n        {\n            //显示主面板\n            GameFacade.Instance.SendNotification(PureNotification.SHOW_PANEL, \"MainPanel\");\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115185918-4xk9lup",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115185918-4xk9lup",
				"style": "line-height: 22px;",
				"updated": "20231115185934"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ShowPanelCommand : SimpleCommand\n{\n    public override void Execute(INotification notification)\n    {\n        base.Execute(notification);\n        //写面板创建的逻辑\n        string panelName = notification.Body.ToString();\n        switch (panelName)\n        {\n            case \"MainPanel\":\n                break;\n            case \"RolePanel\":\n                break;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115185917-01qr982",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115185917-01qr982",
				"updated": "20231115190402"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Notifier"
				},
				{
					"Type": "NodeText",
					"Data": "​的类（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SimpleCommand"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Proxy"
				},
				{
					"Type": "NodeText",
					"Data": "​都继承了该类）可以使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Facade"
				},
				{
					"Type": "NodeText",
					"Data": "​，以直接调用场景上唯一的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Facade"
				},
				{
					"Type": "NodeText",
					"Data": "​\n因此可以在命令中直接使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Facade"
				},
				{
					"Type": "NodeText",
					"Data": "​代表的就是唯一的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Facade"
				},
				{
					"Type": "NodeText",
					"Data": "​\n"
				}
			]
		},
		{
			"ID": "20231115190405-xauwmy8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115190405-xauwmy8",
				"updated": "20231115190511"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Facade"
				},
				{
					"Type": "NodeText",
					"Data": "​可以注册"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​，以及判断一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​是否被注册\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意！如果要使用Mediator，一定也要在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "Facade"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "中去注册，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "command"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "proxy"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "也一样，如果要通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "Facade"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "调用就要去注册"
				}
			]
		},
		{
			"ID": "20231115185201-eby2ska",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115185201-eby2ska",
				"style": "line-height: 22px;",
				"updated": "20231115190135"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ShowPanelCommand : SimpleCommand\n{\n    public override void Execute(INotification notification)\n    {\n        base.Execute(notification);\n        //写面板创建的逻辑\n        string panelName = notification.Body.ToString();\n        switch (panelName)\n        {\n            case \"MainPanel\":\n                //显示面板相关内容\n                //如果要使用Mediator，一定也要在Facade中去注册\n                //command、proxy都是一样的，要用 就要去注册\n                //可以在命令中总结使用Facade代表的就是唯一的Facade\n\n                //注册面板的方式\n                //判断如果没有该Mediator，就注册一个这个Mediator\n                if (!Facade.HasMediator(NewMainViewMediator.NAME))\n                    Facade.RegisterMediator(new NewMainViewMediator());\n                break;\n            case \"RolePanel\":\n                break;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115190614-yqmh1el",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115190614-yqmh1el",
				"updated": "20231115190859"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​之后，就是可以创建界面，创建预设体，并可以将界面的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "View"
				},
				{
					"Type": "NodeText",
					"Data": "​控件，关联到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​上"
				}
			]
		},
		{
			"ID": "20231115190901-wcpgwgh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115190901-wcpgwgh",
				"style": "line-height: 22px;",
				"updated": "20231115190935"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using PureMVC.Interfaces;\nusing PureMVC.Patterns.Command;\nusing UnityEngine;\n\npublic class ShowPanelCommand : SimpleCommand\n{\n    public override void Execute(INotification notification)\n    {\n        base.Execute(notification);\n        //写面板创建的逻辑\n        string panelName = notification.Body.ToString();\n        //显示面板相关内容\n        switch (panelName)\n        {\n            case \"MainPanel\":\n                //如果要使用Mediator，一定也要在Facade中去注册\n                //command、proxy都是一样的，要用 就要去注册\n                //可以在命令中总结使用Facade代表的就是唯一的Facade\n\n                //注册面板的方式\n                //判断如果没有该Mediator，就注册一个这个Mediator\n                if (!Facade.HasMediator(NewMainViewMediator.NAME))\n                    Facade.RegisterMediator(new NewMainViewMediator());\n                //有mediator之后，就是去创建界面，创建预设体\n                //先获取Mediator，Facade有得到Mediator的方法\n                NewMainViewMediator mainViewMediator = Facade.RetrieveMediator(NewMainViewMediator.NAME) as NewMainViewMediator;\n                //如果没有关联面板\n                if (mainViewMediator.ViewComponent == null)\n                {\n                    GameObject res = Resources.Load\u003cGameObject\u003e(\"UI/MainPanel\");\n                    GameObject obj = GameObject.Instantiate(res);\n                    //设置它的父对象为Canvas\n                    obj.transform.SetParent(GameObject.Find(\"Canvas\").transform, false);\n                    //将MainPanel的View控件关联给Mediator\n                    mainViewMediator.ViewComponent = obj.GetComponent\u003cNewMainView\u003e();\n                }\n\n                break;\n            case \"RolePanel\":\n                //注册面板的方式\n                //判断如果没有该Mediator，就注册一个这个Mediator\n                if (!Facade.HasMediator(NewRoleViewMediator.NAME))\n                    Facade.RegisterMediator(new NewRoleViewMediator());\n                //有mediator之后，就是去创建界面，创建预设体\n                //先获取Mediator，Facade有得到Mediator的方法\n                NewRoleViewMediator roleViewMediator = Facade.RetrieveMediator(NewRoleViewMediator.NAME) as NewRoleViewMediator;\n                //如果没有关联面板\n                if (roleViewMediator.ViewComponent == null)\n                {\n                    GameObject res = Resources.Load\u003cGameObject\u003e(\"UI/RolePanel\");\n                    GameObject obj = GameObject.Instantiate(res);\n                    //设置它的父对象为Canvas\n                    obj.transform.SetParent(GameObject.Find(\"Canvas\").transform, false);\n                    //将RolePanel的View控件关联给Mediator\n                    roleViewMediator.ViewComponent = obj.GetComponent\u003cNewRoleView\u003e();\n                }\n                break;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115191614-a20oiy1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115191614-a20oiy1",
				"updated": "20231115192919"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们还没有监听"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "View"
				},
				{
					"Type": "NodeText",
					"Data": "​的用户输入行为，在可以在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​里设置监听（甚至可以不用在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Command"
				},
				{
					"Type": "NodeText",
					"Data": "​内执行关联）\n继承了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Notifier"
				},
				{
					"Type": "NodeText",
					"Data": "​的类（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SimpleCommand"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Proxy"
				},
				{
					"Type": "NodeText",
					"Data": "​都继承了该类）可以直接使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SendNotification()"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20231115192606-2u21pn6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115192606-2u21pn6",
				"style": "line-height: 22px;",
				"updated": "20231115192629"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public void SetView(NewMainView view)\n{\n    ViewComponent = view;\n    view.btnRole.onClick.AddListener(() =\u003e\n    {\n        SendNotification(PureNotification.SHOW_PANEL, \"RolePanel\");\n    });\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115192706-4uin7za",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115192706-4uin7za",
				"style": "line-height: 22px;",
				"updated": "20231115192718"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "if (mainViewMediator.ViewComponent == null)\n{\n    GameObject res = Resources.Load\u003cGameObject\u003e(\"UI/MainPanel\");\n    GameObject obj = GameObject.Instantiate(res);\n    //设置它的父对象为Canvas\n    obj.transform.SetParent(GameObject.Find(\"Canvas\").transform, false);\n    //将MainPanel的View控件关联给Mediator\n    mainViewMediator.SetView(obj.GetComponent\u003cNewMainView\u003e());\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115192722-zoll4z9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231115192722-zoll4z9",
				"updated": "20231115192727"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "隐藏面板"
				}
			]
		},
		{
			"ID": "20231115194721-o9vswdk",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20231115194721-o9vswdk",
				"updated": "20231115194801"
			},
			"Children": [
				{
					"ID": "20231115194721-n4e3ike",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231115194721-n4e3ike",
						"updated": "20231115194724"
					},
					"Children": [
						{
							"ID": "20231115194721-p79c7jt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231115194721-p79c7jt",
								"updated": "20231115194724"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Command"
								},
								{
									"Type": "NodeText",
									"Data": "​命令与隐藏面板的通知绑定"
								}
							]
						}
					]
				},
				{
					"ID": "20231115194721-lj72oks",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231115194721-lj72oks",
						"updated": "20231115194729"
					},
					"Children": [
						{
							"ID": "20231115194721-p29c2vw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231115194721-p29c2vw",
								"updated": "20231115194729"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在该"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Command"
								},
								{
									"Type": "NodeText",
									"Data": "​命令的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Execute()"
								},
								{
									"Type": "NodeText",
									"Data": "​方法内实现隐藏面板"
								}
							]
						}
					]
				},
				{
					"ID": "20231115194721-hcamxew",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231115194721-hcamxew",
						"updated": "20231115194755"
					},
					"Children": [
						{
							"ID": "20231115194721-knpk7n8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231115194721-knpk7n8",
								"updated": "20231115194755"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "得到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Mediator"
								},
								{
									"Type": "NodeText",
									"Data": "​再得到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Mediator"
								},
								{
									"Type": "NodeText",
									"Data": "​中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "View"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20231115194721-mixvg7g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20231115194721-mixvg7g",
						"updated": "20231115194801"
					},
					"Children": [
						{
							"ID": "20231115194721-wm2hgvt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231115194721-wm2hgvt",
								"updated": "20231115194801"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "View"
								},
								{
									"Type": "NodeText",
									"Data": "​来删除或隐藏UI对象"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231115192727-9x5c6qi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115192727-9x5c6qi",
				"updated": "20231115194844"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "隐藏的目的，得到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​再得到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "View"
				},
				{
					"Type": "NodeText",
					"Data": "​，通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "View"
				},
				{
					"Type": "NodeText",
					"Data": "​来删除或隐藏UI对象\n这里通过外部通知者传入要隐藏面板的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20231115202830-34gbzva",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115202830-34gbzva",
				"updated": "20231115203011"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注：这里"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "notification.Body is Mediator mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​使用了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20231031203303-6i67dxp",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "模式匹配"
				},
				{
					"Type": "NodeText",
					"Data": "的类型模式"
				}
			]
		},
		{
			"ID": "20231115194700-35elc31",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115194700-35elc31",
				"style": "line-height: 22px;",
				"updated": "20231115194815"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using PureMVC.Interfaces;\nusing PureMVC.Patterns.Command;\nusing PureMVC.Patterns.Mediator;\nusing UnityEngine;\n\npublic class HidePanelCommand : SimpleCommand\n{\n    public override void Execute(INotification notification)\n    {\n        base.Execute(notification);\n        //隐藏的目的，得到Mediator再得到Mediator中的View，通过View来删除或隐藏UI对象\n        //通过Body来获取Mediator对象\n        if (notification.Body is Mediator mediator \u0026\u0026 mediator.ViewComponent != null)\n        {\n            //直接删除场景上的对象\n            GameObject.Destroy((mediator.ViewComponent as MonoBehaviour).gameObject);\n            //删除后必须要置空\n            mediator.ViewComponent = null;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115194851-7ln88zb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115194851-7ln88zb",
				"updated": "20231115194924"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之后再在外部使用通知隐藏面板即可"
				}
			]
		},
		{
			"ID": "20231115194924-vaaa25k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115194924-vaaa25k",
				"style": "line-height: 22px;",
				"updated": "20231115194936"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine;\n\npublic class Main : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        GameFacade.Instance.StartUp();\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.M))\n        {\n            //显示主面板\n            GameFacade.Instance.SendNotification(PureNotification.SHOW_PANEL, \"MainPanel\");\n        }\n        else if (Input.GetKeyDown(KeyCode.N))\n        {\n            //隐藏主面板\n            GameFacade.Instance.SendNotification(PureNotification.HIDE_PANEL, GameFacade.Instance.RetrieveMediator(NewMainViewMediator.NAME));\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115195027-3rb25og",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115195027-3rb25og",
				"updated": "20231115195040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们还没有监听"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "View"
				},
				{
					"Type": "NodeText",
					"Data": "​的用户输入行为，在可以在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​里设置监听（甚至可以不用在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Command"
				},
				{
					"Type": "NodeText",
					"Data": "​内执行关联）\n继承了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Notifier"
				},
				{
					"Type": "NodeText",
					"Data": "​的类（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SimpleCommand"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Proxy"
				},
				{
					"Type": "NodeText",
					"Data": "​都继承了该类）可以直接使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SendNotification()"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20231115194939-iejbnfw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115194939-iejbnfw",
				"style": "line-height: 22px;",
				"updated": "20231115195019"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using PureMVC.Interfaces;\nusing PureMVC.Patterns.Mediator;\n\npublic class NewRoleViewMediator : Mediator\n{\n    public void SetView(NewRoleView view)\n    {\n        ViewComponent = view;\n        view.btnClose.onClick.AddListener(() =\u003e\n        {\n            SendNotification(PureNotification.HIDE_PANEL, this);\n        });\n        view.btnLevUp.onClick.AddListener(() =\u003e\n        {\n            //升级...\n        });\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115195057-9ozqsz1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231115195057-9ozqsz1",
				"updated": "20231115195101"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "更新通知"
				}
			]
		},
		{
			"ID": "20231115195101-700jidy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115195101-700jidy",
				"updated": "20231115201832"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "往往显示了面板后，需要在这里进行第一次UI控件更新，就需要把数据作为参数一起传出去\n但是目前的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Facade"
				},
				{
					"Type": "NodeText",
					"Data": "​是没有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Proxy"
				},
				{
					"Type": "NodeText",
					"Data": "​的数据的，因此我们需要为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Proxy"
				},
				{
					"Type": "NodeText",
					"Data": "​注册，我们一般在启动函数里注册​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Proxy"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20231115201751-u5e13ai",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115201751-u5e13ai",
				"style": "line-height: 22px;",
				"updated": "20231115201815"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using PureMVC.Patterns.Facade;\n\npublic class GameFacade : Facade\n{\n    //4.必须定义一个启动函数\n    public void StartUp()\n    {\n        //发送通知，发送通知时可以传入object参数，供监听者调用这个object，就像事件中心那样\n        SendNotification(PureNotification.START_UP);\n        //在启动命令中，往往是做一些初始化操作\n        //如果没有数据代理，就先注册数据代理\n        if (!HasProxy(PlayerProxy.NAME)) \n            RegisterProxy(new PlayerProxy());\n\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115201833-gtkjdjq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115201833-gtkjdjq",
				"updated": "20231115202226"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之后就可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Facade"
				},
				{
					"Type": "NodeText",
					"Data": "​调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RetrieveProxy()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法传入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PlayerProxy.NAME"
				},
				{
					"Type": "NodeText",
					"Data": "​来获取"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Proxy"
				},
				{
					"Type": "NodeText",
					"Data": "​，进而通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Proxy.data"
				},
				{
					"Type": "NodeText",
					"Data": "​来获取数据\n同时要注意，通知是不一定需要和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "command"
				},
				{
					"Type": "NodeText",
					"Data": "​命令绑定在一起的，在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​内也可以设置监听哪些通知，执行对应的方法"
				}
			]
		},
		{
			"ID": "20231115202159-o5ojqcx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115202159-o5ojqcx",
				"style": "line-height: 22px;",
				"updated": "20231115202323"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class NewMainViewMediator : Mediator // 1.继承PureMVC中的Mediator脚本\n{\n    // 3.重写监听通知的方法\n    public override string[] ListNotificationInterests()\n    {\n        //这是一个PureMVC的规则\n        //就是你需要监听哪些通知，那就在这里吧通知们通过字符串数组的形式返回出去\n        //PureMVC就会帮助我们监听这些通知\n        //类似于 通过事件名 注册事件监听\n        return new string[] { PureNotification.UPDATE_PLAYER_INFO };\n    }\n\n    // 4.重写处理通知的方法\n    public override void HandleNotification(INotification notification)\n    {\n        //INotification 对象 里面包含两个对我们来说 重要的参数\n        //1. 通知名 我们根据这个名字 来做对应的处理\n        //2. 通知包含的信息\n        switch (notification.Name)\n        {\n            //和上面的ListNotificationInterests返回的字符串对应，这里就是如果监听到对应字符串处理相应的逻辑\n            case PureNotification.UPDATE_PLAYER_INFO:\n                (ViewComponent as NewMainView).UpdateInfo(notification.Body as PlayerDataObject);\n                break;\n        }\n    }\n}\n\npublic class NewRoleViewMediator : Mediator\n{\n    public override string[] ListNotificationInterests()\n    {\n        return new string[] { PureNotification.UPDATE_PLAYER_INFO };\n        //如果要监听别的通知，就在字符串数组后面在添加通知名即可\n    }\n\n    public override void HandleNotification(INotification notification)\n    {\n        switch (notification.Name)\n        {\n            case PureNotification.UPDATE_PLAYER_INFO:\n                (ViewComponent as NewRoleView).UpdateInfo( notification.Body as PlayerDataObject );\n                break;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115202018-nlbwv3s",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115202018-nlbwv3s",
				"style": "line-height: 22px;",
				"updated": "20231115202453"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//ShowPanelCommand内\npublic override void Execute(INotification notification)\n{\n    base.Execute(notification);\n    //写面板创建的逻辑\n    string panelName = notification.Body.ToString();\n    switch (panelName)\n    {\n        case \"MainPanel\":\n            //显示面板相关代码，这里略，与上面相同...\n            //往往显示了面板后，需要在这里进行第一次UI控件更新，就需要把数据作为参数一起传出去\n            SendNotification(PureNotification.UPDATE_PLAYER_INFO, Facade.RetrieveProxy(PlayerProxy.NAME).Data);\n            break;\n        case \"RolePanel\":\n            //显示面板相关代码，这里略，与上面相同...\n            SendNotification(PureNotification.UPDATE_PLAYER_INFO, Facade.RetrieveProxy(PlayerProxy.NAME).Data);\n            break;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115201947-c9tnmc1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115201947-c9tnmc1",
				"updated": "20231115202543"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来监听升级按钮的输入，实现升级的方法"
				}
			]
		},
		{
			"ID": "20231115203019-mwnniyo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115203019-mwnniyo",
				"updated": "20231115204223"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里我们再声明一个用于升级的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LevUpCommand"
				},
				{
					"Type": "NodeText",
					"Data": "​命令，以及对应的通知，并在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Facade"
				},
				{
					"Type": "NodeText",
					"Data": "​内注册它"
				}
			]
		},
		{
			"ID": "20231115204234-ju7p8ow",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115204234-ju7p8ow",
				"style": "line-height: 22px;",
				"updated": "20231115204705"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class PureNotification\n{\n    public const string LEVEL_UP = \"levelUp\";\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115204708-9ogg8k3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115204708-9ogg8k3",
				"updated": "20231115204725"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注：这里"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Facade.RetrieveProxy(PlayerProxy.NAME) is PlayerProxy playerProxy"
				},
				{
					"Type": "NodeText",
					"Data": "​使用了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20231031203303-6i67dxp",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "模式匹配"
				},
				{
					"Type": "NodeText",
					"Data": "的类型模式"
				}
			]
		},
		{
			"ID": "20231115204223-24rlwcp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115204223-24rlwcp",
				"style": "line-height: 22px;",
				"updated": "20231115204232"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using PureMVC.Interfaces;\nusing PureMVC.Patterns.Command;\n\npublic class LevUpCommand : SimpleCommand\n{\n    public override void Execute(INotification notification)\n    {\n        base.Execute(notification);\n        if (Facade.RetrieveProxy(PlayerProxy.NAME) is PlayerProxy playerProxy)\n        {\n            //升级\n            playerProxy.LevelUp();\n            //通知更新\n            SendNotification(PureNotification.UPDATE_PLAYER_INFO, playerProxy.Data);\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115205028-odzmatd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115205028-odzmatd",
				"style": "line-height: 22px;",
				"updated": "20231115205054"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//GameFacade内部\nprotected override void InitializeController()\n{\n    base.InitializeController();\n    //这里面要写一些 关于 命令和通知 绑定的逻辑\n    RegisterCommand(PureNotification.START_UP, () =\u003e { return new StartUpCommand(); });\n    RegisterCommand(PureNotification.SHOW_PANEL, () =\u003e { return new ShowPanelCommand(); });\n    RegisterCommand(PureNotification.HIDE_PANEL, () =\u003e { return new HidePanelCommand(); });\n    RegisterCommand(PureNotification.LEVEL_UP, () =\u003e { return new LevUpCommand(); });\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115205057-dbiy6r4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115205057-dbiy6r4",
				"updated": "20231115205710"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之后在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​内监听升级"
				}
			]
		},
		{
			"ID": "20231115205725-bvewx8l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115205725-bvewx8l",
				"style": "line-height: 22px;",
				"updated": "20231115205743"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//NewRoleViewMediator内部\npublic void SetView(NewRoleView view)\n{\n    ViewComponent = view;\n    view.btnClose.onClick.AddListener(() =\u003e\n    {\n        SendNotification(PureNotification.HIDE_PANEL, this);\n    });\n    view.btnLevUp.onClick.AddListener(() =\u003e\n    {\n        //这里应该通知去升级\n        SendNotification(PureNotification.LEVEL_UP);\n    });\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231115205846-rqgkklx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231115205846-rqgkklx",
				"updated": "20231115210010"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "值得一提的是，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mediator"
				},
				{
					"Type": "NodeText",
					"Data": "​内每次对其关联的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ViewComponent"
				},
				{
					"Type": "NodeText",
					"Data": "​进行操作时，都应当判空，避免出现问题"
				}
			]
		},
		{
			"ID": "20231115205851-mb6x0ga",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115205851-mb6x0ga",
				"style": "line-height: 22px;",
				"updated": "20231115210021"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//NewRoleViewMediator内部\npublic override void HandleNotification(INotification notification)\n{\n    switch (notification.Name)\n    {\n        case PureNotification.UPDATE_PLAYER_INFO:\n            if (ViewComponent != null)\n                (ViewComponent as NewRoleView).UpdateInfo( notification.Body as PlayerDataObject );\n            break;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}