{
	"ID": "20231113171824-sx544gm",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20231113171824-sx544gm",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231113171824-sx544gm\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231113171824-dlfm8aq\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231113210445-yvixns2\u0026quot;,\u0026quot;scrollTop\u0026quot;:456,\u0026quot;focusId\u0026quot;:\u0026quot;20231113172644-ibv0da9\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:20\u0026#125;",
		"title": "UMVCL7——MVP基本实例",
		"updated": "20240302172742"
	},
	"Children": [
		{
			"ID": "20231113171824-dlfm8aq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231113171824-dlfm8aq",
				"updated": "20231113172623"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MVP基本实例"
				}
			]
		},
		{
			"ID": "20231113172534-7p0fl90",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113172534-7p0fl90",
				"updated": "20231113172534"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "还是和上一章相同的UI需求"
				}
			]
		},
		{
			"ID": "20231113172534-xhch0zr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113172534-xhch0zr",
				"updated": "20231113172534"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设我们有一个主面板，它的各个UI控件需要的效果如下"
				}
			]
		},
		{
			"ID": "20231113172534-vm6q5ms",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113172534-vm6q5ms",
				"updated": "20231113172534"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 501px;",
						"style": "width: 491px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20231112213410-j7bpo8t.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 491px;\" parent-style=\"width: 501px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20231113172534-212nvdd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113172534-212nvdd",
				"updated": "20231113172534"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有一个选角面板，它的各个UI控件需要的效果如下"
				}
			]
		},
		{
			"ID": "20231113172534-w69tlf6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113172534-w69tlf6",
				"updated": "20231113172534"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 225px;",
						"style": "width: 215px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20231112213650-yo8frii.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 215px;\" parent-style=\"width: 225px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20231113172534-7hprbhb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113172534-7hprbhb",
				"updated": "20231113172534"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "该UI的MVC的代码逻辑如下："
				}
			]
		},
		{
			"ID": "20231113172638-kq2pj2b",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231113172638-kq2pj2b",
				"updated": "20231113173050"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Model层"
				}
			]
		},
		{
			"ID": "20231113172644-ibv0da9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113172644-ibv0da9",
				"updated": "20231113172725"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "直接使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20231113160449-wvt6qlr",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "MVC那一章的Model代码"
				},
				{
					"Type": "NodeText",
					"Data": "即可"
				}
			]
		},
		{
			"ID": "20231113172624-v48b7oj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231113172624-v48b7oj",
				"updated": "20231113172635"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "View层"
				}
			]
		},
		{
			"ID": "20231113172629-kjd2bx7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113172629-kjd2bx7",
				"updated": "20231113172908"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "相比MVC的那一章，这里的View层代码不一定需要再提供更新控件显示的方法了，只需要管理控件即可\n更新控件的实现交给Presenter(主持人)层脚本实现"
				}
			]
		},
		{
			"ID": "20231113172908-1facdhj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113172908-1facdhj",
				"updated": "20231113172922"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "MVP_MainView.cs"
				}
			]
		},
		{
			"ID": "20231113172923-r3m5bs7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231113172923-r3m5bs7",
				"style": "line-height: 22px;",
				"updated": "20231113172941"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine;\nusing UnityEngine.UI;\n\npublic class MVP_MainView : MonoBehaviour\n{\n    public Text txtName;\n    public Text txtLev;\n    public Text txtMoney;\n    public Text txtGem;\n    public Text txtPower;\n\n    public Button btnRole;\n\n    //更新方法是可选的\n    //因为接下来 你可以到P层脚本里面通过访问控件去修改\n\n    //public void UpdateInfo(string name, int lev, int money, int gem, int power)\n    //{\n    //    txtName.text = name;\n    //    txtLev.text = \"LV.\" + lev.ToString();\n    //    txtMoney.text = money.ToString();\n    //    txtGem.text = gem.ToString();\n    //    txtPower.text = power.ToString();\n    //}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231113172942-070y6ss",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113172942-070y6ss",
				"updated": "20231113172956"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "MVP_RoleView.cs"
				}
			]
		},
		{
			"ID": "20231113172957-hzvwo5m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231113172957-hzvwo5m",
				"style": "line-height: 22px;",
				"updated": "20231113173011"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine;\nusing UnityEngine.UI;\n\npublic class MVP_RoleView : MonoBehaviour\n{\n    public Text txtLev;\n    public Text txtHp;\n    public Text txtAtk;\n    public Text txtDef;\n    public Text txtCrit;\n    public Text txtMiss;\n    public Text txtLuck;\n\n    public Button btnClose;\n    public Button btnLevUp;\n\n    //更新方法是可选的\n    //因为接下来 你可以到P层脚本里面通过访问控件去修改\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231113173032-jtbfrvr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231113173032-jtbfrvr",
				"updated": "20231113174935"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Presenter层"
				}
			]
		},
		{
			"ID": "20231113210503-7lgtojq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113210503-7lgtojq",
				"updated": "20240302172742"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "相比于MVC的Controller层，Presenter层脚本自己实现了对View层的UI控件的更新，\n这也意味着Model层的数据不需要再传入View层让View层更新\n因此，Presenter层切断了View层和Model层的关系，而是由Presenter层读取Model层数据再为View层更新控件"
				}
			]
		},
		{
			"ID": "20231113173045-qsm1irk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113173045-qsm1irk",
				"updated": "20231113210422"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "MainPresenter.cs"
				}
			]
		},
		{
			"ID": "20231113210422-70hykdo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231113210422-70hykdo",
				"style": "line-height: 22px;",
				"updated": "20231113210427"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine;\n\npublic class MainPresenter : MonoBehaviour\n{\n    private static MainPresenter presenter = null;\n    public static MainPresenter Instance =\u003e presenter;\n\n    //在Presenter中得到界面\n    private MVP_MainView mainView;\n\n    private void Start()\n    {\n        mainView = GetComponent\u003cMVP_MainView\u003e();\n        //不需要执行View的UpdateInfo，直接执行自己的方法\n        UpdateInfo(PlayerModel.Instance);\n        PlayerModel.Instance.AddEventListener(UpdateInfo);\n        //界面事件的监听，来处理对应的业务逻辑\n        mainView.btnRole.onClick.AddListener(() =\u003e\n        {\n            //显示角色面板\n            RolePresenter.ShowMe();\n        });\n    }\n\n    private void OnDestroy()\n    {\n        PlayerModel.Instance.RemoveEventListener(UpdateInfo);\n    }\n\n    private void UpdateInfo(PlayerModel player)\n    {\n        //以前这里是把数据M传到V中去更新，现在全部由P来做，这就断绝了M和V的来往\n        if (mainView != null)\n        {\n            mainView.txtName.text = player.Name;\n            mainView.txtLev.text = \"LV.\" + player.Level;\n            mainView.txtMoney.text = player.Money.ToString();\n            mainView.txtGem.text = player.Gem.ToString();\n            mainView.txtPower.text = player.Power.ToString();\n        }\n    }\n\n    public static void ShowMe()\n    {\n        if (presenter == null)\n        {\n            //实例化面板对象\n            GameObject res = Resources.Load\u003cGameObject\u003e(\"UI/MainPanel\");\n            GameObject obj = Instantiate(res);\n            obj.transform.SetParent(GameObject.Find(\"Canvas\").transform, false);\n            presenter = obj.GetComponent\u003cMainPresenter\u003e();\n        }\n        presenter.gameObject.SetActive(true);\n    }\n\n    public static void HideMe()\n    {\n        if (presenter != null)\n            presenter.gameObject.SetActive(false);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231113173042-ttuxazt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231113173042-ttuxazt",
				"updated": "20231113210444"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "RolePresenter.cs"
				}
			]
		},
		{
			"ID": "20231113210445-yvixns2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231113210445-yvixns2",
				"style": "line-height: 22px;",
				"updated": "20231113210454"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine;\n\npublic class RolePresenter : MonoBehaviour\n{\n    private MVP_RoleView roleView;\n\n    private static RolePresenter presenter = null;\n\n    public static RolePresenter Presenter =\u003e presenter;\n\n    void Start()\n    {\n        roleView = GetComponent\u003cMVP_RoleView\u003e();\n        //不需要执行View的UpdateInfo，直接执行自己的方法\n        UpdateInfo(PlayerModel.Instance);\n        PlayerModel.Instance.AddEventListener(UpdateInfo);\n        roleView.btnClose.onClick.AddListener(() =\u003e\n        {\n            HideMe();\n        });\n        roleView.btnLevUp.onClick.AddListener(() =\u003e\n        {\n            PlayerModel.Instance.LevelUp();\n        });\n    }\n\n    private void OnDestroy()\n    {\n        PlayerModel.Instance.RemoveEventListener(UpdateInfo);\n    }\n\n    private void UpdateInfo(PlayerModel player)\n    {\n        if (roleView != null)\n        {\n            //以前这里是把数据M传到V中去更新，现在全部由P来做，这就断绝了M和V的来往\n            roleView.txtLev.text = \"LV.\" + player.Level;\n            roleView.txtHp.text = player.Hp.ToString();\n            roleView.txtAtk.text = player.Atk.ToString();\n            roleView.txtDef.text = player.Def.ToString();\n            roleView.txtCrit.text = player.Crit.ToString();\n            roleView.txtMiss.text = player.Miss.ToString();\n            roleView.txtLuck.text = player.Luck.ToString();\n        }\n    }\n\n    public static void ShowMe()\n    {\n        if (presenter == null)\n        {\n            //实例化面板对象\n            GameObject res = Resources.Load\u003cGameObject\u003e(\"UI/RolePanel\");\n            GameObject obj = Instantiate(res);\n            obj.transform.SetParent(GameObject.Find(\"Canvas\").transform, false);\n            presenter = obj.GetComponent\u003cRolePresenter\u003e();\n        }\n        presenter.gameObject.SetActive(true);\n    }\n\n    public static void HideMe()\n    {\n        if (presenter != null)\n            presenter.gameObject.SetActive(false);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}