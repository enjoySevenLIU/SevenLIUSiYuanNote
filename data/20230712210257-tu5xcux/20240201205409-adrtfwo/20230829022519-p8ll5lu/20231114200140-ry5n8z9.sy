{
	"ID": "20231114200140-ry5n8z9",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20231114200140-ry5n8z9",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231114200140-ry5n8z9\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231115210054-e6eh3ur\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231114204711-zhoq3lw\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20231115210101-ayw2y8p\u0026quot;,\u0026quot;focusStart\u0026quot;:2,\u0026quot;focusEnd\u0026quot;:2\u0026#125;",
		"title": "UMVCSL3——Model和Proxy",
		"type": "doc",
		"updated": "20240903133529"
	},
	"Children": [
		{
			"ID": "20231115210054-e6eh3ur",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231115210054-e6eh3ur",
				"updated": "20240703161801"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20231115210101-ayw2y8p",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231115210101-ayw2y8p",
				"style": "line-height: 22px;",
				"updated": "20231115211101"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Proxy                                            //Proxy基类，任何在PureMVC内作为Proxy代理的类都应该继承该类，可以实现对其关联数据的操作\nproxy.Name                                       //字符串常量，其派生类里可以覆盖该Name，使用自己的字符串作为名字\nproxy.proxyName                                  //获取该proxy派生类的Name\nproxy.Data                                       //该proxy派生类对象关联的Model类对象\nProxy(string proxyName, object data = null)      //Proxy的构造函数，继承该类必须要声明构造函数调用该构造函数，用于初始化名字和关联的对象\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231114200140-7m3dgp9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231114200140-7m3dgp9",
				"updated": "20240903133519"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Model"
				}
			]
		},
		{
			"ID": "20231114204540-eeduee3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231114204540-eeduee3",
				"updated": "20240903133519"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Model"
				},
				{
					"Type": "NodeText",
					"Data": "​ 就是数据结构类，单纯存储内容的类"
				}
			]
		},
		{
			"ID": "20231114204601-nxg0eg3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231114204601-nxg0eg3",
				"style": "line-height: 22px;",
				"updated": "20231114204608"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/// \u003csummary\u003e\n/// 玩家数据结构\n/// \u003c/summary\u003e\npublic class PlayerDataObject\n{\n    //申明一堆玩家属性相关的变量\n    public string playerName;\n    public int lev;\n    public int money;\n    public int gem;\n    public int power;\n\n    public int hp;\n    public int atk;\n    public int def;\n    public int crit;\n    public int miss;\n    public int luck;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231114204609-2f1rflc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231114204609-2f1rflc",
				"updated": "20240903133529"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Proxy"
				}
			]
		},
		{
			"ID": "20231114204614-ezpdybn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231114204614-ezpdybn",
				"updated": "20240903133522"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数据代理类，在这里我们使用数据代理类来为数据结构类进行代理，数据更新相关逻辑在这里处理，所有的数据代理类都要继承"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Proxy"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20231114204742-xqys4sa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20231114204742-xqys4sa",
				"updated": "20240903133529"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Proxy的重点"
				}
			]
		},
		{
			"ID": "20231114204755-1b2gdqn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231114204755-1b2gdqn",
				"updated": "20240903133529"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Proxy"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的重点在于其构造函数，先来看看 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "Proxy"
				},
				{
					"Type": "NodeText",
					"Data": "​ "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "基类的构造函数具体代码"
				}
			]
		},
		{
			"ID": "20231114204925-04t9dc1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231114204925-04t9dc1",
				"style": "line-height: 22px;",
				"updated": "20231114205727"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//Proxy类的部分代码\npublic class Proxy: Notifier, IProxy\n{\n    //Proxy的类名的常量，在需要填入\"Proxy\"的情况下我们可以直接使用该常量，接下来我们要在其派生类里隐藏掉定义其自己的NAME\n    public const string NAME = \"Proxy\";\n  \n    //Proxy的构造函数，由于该构造函数的存在，其派生类都需要在构造函数传入该类构造函数的proxyName参数\n    //这个proxyName非常重要！！！之后的Facade要通过这个名字来获取其派生代理类对象！！！\n    //data则是该代理对象关联的数据结构对象\n    public Proxy(string proxyName, object data = null)\n    {\n        ProxyName = proxyName ?? NAME;\n        if (data != null) Data = data;\n    }\n\n    public string ProxyName { get; protected set; }\n  \n    public object Data { get; set; }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231114205734-6v886gp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231114205734-6v886gp",
				"updated": "20240903133436"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于基类的这个构造函数的存在，且没有无参构造函数，我们的数据代理类继承该类时，\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "必须要声明构造函数调用基类构造函数为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "proxyName"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "赋值，并关联要代理的数据结构对象"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "Data"
				},
				{
					"Type": "NodeText",
					"Data": "​\n因此数据代理类的构造函数将是数据结构类的重点（必须调用父类构造函数的具体原理详见："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240903131756-7q9d4jr",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "CS3L15——继承中的构造函数"
				},
				{
					"Type": "NodeText",
					"Data": "）"
				}
			]
		},
		{
			"ID": "20231114210102-b65m6x0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231114210102-b65m6x0",
				"updated": "20240903133457"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "proxyName"
				},
				{
					"Type": "NodeText",
					"Data": "​这个参数，我们需要在声明构造函数时，就调用基类的构造函数传入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "proxyName"
				},
				{
					"Type": "NodeText",
					"Data": "​\n（因为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Facade"
				},
				{
					"Type": "NodeText",
					"Data": "​ 要通过这个名字来获取这个代理，它非常重要，必须在对象实例化时就将其赋值）\n在这里我们将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PlayerProxy"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的类名作为代理名，为了防止字符串拼错带来的问题，\n我们可以显式的隐藏基类的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NAME"
				},
				{
					"Type": "NodeText",
					"Data": "​常量，声明新的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NAME"
				},
				{
					"Type": "NodeText",
					"Data": "​ 常量并为其初始化为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PlayerProxy"
				},
				{
					"Type": "NodeText",
					"Data": "​，代码如下："
				}
			]
		},
		{
			"ID": "20231114210551-2wd56i3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231114210551-2wd56i3",
				"style": "line-height: 22px;",
				"updated": "20231114210821"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class PlayerProxy : Proxy\n{\n    //这里显式的将父类的NAME隐藏了，因此再调用PlayerProxy.NAME得到的将是这里的名字\n    public new const string NAME = \"PlayerProxy\";\n    //声明构造函数时调用基类构造函数，传入该类类名\n    public PlayerProxy() : base(PlayerProxy.NAME) { }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231114210824-rogheov",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231114210824-rogheov",
				"updated": "20240903133410"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "data"
				},
				{
					"Type": "NodeText",
					"Data": "​ 参数，这个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "data"
				},
				{
					"Type": "NodeText",
					"Data": "​ 将是数据代理类要代理的对象，也就是要操作数据的数据结构类对象\n对于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "data"
				},
				{
					"Type": "NodeText",
					"Data": "​ 这个参数，我们有两种赋值方法"
				}
			]
		},
		{
			"ID": "20231114210939-e6cqk4h",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20231114210939-e6cqk4h",
				"updated": "20231114210940"
			},
			"Children": [
				{
					"ID": "20231114210940-uscy7zj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20231114210940-uscy7zj",
						"updated": "20231114210940"
					},
					"Children": [
						{
							"ID": "20231114210940-p3ppo2p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231114210940-p3ppo2p",
								"updated": "20231114211257"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过构造函数的参数传入要代理的对象，在关联前可以进行初始化等操作，这种适合需要外部传入代理对象的场景的代理类（例如代理多个类）"
								}
							]
						},
						{
							"ID": "20231114211017-lhe16qg",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231114211017-lhe16qg",
								"style": "line-height: 22px;",
								"updated": "20231114211153"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public PlayerProxy(PlayerDataObject data) : base(PlayerProxy.NAME, data)\n{\n    //在这里可以初始化外部传入的数据\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20231114211156-hsgpetw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20231114211156-hsgpetw"
					},
					"Children": [
						{
							"ID": "20231114211156-usb8tj0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20231114211156-usb8tj0",
								"updated": "20231114211415"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "无需外部传入，直接构造函数内直接初始化一个要构造的对象，并将其关联到自己的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "data"
								},
								{
									"Type": "NodeText",
									"Data": "​上（适合仅代理一个类的代理类）"
								}
							]
						},
						{
							"ID": "20231114211416-taromlx",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20231114211416-taromlx",
								"style": "line-height: 22px;",
								"updated": "20231114211433"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public PlayerProxy() : base(PlayerProxy.NAME)\n{\n    //我们可以直接在构造函数中，初始化一个数据，进行管理\n    PlayerDataObject data = new PlayerDataObject();\n    //在这里初始化对象\n    //赋值给自己的Data进行关联\n    Data = data;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20231114211437-1y0slxt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231114211437-1y0slxt",
				"updated": "20231114211447"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最终得到的构造函数代码如下："
				}
			]
		},
		{
			"ID": "20231114210018-vnl72ai",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231114210018-vnl72ai",
				"style": "line-height: 22px;",
				"updated": "20240703161739"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//写构造函数\n//重要点\n//1.代理的名字！！！！(非常重要，之后的Facade要通过这个名字来获取这个代理)\n//2.代理相关的数据！！！！(有两种关联方法，\n// 第一种是在该类的构造函数里添加要关联的类的参数，再将该参数传入base的构造函数内，这种方法适用于外部传入对象进行关联\n// 写法是：public PlayerProxy(PlayerDataObject data) : base(PlayerProxy.NAME, data) { }\n// 第二种，不需要参数，直接构造函数内初始化要关联的对象，并将该对象关联给基类的Data)\n\npublic PlayerProxy() : base(PlayerProxy.NAME)\n{\n    //我们可以直接在构造函数中，初始化一个数据，进行管理\n    PlayerDataObject data = new PlayerDataObject();\n\n    //初始化对象\n    data.playerName = PlayerPrefs.GetString(\"PlayerName\", \"MrLIU\");\n    data.lev = PlayerPrefs.GetInt(\"PlayerLev\", 1);\n    data.money = PlayerPrefs.GetInt(\"PlayerMoney\", 9999);\n    data.gem = PlayerPrefs.GetInt(\"PlayerGem\", 8888);\n    data.power = PlayerPrefs.GetInt(\"PlayerPower\", 99);\n\n    data.hp = PlayerPrefs.GetInt(\"PlayerHp\", 100);\n    data.atk = PlayerPrefs.GetInt(\"PlayerAtk\", 20);\n    data.def = PlayerPrefs.GetInt(\"PlayerDef\", 10);\n    data.crit = PlayerPrefs.GetInt(\"PlayerCrit\", 20);\n    data.miss = PlayerPrefs.GetInt(\"PlayerMiss\", 10);\n    data.luck = PlayerPrefs.GetInt(\"PlayerLuck\", 40);\n\n    //赋值给自己的Data进行关联\n    Data = data;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231114211450-snol44k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231114211450-snol44k",
				"updated": "20231114211533"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之后，我们在代理类里实现数据操作方法以及数据更新相关逻辑"
				}
			]
		},
		{
			"ID": "20231114204711-zhoq3lw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231114204711-zhoq3lw",
				"style": "line-height: 22px;",
				"updated": "20240703161801"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using PureMVC.Patterns.Proxy;\nusing UnityEngine;\n\n/// \u003csummary\u003e\n/// 玩家数据代理对象，主要处理玩家数据更新相关逻辑\n/// \u003c/summary\u003e\npublic class PlayerProxy : Proxy\n{\n    //这里显式的将父类的NAME隐藏了，因此再调用PlayerProxy.NAME得到的将是这里的名字\n    public new const string NAME = \"PlayerProxy\";\n    //继承Proxy父类\n    //写我们的构造函数\n\n    //写构造函数\n    //重要点\n    //1.代理的名字！！！！(非常重要，之后的Facade要通过这个名字来获取这个代理)\n    //2.代理相关的数据！！！！(有两种关联方法，\n    // 第一种是在该类的构造函数里添加要关联的类的参数，再将该参数传入base的构造函数内，这种方法适用于外部传入对象进行关联\n    // 写法是：public PlayerProxy(PlayerDataObject data) : base(PlayerProxy.NAME, data) { }\n    // 第二种，不需要参数，直接构造函数内初始化要关联的对象，并将该对象关联给基类的Data)\n\n    public PlayerProxy() : base(PlayerProxy.NAME)\n    {\n        //我们可以直接在构造函数中，初始化一个数据，进行管理\n        PlayerDataObject data = new PlayerDataObject();\n\n        //初始化对象\n        data.playerName = PlayerPrefs.GetString(\"PlayerName\", \"MrLIU\");\n        data.lev = PlayerPrefs.GetInt(\"PlayerLev\", 1);\n        data.money = PlayerPrefs.GetInt(\"PlayerMoney\", 9999);\n        data.gem = PlayerPrefs.GetInt(\"PlayerGem\", 8888);\n        data.power = PlayerPrefs.GetInt(\"PlayerPower\", 99);\n\n        data.hp = PlayerPrefs.GetInt(\"PlayerHp\", 100);\n        data.atk = PlayerPrefs.GetInt(\"PlayerAtk\", 20);\n        data.def = PlayerPrefs.GetInt(\"PlayerDef\", 10);\n        data.crit = PlayerPrefs.GetInt(\"PlayerCrit\", 20);\n        data.miss = PlayerPrefs.GetInt(\"PlayerMiss\", 10);\n        data.luck = PlayerPrefs.GetInt(\"PlayerLuck\", 40);\n\n        //赋值给自己的Data进行关联\n        Data = data;\n    }\n\n    public void LevelUp()\n    {\n        //先转换为data\n        PlayerDataObject data = Data as PlayerDataObject;\n        //升级 改变内容\n        data.lev += 1;\n        data.hp += data.lev;\n        data.atk += data.lev;\n        data.def += data.lev;\n        data.crit += data.lev;\n        data.miss += data.lev;\n        data.luck += data.lev;\n        //将数据内容存储到本地\n        SaveData();\n    }\n\n    private void SaveData()\n    {\n        PlayerDataObject data = Data as PlayerDataObject;\n\n        PlayerPrefs.SetString(\"PlayerName\", data.playerName);\n        PlayerPrefs.SetInt(\"PlayerLev\", data.lev);\n        PlayerPrefs.SetInt(\"PlayerMoney\", data.money);\n        PlayerPrefs.SetInt(\"PlayerGem\", data.gem);\n        PlayerPrefs.SetInt(\"PlayerPower\", data.power);\n\n        PlayerPrefs.SetInt(\"PlayerHp\", data.hp);\n        PlayerPrefs.SetInt(\"PlayerAtk\", data.atk);\n        PlayerPrefs.SetInt(\"PlayerDef\", data.def);\n        PlayerPrefs.SetInt(\"PlayerCrit\", data.crit);\n        PlayerPrefs.SetInt(\"PlayerMiss\", data.miss);\n        PlayerPrefs.SetInt(\"PlayerLuck\", data.luck);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}