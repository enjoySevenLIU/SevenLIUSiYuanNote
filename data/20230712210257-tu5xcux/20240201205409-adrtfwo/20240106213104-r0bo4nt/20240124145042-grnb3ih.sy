{
	"ID": "20240124145042-grnb3ih",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240124145042-grnb3ih",
		"title": "ZMUIL6——高性能系统",
		"updated": "20240126015305"
	},
	"Children": [
		{
			"ID": "20240126010953-47c7sd6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240126010953-47c7sd6",
				"updated": "20240126011005"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "高性能系统要做的工作"
				}
			]
		},
		{
			"ID": "20240124145042-navppvm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240124145042-navppvm",
				"updated": "20240126011005"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "高性能系统是为了解决UI性能问题，增加游戏的流畅度而设计的一系列性能解决方案。\n主要针对渲染、重绘、顶点、UI组件、等多个方面进行性能的优化处理。\n他的功能有以下几点："
				}
			]
		},
		{
			"ID": "20240124145118-ohkjyzv",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240124145118-ohkjyzv",
				"updated": "20240126011615"
			},
			"Children": [
				{
					"ID": "20240124145118-i2rs4az",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240124145118-i2rs4az",
						"updated": "20240124145118"
					},
					"Children": [
						{
							"ID": "20240124145118-69qxjlt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240124145118-69qxjlt",
								"updated": "20240124145616"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "一键优化合批。"
								},
								{
									"Type": "NodeText",
									"Data": "自动根据图集图片和相邻组件的特征进行重新排序。"
								}
							]
						}
					]
				},
				{
					"ID": "20240124145118-5coeo3f",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240124145118-5coeo3f",
						"updated": "20240124145118"
					},
					"Children": [
						{
							"ID": "20240124145118-5ebeawz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240124145118-5ebeawz",
								"updated": "20240124145622"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "避免使用SetActive引起的UI重绘和GC垃圾。"
								},
								{
									"Type": "NodeText",
									"Data": "用CanvasGroup和Scale进行代替。"
								}
							]
						}
					]
				},
				{
					"ID": "20240124145118-hyilt8b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240124145118-hyilt8b",
						"updated": "20240126011615"
					},
					"Children": [
						{
							"ID": "20240124145118-925u7zs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240124145118-925u7zs",
								"updated": "20240126011615"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "使用UI对象池。"
								},
								{
									"Type": "NodeText",
									"Data": "避免频繁的克隆物体导致的卡顿和GC。（在之前的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "UIModule"
								},
								{
									"Type": "NodeText",
									"Data": "​里已经实现了，隐藏窗口不会直接销毁窗口对象，可复用）"
								}
							]
						}
					]
				},
				{
					"ID": "20240124145118-58jnm7g",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240124145118-58jnm7g",
						"updated": "20240124145118"
					},
					"Children": [
						{
							"ID": "20240124145118-f41d4o5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240124145118-f41d4o5",
								"updated": "20240124145627"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "智能化禁用不必要的组件属性。"
								},
								{
									"Type": "NodeText",
									"Data": "从而来避免一些不必要的性能开销。"
								}
							]
						}
					]
				},
				{
					"ID": "20240124145118-yi6kcrj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20240124145118-yi6kcrj",
						"updated": "20240124145118"
					},
					"Children": [
						{
							"ID": "20240124145118-tln7076",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240124145118-tln7076",
								"updated": "20240124145630"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "界面预加载。"
								},
								{
									"Type": "NodeText",
									"Data": "针对复杂一些的界面我们可以使用预加载进行提前加载物体，来确保在真正使用界面时，能够流畅度加载出界面。"
								}
							]
						}
					]
				},
				{
					"ID": "20240124145118-1ghr9bw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20240124145118-1ghr9bw",
						"updated": "20240126011546"
					},
					"Children": [
						{
							"ID": "20240124145118-kwa3r90",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240124145118-kwa3r90",
								"updated": "20240126011546"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong s",
									"TextMarkTextContent": "高性能文字描边。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "s",
									"TextMarkTextContent": "Unity描边组件是拷贝4份相同的文本顶点数占用量巨大。\n一个字母的Text加上Untiy的描边一共占用30个顶点。\n而我们的Text同样是一个字母加上描边能做到只占用6个顶点。性能是Unity组件的5倍。"
								},
								{
									"Type": "NodeText",
									"Data": "（这课没讲，不用记辣）"
								}
							]
						}
					]
				},
				{
					"ID": "20240124145118-ok1x67b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20240124145118-ok1x67b",
						"updated": "20240126011551"
					},
					"Children": [
						{
							"ID": "20240124145118-8cdqshx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240124145118-8cdqshx",
								"updated": "20240126011551"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "组件自动序列化。"
								},
								{
									"Type": "NodeText",
									"Data": "避免掉使用Find接口查找组件带来的性能消耗，而使用自动化序列化的方式拿到组件，将性能消耗尽可能的降至最低。\n（编写自动化系统时就已经实现了，使用组件数据脚本即可）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240124145121-2b98j48",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240124145121-2b98j48",
				"updated": "20240124145122"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特点：最大的程度去降低UI在游戏中所消耗的性能问题，让我们做出来的游戏质量更好，游戏流畅度更高。"
				}
			]
		},
		{
			"ID": "20240124150106-klzuxcm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240124150106-klzuxcm",
				"updated": "20240126011629"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "窗口预加载"
				}
			]
		},
		{
			"ID": "20240126011156-dy1pnya",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126011156-dy1pnya",
				"updated": "20240126011629"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "就是将窗口的加载和窗口的弹出分离，在特定时间提前加载窗口而不显示它，达到预加载的结果，之后再显示窗口，使显示窗口更加顺畅"
				}
			]
		},
		{
			"ID": "20240126011458-rr1av6p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126011458-rr1av6p",
				"updated": "20240126011629"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "预加载在UIModule内实现，会调用窗口的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "OnAwake"
				},
				{
					"Type": "NodeText",
					"Data": "​方法"
				}
			]
		},
		{
			"ID": "20240126011321-yf5d3pp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240126011321-yf5d3pp",
				"style": "line-height: 22px;",
				"updated": "20240126011629"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//UIModule内\n#region 预加载相关\n/// \u003csummary\u003e\n/// 预加载窗口，只加载物体，而不调用生命周期，也不显示它\n/// \u003c/summary\u003e\n/// \u003ctypeparam name=\"T\"\u003e\u003c/typeparam\u003e\npublic void PreLoadWindow\u003cT\u003e() where T : WindowBase, new()\n{\n    //获取类名\n    System.Type type = typeof(T);\n    string windowName = type.Name;\n    T windowBase = new T();\n    //加载对应的窗口预制体\n    GameObject newWindowObj = TempLoadWindow(windowName);\n    //初始化对应的管理类，直接加入到队列及字典内，而不进行排序以及生命周期的调用等\n    if (newWindowObj != null)\n    {\n        //初始化WindowBase各属性成员\n        windowBase.gameObject = newWindowObj;\n        windowBase.transform = newWindowObj.transform;\n        windowBase.Canvas = newWindowObj.GetComponent\u003cCanvas\u003e();\n        windowBase.Canvas.worldCamera = mUICamera;\n        windowBase.Name = newWindowObj.name;\n        windowBase.OnAwake();\n        windowBase.SetVisible(false);\n        //初始化该窗口的RectTransform，防止位置出现偏差\n        RectTransform rectTrans = newWindowObj.GetComponent\u003cRectTransform\u003e();\n        rectTrans.anchorMax = Vector2.one;\n        rectTrans.offsetMax = Vector2.zero;\n        rectTrans.offsetMin = Vector2.zero;\n        //添加到对应的列表\n        mAllWindowDic.Add(windowName, windowBase);\n        mAllWindowList.Add(windowBase);\n    }\n    Debug.Log($\"预加载窗口：{windowName}\");\n}\n#endregion\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240126012208-kseq02s",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240126012208-kseq02s",
				"updated": "20240126012218"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "优化显隐逻辑"
				}
			]
		},
		{
			"ID": "20240126011223-20ehb78",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240126011223-20ehb78",
				"updated": "20240126012218"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "检测网格重建行为"
				}
			]
		},
		{
			"ID": "20240126011659-xse7jmo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126011659-xse7jmo",
				"updated": "20240126012218"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以通过下面的脚本直接检查网格重建行为，随意挂载到一个对象上即可"
				}
			]
		},
		{
			"ID": "20240126011737-d9xaytg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240126011737-d9xaytg",
				"style": "line-height: 22px;",
				"updated": "20240126012218"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class CanvasRebuildTest : MonoBehaviour\n{\n    IList\u003cICanvasElement\u003e mLayoutRebuildQueue;      //层级网格重建队列\n    IList\u003cICanvasElement\u003e mGraphicRebuildQueue;     //图形网格重建队列\n\n    void Start()\n    {\n        Type type = typeof(CanvasUpdateRegistry);\n        FieldInfo field = type.GetField(\"m_LayoutRebuildQueue\", BindingFlags.NonPublic | BindingFlags.Instance);\n        mLayoutRebuildQueue = (IList\u003cICanvasElement\u003e)field.GetValue(CanvasUpdateRegistry.instance);\n\n        field = type.GetField(\"m_GraphicRebuildQueue\", BindingFlags.NonPublic | BindingFlags.Instance);\n        mGraphicRebuildQueue = (IList\u003cICanvasElement\u003e)field.GetValue(CanvasUpdateRegistry.instance);\n    }\n\n    void Update()\n    {\n        for (int i = 0; i \u003c mLayoutRebuildQueue.Count; i++)\n        {\n            var rebuild = mLayoutRebuildQueue[i];\n            if (ObjectValidForUpdate(rebuild))\n            {\n                Debug.LogFormat(\"{0}引起{1}网格重建\", rebuild.transform.name, rebuild.transform.GetComponent\u003cGraphic\u003e().canvas.name);\n            }\n        }\n        for (int i = 0; i \u003c mGraphicRebuildQueue.Count; i++)\n        {\n            var rebuild = mGraphicRebuildQueue[i];\n            if (ObjectValidForUpdate(rebuild))\n            {\n                Debug.LogFormat(\"{0}引起{1}网格重建\", rebuild.transform.name, rebuild.transform.GetComponent\u003cGraphic\u003e().canvas.name);\n            }\n        }\n    }\n\n    /// \u003csummary\u003e\n    /// 检查帧更新对象是否有效\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"element\"\u003eCanvas元素\u003c/param\u003e\n    /// \u003creturns\u003e是否有效\u003c/returns\u003e\n    private bool ObjectValidForUpdate(ICanvasElement element)\n    {\n        var valid = element != null;\n        var isUnityObject = element is UnityEngine.Object;\n        if (isUnityObject)\n        {\n            valid = (element as object) != null;\n        }\n        return valid;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240126011841-406gt9y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126011841-406gt9y",
				"updated": "20240126012224"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "检查发现，直接使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SetActive"
				},
				{
					"Type": "NodeText",
					"Data": "​方法控制窗口的显隐会触发网格重建，导致不必要的性能消耗，\n而"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CanvasGroup"
				},
				{
					"Type": "NodeText",
					"Data": "​改变alpha值和改变"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Transform"
				},
				{
					"Type": "NodeText",
					"Data": "​的缩放不会触发网格重建"
				}
			]
		},
		{
			"ID": "20240126011853-cqkua75",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126011853-cqkua75",
				"updated": "20240126012218"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此，我们可以调整"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CanvasGroup"
				},
				{
					"Type": "NodeText",
					"Data": "​改变alpha值和改变"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Transform"
				},
				{
					"Type": "NodeText",
					"Data": "​的缩放来控制UI对象的显示隐藏，性能更好"
				}
			]
		},
		{
			"ID": "20240126012142-c6gwhjs",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240126012142-c6gwhjs",
				"updated": "20240126012229"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "窗口的显隐"
				}
			]
		},
		{
			"ID": "20240126012233-e908ra4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126012233-e908ra4",
				"updated": "20240126012325"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们为每个窗口都添加一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CanvasGroup"
				},
				{
					"Type": "NodeText",
					"Data": "​，通过改变其alpha值为0或1，来控制窗口的隐藏或显示"
				}
			]
		},
		{
			"ID": "20240126012334-r8lqinv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126012334-r8lqinv",
				"updated": "20240126012626"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "WindowBase"
				},
				{
					"Type": "NodeText",
					"Data": "​的设置可见性方法改成调整"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CanvasGroup"
				},
				{
					"Type": "NodeText",
					"Data": "​的逻辑"
				}
			]
		},
		{
			"ID": "20240126012326-18vxtpf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240126012326-18vxtpf",
				"style": "line-height: 22px;",
				"updated": "20240126012650"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//WindowBase\nprivate CanvasGroup mCanvasGroup;       //窗口的CanvasGroup\n\npublic override void SetVisible(bool isVisible)\n{\n    //gameObject.SetActive(isVisible);          //直接使用SetActive会造成UI控件重绘，浪费性能\n    mCanvasGroup.alpha = isVisible ? 1f : 0f;   //使用CanvasGroup来控制UI窗口的显隐，不会造成UI控件重绘，性能更好\n    mCanvasGroup.blocksRaycasts = isVisible;    //根据是否显示，决定是否接收用户输入，防止隐藏的窗口挡住显示的窗口输入\n    Visible = isVisible;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240126012609-ifkqaem",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240126012609-ifkqaem",
				"updated": "20240126012701"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "UI对象的显隐"
				}
			]
		},
		{
			"ID": "20240126012710-w12dmu0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126012710-w12dmu0",
				"updated": "20240126012921"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以编写一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "UGUIAgent"
				},
				{
					"Type": "NodeText",
					"Data": "​，在其中编写一系列扩展方法，拓展一种调整缩放来控制显隐的方法，为UI控件的显隐提供新的方法"
				}
			]
		},
		{
			"ID": "20240126012903-107p7cy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240126012903-107p7cy",
				"style": "line-height: 22px;",
				"updated": "20240126013004"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine;\nusing UnityEngine.UI;\n\npublic static class UGUIAgent\n{\n    /// \u003csummary\u003e\n    /// 设置可见性，通过将缩放调整至0的方式来隐藏某个对象\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"obj\"\u003e要隐藏的对象\u003c/param\u003e\n    /// \u003cparam name=\"visible\"\u003e是否可见\u003c/param\u003e\n    public static void SetVisible(this GameObject obj, bool visible)\n    {\n        obj.transform.localScale = visible ? Vector3.one : Vector3.zero;\n    }\n    /// \u003csummary\u003e\n    /// 设置可见性，通过将缩放调整至0的方式来隐藏某个对象\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"obj\"\u003e要隐藏的对象\u003c/param\u003e\n    /// \u003cparam name=\"visible\"\u003e是否可见\u003c/param\u003e\n    public static void SetVisible(this Transform transform, bool visible)\n    {\n        transform.localScale = visible ? Vector3.one : Vector3.zero;\n    }\n\n    public static void SetVisible(this Button button, bool visible)\n    {\n        button.transform.localScale = visible ? Vector3.one : Vector3.zero;\n    }\n\n    public static void SetVisible(this Text text, bool visible)\n    {\n        text.transform.localScale = visible ? Vector3.one : Vector3.zero;\n    }\n\n    public static void SetVisible(this Slider slider, bool visible)\n    {\n        slider.transform.localScale = visible ? Vector3.one : Vector3.zero;\n    }\n\n    public static void SetVisible(this Toggle toggle, bool visible)\n    {\n        toggle.transform.localScale = visible ? Vector3.one : Vector3.zero;\n    }\n\n    public static void SetVisible(this InputField inputField, bool visible)\n    {\n        inputField.transform.localScale = visible ? Vector3.one : Vector3.zero;\n    }\n\n    public static void SetVisible(this RawImage image, bool visible)\n    {\n        image.transform.localScale = visible ? Vector3.one : Vector3.zero;\n    }\n\n    public static void SetVisible(this ScrollRect scrollRect, bool visible)\n    {\n        scrollRect.transform.localScale = visible ? Vector3.one : Vector3.zero;\n    }\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240126013008-vvhe2qz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240126013008-vvhe2qz",
				"updated": "20240126013109"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "智能禁用RaycastTarget"
				}
			]
		},
		{
			"ID": "20240126013122-mp8nnq7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126013122-mp8nnq7",
				"updated": "20240126013602"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "很多单纯的Image和Text是不接收用户输入的，因此将其RaycastTarget开着只能浪费性能\n我们可以检测新创建出来的Text, Image, Raw Image，将其RaycastTarget属性自动关闭，省去我们手动关闭的麻烦\n也不影响其他用于Button等的Image的射线检测正常执行"
				}
			]
		},
		{
			"ID": "20240126013602-i0dohp1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126013602-i0dohp1",
				"updated": "20240126013612"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现思路如下："
				}
			]
		},
		{
			"ID": "20240126013612-pavlwhp",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240126013612-pavlwhp",
				"updated": "20240126013830"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240126013616-mugjnpj",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240126013616-mugjnpj",
						"updated": "20240126013830"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在编辑器模式下，每当Hierarchy窗口发生改变，就检测选中的物体（一般都是新创建的UI对象）名字是否包含Text, Image字样，一旦存在自动关闭其RaycastTarget属性"
						}
					]
				}
			]
		},
		{
			"ID": "20240126014321-iwobe06",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240126014321-iwobe06",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240126014412"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240126014323-9cbvam9",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240126014323-9cbvam9",
						"updated": "20240126014412"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注：不对Text Mesh Pro生效"
						}
					]
				}
			]
		},
		{
			"ID": "20240126013832-oa8k6bk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240126013832-oa8k6bk",
				"style": "line-height: 22px;",
				"updated": "20240126014039"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class SystemUIEditor : Editor\n{\n    //该特性使得该方法可以在编辑器模式下自动调用\n    [InitializeOnLoadMethod]\n    private static void InitEditor()\n    {\n        //监听Hierarchy窗口发生改变的委托\n        EditorApplication.hierarchyChanged += HanderTextOrImageRaycast;\n    }\n\n    //监听新创建出来的Text, Image, Raw Image，将其RaycastTarget属性直接关闭（不支持TMP）\n    private static void HanderTextOrImageRaycast()\n    {\n        GameObject obj = Selection.activeGameObject;\n        if (obj != null)\n        {\n            if (obj.name.Contains(\"Text\"))\n            {\n                Text text = obj.GetComponent\u003cText\u003e();\n                if (text != null)\n                {\n                    text.raycastTarget = false;\n                }\n            }\n            else if (obj.name.Contains(\"Image\"))\n            {\n                Image image = obj.GetComponent\u003cImage\u003e();\n                if (image != null)\n                {\n                    image.raycastTarget = false;\n                }\n                else\n                {\n                    RawImage rawImage = obj.GetComponent\u003cRawImage\u003e();\n                    if (rawImage != null)\n                    {\n                        rawImage.raycastTarget = false;\n                    }\n                }\n            }\n        }\n    }\n\n\t//该函数与上面的内容无关\n    private static void LoadWindowCamera()\n    {\n        if (Selection.activeGameObject != null)\n        {\n            GameObject uiCameraObj = GameObject.Find(\"UICamera\");\n            if (uiCameraObj != null)\n            {\n                Camera camera = uiCameraObj.GetComponent\u003cCamera\u003e();\n                if (Selection.activeGameObject.name.Contains(\"Window\"))\n                {\n                    Canvas canvas = Selection.activeGameObject.GetComponent\u003cCanvas\u003e();\n                    if (canvas != null)\n                    {\n                        canvas.worldCamera = camera;\n                    }\n                }\n            }\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240126014056-n2yz1lw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240126014056-n2yz1lw",
				"updated": "20240126014113"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一键自动优化Batchs"
				}
			]
		},
		{
			"ID": "20240126014116-aixd6th",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126014116-aixd6th",
				"updated": "20240126014455"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "与NGUI的优化Batchs类似，它会将重新为同层级的对象进行排序，将同图集的对象排列到一起，将Text对象统一排列到末尾\n以最大化的降低Batchs"
				}
			]
		},
		{
			"ID": "20240126014611-t4gw9p7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126014611-t4gw9p7",
				"updated": "20240126014640"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过导入UGUI-Editor这个开源库，即可使用该功能"
				}
			]
		},
		{
			"ID": "20240126014605-wgrmzwz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126014605-wgrmzwz",
				"updated": "20240126014605"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 370px;",
						"style": "width: 360px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240126014605-hlpseon.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 360px;\" parent-style=\"width: 370px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240126014708-yidxbmp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126014708-yidxbmp",
				"updated": "20240126014708"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 368px;",
						"style": "width: 358px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240126014708-6sklksu.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 358px;\" parent-style=\"width: 368px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240126014739-rxmnpmj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126014739-rxmnpmj",
				"updated": "20240126014739"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 364px;",
						"style": "width: 354px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240126014739-w84e0pg.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 354px;\" parent-style=\"width: 364px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240126014758-l0reo6c",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240126014758-l0reo6c",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240126015305"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240126014801-ob4i29g",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240126014801-ob4i29g",
						"updated": "20240126015305"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "悲报：\n看了一眼这个UGUI-Editor在GitHub上的库，已经久未更新了，将该库导入到2021版的Unity出现了不少过时警告，但还是能用\n使用其PrafabWin窗口也有轻微显示问题，笔者难以保证这个库的其他功能还能在未来的版本里正常使用"
						}
					]
				}
			]
		}
	]
}