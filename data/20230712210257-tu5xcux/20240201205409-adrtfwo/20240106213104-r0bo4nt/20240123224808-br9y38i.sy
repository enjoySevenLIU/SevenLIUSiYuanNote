{
	"ID": "20240123224808-br9y38i",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240123224808-br9y38i",
		"title": "ZMUIL5——堆栈系统",
		"updated": "20240126010921"
	},
	"Children": [
		{
			"ID": "20240123224808-m22dtkl",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240123224808-m22dtkl",
				"updated": "20240125000212"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "堆栈系统要做的工作"
				}
			]
		},
		{
			"ID": "20240124144306-j9oc3zv",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240124144306-j9oc3zv",
				"updated": "20240125005112"
			},
			"Children": [
				{
					"ID": "20240124144311-s2lwyud",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240124144311-s2lwyud",
						"updated": "20240124144800"
					},
					"Children": [
						{
							"ID": "20240124144311-ietwgs3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240124144311-ietwgs3",
								"updated": "20240124144800"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "堆栈系统可以设置窗口弹出队列，按照设定好的顺序在特定的时机顺序弹出多个窗口"
								}
							]
						}
					]
				},
				{
					"ID": "20240124144630-c4yc785",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240124144630-c4yc785",
						"updated": "20240124144818"
					},
					"Children": [
						{
							"ID": "20240124144630-35cu2fo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240124144630-35cu2fo",
								"updated": "20240124144818"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "堆栈系统依次弹出窗口时，打开或关闭弹出队列外的窗口，不会影响堆栈系统的窗口弹出"
								}
							]
						}
					]
				},
				{
					"ID": "20240124144715-h2gwubs",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240124144715-h2gwubs",
						"updated": "20240125005112"
					},
					"Children": [
						{
							"ID": "20240124144715-1f998mu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240124144715-1f998mu",
								"updated": "20240125005112"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "堆栈系统可以在弹出窗口时，可以随时向队列内添加新的需要弹出的窗口，或者清除弹出队列，取消堆栈系统的窗口弹出"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240123224903-ssswguq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240123224903-ssswguq",
				"updated": "20240125000212"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "堆栈系统是任何游戏必不可少的一项功能，它可以用作诸如首次进入大厅时一些特殊或活动面板的有序自动弹出，\n从而让玩家能够更好的去了解到游戏内容和新增功能。"
				}
			]
		},
		{
			"ID": "20240125005406-05tf6jt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240125005406-05tf6jt",
				"updated": "20240125005410"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "UIModule的堆栈系统相关"
				}
			]
		},
		{
			"ID": "20240125005056-5yvtyh2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240125005056-5yvtyh2",
				"updated": "20240125005438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "堆栈系统会控制UI窗口的显示隐藏，而"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "UIModule"
				},
				{
					"Type": "NodeText",
					"Data": "​负责窗口显隐的执行，因此堆栈系统主要在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "UIModule"
				},
				{
					"Type": "NodeText",
					"Data": "​内实现"
				}
			]
		},
		{
			"ID": "20240125005439-pird428",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240125005439-pird428",
				"updated": "20240125005451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "堆栈系统使用队列的原因"
				}
			]
		},
		{
			"ID": "20240125005451-gph42y4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240125005451-gph42y4",
				"updated": "20240125010147"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "堆栈系统实际是使用队列容器来装载要显示的窗口的，而不是栈，\n因为栈是后进先出，而向堆栈系统添加要显示的面板的时间是不确定的，例如服务器发送消息的时间就不确定\n如果使用后进先出的栈，假设在弹出窗口1后，窗口2和窗口3先后入栈，这会导致下一个弹出的窗口是窗口3，造成窗口弹出顺序的混乱\n而队列的先进先出的顺序就很符合直觉，也不会造成弹出顺序的混乱"
				}
			]
		},
		{
			"ID": "20240125010430-3v772du",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240125010430-3v772du",
				"style": "line-height: 22px;",
				"updated": "20240125010518"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//UIModule内\nprivate Queue\u003cWindowBase\u003e mWindowStack = new Queue\u003cWindowBase\u003e();   //堆栈系统的队列，用来管理弹窗的循环弹出\nprivate bool mStartPopStackWindowStatus = false;                    //开始弹出堆栈的标志，用于处理多种情况，例如：正在出栈中有其他界面弹出，可以直接放到栈内进行弹出等\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240125010244-5q1p0ck",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240125010244-5q1p0ck",
				"updated": "20240126004546"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "WindowBehaviour的堆栈系统相关"
				}
			]
		},
		{
			"ID": "20240126004637-liz37vl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240126004637-liz37vl",
				"updated": "20240126004847"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PopStack"
				},
				{
					"Type": "NodeText",
					"Data": "​表示是否是从堆栈系统弹出的窗口，它决定隐藏该窗口时是否让堆栈系统弹出队列里的下一个窗口\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PopStackListener"
				},
				{
					"Type": "NodeText",
					"Data": "​是窗口加入堆栈系统队列时的弹出窗口委托，当堆栈系统弹出该窗口时会执行该函数"
				}
			]
		},
		{
			"ID": "20240126004541-9w3yknn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240126004541-9w3yknn",
				"style": "line-height: 22px;",
				"updated": "20240126004546"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//WindowBehaviour内\npublic bool PopStack { get; set; }              //是否是通过堆栈系统弹出的弹窗，若是，则处于堆栈弹出的流程时，隐藏该窗口将弹出下一个窗口\npublic Action\u003cWindowBase\u003e PopStackListener { get; set; }    //从堆栈系统出栈时的监听函数\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240126004435-upgqzan",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240126004435-upgqzan",
				"updated": "20240126005219"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "堆栈系统执行流程"
				}
			]
		},
		{
			"ID": "20240126005012-gd2wy3h",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240126005012-gd2wy3h",
				"updated": "20240126010921"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240126005222-ax7b675",
					"Type": "NodeList",
					"ListData": {
						"Typ": 1
					},
					"Properties": {
						"id": "20240126005222-ax7b675",
						"updated": "20240126010921"
					},
					"Children": [
						{
							"ID": "20240126005227-r9b30m8",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "MS4=",
								"Num": 1
							},
							"Properties": {
								"id": "20240126005227-r9b30m8",
								"updated": "20240126005227"
							},
							"Children": [
								{
									"ID": "20240126005227-6o8d3ok",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240126005227-6o8d3ok",
										"updated": "20240126010612"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "使用"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PushWindowToStack"
										},
										{
											"Type": "NodeText",
											"Data": "​方法使用泛型传入要加入队列的窗口，同时可以传入弹出窗口时执行的委托\n无论界面是否已加载都先new出来，将委托赋值给这个new出来的对象的"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PopStackListener"
										},
										{
											"Type": "NodeText",
											"Data": "​，然后将它加入到队列内"
										}
									]
								}
							]
						},
						{
							"ID": "20240126005517-9bt49hj",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "Mi4=",
								"Num": 2
							},
							"Properties": {
								"id": "20240126005517-9bt49hj"
							},
							"Children": [
								{
									"ID": "20240126005517-1o5fvhu",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240126005517-1o5fvhu",
										"updated": "20240126010618"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "使用"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "StartPopFirstStackWindow"
										},
										{
											"Type": "NodeText",
											"Data": "​将开启堆栈系统的窗口顺序弹出，将"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "UIModule"
										},
										{
											"Type": "NodeText",
											"Data": "​的"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "mStartPopStackWindowStatus"
										},
										{
											"Type": "NodeText",
											"Data": "​赋值为"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "true"
										},
										{
											"Type": "NodeText",
											"Data": "​标记弹出的开始\n然后调用"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PopStackWindow"
										},
										{
											"Type": "NodeText",
											"Data": "​方法"
										}
									]
								}
							]
						},
						{
							"ID": "20240126005640-5fv61cp",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "My4=",
								"Num": 3
							},
							"Properties": {
								"id": "20240126005640-5fv61cp"
							},
							"Children": [
								{
									"ID": "20240126005640-6ebv2w4",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240126005640-6ebv2w4",
										"updated": "20240126010751"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "​"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PopStackWindow"
										},
										{
											"Type": "NodeText",
											"Data": "​方法会检查队列是否拥有窗口，\n如果不存在就终止堆栈系统的弹出，将"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "mStartPopStackWindowStatus"
										},
										{
											"Type": "NodeText",
											"Data": "​赋值为"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "false"
										},
										{
											"Type": "NodeText",
											"Data": "​\n如果存在，则队列弹出在"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PushWindowToStack"
										},
										{
											"Type": "NodeText",
											"Data": "​new出来的窗口，将该窗口传入堆栈系统专用"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PopUpWindow"
										},
										{
											"Type": "NodeText",
											"Data": "​方法内\n之前new出来的窗口会将"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PopStackListener"
										},
										{
											"Type": "NodeText",
											"Data": "​赋值给"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PopUpWindow"
										},
										{
											"Type": "NodeText",
											"Data": "​方法弹出的窗口，将其"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PopStack"
										},
										{
											"Type": "NodeText",
											"Data": "​赋值为"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "true"
										},
										{
											"Type": "NodeText",
											"Data": "​，并执行"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PopStackListener"
										},
										{
											"Type": "NodeText",
											"Data": "​的委托"
										}
									]
								}
							]
						},
						{
							"ID": "20240126010447-xn260n0",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "NC4=",
								"Num": 4
							},
							"Properties": {
								"id": "20240126010447-xn260n0"
							},
							"Children": [
								{
									"ID": "20240126010447-2rj2uio",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240126010447-2rj2uio",
										"updated": "20240126010738"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "当有窗口隐藏或销毁时，会执行"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PopNextStackWindow"
										},
										{
											"Type": "NodeText",
											"Data": "​方法，如果关闭的这个窗口"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PopStack"
										},
										{
											"Type": "NodeText",
											"Data": "​为"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "true"
										},
										{
											"Type": "NodeText",
											"Data": "​，就再次执行"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PopStackWindow"
										},
										{
											"Type": "NodeText",
											"Data": "​"
										}
									]
								}
							]
						},
						{
							"ID": "20240126010803-5obcy2p",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "NS4=",
								"Num": 5
							},
							"Properties": {
								"id": "20240126010803-5obcy2p"
							},
							"Children": [
								{
									"ID": "20240126010803-bx74lhg",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240126010803-bx74lhg",
										"updated": "20240126010855"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "​"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PushAndPopStackWindow"
										},
										{
											"Type": "NodeText",
											"Data": "​方法会在加入队列时就直接开始弹出窗口"
										}
									]
								}
							]
						},
						{
							"ID": "20240126010856-sdakwau",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "Ni4=",
								"Num": 6
							},
							"Properties": {
								"id": "20240126010856-sdakwau",
								"updated": "20240126010921"
							},
							"Children": [
								{
									"ID": "20240126010856-7gbo93u",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240126010856-7gbo93u",
										"updated": "20240126010921"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "​"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "ClearStackWindows"
										},
										{
											"Type": "NodeText",
											"Data": "​会清除队列，可以用于打断弹出队列"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240126004952-lksqcah",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240126004952-lksqcah",
				"style": "line-height: 22px;",
				"updated": "20240126005727"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//堆栈系统专用弹出窗口方法，传入从堆栈系统弹出的WindowBase\nprivate WindowBase PopUpWindow(WindowBase QueuePopWindow)\n{\n    System.Type type = QueuePopWindow.GetType();\n    string windowName = type.Name;\n    //先确认是否加载过Window，若加载过，直接返回加载过的Window\n    WindowBase LoadedWindow = GetWindow(windowName);\n    if (LoadedWindow != null)\n    {\n        return ShowWindow(windowName);\n    }\n    //若未加载，则将弹出的WindowBase用于初始化\n    return InitializeWindow(QueuePopWindow, windowName);\n}\n\n#region 堆栈系统相关\n/// \u003csummary\u003e\n/// 向堆栈压入一个界面\n/// \u003c/summary\u003e\n/// \u003ctypeparam name=\"T\"\u003e要压入的窗口\u003c/typeparam\u003e\n/// \u003cparam name=\"popCallBack\"\u003e出栈时要执行的监听函数\u003c/param\u003e\npublic void PushWindowToStack\u003cT\u003e(Action\u003cWindowBase\u003e popCallBack = null) where T : WindowBase, new()\n{\n    //这里的new出来的T暂时用于在队列内记录监听函数，\n    //后续出栈显示窗口时，若T已经加载过，则这里的监听函数将赋值给已经加载过的T，若未加载过再使用该T用于初始化\n    T windowBase = new T();\n    windowBase.PopStackListener = popCallBack;\n    mWindowStack.Enqueue(windowBase);\n}\n\n/// \u003csummary\u003e\n/// 弹出堆栈中第一个弹窗\n/// \u003c/summary\u003e\npublic void StartPopFirstStackWindow()\n{\n    if (mStartPopStackWindowStatus) return;\n    mStartPopStackWindowStatus = true;      //表示已经开始进行堆栈弹出的流程\n    PopStackWindow();\n}\n\n/// \u003csummary\u003e\n/// 压入并直接开始弹出堆栈弹窗\n/// \u003c/summary\u003e\n/// \u003ctypeparam name=\"T\"\u003e要压入的窗口\u003c/typeparam\u003e\n/// \u003cparam name=\"popCallBack\"\u003e出栈时要执行的监听函数\u003c/param\u003e\npublic void PushAndPopStackWindow\u003cT\u003e(Action\u003cWindowBase\u003e popCallBack = null) where T : WindowBase, new()\n{\n    PushWindowToStack\u003cT\u003e(popCallBack);\n    StartPopFirstStackWindow();\n}\n\n/// \u003csummary\u003e\n/// 弹出下一个窗口\n/// \u003c/summary\u003e\n/// \u003cparam name=\"windowBase\"\u003e\u003c/param\u003e\nprivate void PopNextStackWindow(WindowBase windowBase)\n{\n    if (windowBase != null \u0026\u0026 mStartPopStackWindowStatus \u0026\u0026 windowBase.PopStack)\n    {\n        windowBase.PopStack = false;\n        PopStackWindow();\n    }\n}\n\n/// \u003csummary\u003e\n/// 弹出堆栈弹窗\n/// \u003c/summary\u003e\n/// \u003creturns\u003e是否从堆栈里弹出窗口\u003c/returns\u003e\npublic bool PopStackWindow()\n{\n    if (mWindowStack.Count \u003e 0)\n    {\n        WindowBase recordWindow = mWindowStack.Dequeue();\n        WindowBase popWindow = PopUpWindow(recordWindow);\n        popWindow.PopStackListener = recordWindow.PopStackListener;\n        popWindow.PopStack = true;              //表示是从堆栈系统里打开的窗口，关闭该窗口将重新执行这里的方法\n        popWindow.PopStackListener?.Invoke(popWindow);\n        popWindow.PopStackListener = null;\n        return true;\n    }\n    else\n    {\n        mStartPopStackWindowStatus = false;     //表示堆栈弹出的流程结束\n        return false;\n    }\n}\n\n/// \u003csummary\u003e\n/// 清空窗口堆栈，可用于中途取消堆栈弹出流程\n/// \u003c/summary\u003e\npublic void ClearStackWindows()\n{\n    mWindowStack.Clear();\n}\n#endregion\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}