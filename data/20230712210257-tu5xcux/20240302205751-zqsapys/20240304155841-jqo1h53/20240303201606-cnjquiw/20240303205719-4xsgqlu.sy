{
	"ID": "20240303205719-4xsgqlu",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240303205719-4xsgqlu",
		"title": "UN1L9-2——序列化和反序列化",
		"type": "doc",
		"updated": "20240717151229"
	},
	"Children": [
		{
			"ID": "20240303205926-ttnx0it",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240303205926-ttnx0it",
				"updated": "20240303213008"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于各类型数据和字节数据相互转换相关API，已在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20231107200351-4kqyeo8",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "BitConverter"
				},
				{
					"Type": "NodeText",
					"Data": "讲过，这里一笔带过"
				}
			]
		},
		{
			"ID": "20240303213008-icfe1sx",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240303213008-icfe1sx",
				"updated": "20240303213017"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "序列化类对象"
				}
			]
		},
		{
			"ID": "20240303205719-5pucb5d",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240303205719-5pucb5d",
				"updated": "20240303213017"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "非字符串类型转字节数组"
				}
			]
		},
		{
			"ID": "20240303205824-slaqple",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240303205824-slaqple",
				"updated": "20240303210232"
			},
			"Children": [
				{
					"ID": "20240303205824-td5pgps",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20240303205824-td5pgps",
						"updated": "20240303210232"
					},
					"Children": [
						{
							"ID": "20240303210223-q7xi372",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20240303210223-q7xi372",
								"updated": "20240303210223"
							},
							"Children": [
								{
									"ID": "20240303210224-evlyynt",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240303210224-evlyynt",
										"updated": "20240303210224"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "字节数组的长度，由该方法输入的数据类型决定，例如"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "int"
										},
										{
											"Type": "NodeText",
											"Data": "​就是4个字节，这个数组的长度就是4，存储了4个字节\n这个方法可以转换大部分的基本数据类型，除了"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "decimal"
										},
										{
											"Type": "NodeText",
											"Data": "​和"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "string"
										},
										{
											"Type": "NodeText",
											"Data": "​，"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "decimal"
										},
										{
											"Type": "NodeText",
											"Data": "​我们几乎不用，而"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "string"
										},
										{
											"Type": "NodeText",
											"Data": "​我们使用"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "Encoding"
										},
										{
											"Type": "NodeText",
											"Data": "​类来转换"
										}
									]
								},
								{
									"ID": "20240303210224-rqhq3pe",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20240303210224-rqhq3pe",
										"style": "line-height: 22px;",
										"updated": "20240303210224"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker",
											"CodeBlockInfo": "YyM="
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "byte[] bytes = BitConverter.GetBytes(99);\n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								}
							]
						},
						{
							"ID": "20240303210226-dsvlyg4",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20240303210226-dsvlyg4",
								"updated": "20240303210232"
							},
							"Children": [
								{
									"ID": "20240303210232-384l47a",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240303210232-384l47a",
										"updated": "20240303210232"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "将字节数组转换为各种类型时，根据类型的不同，方法名是不同的，但是方法名的规律很简单，基本就是"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "To + 类型"
										},
										{
											"Type": "NodeText",
											"Data": "​或者"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "To + Int + 位数"
										},
										{
											"Type": "NodeText",
											"Data": "​\n第一个参数填入要转换的字节数组，第二个参数填入要从数组第几个开始读取（默认为0）"
										}
									]
								},
								{
									"ID": "20240303210232-m1k7psy",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20240303210232-m1k7psy",
										"style": "line-height: 22px;",
										"updated": "20240303210232"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker",
											"CodeBlockInfo": "YyM="
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "int i = BitConverter.ToInt32(bytes, 0);\nprint(i);\n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				}
			]
		},
		{
			"ID": "20240303205925-msd2a75",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240303205925-msd2a75",
				"updated": "20240303213017"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字符串类型转字节数组"
				}
			]
		},
		{
			"ID": "20240303210249-i0df4xd",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240303210249-i0df4xd",
				"updated": "20240303213017"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240303210329-mvc92e8",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20240303210329-mvc92e8",
						"updated": "20240303210347"
					},
					"Children": [
						{
							"ID": "20240303210339-6ngtg00",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20240303210339-6ngtg00",
								"updated": "20240303210339"
							},
							"Children": [
								{
									"ID": "20240303210339-ib2ketm",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240303210339-ib2ketm",
										"updated": "20240303210339"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "字符串 转换为 指定编码格式的字节数组 需要我们"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "Encoding.编码格式.GetBytes()"
										},
										{
											"Type": "NodeText",
											"Data": "​，一般在游戏开发中我们都使用"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code strong",
											"TextMarkTextContent": "UTF-8"
										},
										{
											"Type": "NodeText",
											"Data": "​这个编码格式"
										}
									]
								},
								{
									"ID": "20240303210339-qfvbuuv",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20240303210339-qfvbuuv",
										"style": "line-height: 22px;",
										"updated": "20240303210339"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker",
											"CodeBlockInfo": "YyM="
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "byte[] strBytes = Encoding.UTF8.GetBytes(\"字符串测试\");\n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240303210349-r34vfiq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240303210349-r34vfiq",
				"updated": "20240717151229"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将一个类对象转换为二进制"
				}
			]
		},
		{
			"ID": "20240303212931-drjis4s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240303212931-drjis4s",
				"updated": "20240303213017"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们对类对象的2进制序列化主要用到的知识点是"
				}
			]
		},
		{
			"ID": "20240303212934-oxf1v0b",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240303212934-oxf1v0b",
				"updated": "20240717151229"
			},
			"Children": [
				{
					"ID": "20240303212934-e2ra7bu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240303212934-e2ra7bu",
						"updated": "20240303212959"
					},
					"Children": [
						{
							"ID": "20240303212934-tvmeofg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240303212934-tvmeofg",
								"updated": "20240303212959"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code block-ref",
									"TextMarkBlockRefID": "20231107200351-4kqyeo8",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "BitConverter"
								},
								{
									"Type": "NodeText",
									"Data": "​转换非字符串的类型的变量为字节数组"
								}
							]
						}
					]
				},
				{
					"ID": "20240303212934-go09b2h",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240303212934-go09b2h",
						"updated": "20240717151229"
					},
					"Children": [
						{
							"ID": "20240303212934-7eh7idg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240303212934-7eh7idg",
								"updated": "20240717151229"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code block-ref",
									"TextMarkBlockRefID": "20231107202651-6392aj4",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "Encoding.UTF8"
								},
								{
									"Type": "NodeText",
									"Data": "​转换字符串类型的变量为字节数组"
								}
							]
						},
						{
							"ID": "20240717151223-9dym2jr",
							"Type": "NodeBlockquote",
							"Properties": {
								"id": "20240717151223-9dym2jr",
								"updated": "20240717151228"
							},
							"Children": [
								{
									"Type": "NodeBlockquoteMarker",
									"Data": "\u003e"
								},
								{
									"ID": "20240717151226-rffzzu9",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240717151226-rffzzu9",
										"updated": "20240717151228"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "注意：为了考虑反序列化，我们在转存2进制，序列化字符串之前，先序列化字符串字节数组的长度"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240303212931-hp2ept9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240303212931-hp2ept9",
				"updated": "20240303213017"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "转换流程是："
				}
			]
		},
		{
			"ID": "20240303212942-x4qn8kh",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240303212942-x4qn8kh",
				"updated": "20240303213017"
			},
			"Children": [
				{
					"ID": "20240303212942-xkqtgap",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240303212942-xkqtgap",
						"updated": "20240303212942"
					},
					"Children": [
						{
							"ID": "20240303212942-jj1w85y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240303212942-jj1w85y",
								"updated": "20240303212942"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "明确字节数组的容量"
								}
							]
						}
					]
				},
				{
					"ID": "20240303212942-oh9la0u",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240303212942-oh9la0u",
						"updated": "20240303212942"
					},
					"Children": [
						{
							"ID": "20240303212942-k4nds1o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240303212942-k4nds1o",
								"updated": "20240303212942"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "申明一个装载信息的字节数组容器"
								}
							]
						}
					]
				},
				{
					"ID": "20240303212942-6qlrnw4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240303212942-6qlrnw4",
						"updated": "20240303212942"
					},
					"Children": [
						{
							"ID": "20240303212942-q2tv8g3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240303212942-q2tv8g3",
								"updated": "20240303212942"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将对象中的所有信息转为字节数组并放入该容器当中（利用数组中的CopeTo方法转存字节数组）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240303210427-vrhxwqb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240303210427-vrhxwqb",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240303213017"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：网络通信中我们不能直接使用数据持久化2进制知识点中的"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"parent-style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "BinaryFormatter"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: parent-style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​2进制格式化类\n因为客户端和服务器使用的语言可能不一样，"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"parent-style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "BinaryFormatter"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: parent-style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​是C#的序列化规则，和其它语言之间的兼容性不好\n如果使用它，那么其它语言开发的服务器无法对其进行反序列化，我们需要自己来处理将类对象数据序列化为字节数组"
				}
			]
		},
		{
			"ID": "20240303210537-xk35g3o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240303210537-xk35g3o",
				"updated": "20240303213017"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设我们要序列化下面这个类的数据："
				}
			]
		},
		{
			"ID": "20240303210703-cwtm0cj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240303210703-cwtm0cj",
				"style": "line-height: 22px;",
				"updated": "20240303213017"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class PlayerInfo\n{\n    public int lev;\n    public string name;\n    public short atk;\n    public bool sex;\n}\n\npublic class Lesson3 : MonoBehaviour\n{\n    void Start()\n    {\n        PlayerInfo info = new PlayerInfo();\n        info.lev = 10;\n        info.name = \"唐老狮\";\n        info.atk = 88;\n        info.sex = false;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240303210427-q8vzzne",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240303210427-q8vzzne",
				"updated": "20240303213017"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "单纯的转换一个变量为字节数组非常的简单，但是我们如何将一个类对象携带的所有信息放入到一个字节数组中呢\n我们需要做以下几步："
				}
			]
		},
		{
			"ID": "20240303210452-0x7qepn",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240303210452-0x7qepn",
				"updated": "20240303213017"
			},
			"Children": [
				{
					"ID": "20240303210459-dmmh09c",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240303210459-dmmh09c",
						"updated": "20240303210459"
					},
					"Children": [
						{
							"ID": "20240303210459-7fl6xkj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240303210459-7fl6xkj",
								"updated": "20240303210459"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "明确字节数组的容量（注意：在确定字符串字节长度时要考虑解析时如何处理）"
								}
							]
						},
						{
							"ID": "20240303210714-8jtz1g1",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240303210714-8jtz1g1",
								"style": "line-height: 22px;",
								"updated": "20240303212200"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "//得到的 这个Info数据，如果转换成字节数组，那么字节数组容器需要的容量为：\nint indexNum = sizeof(int) +                                //lev int类型 4\n               sizeof(int) +                                //name字符串转换成字节数组后，数组的长度 4\n               Encoding.UTF8.GetBytes(info.name).Length +   //字符串具体字符数组的长度\n               sizeof(short) +                              //atk short类型 2\n               sizeof(bool);                                //sex bool类型 1\n\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240303210501-y31rg68",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240303210501-y31rg68"
					},
					"Children": [
						{
							"ID": "20240303210501-pnh7eeo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240303210501-pnh7eeo",
								"updated": "20240303210507"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "申明一个装载信息的字节数组容器"
								}
							]
						},
						{
							"ID": "20240303212201-48kkypa",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240303212201-48kkypa",
								"style": "line-height: 22px;",
								"updated": "20240303212210"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "byte[] playerBytes = new byte[indexNum];\nint index = 0;          //从playerBytes在数组中的第几个位置去存储数据\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240303210509-jk1lfsa",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240303210509-jk1lfsa",
						"updated": "20240303212434"
					},
					"Children": [
						{
							"ID": "20240303210509-s6i4ojw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240303210509-s6i4ojw",
								"updated": "20240303210532"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将对象中的所有信息转为字节数组并放入该容器当中（可以利用数组中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CopeTo"
								},
								{
									"Type": "NodeText",
									"Data": "​方法转存字节数组）\n​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CopyTo"
								},
								{
									"Type": "NodeText",
									"Data": "​方法的第二个参数代表 从容器的第几个位置开始存储"
								}
							]
						},
						{
							"ID": "20240303212212-y1clclu",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240303212212-y1clclu",
								"style": "line-height: 22px;",
								"updated": "20240303212434"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "//等级\nBitConverter.GetBytes(info.lev).CopyTo(playerBytes, index);\nindex += sizeof(int);\n//名字\nbyte[] strBytes = Encoding.UTF8.GetBytes(info.name);            //字符串转换为字节数组\nint num = strBytes.Length;                                      //获取字符串字节数组长度\nBitConverter.GetBytes(num).CopyTo(playerBytes, index);          //将字符串字节数组长度消息写入到该类对象的字节数组内\nindex += sizeof(int);                                           //索引后移\nstrBytes.CopyTo(playerBytes, index);                            //将字符串字节数组写入到该类对象的字节数组内\nindex += num;                                                   //索引后移\n//攻击力\nBitConverter.GetBytes(info.atk).CopyTo(playerBytes, index);\nindex += sizeof(short);\n//性别\nBitConverter.GetBytes(info.sex).CopyTo(playerBytes, index);\nindex += sizeof(bool);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240303213019-qjqfgh0",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240303213019-qjqfgh0",
				"updated": "20240303222835"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "反序列化类对象"
				}
			]
		},
		{
			"ID": "20240304143722-fj8htyz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240304143722-fj8htyz",
				"updated": "20240304143733"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们对类对象的2进制反序列化主要用到的知识点是"
				}
			]
		},
		{
			"ID": "20240304143733-b4h3dtx",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240304143733-b4h3dtx",
				"updated": "20240304143742"
			},
			"Children": [
				{
					"ID": "20240304143733-olie80b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240304143733-olie80b",
						"updated": "20240304143742"
					},
					"Children": [
						{
							"ID": "20240304143733-eowolos",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240304143733-eowolos",
								"updated": "20240304143742"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BitConverter"
								},
								{
									"Type": "NodeText",
									"Data": "​ 转换字节数组为非字符串的类型的变量"
								}
							]
						}
					]
				},
				{
					"ID": "20240304143733-iamej1i",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240304143733-iamej1i",
						"updated": "20240304143742"
					},
					"Children": [
						{
							"ID": "20240304143733-etdkhmy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240304143733-etdkhmy",
								"updated": "20240304143742"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Encoding.UTF8"
								},
								{
									"Type": "NodeText",
									"Data": "​ 转换字节数组为字符串类型的变量（注意：先读长度，再读字符串）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240304143729-tq7rirt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240304143729-tq7rirt",
				"updated": "20240304143746"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "转换流程是："
				}
			]
		},
		{
			"ID": "20240304143731-sc26pp7",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240304143731-sc26pp7",
				"updated": "20240304143731"
			},
			"Children": [
				{
					"ID": "20240304143731-oooaim0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240304143731-oooaim0",
						"updated": "20240304143731"
					},
					"Children": [
						{
							"ID": "20240304143731-nyie8qn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240304143731-nyie8qn",
								"updated": "20240304143731"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取到对应的字节数组"
								}
							]
						}
					]
				},
				{
					"ID": "20240304143731-bgrquqx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240304143731-bgrquqx",
						"updated": "20240304143731"
					},
					"Children": [
						{
							"ID": "20240304143731-zvvwb1d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240304143731-zvvwb1d",
								"updated": "20240304143731"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将字节数组按照序列化时的顺序进行反序列化(将对应字节分组转换为对应类型变量)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240303222817-8avu4bw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240303222817-8avu4bw",
				"updated": "20240303222835"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字节数组转非字符串类型"
				}
			]
		},
		{
			"ID": "20240303223550-98gfj0l",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240303223550-98gfj0l",
				"updated": "20240303222835"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240303223716-mjd0yae",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20240303223716-mjd0yae",
						"updated": "20240303224447"
					},
					"Children": [
						{
							"ID": "20240303223716-gdpgany",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20240303223716-gdpgany",
								"updated": "20240303224447"
							},
							"Children": [
								{
									"ID": "20240303223716-w5qmvce",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240303223716-w5qmvce",
										"updated": "20240303223716"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "将字节数组转换为各种类型时，根据类型的不同，方法名是不同的，但是方法名的规律很简单，基本就是"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "To + 类型"
										},
										{
											"Type": "NodeText",
											"Data": "​或者"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "To + Int + 位数"
										},
										{
											"Type": "NodeText",
											"Data": "​\n第一个参数填入要转换的字节数组，第二个参数填入要从数组第几个开始读取（默认为0）"
										}
									]
								},
								{
									"ID": "20240303223716-rjt8n7r",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20240303223716-rjt8n7r",
										"style": "line-height: 22px;",
										"updated": "20240303224447"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker",
											"CodeBlockInfo": "YyM="
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "byte[] bytes = BitConverter.GetBytes(99);\nint i = BitConverter.ToInt32(bytes, 0);\nprint(i);\n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240303223727-qybpist",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240303223727-qybpist",
				"updated": "20240303222835"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字符串类型转字节数组"
				}
			]
		},
		{
			"ID": "20240303223732-mozmsk8",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240303223732-mozmsk8",
				"updated": "20240303222835"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240303223733-9d10fr5",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20240303223733-9d10fr5",
						"updated": "20240303224455"
					},
					"Children": [
						{
							"ID": "20240303223733-f4x65uw",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20240303223733-f4x65uw",
								"updated": "20240303224455"
							},
							"Children": [
								{
									"ID": "20240303223733-t5x40z3",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20240303223733-t5x40z3",
										"updated": "20240303223733"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "字节数组 依据指定编码格式转换为 字符串 需要我们"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "Encoding.编码格式.GetString()"
										},
										{
											"Type": "NodeText",
											"Data": "​，一般在游戏开发中我们都使用"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code strong",
											"TextMarkTextContent": "UTF-8"
										},
										{
											"Type": "NodeText",
											"Data": "​这个编码格式\n第一个参数填入要转换的字节数组，第二个参数填入要从数组第几个开始读取（默认0），第三个参数填入要读取几个字节（默认全部读取）"
										}
									]
								},
								{
									"ID": "20240303223733-c5zt2u2",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20240303223733-c5zt2u2",
										"style": "line-height: 22px;",
										"updated": "20240303224455"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker",
											"CodeBlockInfo": "YyM="
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "byte[] strBytes = Encoding.UTF8.GetBytes(\"字符串测试\");\nstring s = Encoding.UTF8.GetString(strBytes, 0, strBytes.Length);\nprint(s);\n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240303223809-3c5poer",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240303223809-3c5poer",
				"updated": "20240303224519"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将二进制数据转为一个类对象"
				}
			]
		},
		{
			"ID": "20240304144153-0wfmw9h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240304144153-0wfmw9h",
				"updated": "20240304144207"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设要对下面的对象进行反序列化"
				}
			]
		},
		{
			"ID": "20240304144207-z4tacyr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240304144207-z4tacyr",
				"style": "line-height: 22px;",
				"updated": "20240304144353"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class PlayerInfo\n{\n    public int lev;\n    public string name;\n    public short atk;\n    public bool sex;\n\n    public byte[] GetBytes()\n    {\n        //得到的 这个Info数据，如果转换成字节数组，那么字节数组容器需要的容量为：\n        int indexNum = sizeof(int) +                           //lev int类型 4\n                       sizeof(int) +                           //name字符串转换成字节数组后，数组的长度 4\n                       Encoding.UTF8.GetBytes(name).Length +   //字符串具体字符数组的长度\n                       sizeof(short) +                         //atk short类型 2\n                       sizeof(bool);                           //sex bool类型 1\n\n        byte[] playerBytes = new byte[indexNum];\n        int index = 0;          //从playerBytes在数组中的第几个位置去存储数据\n\n        //等级\n        BitConverter.GetBytes(lev).CopyTo(playerBytes, index);\n        index += sizeof(int);\n        //名字\n        byte[] strBytes = Encoding.UTF8.GetBytes(name);         //字符串转换为字节数组\n        int num = strBytes.Length;                              //获取字符串字节数组长度\n        BitConverter.GetBytes(num).CopyTo(playerBytes, index);  //将字符串字节数组长度消息写入到该类对象的字节数组内\n        index += sizeof(int);                                   //索引后移\n        strBytes.CopyTo(playerBytes, index);                    //将字符串字节数组写入到该类对象的字节数组内\n        index += num;                                           //索引后移\n        //攻击力\n        BitConverter.GetBytes(atk).CopyTo(playerBytes, index);\n        index += sizeof(short);\n        //性别\n        BitConverter.GetBytes(sex).CopyTo(playerBytes, index);\n        index += sizeof(bool);\n\n        return playerBytes;\n    }\n}"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240303224519-ww2t7tq",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240303224519-ww2t7tq",
				"updated": "20240304144835"
			},
			"Children": [
				{
					"ID": "20240303225214-ax1yu20",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240303225214-ax1yu20",
						"updated": "20240304144835"
					},
					"Children": [
						{
							"ID": "20240303225214-3o1o6sd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240303225214-3o1o6sd",
								"updated": "20240303225214"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取到对应的字节数组"
								}
							]
						},
						{
							"ID": "20240303225216-zawt9y7",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240303225216-zawt9y7",
								"style": "line-height: 22px;",
								"updated": "20240304144835"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "PlayerInfo info = new PlayerInfo();\ninfo.lev = 10;\ninfo.name = \"唐老狮\";\ninfo.atk = 88;\ninfo.sex = false;\n\nbyte[] playerBytes = info.GetBytes();\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240303225214-y4clmm8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240303225214-y4clmm8",
						"updated": "20240304144819"
					},
					"Children": [
						{
							"ID": "20240303225214-botphrs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240303225214-botphrs",
								"updated": "20240303225227"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将字节数组按照序列化时的顺序进行反序列化（将对应字节分组转换为对应类型变量）"
								}
							]
						},
						{
							"ID": "20240303225219-0j44tyk",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240303225219-0j44tyk",
								"style": "line-height: 22px;",
								"updated": "20240304144819"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "PlayerInfo info2 = new PlayerInfo();\n//等级\nint index = 0;\ninfo2.lev = BitConverter.ToInt32(playerBytes, index);\nindex += 4;\nprint(info2.lev);\n//姓名的长度\nint length = BitConverter.ToInt32(playerBytes, index);\nindex += 4;\n//姓名字符串\ninfo2.name = Encoding.UTF8.GetString(playerBytes, index, length);\nindex += length;\nprint(info2.name);\n//攻击力\ninfo2.atk = BitConverter.ToInt16(playerBytes, index);\nindex += 2;\nprint(info2.atk);\n//性别\ninfo2.sex = BitConverter.ToBoolean(playerBytes, index);\nindex += 1;\nprint(info2.sex);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240304144852-9ngm3de",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240304144852-9ngm3de",
				"updated": "20240304144852"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 353px;",
						"style": "width: 343px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240304144852-opbtqx6.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 343px;\" parent-style=\"width: 353px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240304144909-ro93e93",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240304144909-ro93e93"
			}
		}
	]
}