{
	"ID": "20240320174040-f66itt4",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240320174040-f66itt4",
		"title": "UN5L6——Protobuf协议生成",
		"type": "doc",
		"updated": "20240320205216"
	},
	"Children": [
		{
			"ID": "20240320202651-jsmf2yu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240320202651-jsmf2yu",
				"updated": "20240320202657"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240320202657-d5bei6h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240320202657-d5bei6h",
				"style": "line-height: 22px;",
				"updated": "20240320203951"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Process\t\t\t\t\t\t//进程类，可以运行某个可执行程序，如同在cmd或者powershell运行一个程序那样\nprocess.StartInfo.FileName\t//可执行程序所在路径及其文件名\nprocess.StartInfo.Arguments\t//可执行程序执行时要输入的参数\nprocess.Start()\t\t\t\t//运行可执行程序\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240320174040-an399hi",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240320174040-an399hi",
				"updated": "20240320174225"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "利用protoc.exe编译器生成脚本文件"
				}
			]
		},
		{
			"ID": "20240320174227-6kcvdpp",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240320174227-6kcvdpp",
				"updated": "20240320180849"
			},
			"Children": [
				{
					"ID": "20240320174241-j0nlmgf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240320174241-j0nlmgf",
						"updated": "20240320180849"
					},
					"Children": [
						{
							"ID": "20240320174241-95xenk9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320174241-95xenk9",
								"updated": "20240320180849"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "打开cmd或powershell窗口（如果你使用VSCode，你可以直接使用它的终端）"
								}
							]
						}
					]
				},
				{
					"ID": "20240320174241-wo59sod",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240320174241-wo59sod",
						"updated": "20240320174328"
					},
					"Children": [
						{
							"ID": "20240320174241-nsrsijd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320174241-nsrsijd",
								"updated": "20240320174328"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "进入protoc.exe所在文件夹（输入"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "cd protoc.exe所在路径"
								},
								{
									"Type": "NodeText",
									"Data": "​，或者可以直接将exe文件拖入cmd窗口中）"
								}
							]
						}
					]
				},
				{
					"ID": "20240320174241-45a5m3g",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240320174241-45a5m3g",
						"updated": "20240320174334"
					},
					"Children": [
						{
							"ID": "20240320174241-oeuygmv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320174241-oeuygmv",
								"updated": "20240320174334"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输入转换指令："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "protoc.exe -I=配置路径 --csharp_out=输出路径 配置文件名"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240320174717-k4u7phq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320174717-k4u7phq",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240320174718"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：路径不要有中文和特殊符号，避免生成失败"
				}
			]
		},
		{
			"ID": "20240320182158-9udosnp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320182158-9udosnp",
				"updated": "20240320182211"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Protobuf 通过配置生成脚本文件，主要使用的就是 protoc.exe可执行文件，我们需要记住对应的生成指令"
				}
			]
		},
		{
			"ID": "20240320174929-910gsku",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240320174929-910gsku",
				"updated": "20240320180835"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "测试生成对象是否能使用"
				}
			]
		},
		{
			"ID": "20240320182258-gdrzq38",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240320182258-gdrzq38",
				"updated": "20240320182532"
			},
			"Children": [
				{
					"ID": "20240320182259-lbjjaxt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320182259-lbjjaxt",
						"updated": "20240320182259"
					},
					"Children": [
						{
							"ID": "20240320182259-iacf5wk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320182259-iacf5wk",
								"updated": "20240320182505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用Protobuf生成的类，需要使用在proto文件内指定的命名空间，类的各种变量的调用本身无差异"
								}
							]
						}
					]
				},
				{
					"ID": "20240320182452-tdn95d5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320182452-tdn95d5"
					},
					"Children": [
						{
							"ID": "20240320182452-0fd5jlv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320182452-0fd5jlv",
								"updated": "20240320182521"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "由Protobuf生成的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "List"
								},
								{
									"Type": "NodeText",
									"Data": "​变量和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Dictionary"
								},
								{
									"Type": "NodeText",
									"Data": "​变量本质上不是C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "自带的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "List"
								},
								{
									"Type": "NodeText",
									"Data": "​和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Dictionary"
								},
								{
									"Type": "NodeText",
									"Data": "​，但可以当作C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "自带的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "List"
								},
								{
									"Type": "NodeText",
									"Data": "​和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Dictionary"
								},
								{
									"Type": "NodeText",
									"Data": "​使用"
								}
							]
						}
					]
				},
				{
					"ID": "20240320182522-u4t2vb8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320182522-u4t2vb8",
						"updated": "20240320182532"
					},
					"Children": [
						{
							"ID": "20240320182522-euuipgx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320182522-euuipgx",
								"updated": "20240320182532"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在另一个生成的脚本中的类，如果命名空间不同，需要命名空间点出来使用"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240320180921-7a0c97f",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240320180921-7a0c97f",
				"style": "line-height: 22px;",
				"updated": "20240320182256"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using GamePlayerTest;\nusing UnityEngine;\n\npublic class Lesson40 : MonoBehaviour\n{\n    void Start()\n    {\n        TestMsg msg = new TestMsg();\n        msg.TestBool = true;\n        //对应的和List以及Dictionary的使用方式是一样的，数组和字典对象\n        msg.ListInt.Add(1);\n        print(msg.ListInt[0]);\n        msg.TestMap.Add(1, \"唐老狮\");\n        print(msg.TestMap[1]);\n        //枚举\n        msg.TestEnum = TestEnum.Boss;\n        //内部枚举\n        msg.TestEnum2 = TestMsg.Types.TestEnum2.Boss;\n        //其他类对象\n        msg.TestMsg2 = new TestMsg2();\n        msg.TestMsg3.TestInt32 = 99;\n        //其他内部类对象\n        msg.TestMsg3 = new TestMsg.Types.TestMsg3();\n        msg.TestMsg3.TestInt32 = 55;\n        //在另一个生成的脚本中的类，如果命名空间不同，需要命名空间点出来使用\n        msg.TestHeart = new GameSystemTest.HeartMsg();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240320195442-4z9rn3f",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240320195442-4z9rn3f",
				"updated": "20240320195507"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现快捷生成所有消息协议的工具"
				}
			]
		},
		{
			"ID": "20240320202709-vqyuka6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320202709-vqyuka6",
				"updated": "20240320205216"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20231108212555-div72a8",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "DirectoryInfo"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20231108211604-o8ukj29",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "Directory"
				},
				{
					"Type": "NodeText",
					"Data": "​来获取所有的proto文件名，通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Process"
				},
				{
					"Type": "NodeText",
					"Data": "​来执行可执行程序，来循环生成所有的代码文件\n通过以上的类，我们可以方便的快速生成代码，甚至可以快速生成不同语言的代码"
				}
			]
		},
		{
			"ID": "20240320203240-b857w2h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320203240-b857w2h",
				"updated": "20240320203802"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Process"
				},
				{
					"Type": "NodeText",
					"Data": "​是进程类，它可以让我们运行一个可执行程序，如同在cmd或者powershell运行一个程序那样，会使用以下方法："
				}
			]
		},
		{
			"ID": "20240320203256-5m117jh",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240320203256-5m117jh",
				"updated": "20240320203935"
			},
			"Children": [
				{
					"ID": "20240320203256-khtlzbu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320203256-khtlzbu",
						"updated": "20240320203256"
					},
					"Children": [
						{
							"ID": "20240320203256-2xeo3y0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320203256-2xeo3y0",
								"updated": "20240320203947"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "process.StartInfo.FileName"
								},
								{
									"Type": "NodeText",
									"Data": "​：可执行程序所在路径及其文件名"
								}
							]
						}
					]
				},
				{
					"ID": "20240320203327-2rn0esp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320203327-2rn0esp"
					},
					"Children": [
						{
							"ID": "20240320203327-g3rlidr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320203327-g3rlidr",
								"updated": "20240320203402"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "process.StartInfo.Arguments"
								},
								{
									"Type": "NodeText",
									"Data": "​：可执行程序执行时要输入的参数"
								}
							]
						}
					]
				},
				{
					"ID": "20240320203402-hu4rgfg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320203402-hu4rgfg",
						"updated": "20240320203935"
					},
					"Children": [
						{
							"ID": "20240320203402-2taodly",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320203402-2taodly",
								"updated": "20240320203935"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "process.Start()"
								},
								{
									"Type": "NodeText",
									"Data": "​：运行可执行程序"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240320200204-1iyppz4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240320200204-1iyppz4",
				"style": "line-height: 22px;",
				"updated": "20240320205049"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Diagnostics;\nusing System.IO;\nusing UnityEditor;\n\npublic class ProtobufTool\n{\n    //Protobuf编译器路径\n    private static string PROTOC_PATH = System.Environment.CurrentDirectory + \"\\\\Protobuf\\\\protoc.exe\";\n    //proto文件路径\n    private static string PROTO_PATH = System.Environment.CurrentDirectory + \"\\\\Protobuf\\\\proto\";\n    //C#文件存储的路径\n    private static string CSHARP_PATH = System.Environment.CurrentDirectory + \"\\\\Protobuf\\\\csharp\";\n    //C++文件存储的路径\n    private static string CPP_PATH = System.Environment.CurrentDirectory + \"\\\\Protobuf\\\\cpp\";\n    //Java文件存储的路径\n    private static string JAVA_PATH = System.Environment.CurrentDirectory + \"\\\\Protobuf\\\\java\";\n\n    [MenuItem(\"ProtobufTool/生成C#代码\")]\n    private static void GenerateCSharp()\n    {\n        GenerateCodeFiles(\"csharp_out\", CSHARP_PATH);\n    }\n\n    [MenuItem(\"ProtobufTool/生成C++代码\")]\n    private static void GenerateCpp()\n    {\n        GenerateCodeFiles(\"cpp_out\", CPP_PATH);\n    }\n\n    [MenuItem(\"ProtobufTool/生成Java代码\")]\n    private static void GenerateJava()\n    {\n        GenerateCodeFiles(\"java_out\", JAVA_PATH);\n    }\n\n    //生成对应脚本的方法\n    private static void GenerateCodeFiles(string outCodeType, string outPath)\n    {\n        //第一步：遍历对应协议配置文件夹，得到所有的配置文件\n        DirectoryInfo directory = Directory.CreateDirectory(PROTO_PATH);\n        //获取对应文件夹下所有文件消息\n        FileInfo[] files = directory.GetFiles();\n        for (int i = 0; i \u003c files.Length; i++)\n        {\n            //只有是配置文件夹才能用于生成\n            if (files[i].Extension == \".proto\")\n            {\n                //第二步：根据文件内容，来生成对应的C#脚本（需要使用C#当中的Process类）\n                Process cmd = new Process();\n                cmd.StartInfo.FileName = PROTOC_PATH;\n                //命令\n                cmd.StartInfo.Arguments = $\"-I={PROTO_PATH} --{outCodeType}={outPath} {files[i]}\";\n                //执行\n                cmd.Start();\n                UnityEngine.Debug.Log(files[i] + \"生成结束\");\n            }\n        }\n        UnityEngine.Debug.Log(\"所有内容生成结束\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}