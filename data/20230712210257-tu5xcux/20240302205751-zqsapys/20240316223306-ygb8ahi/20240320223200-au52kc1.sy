{
	"ID": "20240320223200-au52kc1",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240320223200-au52kc1",
		"title": "UN5L9——大小端模式",
		"type": "doc",
		"updated": "20241208013804"
	},
	"Children": [
		{
			"ID": "20240320232215-jk6igka",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240320232215-jk6igka",
				"updated": "20240320232219"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240320232219-7s149s1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240320232219-7s149s1",
				"style": "line-height: 22px;",
				"updated": "20240320232542"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "BitConverter.IsLittleEndian\t\t\t//判断当前是否为小端模式\nIPAddress.HostToNetworkOrder()\t\t//转换为网络字节序，相当于就是转为大端模式\nIPAddress.NetworkToHostOrder()\t\t//网络字节序转为本机字节序，本机字节序为小端模式，就转换为小端模式\nArray.Reverse()\t\t\t\t\t\t//数组颠倒顺序，可用于从大小端模式与本机不一致的远端接收到的字节数组进行转换\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240320223200-t4zz0yg",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240320223200-t4zz0yg",
				"updated": "20241208013804"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "大小端模式"
				}
			]
		},
		{
			"ID": "20240320223448-ikgovlf",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240320223448-ikgovlf",
				"updated": "20240320223449"
			},
			"Children": [
				{
					"ID": "20240320223449-tnjnoxp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320223449-tnjnoxp",
						"updated": "20240320223449"
					},
					"Children": [
						{
							"ID": "20240320223450-le154p8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320223450-le154p8",
								"updated": "20240320223450"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "大端模式\n"
								}
							]
						},
						{
							"ID": "20240320223456-m5y9zcf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320223456-m5y9zcf",
								"updated": "20240320223512"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是指数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中\n这样的存储模式有点儿类似于把数据当作字符串顺序处理，地址由小向大增加，数据从高位往低位放\n它更符合人类的阅读习惯"
								}
							]
						}
					]
				},
				{
					"ID": "20240320223453-wmadsb7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320223453-wmadsb7"
					},
					"Children": [
						{
							"ID": "20240320223453-f7ea6fe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320223453-f7ea6fe"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "小端模式\n"
								}
							]
						},
						{
							"ID": "20240320223458-kv0gfe5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320223458-kv0gfe5",
								"updated": "20240320223500"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是指数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240320230357-5e4ovql",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320230357-5e4ovql",
				"updated": "20241208013804"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "何为高低字节：\n我们阅读数字时，一般是从左往右看，看到数字的位的顺序就是从高到低，例如："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "127"
				},
				{
					"Type": "NodeText",
					"Data": "​\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "127"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的百位是高位，在左边，而个位是低位，在右边，我们阅读二进制的数 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "0111 1111"
				},
				{
					"Type": "NodeText",
					"Data": "​ 也不例外，\n因此，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "数字最左边的为就是高字节，最右边的位就是低字节"
				}
			]
		},
		{
			"ID": "20240320230357-1ij93bm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320230357-1ij93bm",
				"updated": "20240320230357"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "何为高低地址："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "内存开头一边的地址是低地址，末尾一边的地址是高地址"
				}
			]
		},
		{
			"ID": "20240320230357-ptnpzya",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320230357-ptnpzya",
				"updated": "20240320230357"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "举例说明：十六进制数据："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "0x11223344"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240320230357-ao40db3",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240320230357-ao40db3",
				"updated": "20240320230357"
			},
			"Children": [
				{
					"ID": "20240320230357-znjr23t",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320230357-znjr23t",
						"updated": "20240320230357"
					},
					"Children": [
						{
							"ID": "20240320230357-nkz9hcg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320230357-nkz9hcg",
								"updated": "20240320230357"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "大端模式存储"
								}
							]
						},
						{
							"ID": "20240320230357-lcc4vxk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320230357-lcc4vxk",
								"updated": "20240320230357"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从低地址向高地址看去（从内存首看到尾），数字的高位在头，数字的低位在尾，这样的顺序符合人类阅读习惯"
								}
							]
						},
						{
							"ID": "20240320230357-f08yh44",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240320230357-f08yh44",
								"style": "line-height: 22px;",
								"updated": "20240320230357"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "高字节 ——\u003e 低字节\n11    22    33    44\n0     1     2     3\n低地址 ——\u003e 高地址\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240320230357-or1zpz6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320230357-or1zpz6",
						"updated": "20240320230357"
					},
					"Children": [
						{
							"ID": "20240320230357-aaqswrj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320230357-aaqswrj",
								"updated": "20240320230357"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "小端模式存储"
								}
							]
						},
						{
							"ID": "20240320230357-xnbd2hs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320230357-xnbd2hs",
								"updated": "20240320230357"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从低地址向高地址看去（从内存首看到尾），数字的低位在头，数字的高位在尾，它的顺序与人类阅读习惯相反"
								}
							]
						},
						{
							"ID": "20240320230357-7gxvnf1",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240320230357-7gxvnf1",
								"style": "line-height: 22px;",
								"updated": "20240320230357"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "低字节 \u003c—— 高字节\n44    33    22    11\n0     1     2     3\n低地址 ——\u003e 高地址\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240320230246-xznl28t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320230246-xznl28t",
				"updated": "20240320230248"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "大小端模式会根据主机硬件环境不同、语言不同而有所区别，当我们前后端是不同语言开发且运行在不同主机上时\n前后端需要对大小端字节序定下统一的规则"
				}
			]
		},
		{
			"ID": "20240320230246-hda6l3f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320230246-hda6l3f",
				"updated": "20240320230409"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般让前端迎合后端，因为字节序的转换也是会带来些许性能损耗的，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "网络游戏中要尽量减轻后端的负担，"
				},
				{
					"Type": "NodeText",
					"Data": "一般情况下："
				}
			]
		},
		{
			"ID": "20240320230342-jsk37z3",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240320230342-jsk37z3",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240320230342"
			},
			"Children": [
				{
					"ID": "20240320230342-2fj1dny",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320230342-2fj1dny",
						"updated": "20240320230342"
					},
					"Children": [
						{
							"ID": "20240320230342-02bwi30",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320230342-02bwi30",
								"updated": "20240320230416"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 和 Java/Erlang/AS3 通讯需要进行大小端转换，前端C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "从小变大"
								}
							]
						}
					]
				},
				{
					"ID": "20240320230343-ynp2fr1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320230343-ynp2fr1"
					},
					"Children": [
						{
							"ID": "20240320230343-d1ystxj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320230343-d1ystxj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 与 C++通信不需要特殊处理"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240320230246-qfe7tjy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320230246-qfe7tjy",
				"updated": "20240320230306"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们不用死记硬背和谁通讯要注意大小端模式，当开发时，发现后端收到的消息和前端发的不一样\n在协议统一的情况下，往往就是因为大小端造成的，这时我们再转换模式即可"
				}
			]
		},
		{
			"ID": "20240320230246-15ubqku",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320230246-15ubqku",
				"style": "background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);",
				"updated": "20240320230313"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：Protobuf已经帮助我们解决了大小端问题，即使前后端语言不统一，使用它也不用过多考虑字节序转换的问题"
				}
			]
		},
		{
			"ID": "20240320225352-whsrwuz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240320225352-whsrwuz",
				"updated": "20240320225358"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为什么有大小端模式"
				}
			]
		},
		{
			"ID": "20240320225412-blr27z4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320225412-blr27z4",
				"updated": "20240320225422"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "大小端模式其实是计算机硬件的两种存储数据的方式，我们也可以称大小端模式为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "大小端字节序"
				}
			]
		},
		{
			"ID": "20240320225412-l5cx564",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320225412-l5cx564",
				"updated": "20240320225429"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于我们来说，大端字节序阅读起来更加方便，为什么还要有小端字节序呢？\n原因是，"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "计算机电路先处理低位字节，效率比较高"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20240320225432-blsnki6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320225432-blsnki6",
				"updated": "20240320225452"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "计算机处理字节序的时候，不知道什么是高位字节，什么是低位字节\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "它只知道按顺序读取字节，先读第一个字节，再读第二个字节"
				},
				{
					"Type": "NodeText",
					"Data": "\n如果是大端字节序，先读到的就是高位字节，后读到的就是低位字节，小端字节序正好相反"
				}
			]
		},
		{
			"ID": "20240320225412-zu9g7i0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320225412-zu9g7i0",
				"updated": "20240320230923"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "计算机都是从低位开始读取字节的，所以，计算机的内部处理都是小端字节序"
				}
			]
		},
		{
			"ID": "20240320225412-swwl198",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320225412-swwl198",
				"updated": "20240320225518"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是，我们人类的读写习惯还是大端字节序\n所以，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "除了计算机的内部处理，其它场合几乎都是大端字节序，比如网络传输和文件存储"
				}
			]
		},
		{
			"ID": "20240320225412-yc5e3se",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320225412-yc5e3se",
				"updated": "20240320225916"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般情况下，"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "操作系统都是小端模式"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "，"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "而通讯协议都是大端模式"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "，但是具体的模式，还是要根据硬件平台，开发语言来决定\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "主机不同，开发语言不同，可能采用的大小端模式也会不一致"
				}
			]
		},
		{
			"ID": "20240320225538-vzp0uyi",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240320225538-vzp0uyi",
				"updated": "20240320225925"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "大小端模式对于我们的影响"
				}
			]
		},
		{
			"ID": "20240320225938-punrurf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320225938-punrurf",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240320225941"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们记住一句话：只有读取的时候，才必须区分大小端字节序，其它情况都不用考虑"
				}
			]
		},
		{
			"ID": "20240320225938-adgx8i3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320225938-adgx8i3",
				"updated": "20240320225957"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此对于我们来说，在网络传输当中我们传输的是字节数组，那么我们在收到字节数组进行解析时，就需要考虑大小端的问题\n虽然TCP/IP协议规定了在网络上必须采用网络字节顺序（大端模式），但是具体传输时采用哪种模式，都是根据前后端语言、设备决定的"
				}
			]
		},
		{
			"ID": "20240320225938-c68f86q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240320225938-c68f86q",
				"updated": "20240320230012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在进行网络通讯时，前后端语言不同时，可能会造成大小端不统一，一般情况下："
				}
			]
		},
		{
			"ID": "20240320230012-34vxaba",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240320230012-34vxaba",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240320230012"
			},
			"Children": [
				{
					"ID": "20240320230012-y8n36ej",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320230012-y8n36ej",
						"updated": "20240320230012"
					},
					"Children": [
						{
							"ID": "20240320230012-tcezyyo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320230012-tcezyyo",
								"updated": "20240320230015"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 和 Java/Erlang/AS3 通讯需要进行大小端转换，因为C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "是小端模式 Java/Erlang/AS3是大端模式"
								}
							]
						}
					]
				},
				{
					"ID": "20240320230013-mgnky30",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240320230013-mgnky30"
					},
					"Children": [
						{
							"ID": "20240320230013-kmqq55r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320230013-kmqq55r"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 与 C++通信不需要特殊处理 他们都是小端模式"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240320230048-qeb3rb0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240320230048-qeb3rb0",
				"updated": "20240320230049"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "大小端转换"
				}
			]
		},
		{
			"ID": "20240320230057-gowearw",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240320230057-gowearw",
				"updated": "20240320232207"
			},
			"Children": [
				{
					"ID": "20240320230125-5km8wz4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240320230125-5km8wz4",
						"name": "BitConverter.IsLittleEndian",
						"updated": "20240320230125"
					},
					"Children": [
						{
							"ID": "20240320230125-nonfire",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320230125-nonfire",
								"updated": "20240320230125"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "判断是大小端哪种模式"
								}
							]
						},
						{
							"ID": "20240320231455-tklcnfe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320231455-tklcnfe",
								"updated": "20240320231523"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "取决于你的主机硬件环境、语言"
								}
							]
						},
						{
							"ID": "20240320230634-jaenwdu",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240320230634-jaenwdu",
								"style": "line-height: 22px;",
								"updated": "20240320230639"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "print(\"是否是小端模式：\" + BitConverter.IsLittleEndian);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240320230631-5q89x2s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320230631-5q89x2s",
								"updated": "20240320230631"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "image"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/image-20240320230631-4b9bqtt.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240320230125-afwe0qq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240320230125-afwe0qq",
						"updated": "20240320231634"
					},
					"Children": [
						{
							"ID": "20240320230125-9rdg7af",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320230125-9rdg7af",
								"updated": "20240320230125"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "简单的转换API 只支持几种类型"
								}
							]
						},
						{
							"ID": "20240320231043-minve8i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320231043-minve8i",
								"updated": "20240320231439"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "转换为网络字节序，相当于就是转为大端模式，以下的方法只支持"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "short"
								},
								{
									"Type": "NodeText",
									"Data": "​，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "int"
								},
								{
									"Type": "NodeText",
									"Data": "​，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "long"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"ID": "20240320231044-cejqe3g",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20240320231044-cejqe3g",
								"updated": "20240320231047"
							},
							"Children": [
								{
									"ID": "20240320231047-qexni8f",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20240320231047-qexni8f",
										"name": "IPAddress.HostToNetworkOrder()",
										"updated": "20240320231634"
									},
									"Children": [
										{
											"ID": "20240320231047-gz7ot4i",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240320231047-gz7ot4i",
												"updated": "20240320231055"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "本机字节序转为网络字节序"
												}
											]
										},
										{
											"ID": "20240320231541-8m1ja2n",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240320231541-8m1ja2n",
												"updated": "20240320231634"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "它会输出字节顺序颠倒的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "int"
												},
												{
													"Type": "NodeText",
													"Data": "​数（小端模式下），需要再自行转换为字节数组"
												}
											]
										},
										{
											"ID": "20240320231116-2nvljzn",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20240320231116-2nvljzn",
												"style": "line-height: 22px;",
												"updated": "20240320231314"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YyM="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "int i = 99;\nbyte[] bytes = BitConverter.GetBytes(IPAddress.HostToNetworkOrder(i));\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								},
								{
									"ID": "20240320231056-lt19sa2",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20240320231056-lt19sa2",
										"name": "IPAddress.NetworkToHostOrder()",
										"updated": "20240320231111"
									},
									"Children": [
										{
											"ID": "20240320231056-14zlmnq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240320231056-14zlmnq",
												"updated": "20240320231111"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "网络字节序转为本机字节序"
												}
											]
										},
										{
											"ID": "20240320231002-7vsp7a2",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20240320231002-7vsp7a2",
												"style": "line-height: 22px;",
												"updated": "20240320231402"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YyM="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "int receI = BitConverter.ToInt32(bytes, 0);\nreceI = IPAddress.NetworkToHostOrder(i);\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240320230125-oedcr55",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240320230125-oedcr55",
						"name": "Array.Reverse()",
						"updated": "20240320232207"
					},
					"Children": [
						{
							"ID": "20240320230125-mcd7mk9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320230125-mcd7mk9",
								"updated": "20240320232207"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通用的转换方式 —— 数组颠倒顺序"
								}
							]
						},
						{
							"ID": "20240320231812-qgebduu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320231812-qgebduu",
								"updated": "20240320232022"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "假设我们是小端模式，且远端是采用大端模式的，则从远端接收到的字节数组就需要转换，我们可以直接使用数组的倒转API即可"
								}
							]
						},
						{
							"ID": "20240320231719-epw6kth",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240320231719-epw6kth",
								"style": "line-height: 22px;",
								"updated": "20240320232142"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "int i = 99;\nbyte[] bytes = BitConverter.GetBytes(IPAddress.HostToNetworkOrder(i));\n//假设我们是小端模式，且远端是采用大端模式的，则从远端接收到的字节数组就需要转换\nif (BitConverter.IsLittleEndian)\n    Array.Reverse(bytes);\nprint(BitConverter.ToInt32(bytes));\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240320232135-qfu2ee4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240320232135-qfu2ee4",
								"updated": "20240320232135"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "image"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/image-20240320232135-x171jgv.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		}
	]
}