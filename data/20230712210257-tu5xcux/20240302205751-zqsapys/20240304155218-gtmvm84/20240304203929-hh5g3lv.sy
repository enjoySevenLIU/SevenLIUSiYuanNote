{
	"ID": "20240304203929-hh5g3lv",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240304203929-hh5g3lv",
		"title": "UN2L3——Socket的TCP同步通信",
		"type": "doc",
		"updated": "20240321200841"
	},
	"Children": [
		{
			"ID": "20240307113720-uazclmk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240307113720-uazclmk",
				"updated": "20240307113728"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "服务端Socket的TCP同步通信"
				}
			]
		},
		{
			"ID": "20240307114033-d3prnds",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307114033-d3prnds",
				"updated": "20240307114044"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "服务端Socket的基本思路如下："
				}
			]
		},
		{
			"ID": "20240307114033-ou6h5l6",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240307114033-ou6h5l6",
				"updated": "20240307114033"
			},
			"Children": [
				{
					"ID": "20240307114033-5ae238i",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240307114033-5ae238i",
						"updated": "20240307114033"
					},
					"Children": [
						{
							"ID": "20240307114033-e0b8epk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307114033-e0b8epk",
								"updated": "20240307114033"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建套接字"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Socket"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240307114033-4adv2dy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240307114033-4adv2dy",
						"updated": "20240307114033"
					},
					"Children": [
						{
							"ID": "20240307114033-k4oogvh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307114033-k4oogvh",
								"updated": "20240307114033"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Bind"
								},
								{
									"Type": "NodeText",
									"Data": "​方法将套接字与本地地址绑定"
								}
							]
						}
					]
				},
				{
					"ID": "20240307114033-cce41oz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240307114033-cce41oz",
						"updated": "20240307114033"
					},
					"Children": [
						{
							"ID": "20240307114033-c6u3i75",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307114033-c6u3i75",
								"updated": "20240307114033"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Listen"
								},
								{
									"Type": "NodeText",
									"Data": "​方法监听"
								}
							]
						}
					]
				},
				{
					"ID": "20240307114033-msptiq0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240307114033-msptiq0",
						"updated": "20240307114033"
					},
					"Children": [
						{
							"ID": "20240307114033-6j04wrh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307114033-6j04wrh",
								"updated": "20240307114033"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Accept"
								},
								{
									"Type": "NodeText",
									"Data": "​方法等待客户端连接"
								}
							]
						}
					]
				},
				{
					"ID": "20240307114033-gvcok2y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20240307114033-gvcok2y",
						"updated": "20240307114033"
					},
					"Children": [
						{
							"ID": "20240307114033-yxyv3px",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307114033-yxyv3px",
								"updated": "20240307114033"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "建立连接，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Accept"
								},
								{
									"Type": "NodeText",
									"Data": "​返回新套接字"
								}
							]
						}
					]
				},
				{
					"ID": "20240307114033-sewt0b3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20240307114033-sewt0b3",
						"updated": "20240307114033"
					},
					"Children": [
						{
							"ID": "20240307114033-v8glurk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307114033-v8glurk",
								"updated": "20240307114056"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对返回的新套接字用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Send"
								},
								{
									"Type": "NodeText",
									"Data": "​和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Receive"
								},
								{
									"Type": "NodeText",
									"Data": "​相关方法收发数据"
								}
							]
						}
					]
				},
				{
					"ID": "20240307114033-waxyggz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20240307114033-waxyggz",
						"updated": "20240307114033"
					},
					"Children": [
						{
							"ID": "20240307114033-81jd1xf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307114033-81jd1xf",
								"updated": "20240307114033"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Shutdown"
								},
								{
									"Type": "NodeText",
									"Data": "​方法释放连接"
								}
							]
						}
					]
				},
				{
					"ID": "20240307114033-xtj7wmb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "OC4=",
						"Num": 8
					},
					"Properties": {
						"id": "20240307114033-xtj7wmb",
						"updated": "20240307114033"
					},
					"Children": [
						{
							"ID": "20240307114033-czs0k1n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307114033-czs0k1n",
								"updated": "20240307114033"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "关闭套接字"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240307114102-aho22dr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307114102-aho22dr",
				"updated": "20240307114120"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "根据以上思路，实现最基础的服务端代码"
				}
			]
		},
		{
			"ID": "20240307114139-7iofsqi",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240307114139-7iofsqi",
				"updated": "20240321200841"
			},
			"Children": [
				{
					"ID": "20240307114406-mpnoxfn",
					"Type": "NodeHeading",
					"HeadingLevel": 3,
					"Properties": {
						"id": "20240307114406-mpnoxfn",
						"updated": "20240307114427"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "两台电脑在同一局域网下连接的实践"
						}
					]
				},
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e",
					"Properties": {
						"updated": "20240307114427"
					}
				},
				{
					"ID": "20240307114140-vy44p0m",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240307114140-vy44p0m",
						"updated": "20240321200841"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "如果可以使用两台电脑并连接同一路由器，那么不妨将服务端代码中的IP地址改为在设备在路由器下的IP地址（在cmd使用"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "ipconfig"
						},
						{
							"Type": "NodeText",
							"Data": "​可查询）\n并且客户端使用服务器的IP地址，如果可行，就可以实现客户端和服务端相互连接，使用两台设备学习的体会效果更好"
						}
					]
				}
			]
		},
		{
			"ID": "20240312131718-g8rt2il",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240312131718-g8rt2il",
				"updated": "20240312131744"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "游戏服务器一般使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "8080"
				},
				{
					"Type": "NodeText",
					"Data": "​作为自己的端口号"
				}
			]
		},
		{
			"ID": "20240307114010-qutk1y1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240307114010-qutk1y1",
				"style": "line-height: 22px;",
				"updated": "20240307113728"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static void Main(string[] args)\n{\n    //1.创建套接字Socket（TCP）\n    Socket socketTcp = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n    //2.用Bind方法将套接字与本地地址绑定\n    try\n    {\n        IPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 8080);\n        socketTcp.Bind(ipPoint);\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine(\"绑定报错\" + e.Message);\n        return;\n    }\n    //3.用Listen方法监听\n    socketTcp.Listen(1024);\n    Console.WriteLine(\"服务端绑定监听结束，等待客户端连入\");\n    //4.用Accept方法等待客户端连接\n    //5.建立连接，Accept返回新套接字\n    Socket socketClient = socketTcp.Accept();\n    Console.WriteLine(\"有客户端连入了\");\n    //6.用Send和Receive相关方法收发数据\n    //发送\n    socketClient.Send(Encoding.UTF8.GetBytes(\"欢迎连入服务端\"));\n    //接受\n    byte[] result = new byte[1024];\n    //返回值为接受到的字节数\n    int receiveNum = socketClient.Receive(result);\n    Console.WriteLine(\"接受到了{0}发来的消息：{1}\",\n        socketClient.RemoteEndPoint.ToString(),\n        Encoding.UTF8.GetString(result, 0, receiveNum));\n\n    //7.用Shutdown方法释放连接\n    socketClient.Shutdown(SocketShutdown.Both);\n    //8.关闭套接字\n    socketClient.Close();\n\n    Console.WriteLine(\"按任意键退出\");\n    Console.ReadKey();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240307114715-rzxf2fw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240307114715-rzxf2fw",
				"updated": "20240307114736"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让服务端可以连接多个客户端"
				}
			]
		},
		{
			"ID": "20240307114133-q75jfbh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307114133-q75jfbh",
				"updated": "20240307114826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以上的代码一次只能连接一个客户端，随后服务端的运行就会终止"
				}
			]
		},
		{
			"ID": "20240307114827-puenaqo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307114827-puenaqo",
				"updated": "20240307120829"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过开启一个新线程并使用循环来反复监听客户端的连入，同时做到不卡主线程，\n监听到客户端连入就将返回的新"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Socket"
				},
				{
					"Type": "NodeText",
					"Data": "​管理起来，分别管理收发消息\n同时再开启一个用于接收消息的线程，循环检测是否有新的数据，有就接收数据，做到不卡主线程\n这样就可以让服务端连接多个客户端"
				}
			]
		},
		{
			"ID": "20240307115729-ikpfjiu",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240307115729-ikpfjiu",
				"updated": "20240307121528"
			},
			"Children": [
				{
					"ID": "20240307115731-sqkritm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307115731-sqkritm",
						"updated": "20240307121528"
					},
					"Children": [
						{
							"ID": "20240307115731-fehsfct",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307115731-fehsfct",
								"updated": "20240307121528"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "isClose"
								},
								{
									"Type": "NodeText",
									"Data": "​：用于控制各个线程的循环终止，当在终端输入"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Quit"
								},
								{
									"Type": "NodeText",
									"Data": "​指令时就为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "true"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240307121446-adzu81v",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307121446-adzu81v"
					},
					"Children": [
						{
							"ID": "20240307121446-s8eb3h7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307121446-s8eb3h7"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Main"
								},
								{
									"Type": "NodeText",
									"Data": "​：用于初始化服务端Socket，并开启监听连入线程和接收消息线程，然后检测终端输入，输入"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Quit"
								},
								{
									"Type": "NodeText",
									"Data": "​就关闭服务器，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "B:"
								},
								{
									"Type": "NodeText",
									"Data": "​就广播消息"
								}
							]
						}
					]
				},
				{
					"ID": "20240307120227-yfgzknv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307120227-yfgzknv"
					},
					"Children": [
						{
							"ID": "20240307120227-0lpo95h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307120227-0lpo95h",
								"updated": "20240307120724"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "AcceptClientConnent"
								},
								{
									"Type": "NodeText",
									"Data": "​：单独线程，循环监听客户端的连入，监听到客户端连入就将新Socket添加到列表内管理"
								}
							]
						}
					]
				},
				{
					"ID": "20240307120358-6204g4l",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307120358-6204g4l"
					},
					"Children": [
						{
							"ID": "20240307120358-xesre67",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307120358-xesre67",
								"updated": "20240307120745"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ReceiveMsg"
								},
								{
									"Type": "NodeText",
									"Data": "​：单独线程，循环所有列表内的客户端Socket，检测是否有要接收的数据，当检测到有数据就执行"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "receive"
								},
								{
									"Type": "NodeText",
									"Data": "​方法"
								}
							]
						}
					]
				},
				{
					"ID": "20240307120747-ftouvq4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307120747-ftouvq4"
					},
					"Children": [
						{
							"ID": "20240307120747-cuku646",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307120747-cuku646",
								"updated": "20240307121146"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HandleMsg"
								},
								{
									"Type": "NodeText",
									"Data": "​：采用线程池，将接收到的数据进行处理，输出到终端上，数据的接收和处理一般是分开线程，避免处理信息卡住接收消息"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240307114019-dnc4vvh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240307114019-dnc4vvh",
				"style": "line-height: 22px;",
				"updated": "20240307120149"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Net;\nusing System.Net.Sockets;\nusing System.Text;\n\nnamespace TeachTcpServerExecises\n{\n    internal class Program\n    {\n        static Socket? socket;\t\t\t\t\t\t\t\t\t\t//监听客户端连入的Socket\n        static List\u003cSocket\u003e clientSockets = new List\u003cSocket\u003e();\t\t//客户端Socket列表\n        static bool isClose = false;\t\t\t\t\t\t\t\t//是否关闭，控制多线程运行是否结束\n\n        static void Main(string[] args)\n        {\n\t\t\t//绑定服务端IP地址与端口号，设置最大监听数量\n            socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n            IPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(\"192.168.1.111\"), 8080);\n            socket.Bind(ipPoint);\n            socket.Listen(1024);\n\t\t\t//开启监听连入线程和接收消息线程\n            Thread accpetThread = new Thread(AcceptClientConnent);\n            accpetThread.Start();\n            Thread receiveThread = new Thread(ReceiveMsg);\n            receiveThread.Start();\n\n            while (true)\n            {\n                string? input = Console.ReadLine();\n                //定义一个规则，输入Quit就关闭服务器，断开所有连接\n                if (input == null) \n                    continue;\n                if (input == \"Quit\")\n                {\n                    isClose = true;\n                    for (int i = 0; i \u003c clientSockets.Count; i++)\n                    {\n                        clientSockets[i].Shutdown(SocketShutdown.Both);\n                        clientSockets[i].Close();\n                    }\n                    clientSockets.Clear();\n                    break;\n                }\n                //定义一个规则，输入\"B:广播消息内容\"就广播消息\n                else if (input.Substring(0, 2) == \"B:\")\n                {\n                    for (int i = 0;i \u003c clientSockets.Count; i++)\n                    {\n                        clientSockets[i].Send(Encoding.UTF8.GetBytes(input.Substring(2)));\n                    }\n                }\n            }\n        }\n\n        static void AcceptClientConnent()\n        {\n            while (!isClose)\n            {\n                if (socket == null)\n                    continue;\n                Socket clientSocket = socket.Accept();\n                clientSockets.Add(clientSocket);\n                clientSocket.Send(Encoding.UTF8.GetBytes(\"欢迎你连入服务端\"));\n            }\n        }\n\n        static void ReceiveMsg()\n        {\n            Socket clientSocket;\n            byte[] result = new byte[1024 * 1024];\n            int receiveNum;\n            int i = 0;\n            while (!isClose)\n            {\n                for (i = 0; i \u003c clientSockets.Count; i++)\n                {\n                    clientSocket = clientSockets[i];\n                    //判断该socket是否有可以接收的消息，返回值就是字节数\n                    if (clientSocket.Available \u003e 0) \n                    {\n                        //客户端即使没有发消息过来，这句代码也会执行\n                        receiveNum = clientSocket.Receive(result);\n                        //如果直接在这收到消息就处理，就可能造成问题，即不能够及时的处理别人的消息\n                        //为了不影响别人消息的处理，我们把消息处理，交给新的线程，为了节约线程相关的开销，我们使用线程池\n                        ThreadPool.QueueUserWorkItem(HandleMsg, (clientSocket, Encoding.UTF8.GetString(result, 0, receiveNum)));\n                    }\n                }\n            }\n        }\n\n        static void HandleMsg(object? obj)\n        {\n            if (obj == null)\n                return;\n            (Socket s, string str) info = ((Socket s, string str))obj;\n            Console.WriteLine($\"收到了客户端{info.s.RemoteEndPoint}发来的消息：{info.str}\");\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240307121547-up2fqmo",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240307121547-up2fqmo",
				"updated": "20240307121611"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用面向对象封装Socket"
				}
			]
		},
		{
			"ID": "20240307121614-esew7l7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307121614-esew7l7",
				"updated": "20240307122145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过面向对象来封装服务器Socket和连接客户端的Socket，使连接客户端Socket和服务端Socket的逻辑各自的逻辑分离开"
				}
			]
		},
		{
			"ID": "20240307121912-s75htun",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307121912-s75htun",
				"updated": "20240307121920"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Program.cs"
				}
			]
		},
		{
			"ID": "20240307121943-m5ccz76",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240307121943-m5ccz76",
				"updated": "20240307122212"
			},
			"Children": [
				{
					"ID": "20240307121944-7rb75m4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307121944-7rb75m4",
						"updated": "20240307122212"
					},
					"Children": [
						{
							"ID": "20240307121944-eqz2nf3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307121944-eqz2nf3",
								"updated": "20240307122212"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Main"
								},
								{
									"Type": "NodeText",
									"Data": "​：创建并初始化服务器Socket"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ServerSocket"
								},
								{
									"Type": "NodeText",
									"Data": "​，然后循环监听终端输入，输入"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Quit"
								},
								{
									"Type": "NodeText",
									"Data": "​就关闭服务端，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "B:"
								},
								{
									"Type": "NodeText",
									"Data": "​就调用服务端广播消息方法"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240307121921-upjhvqs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240307121921-upjhvqs",
				"style": "line-height: 22px;",
				"updated": "20240307121933"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "internal class Program\n{\n    static void Main(string[] args)\n    {\n        ServerSocket socket = new ServerSocket();\n        socket.Start(\"192.168.1.111\", 8080, 1024);\n        Console.WriteLine(\"服务器开启成功\");\n        while (true)\n        {\n            string? input = Console.ReadLine();\n            //定义一个规则 关闭服务器，断开所有连接\n            if (input == null)\n                continue;\n            if (input == \"Quit\")\n            {\n                socket.Close();\n            }\n            //定义一个规则，广播消息\n            else if (input.Substring(0, 2) == \"B:\")\n            {\n                socket.BroadCast(input.Substring(2));\n            }\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240307121903-ry2ll3k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307121903-ry2ll3k",
				"updated": "20240307123205"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "ServerSocket.cs"
				}
			]
		},
		{
			"ID": "20240307123205-0k2tlvv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307123205-0k2tlvv",
				"updated": "20240307123306"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ServerSocket"
				},
				{
					"Type": "NodeText",
					"Data": "​将服务端Socket常用的方法封装起来，同时管理所有的连接客户端的Socket"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ClientSocket"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240307122305-3z2zwxc",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240307122305-3z2zwxc",
				"updated": "20240307123417"
			},
			"Children": [
				{
					"ID": "20240307122306-8cnqhxx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307122306-8cnqhxx",
						"updated": "20240307122306"
					},
					"Children": [
						{
							"ID": "20240307122306-smmiviv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307122306-smmiviv",
								"updated": "20240307122400"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "clientDic"
								},
								{
									"Type": "NodeText",
									"Data": "​：用于管理各个连接客户端的Socket，可以通过ID来获取单个Socket"
								}
							]
						}
					]
				},
				{
					"ID": "20240307122400-0cuna2r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307122400-0cuna2r"
					},
					"Children": [
						{
							"ID": "20240307122400-s6rgpjv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307122400-s6rgpjv",
								"updated": "20240307122445"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "isClose"
								},
								{
									"Type": "NodeText",
									"Data": "​：用于控制各个线程的循环终止，在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Close"
								},
								{
									"Type": "NodeText",
									"Data": "​方法中设置为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "true"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240307122425-gh7wuue",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307122425-gh7wuue"
					},
					"Children": [
						{
							"ID": "20240307122425-izrwq8z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307122425-izrwq8z",
								"updated": "20240307122600"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Start"
								},
								{
									"Type": "NodeText",
									"Data": "​：提供给外部开启并初始化服务端Socket的方法，同时通过线程池开启监听连入和消息接收的线程"
								}
							]
						}
					]
				},
				{
					"ID": "20240307122601-2eqqd4g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307122601-2eqqd4g"
					},
					"Children": [
						{
							"ID": "20240307122601-7m5grhc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307122601-7m5grhc",
								"updated": "20240307122859"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Close"
								},
								{
									"Type": "NodeText",
									"Data": "​：关闭并释放所有的Socket，关闭监听连入和消息接收的线程"
								}
							]
						}
					]
				},
				{
					"ID": "20240307122910-9skx69k",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307122910-9skx69k"
					},
					"Children": [
						{
							"ID": "20240307122910-ezq79nc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307122910-ezq79nc",
								"updated": "20240307123133"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Accept"
								},
								{
									"Type": "NodeText",
									"Data": "​：循环监听客户端的连入，监听到连入就实例化"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ClientSocket"
								},
								{
									"Type": "NodeText",
									"Data": "​并加入字典管理"
								}
							]
						}
					]
				},
				{
					"ID": "20240307123133-wuz1c63",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307123133-wuz1c63"
					},
					"Children": [
						{
							"ID": "20240307123133-s8d1f19",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307123133-s8d1f19",
								"updated": "20240307123344"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Receive"
								},
								{
									"Type": "NodeText",
									"Data": "​：循环检测字典内的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ClientSocket"
								},
								{
									"Type": "NodeText",
									"Data": "​是否有消息需要接收，检测到就执行"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ClientSocket"
								},
								{
									"Type": "NodeText",
									"Data": "​的接收消息方法"
								}
							]
						}
					]
				},
				{
					"ID": "20240307123344-4lixe79",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307123344-4lixe79",
						"updated": "20240307123417"
					},
					"Children": [
						{
							"ID": "20240307123344-ekxxplq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307123344-ekxxplq",
								"updated": "20240307123417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BroadCast"
								},
								{
									"Type": "NodeText",
									"Data": "​：让所有的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ClientSocket"
								},
								{
									"Type": "NodeText",
									"Data": "​发送传入的广播消息"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240307122231-wu4jtjx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240307122231-wu4jtjx",
				"style": "line-height: 22px;",
				"updated": "20240307122741"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Net;\nusing System.Net.Sockets;\n\nnamespace TeachTcpServerExecises2\n{\n    internal class ServerSocket\n    {\n        //服务器的Socket\n        public Socket? socket;\n        public Dictionary\u003cint, ClientSocket\u003e clientDic = new Dictionary\u003cint, ClientSocket\u003e();\n        private bool isClose;\n\n        public void Start(string ip, int port, int num)\n        {\n\t\t\t//初始化服务器Socket，绑定IP地址和端口号，设置最大连接数量\n            socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n            IPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(ip), port);\n            socket.Bind(ipPoint);\n            socket.Listen(num);\n\t\t\t//通过线程池开启监听连入和消息接收的线程，并使isClose为false确保持续循环\n            ThreadPool.QueueUserWorkItem(Accept);\n            ThreadPool.QueueUserWorkItem(Receive);\n            isClose = false;\n        }\n\n        public void Close()\n        {\n            if (socket == null)\n                return;\n            foreach (var client in clientDic.Values)\n            {\n                client.Close();\n            }\n            clientDic.Clear();\n            socket.Shutdown(SocketShutdown.Both);\n            socket.Close();\n            socket = null;\n            isClose = true;\n        }\n\n        //接收客户端连入\n        private void Accept(object? obj)\n        {\n            if (socket == null)\n                return;\n            while (!isClose)\n            {\n                try\n                {\n                    //连入一个客户端\n                    Socket clientSocket = socket.Accept();\n                    ClientSocket client = new ClientSocket(clientSocket);\n                    client.Send(\"欢迎连入服务器\");\n                    lock (clientDic)\n                    {\n                        clientDic.Add(client.clientID, client);\n                    }\n                }\n                catch (SocketException e)\n                {\n                    Console.WriteLine($\"客户端连入报错：{e.Message}\");\n                }\n            }\n        }\n\n        //接收客户端消息\n        private void Receive(object? obj)\n        {\n            while (!isClose)\n            {\n                lock (clientDic)\n                {\n                    if (clientDic.Count \u003e 0)\n                    {\n                        foreach (ClientSocket client in clientDic.Values)\n                        {\n                            client.Receive();\n                        }\n                    }\n                }\n            }\n        }\n\n        //广播消息\n        public void BroadCast(string info)\n        {\n            lock (clientDic)\n            {\n                foreach (var client in clientDic.Values)\n                {\n                    client.Send(info);\n                }\n            }\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240307123440-1x041j8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307123440-1x041j8",
				"updated": "20240307123512"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "ClientSocket.cs"
				}
			]
		},
		{
			"ID": "20240307123522-cr3i1rz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307123522-cr3i1rz",
				"updated": "20240307123610"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ClientSocket"
				},
				{
					"Type": "NodeText",
					"Data": "​将连接客户端的Socket常用的方法封装起来，并由"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ServerSocket"
				},
				{
					"Type": "NodeText",
					"Data": "​管理"
				}
			]
		},
		{
			"ID": "20240307123646-mttim89",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240307123646-mttim89",
				"updated": "20240307124005"
			},
			"Children": [
				{
					"ID": "20240307123647-u5pmy7s",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307123647-u5pmy7s",
						"updated": "20240307123647"
					},
					"Children": [
						{
							"ID": "20240307123647-5mf7ucx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307123647-5mf7ucx",
								"updated": "20240307123725"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CLIENT_BEGIN_ID"
								},
								{
									"Type": "NodeText",
									"Data": "​：连接客户端的Socket起始ID，每多一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ClientSocket"
								},
								{
									"Type": "NodeText",
									"Data": "​就累加1"
								}
							]
						}
					]
				},
				{
					"ID": "20240307123726-9hio0zo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307123726-9hio0zo"
					},
					"Children": [
						{
							"ID": "20240307123726-madeaqo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307123726-madeaqo",
								"updated": "20240307123747"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "clientID"
								},
								{
									"Type": "NodeText",
									"Data": "​："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ClientSocket"
								},
								{
									"Type": "NodeText",
									"Data": "​的ID，便于从字典内获取"
								}
							]
						}
					]
				},
				{
					"ID": "20240307123747-nehe2il",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307123747-nehe2il"
					},
					"Children": [
						{
							"ID": "20240307123747-ruhycay",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307123747-ruhycay",
								"updated": "20240307123802"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Connented"
								},
								{
									"Type": "NodeText",
									"Data": "​：是否连接"
								}
							]
						}
					]
				},
				{
					"ID": "20240307123802-z1v2gdj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307123802-z1v2gdj"
					},
					"Children": [
						{
							"ID": "20240307123802-0y0gx0v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307123802-0y0gx0v",
								"updated": "20240307123818"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Close"
								},
								{
									"Type": "NodeText",
									"Data": "​：关闭并释放Socket"
								}
							]
						}
					]
				},
				{
					"ID": "20240307123818-ygzusx4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307123818-ygzusx4"
					},
					"Children": [
						{
							"ID": "20240307123818-4vbecp1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307123818-4vbecp1",
								"updated": "20240307123830"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Send"
								},
								{
									"Type": "NodeText",
									"Data": "​：发送消息"
								}
							]
						}
					]
				},
				{
					"ID": "20240307123831-hyebkgn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307123831-hyebkgn",
						"updated": "20240307123943"
					},
					"Children": [
						{
							"ID": "20240307123831-smu8k7v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307123831-smu8k7v",
								"updated": "20240307123943"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Receive"
								},
								{
									"Type": "NodeText",
									"Data": "​：接收消息，当接收到消息就将从线程池开启一个新"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MsgHandle"
								},
								{
									"Type": "NodeText",
									"Data": "​线程去处理消息"
								}
							]
						}
					]
				},
				{
					"ID": "20240307123856-t9h6i31",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307123856-t9h6i31",
						"updated": "20240307124005"
					},
					"Children": [
						{
							"ID": "20240307123856-tuej8j4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307123856-tuej8j4",
								"updated": "20240307124005"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MsgHandle"
								},
								{
									"Type": "NodeText",
									"Data": "​：处理消息方法，将接收到的消息输出到终端上"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240307123512-efrvs5h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240307123512-efrvs5h",
				"style": "line-height: 22px;",
				"updated": "20240307123519"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Net.Sockets;\nusing System.Text;\n\nnamespace TeachTcpServerExecises2\n{\n    internal class ClientSocket\n    {\n        private static int CLIENT_BEGIN_ID = 1;\n        public int clientID;\n        private Socket socket;\n\n        /// \u003csummary\u003e\n        /// 是否是连接状态\n        /// \u003c/summary\u003e\n        public bool Connented =\u003e socket.Connected;\n\n        public ClientSocket(Socket socket)\n        {\n            this.clientID = CLIENT_BEGIN_ID;\n            this.socket = socket;\n            CLIENT_BEGIN_ID++;\n        }\n\n        public void Close()\n        {\n            if (this.socket != null)\n            {\n                socket.Shutdown(SocketShutdown.Both);\n                socket.Close();\n            }\n        }\n\n        public void Send(string message)\n        {\n            if (socket != null)\n            {\n                try\n                {\n                    socket.Send(Encoding.UTF8.GetBytes(message));\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine($\"向客户端{socket.RemoteEndPoint}发送消息失败：{e.Message}\");\n                    Close();\n                }\n            }\n        }\n\n        public void Receive()\n        {\n            if (socket == null)\n                return;\n            try\n            {\n                if (socket.Available \u003e 0)\n                {\n                    byte[] result = new byte[1024 * 5];\n                    int receiveNum = socket.Receive(result);\n                    ThreadPool.QueueUserWorkItem(MsgHandle, Encoding.UTF8.GetString(result, 0, receiveNum));\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine($\"从客户端{socket.RemoteEndPoint}接收消息失败：{e.Message}\");\n                Close();\n            }\n        }\n\n        private void MsgHandle(object? obj)\n        {\n            if (obj == null) return;\n            string? str = obj as string;\n            Console.WriteLine($\"收到客户端{socket.RemoteEndPoint}发来的消息：{str}\");\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240307113607-3chzgf6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240307113607-3chzgf6",
				"updated": "20240307113635"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "客户端Socket的TCP同步通信"
				}
			]
		},
		{
			"ID": "20240307113645-0fhskot",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307113645-0fhskot",
				"updated": "20240307113703"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "客户端Socket的基本思路如下："
				}
			]
		},
		{
			"ID": "20240307113641-32omdfu",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240307113641-32omdfu",
				"updated": "20240307113641"
			},
			"Children": [
				{
					"ID": "20240307113641-59l4w52",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240307113641-59l4w52",
						"updated": "20240307113641"
					},
					"Children": [
						{
							"ID": "20240307113641-77cqj79",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307113641-77cqj79",
								"updated": "20240307113641"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建套接字"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Socket"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240307113641-pzilaex",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240307113641-pzilaex",
						"updated": "20240307113641"
					},
					"Children": [
						{
							"ID": "20240307113641-m5osdrv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307113641-m5osdrv",
								"updated": "20240307113641"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Connect"
								},
								{
									"Type": "NodeText",
									"Data": "​方法与服务端相连"
								}
							]
						}
					]
				},
				{
					"ID": "20240307113641-a3fuejk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240307113641-a3fuejk",
						"updated": "20240307113641"
					},
					"Children": [
						{
							"ID": "20240307113641-5m4ty6v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307113641-5m4ty6v",
								"updated": "20240307113641"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Send"
								},
								{
									"Type": "NodeText",
									"Data": "​和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Receive"
								},
								{
									"Type": "NodeText",
									"Data": "​相关方法收发数据"
								}
							]
						}
					]
				},
				{
					"ID": "20240307113641-awjwd7x",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240307113641-awjwd7x",
						"updated": "20240307113641"
					},
					"Children": [
						{
							"ID": "20240307113641-a5etoso",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307113641-a5etoso",
								"updated": "20240307113641"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Shutdown"
								},
								{
									"Type": "NodeText",
									"Data": "​方法释放连接"
								}
							]
						}
					]
				},
				{
					"ID": "20240307113641-ajdy29f",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20240307113641-ajdy29f",
						"updated": "20240307113641"
					},
					"Children": [
						{
							"ID": "20240307113641-iaxwdq1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307113641-iaxwdq1",
								"updated": "20240307113715"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "关闭套接字"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240307124130-cvzko5y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307124130-cvzko5y",
				"updated": "20240307124135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "根据以上思路，实现最基础的客户端代码"
				}
			]
		},
		{
			"ID": "20240307114002-wdgrv7c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240307114002-wdgrv7c",
				"style": "line-height: 22px;",
				"updated": "20240307185812"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Start()\n{\n    //1.创建套接字Socket\n    Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n    //2.用Connect方法与服务端相连\n    //确定服务端的IP和端口\n    IPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 8080);\n    try\n    {\n        socket.Connect(ipPoint);\n    }\n    catch (SocketException e)\n    {\n        if (e.ErrorCode == 10061)\n            print(\"服务器拒绝连接\");\n        else\n            print(\"连接服务器失败\" + e.ErrorCode);\n        return;\n    }\n    //3.用Send和Receive相关方法收发数据\n\n    //接收数据\n    byte[] receiveBytes = new byte[1024];\n    int receiveNum = socket.Receive(receiveBytes);\n    print(\"收到服务端发来的消息：\" + Encoding.UTF8.GetString(receiveBytes, 0, receiveNum));\n\n    //发送数据\n    socket.Send(Encoding.UTF8.GetBytes(\"你好，我是唐老狮的客户端\"));\n\n    //4.用Shutdown方法释放连接\n    socket.Shutdown(SocketShutdown.Both);\n    //5.关闭套接字\n    socket.Close();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240307190205-g1sioiu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240307190205-g1sioiu",
				"updated": "20240310212214"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "客户端可随时收发服务端消息且不阻塞主线程"
				}
			]
		},
		{
			"ID": "20240307185819-9xth3tx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307185819-9xth3tx",
				"updated": "20240310212214"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以上的代码在连接服务端时会阻塞主线程，也不能随时和服务端通信"
				}
			]
		},
		{
			"ID": "20240307190157-x62r281",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240307190157-x62r281",
				"updated": "20240310212214"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以将网络连接相关的内容封装到一个单例模式管理器内，并开放接口给外部，每帧检测是否接收到消息"
				}
			]
		},
		{
			"ID": "20240307190829-j03xup2",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240307190829-j03xup2",
				"updated": "20240313174951"
			},
			"Children": [
				{
					"ID": "20240307190833-n005q2m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307190833-n005q2m",
						"updated": "20240307190833"
					},
					"Children": [
						{
							"ID": "20240307190833-qhtsjr5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307190833-qhtsjr5",
								"updated": "20240307190858"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sendMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​：用于发送消息的队列，公共容器，主线程往"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sendMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​放，发送线程从"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sendMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​取"
								}
							]
						}
					]
				},
				{
					"ID": "20240307190851-olomvlh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307190851-olomvlh"
					},
					"Children": [
						{
							"ID": "20240307190851-hcecwnj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307190851-hcecwnj",
								"updated": "20240307190913"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "receiveMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​：用于接收消息的队列，公共容器，接收线程往"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "receiveMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​放，主线程从"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "receiveMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​取"
								}
							]
						}
					]
				},
				{
					"ID": "20240307190916-a7v796a",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307190916-a7v796a"
					},
					"Children": [
						{
							"ID": "20240307190916-23f2ncr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307190916-23f2ncr",
								"updated": "20240307191230"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Connent"
								},
								{
									"Type": "NodeText",
									"Data": "​：传入服务器的IP地址与端口号，连接对应的服务器，同时通过线程池开启发送消息和接收消息的线程"
								}
							]
						}
					]
				},
				{
					"ID": "20240307191728-s33fjm4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307191728-s33fjm4",
						"updated": "20240307191824"
					},
					"Children": [
						{
							"ID": "20240307191728-1trci9m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307191728-1trci9m",
								"updated": "20240307191824"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Update"
								},
								{
									"Type": "NodeText",
									"Data": "​：每帧都检测"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "receiveMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​内是否存在消息，若存在，就将消息输出到控制台和屏幕上"
								}
							]
						}
					]
				},
				{
					"ID": "20240307191029-tlhd4ba",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307191029-tlhd4ba"
					},
					"Children": [
						{
							"ID": "20240307191029-dugx2fj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307191029-dugx2fj",
								"updated": "20240307191726"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Close"
								},
								{
									"Type": "NodeText",
									"Data": "​：关闭并释放客户端Socket，在管理器被销毁时会调用"
								}
							]
						}
					]
				},
				{
					"ID": "20240307191051-wsvhsyu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307191051-wsvhsyu",
						"updated": "20240313174951"
					},
					"Children": [
						{
							"ID": "20240307191051-6pu45q2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307191051-6pu45q2",
								"updated": "20240313174951"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Send"
								},
								{
									"Type": "NodeText",
									"Data": "​：将外部要发送的消息传入到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sendMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​内，等待发送消息线程将消息转换为字节数组发送到服务端"
								}
							]
						}
					]
				},
				{
					"ID": "20240307191251-xp7qv4l",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307191251-xp7qv4l"
					},
					"Children": [
						{
							"ID": "20240307191251-a9c04e5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307191251-a9c04e5",
								"updated": "20240307191528"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "SendMessage"
								},
								{
									"Type": "NodeText",
									"Data": "​：发送消息的线程，循环检测"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sendMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​内是否由要发送的消息，有就转换为字节数组发送到服务端"
								}
							]
						}
					]
				},
				{
					"ID": "20240307191530-8za2qyy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240307191530-8za2qyy"
					},
					"Children": [
						{
							"ID": "20240307191530-l5dhk7b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240307191530-l5dhk7b",
								"updated": "20240307191704"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ReceiveMessage"
								},
								{
									"Type": "NodeText",
									"Data": "​：接收消息的线程，循环检测是否有消息需要接收，有就将消息转换为字符串传入到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "receiveMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​内"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240307124011-xicpl0y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240307124011-xicpl0y",
				"style": "line-height: 22px;",
				"updated": "20240310212214"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Collections.Generic;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class NetManager : MonoBehaviour\n{\n    private static NetManager instance;\n    public static NetManager Instance =\u003e instance;\n\n    private void Awake()\n    {\n        instance = this;\n        DontDestroyOnLoad(gameObject);\n    }\n\n    public Text printMessage;\t\t\t//用于在界面上输出接收到的消息\n\n    //客户端Socket\n    private Socket socket = null;\n    //用于发送消息的队列，公共容器，主线程往sendMessageQueue放，发送线程从sendMessageQueue取\n    private Queue\u003cstring\u003e sendMessageQueue = new Queue\u003cstring\u003e();\n    //用于接收消息的队列，公共容器，接收线程往receiveMessageQueue放，主线程从receiveMessageQueue取\n    private Queue\u003cstring\u003e receiveMessageQueue = new Queue\u003cstring\u003e();\n\n    //用于收消息的缓存数组\n    private byte[] receiveBytes = new byte[1024 * 1024];\n    //接收到的数据字节数\n    private int receiveNum = 0;\n    //是否连接\n    private bool isConnented;\n\n    void Update()\n    {\n        if (receiveMessageQueue.Count \u003e 0)\n        {\n            printMessage.text = receiveMessageQueue.Dequeue();\n        }\n    }\n\n    private void OnDestroy()\n    {\n        Close();\n    }\n\n    public void Connent(string ip, int port)\n    {\n        //如果是连接状态，就直接返回\n        if (isConnented)\n            return;\n        socket ??= new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n        //确定服务器端的IP和端口\n        IPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(ip), port);\n        //用Connent方法与服务端相连\n        try\n        {\n            socket.Connect(ipPoint);\n            isConnented = true;\n            //开启发送和接收线程\n            ThreadPool.QueueUserWorkItem(SendMessage);\n            ThreadPool.QueueUserWorkItem(ReceiveMessage);\n            Send($\"来自唐老狮的客户端\");\n        }\n        catch (SocketException e)\n        {\n            if (e.ErrorCode == 10061)\n            {\n                printMessage.text = \"服务器拒绝连接\";\n                print(\"服务器拒绝连接\");\n            }\n            else\n            {\n                printMessage.text = $\"连接失败：{e.ErrorCode}, {e.Message}\";\n                print($\"连接失败：{e.ErrorCode}, {e.Message}\");\n            }\n        }\n    }\n\n    public void Close()\n    {\n        if (socket != null)\n        {\n            if (socket.Connected)\n                socket.Shutdown(SocketShutdown.Both);\n            socket.Close();\n            isConnented = false;\n        }\n    }\n\n    public void Send(string info)\n    {\n        sendMessageQueue.Enqueue(info);\n    }\n\n    private void SendMessage(object obj)\n    {\n        while (isConnented)\n        {\n            if (sendMessageQueue.Count \u003e 0)\n            {\n                socket.Send(Encoding.UTF8.GetBytes(sendMessageQueue.Dequeue()));\n            }\n        }\n    }\n\n    private void ReceiveMessage(object obj)\n    {\n        while (isConnented)\n        {\n            if (socket.Available \u003e 0)\n            {\n                receiveNum = socket.Receive(receiveBytes);\n                //收到消息，解析消息为字符串，并放入公共容器内\n                receiveMessageQueue.Enqueue(Encoding.UTF8.GetString(receiveBytes, 0, receiveNum));\n            }\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}