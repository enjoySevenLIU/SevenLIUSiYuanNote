{
	"ID": "20240311215458-bkzdesm",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240311215458-bkzdesm",
		"title": "UN2L11——服务端和客户端同步通信",
		"updated": "20240313175503"
	},
	"Children": [
		{
			"ID": "20240311215458-pwnzoh9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240311215458-pwnzoh9",
				"updated": "20240311215624"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240311215624-mb7ihzt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240311215624-mb7ihzt",
				"style": "line-height: 22px;",
				"updated": "20240311221505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "socket.SendTo()\nsocket.ReceiveFrom()\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240311215657-y0lgwxo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240311215657-y0lgwxo",
				"updated": "20240311215715"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "UDP同步收发消息API"
				}
			]
		},
		{
			"ID": "20240311215906-qlvga3f",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240311215906-qlvga3f",
				"updated": "20240311221915"
			},
			"Children": [
				{
					"ID": "20240311215912-4n0k3qs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240311215912-4n0k3qs",
						"name": "socket.SendTo()",
						"updated": "20240311215912"
					},
					"Children": [
						{
							"ID": "20240311215912-ifess1k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240311215912-ifess1k",
								"updated": "20240311215917"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "同步发送消息"
								}
							]
						},
						{
							"ID": "20240311215957-aob0xk3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240311215957-aob0xk3",
								"updated": "20240311220935"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "UDP同步通信中，一般用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "SendTo"
								},
								{
									"Type": "NodeText",
									"Data": "​​来发送消息，使用前不需要建立连接，只需要绑定好本机IP即可\n该方法有多种重载，最基础的重载参数包括：发送的字节数组、要发送的IP地址和端口号"
								}
							]
						},
						{
							"ID": "20240311220807-hyliai2",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20240311220807-hyliai2",
								"updated": "20240311220915"
							},
							"Children": [
								{
									"ID": "20240311220915-g1srn7o",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240311220915-g1srn7o",
										"updated": "20240311220915"
									},
									"Children": [
										{
											"ID": "20240311220915-6ykkxzi",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240311220915-6ykkxzi",
												"updated": "20240311221013"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "参数一：发送的字节数组（必须）"
												}
											]
										}
									]
								},
								{
									"ID": "20240311220923-3xtt4f9",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240311220923-3xtt4f9"
									},
									"Children": [
										{
											"ID": "20240311220923-y07avpq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240311220923-y07avpq",
												"updated": "20240311221131"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "参数二：偏移量，即从第几位开始发送"
												}
											]
										}
									]
								},
								{
									"ID": "20240311220941-avwyosv",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240311220941-avwyosv"
									},
									"Children": [
										{
											"ID": "20240311220941-3sae6cq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240311220941-3sae6cq",
												"updated": "20240311221138"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "参数三：要发送多少字节"
												}
											]
										}
									]
								},
								{
									"ID": "20240311220949-95ids4p",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240311220949-95ids4p"
									},
									"Children": [
										{
											"ID": "20240311220949-vf4i5vi",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240311220949-vf4i5vi",
												"updated": "20240311221025"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "参数四：套接字标识"
												}
											]
										}
									]
								},
								{
									"ID": "20240311220952-nob0303",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240311220952-nob0303"
									},
									"Children": [
										{
											"ID": "20240311220952-pvypifq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240311220952-pvypifq",
												"updated": "20240311221026"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "参数五：要发送的IP地址和端口号（必须）"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20240311215923-zl354sf",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240311215923-zl354sf",
								"style": "line-height: 22px;",
								"updated": "20240311221146"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "//创建套接字\nSocket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);\n//绑定本机地址\nIPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 8080);\nsocket.Bind(ipPoint);\n//发送到指定目标，指定要发送的字节数组和远程计算机的IP端口\nIPEndPoint remoteIpPoint = new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 8081);\nsocket.SendTo(Encoding.UTF8.GetBytes(\"唐老狮来了\"), remoteIpPoint);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240311215917-0uruu7t",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240311215917-0uruu7t",
						"name": "socket.ReceiveFrom()",
						"updated": "20240311221915"
					},
					"Children": [
						{
							"ID": "20240311215917-do8nwx5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240311215917-do8nwx5",
								"updated": "20240311215923"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "同步接收消息"
								}
							]
						},
						{
							"ID": "20240311220636-k5cgopk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240311220636-k5cgopk",
								"updated": "20240311221422"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "UDP同步通信中，一般用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ReceiveFrom"
								},
								{
									"Type": "NodeText",
									"Data": "​​来接收消息，使用前不需要建立连接，只需要绑定好本机IP即可\n该方法有多种重载，最基础的重载参数包括：用来接收数据的字节数组、用于记录发送者IP地址和端口的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "EndPoint"
								},
								{
									"Type": "NodeText",
									"Data": "​​\n该方法会返回一共接收了多少字节"
								}
							]
						},
						{
							"ID": "20240311221235-9yzww0k",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20240311221235-9yzww0k",
								"updated": "20240311221411"
							},
							"Children": [
								{
									"ID": "20240311221235-pqz4bl0",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240311221235-pqz4bl0",
										"updated": "20240311221348"
									},
									"Children": [
										{
											"ID": "20240311221235-au8n0w9",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240311221235-au8n0w9",
												"updated": "20240311221348"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "参数一：用来接收数据的字节数组（必须）"
												}
											]
										}
									]
								},
								{
									"ID": "20240311221235-5wsovs7",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240311221235-5wsovs7",
										"updated": "20240311221356"
									},
									"Children": [
										{
											"ID": "20240311221235-ns46p0z",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240311221235-ns46p0z",
												"updated": "20240311221356"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "参数二：偏移量，即从第几位开始接收数据"
												}
											]
										}
									]
								},
								{
									"ID": "20240311221235-t9pv3kv",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240311221235-t9pv3kv",
										"updated": "20240311221359"
									},
									"Children": [
										{
											"ID": "20240311221235-ep9eyfv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240311221235-ep9eyfv",
												"updated": "20240311221359"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "参数三：要接收多少字节"
												}
											]
										}
									]
								},
								{
									"ID": "20240311221235-dvpp3cp",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240311221235-dvpp3cp",
										"updated": "20240311221235"
									},
									"Children": [
										{
											"ID": "20240311221235-qn1msvd",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240311221235-qn1msvd",
												"updated": "20240311221235"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "参数四：套接字标识"
												}
											]
										}
									]
								},
								{
									"ID": "20240311221235-1v5dw1x",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240311221235-1v5dw1x",
										"updated": "20240311221411"
									},
									"Children": [
										{
											"ID": "20240311221235-c9gtpie",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240311221235-c9gtpie",
												"updated": "20240311221411"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "参数五：用于记录发送者IP地址和端口的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "EndPoint"
												},
												{
													"Type": "NodeText",
													"Data": "​​（必须）"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20240311220141-1os9sxl",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240311220141-1os9sxl",
								"style": "line-height: 22px;",
								"updated": "20240311221856"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "//创建套接字\nSocket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);\n//绑定本机地址\nIPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 8081);\nsocket.Bind(ipPoint);\nConsole.WriteLine(\"服务器开启\");\n//接收消息\nbyte[] bytes = new byte[512];\n//这个变量主要是用来记录，谁发的消息给你，传入函数后，在内部，它会帮助我们进行赋值\nEndPoint remoteIpPoint = new IPEndPoint(IPAddress.Any, 0);\nint receiveNum = socket.ReceiveFrom(bytes, ref remoteIpPoint);\nConsole.WriteLine(\"IP: \" + (remoteIpPoint as IPEndPoint)?.Address.ToString() +\n                  \"port: \" + (remoteIpPoint as IPEndPoint)?.Port.ToString() +\n                  \"发来了: \" +\n                  Encoding.UTF8.GetString(bytes, 0, receiveNum));\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240311221659-a9l3h89",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240311221659-a9l3h89",
				"updated": "20240311221940"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "服务端和客户端Socket的UDP同步通信"
				}
			]
		},
		{
			"ID": "20240311222009-bfdgma7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240311222009-bfdgma7",
				"updated": "20240311222110"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "服务端和客户端的UDP通信基本思路是一致的："
				}
			]
		},
		{
			"ID": "20240311222007-zbneo0z",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240311222007-zbneo0z",
				"updated": "20240311221940"
			},
			"Children": [
				{
					"ID": "20240311222007-wfvl3y2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240311222007-wfvl3y2",
						"updated": "20240311222007"
					},
					"Children": [
						{
							"ID": "20240311222007-hzxo59i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240311222007-hzxo59i",
								"updated": "20240311222007"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建套接字Socket"
								}
							]
						}
					]
				},
				{
					"ID": "20240311222007-c5v989r",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240311222007-c5v989r",
						"updated": "20240311222007"
					},
					"Children": [
						{
							"ID": "20240311222007-bx7upl4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240311222007-bx7upl4",
								"updated": "20240311222007"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Bind"
								},
								{
									"Type": "NodeText",
									"Data": "​方法将套接字与本地地址进行绑定"
								}
							]
						}
					]
				},
				{
					"ID": "20240311222007-9p2tcn9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240311222007-9p2tcn9",
						"updated": "20240311222007"
					},
					"Children": [
						{
							"ID": "20240311222007-mkmzwd6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240311222007-mkmzwd6",
								"updated": "20240311222007"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ReceiveFrom"
								},
								{
									"Type": "NodeText",
									"Data": "​和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "SendTo"
								},
								{
									"Type": "NodeText",
									"Data": "​方法在套接字上收发消息"
								}
							]
						}
					]
				},
				{
					"ID": "20240311222007-ficqd3n",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240311222007-ficqd3n",
						"updated": "20240311222007"
					},
					"Children": [
						{
							"ID": "20240311222007-3agmq6g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240311222007-3agmq6g",
								"updated": "20240311222007"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Shutdown"
								},
								{
									"Type": "NodeText",
									"Data": "​方法释放连接"
								}
							]
						}
					]
				},
				{
					"ID": "20240311222007-q2ugots",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20240311222007-q2ugots",
						"updated": "20240311222007"
					},
					"Children": [
						{
							"ID": "20240311222007-kt02deh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240311222007-kt02deh",
								"updated": "20240311222007"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "关闭套接字"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240311222037-mortkdz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240311222037-mortkdz",
				"updated": "20240311222058"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此它们的最基础的UDP同步通信实现也大同小异"
				}
			]
		},
		{
			"ID": "20240311222119-jr6kn98",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240311222119-jr6kn98",
				"updated": "20240313171749"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "服务端"
				}
			]
		},
		{
			"ID": "20240311222121-1ql1sdl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240311222121-1ql1sdl",
				"style": "line-height: 22px;",
				"updated": "20240313171758"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Net;\nusing System.Net.Sockets;\nusing System.Text;\n\nnamespace TeachUdpServer\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            //创建套接字\n            Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);\n            //绑定本机地址\n            IPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 8081);\n            socket.Bind(ipPoint);\n            Console.WriteLine(\"服务器开启\");\n            //接收消息\n            byte[] bytes = new byte[512];\n            //这个变量主要是用来记录，谁发的消息给你，传入函数后，在内部，它会帮助我们进行赋值\n            EndPoint remoteIpPoint = new IPEndPoint(IPAddress.Any, 0);\n            int receiveNum = socket.ReceiveFrom(bytes, ref remoteIpPoint);\n            Console.WriteLine(\"IP: \" + (remoteIpPoint as IPEndPoint)?.Address.ToString() +\n                              \"port: \" + (remoteIpPoint as IPEndPoint)?.Port.ToString() +\n                              \"发来了: \" +\n                              Encoding.UTF8.GetString(bytes, 0, receiveNum));\n\n            //发送到指定目标，因为是先收消息，接受消息时就已经得到了客户端IP地址和端口号，因此可以直接复用\n            socket.SendTo(Encoding.UTF8.GetBytes(\"欢迎发送给服务器\"), remoteIpPoint);\n\n            //释放关闭套接字\n            socket.Shutdown(SocketShutdown.Both);\n            socket.Close();\n            Console.ReadKey();\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240313171759-eldjv51",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20240313171759-eldjv51",
				"updated": "20240313171923"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现一个相对完善的UDP服务端"
				}
			]
		},
		{
			"ID": "20240313172023-md0lcts",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240313172023-md0lcts",
				"updated": "20240313172120"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以上的代码一次只能发送和接受一条消息，随后服务端的运行就会终止"
				}
			]
		},
		{
			"ID": "20240313172023-5nxw557",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240313172023-5nxw557",
				"updated": "20240313172436"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过开启一个新线程并使用循环来反复监听消息接收，同时做到不卡主线程，\n接收到消息就将发送消息的客户端的IP地址和端口号记录起来，做到主动对发送过消息的客户端发消息\n同时记录该客户端上一次发送消息的时间，如果长时间没有收到消息，就移除这个客户端的记录\n同时，还要在收消息的同时区分消息类型"
				}
			]
		},
		{
			"ID": "20240313174000-i2ljczc",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240313174000-i2ljczc",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240313174542"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240313174001-kgh0e93",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240313174001-kgh0e93",
						"updated": "20240313174542"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意！我们目前写的服务端只是为了学习用，实际上这样的服务端是不安全的\n因为在UDP的通信模式下，只要知道了服务端的IP地址就可以向该服务端发送消息\n如果有人恶意发送不按照规定序列化的消息或者恶意发送垃圾信息，就有可能会出现处理消息的问题，增加服务器压力"
						}
					]
				},
				{
					"ID": "20240313174325-o2kpiay",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240313174325-o2kpiay",
						"updated": "20240313174533"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "实际上，一般根本不会使用UDP来记录客户端消息，而是先建立一层TCP连接，在根据这个TCP连接再使用UDP进行通信"
						}
					]
				}
			]
		},
		{
			"ID": "20240313172447-9c6h36i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240313172447-9c6h36i",
				"updated": "20240313172500"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Program.cs"
				}
			]
		},
		{
			"ID": "20240313172520-i5orau5",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240313172520-i5orau5",
				"updated": "20240313172615"
			},
			"Children": [
				{
					"ID": "20240313172545-lsp0mv8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313172545-lsp0mv8",
						"updated": "20240313172603"
					},
					"Children": [
						{
							"ID": "20240313172545-25pcixe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313172545-25pcixe",
								"updated": "20240313172603"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "socket"
								},
								{
									"Type": "NodeText",
									"Data": "​：让外部可以调用唯一的服务端"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "socket"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240313172535-wrfh1q5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313172535-wrfh1q5",
						"updated": "20240313172615"
					},
					"Children": [
						{
							"ID": "20240313172535-k9k88o9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313172535-k9k88o9",
								"updated": "20240313172615"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Main"
								},
								{
									"Type": "NodeText",
									"Data": "​：用于初始化服务端Socket，绑定其IP地址，然后检测终端输入，输入"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "B:"
								},
								{
									"Type": "NodeText",
									"Data": "​就广播消息"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240313172438-yqfanyy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240313172438-yqfanyy",
				"style": "line-height: 22px;",
				"updated": "20240313172515"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace TeachUdpServerExercises\n{\n    internal class Program\n    {\n        public static ServerSocket? socket;\n\n        static void Main(string[] args)\n        {\n            socket = new ServerSocket();\n            socket.Start(\"127.0.0.1\", 8080);\n            Console.WriteLine(\"UDP服务器启动了！\");\n            while (true)\n            {\n                string? input = Console.ReadLine();\n                if (string.IsNullOrEmpty(input))\n                    continue;\n                if (input.Substring(0, 2) == \"B:\")\n                {\n                    PlayerMessage message = new PlayerMessage();\n                    message.playerData = new PlayerData();\n                    message.playerID = 1001;\n                    message.playerData.name = \"唐老狮的UDP服务器\";\n                    message.playerData.atk = 88;\n                    message.playerData.lev = 66;\n                    socket.Broadcast(message);\n                }\n            }\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240313173326-4pkstqh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240313173326-4pkstqh",
				"updated": "20240313173335"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "ServerSocket.cs"
				}
			]
		},
		{
			"ID": "20240313172641-r2mhz6d",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240313172641-r2mhz6d",
				"updated": "20240313173444"
			},
			"Children": [
				{
					"ID": "20240313172642-xbvnkcd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313172642-xbvnkcd",
						"updated": "20240313172642"
					},
					"Children": [
						{
							"ID": "20240313172642-vnko90r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313172642-vnko90r",
								"updated": "20240313172737"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "isClose"
								},
								{
									"Type": "NodeText",
									"Data": "​：用于控制多线程循环是否结束，让多线程在socket存在时才继续执行"
								}
							]
						}
					]
				},
				{
					"ID": "20240313172737-tp700ae",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313172737-tp700ae",
						"updated": "20240313173427"
					},
					"Children": [
						{
							"ID": "20240313172737-c6dcfum",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313172737-c6dcfum",
								"updated": "20240313173427"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "clientDic"
								},
								{
									"Type": "NodeText",
									"Data": "​：以发送者的IP地址和端口号为键，记录发送过消息的客户端的字典，用于广播时主动对发送过消息的客户端发消息"
								}
							]
						}
					]
				},
				{
					"ID": "20240313172815-zhgjw8z",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313172815-zhgjw8z"
					},
					"Children": [
						{
							"ID": "20240313172815-brdvrbh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313172815-brdvrbh",
								"updated": "20240313172913"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Start"
								},
								{
									"Type": "NodeText",
									"Data": "​：初始化服务端，绑定IP地址和端口号，开启接收消息和检测超时的线程"
								}
							]
						}
					]
				},
				{
					"ID": "20240313172913-p7bd55o",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313172913-p7bd55o"
					},
					"Children": [
						{
							"ID": "20240313172913-gdj9f9b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313172913-gdj9f9b",
								"updated": "20240313173018"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CheckTimeOut"
								},
								{
									"Type": "NodeText",
									"Data": "​：检测超时的线程主函数，每隔一段时间就检测一次客户端是否超时未发消息，过久没法消息的客户端消息会被删除"
								}
							]
						}
					]
				},
				{
					"ID": "20240313173018-zvsr21f",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313173018-zvsr21f"
					},
					"Children": [
						{
							"ID": "20240313173018-xot0pdr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313173018-xot0pdr",
								"updated": "20240313173145"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ReceiveMessage"
								},
								{
									"Type": "NodeText",
									"Data": "​：接收消息的线程主函数，循环接收数据，并调用发送者对应的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Client"
								},
								{
									"Type": "NodeText",
									"Data": "​处理数据，将新发消息的客户端记录下来"
								}
							]
						}
					]
				},
				{
					"ID": "20240313173145-ltn1o5p",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313173145-ltn1o5p"
					},
					"Children": [
						{
							"ID": "20240313173145-eirzh0b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313173145-eirzh0b",
								"updated": "20240313173239"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "SendTo"
								},
								{
									"Type": "NodeText",
									"Data": "​：向某个IP地址和端口号发送消息"
								}
							]
						}
					]
				},
				{
					"ID": "20240313173241-kf6dxqm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313173241-kf6dxqm"
					},
					"Children": [
						{
							"ID": "20240313173241-kr0fur8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313173241-kr0fur8",
								"updated": "20240313173320"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Broadcast"
								},
								{
									"Type": "NodeText",
									"Data": "​：向所有记录过的客户端发消息"
								}
							]
						}
					]
				},
				{
					"ID": "20240313173321-xls48kr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313173321-xls48kr"
					},
					"Children": [
						{
							"ID": "20240313173321-cg67gub",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313173321-cg67gub",
								"updated": "20240313173354"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Close"
								},
								{
									"Type": "NodeText",
									"Data": "​：关闭并释放Socket"
								}
							]
						}
					]
				},
				{
					"ID": "20240313173354-u2m39pp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313173354-u2m39pp",
						"updated": "20240313173444"
					},
					"Children": [
						{
							"ID": "20240313173354-nbfuhzf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313173354-nbfuhzf",
								"updated": "20240313173444"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "RemoveClient"
								},
								{
									"Type": "NodeText",
									"Data": "​：将记录过的客户端从字典内移除出去"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240313172618-7gav5ec",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240313172618-7gav5ec",
				"style": "line-height: 22px;",
				"updated": "20240313173505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Net;\nusing System.Net.Sockets;\n\nnamespace TeachUdpServerExercises\n{\n    internal class ServerSocket\n    {\n        private Socket? socket;\n\n        private bool isClose = true;\n        //可以通过记录谁给我发了消息，把它的ip和端口记下来\n        private Dictionary\u003cstring, Client\u003e clientDic = new Dictionary\u003cstring, Client\u003e();\n\n        public void Start(string ip, int port)\n        {\n            IPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(ip), port);\n            socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);\n\n            try\n            {\n                socket.Bind(ipPoint);\n                isClose = false;\n                //消息接收的处理\n                ThreadPool.QueueUserWorkItem(ReceiveMessage);\n                //定时检测超时线程\n                ThreadPool.QueueUserWorkItem(CheckTimeOut);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(\"Udp开启出错\" + e.Message);\n            }\n        }\n\n        private void CheckTimeOut(object? obj)\n        {\n            long nowTime = 0;\n            List\u003cstring\u003e delList = new List\u003cstring\u003e();\n            while (true)\n            {\n                //每30秒检测一次是否移除\n                Thread.Sleep(30000);\n                //得到当前系统时间\n                nowTime = DateTime.Now.Ticks / TimeSpan.TicksPerSecond;\n                foreach (Client client in clientDic.Values)\n                {\n                    //超过10秒没有收到消息的客户端消息需要被移除\n                    if (nowTime - client.frontTime \u003e= 10)\n                        delList.Add(client.cliendStrID);\n                }\n                //从待删除列表中移除超时的客户端消息\n                for (int i = 0; i \u003c delList.Count; i++)\n                {\n                    RemoveClient(delList[i]);\n                }\n                delList.Clear();\n            }\n        }\n\n        private void ReceiveMessage(object? obj)\n        {\n            if (socket == null)\n                return;\n            byte[] bytes = new byte[512];\n            EndPoint ipPoint = new IPEndPoint(IPAddress.Any, 0);\n            //用于拼接字符串，唯一ID，它是由IP + 端口号构成的\n            string strID;\n            string ip;\n            int port;\n            while (!isClose)\n            {\n                if (socket.Available \u003e 0)\n                {\n                    lock (socket)\n                    {\n                        socket.ReceiveFrom(bytes, ref ipPoint);\n                    }\n                    //处理消息，最好不要在这里处理，而是交给客户端对象处理\n                    //收到消息时，我们可以来判断是不是记录了这个客户端消息（ip和端口）\n                    ip = ((IPEndPoint)ipPoint).Address.ToString();\n                    port = ((IPEndPoint)ipPoint).Port;\n                    strID = ip + \":\" + port;\n                    if (clientDic.ContainsKey(strID))\n                        clientDic[strID].ReceiveMsg(bytes);\n                    else\n                    {\n                        clientDic.Add(strID, new Client(ip, port));\n                        clientDic[strID].ReceiveMsg(bytes);\n                    }\n                }\n            }\n        }\n\n        //指定发送一共消息给某个目标 \n        public void SendTo(BaseMessage message, IPEndPoint ipPoint)\n        {\n            if (socket == null)\n                return;\n            try\n            {\n                lock (socket)\n                    socket.SendTo(message.Writeing(), ipPoint);\n            }\n            catch (SocketException e)\n            {\n                Console.WriteLine(\"发消息出现问题：\" + e.SocketErrorCode + e.Message);\n            }\n            //如果是序列化问题\n            catch (Exception e)\n            {\n                Console.WriteLine(\"发送消息出问题（可能是序列化问题）：\" + e.Message);\n            }\n        }\n\n        public void Broadcast(BaseMessage message)\n        {\n            //广播消息，给谁广播\n            foreach (Client client in clientDic.Values)\n            {\n                SendTo(message, client.clientIPAndPort);\n            }\n        }\n\n        public void Close()\n        {\n            if (socket != null)\n            {\n                if (socket.Connected)\n                    socket.Shutdown(SocketShutdown.Both);\n                socket.Close();\n                socket = null;\n            }\n        }\n\n        public void RemoveClient(string clientID)\n        {\n            if (clientDic.ContainsKey(clientID))\n            {\n                Console.WriteLine($\"客户端{clientDic[clientID].clientIPAndPort}被移除了\");\n                clientDic.Remove(clientID);\n            }\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240313173509-0zszpxx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240313173509-0zszpxx",
				"updated": "20240313173513"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Client.cs"
				}
			]
		},
		{
			"ID": "20240313173548-gej3nms",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240313173548-gej3nms",
				"updated": "20240313173548"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它是用于记录和服务器通信过的客户端的IP和端口"
				}
			]
		},
		{
			"ID": "20240313173528-zhruhps",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240313173528-zhruhps",
				"updated": "20240313173933"
			},
			"Children": [
				{
					"ID": "20240313173531-l1t0oq5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313173531-l1t0oq5",
						"updated": "20240313173531"
					},
					"Children": [
						{
							"ID": "20240313173531-8zqm27r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313173531-8zqm27r",
								"updated": "20240313173558"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IPEndPoint"
								},
								{
									"Type": "NodeText",
									"Data": "​：通信过的客户端的IP和端口"
								}
							]
						}
					]
				},
				{
					"ID": "20240313173746-vs0c1r6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313173746-vs0c1r6"
					},
					"Children": [
						{
							"ID": "20240313173746-76l09jt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313173746-76l09jt",
								"updated": "20240313173903"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "cliendStrID"
								},
								{
									"Type": "NodeText",
									"Data": "​：由客户端的IP和端口组成的ID，也是在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ServerSocket"
								},
								{
									"Type": "NodeText",
									"Data": "​的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "clientDic"
								},
								{
									"Type": "NodeText",
									"Data": "​内相对应的键"
								}
							]
						}
					]
				},
				{
					"ID": "20240313173733-unpvqlu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313173733-unpvqlu"
					},
					"Children": [
						{
							"ID": "20240313173733-zmxara9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313173733-zmxara9",
								"updated": "20240313173744"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "frontTime"
								},
								{
									"Type": "NodeText",
									"Data": "​：上一次收到消息的时间"
								}
							]
						}
					]
				},
				{
					"ID": "20240313173558-pqejrrm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313173558-pqejrrm"
					},
					"Children": [
						{
							"ID": "20240313173558-g5qw36y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313173558-g5qw36y",
								"updated": "20240313173730"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ReceiveMsg"
								},
								{
									"Type": "NodeText",
									"Data": "​：从线程池中开启处理消息的线程，并记录这次发消息的时间"
								}
							]
						}
					]
				},
				{
					"ID": "20240313173620-itfyw19",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313173620-itfyw19",
						"updated": "20240313173933"
					},
					"Children": [
						{
							"ID": "20240313173620-x6rs7vd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313173620-x6rs7vd",
								"updated": "20240313173933"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ReceiveHandle"
								},
								{
									"Type": "NodeText",
									"Data": "​：处理消息线程的主函数"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240313173514-lr13281",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240313173514-lr13281",
				"style": "line-height: 22px;",
				"updated": "20240313173524"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Net;\n\nnamespace TeachUdpServerExercises\n{\n    //它是用于记录和服务器通信过的客户端的IP和端口\n    internal class Client\n    {\n        public IPEndPoint clientIPAndPort;\n        public string cliendStrID;\n        public long frontTime = -1;         //上一次收到消息的时间\n\n        public Client(string ip, int port)\n        {\n            this.cliendStrID = ip + \":\" + port;\n            clientIPAndPort = new IPEndPoint(IPAddress.Parse(ip), port);\n        }\n\n        public void ReceiveMsg(byte[] bytes)\n        {\n            //为了避免处理消息时，又接收到了其他消息，所以我们需要在处理之前先把消息拷贝出来\n            //处理消息和接收消息，用不同的容器避免出现问题\n            byte[] cacheBytes = new byte[512];\n            bytes.CopyTo(cacheBytes, 0);\n            frontTime = DateTime.Now.Ticks / TimeSpan.TicksPerSecond;\n            ThreadPool.QueueUserWorkItem(ReceiveHandle, cacheBytes);\n        }\n\n        //多线程处理消息\n        private void ReceiveHandle(object? obj)\n        {\n            try\n            {\n                //取出传进来的字节\n                if (obj is not byte[] bytes)\n                    return;\n                int nowIndex = 0;\n                int msgID = BitConverter.ToInt32(bytes, nowIndex);\n                nowIndex += 4;\n                int msgLength = BitConverter.ToInt32(bytes, nowIndex);\n                nowIndex += 4;\n                switch (msgID)\n                {\n                    case 1001:\n                        PlayerMessage playerMessage = new PlayerMessage();\n                        playerMessage.Reading(bytes, nowIndex);\n                        Console.WriteLine(playerMessage.playerID);\n                        Console.WriteLine(playerMessage.playerData.name);\n                        Console.WriteLine(playerMessage.playerData.atk);\n                        Console.WriteLine(playerMessage.playerData.lev);\n                        break;\n                    case 1003:\n                        QuitMessage quitMessage = new QuitMessage();\n                        //由于它没有消息体，所以不用反序列化\n                        //处理退出\n                        Program.socket?.RemoveClient(cliendStrID);\n                        break;\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(\"处理消息时出错！：\" + e.Message);\n                Program.socket?.RemoveClient(cliendStrID);\n            }\n\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240311222134-3mgaf1u",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240311222134-3mgaf1u",
				"updated": "20240313171752"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "客户端"
				}
			]
		},
		{
			"ID": "20240311222137-kdjnpt2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240311222137-kdjnpt2",
				"style": "line-height: 22px;",
				"updated": "20240311222158"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing UnityEngine;\n\npublic class Lesson14 : MonoBehaviour\n{\n    void Start()\n    {\n        //创建套接字\n        Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);\n        //绑定本机地址\n        IPEndPoint ipPoint = new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 8080);\n        socket.Bind(ipPoint);\n        //发送到指定目标，指定要发送的字节数组和远程计算机的IP端口\n        IPEndPoint remoteIpPoint = new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 8081);\n        socket.SendTo(Encoding.UTF8.GetBytes(\"唐老狮来了\"), remoteIpPoint);\n        //接收消息\n        byte[] bytes = new byte[512];\n        //这个变量主要是用来记录，谁发的消息给你，传入函数后，在内部，它会帮助我们进行赋值\n        EndPoint remoteIpPoint2 = new IPEndPoint(IPAddress.Any, 0);\n        int receiveNum = socket.ReceiveFrom(bytes, ref remoteIpPoint2);\n        print(\"IP: \" + (remoteIpPoint2 as IPEndPoint).Address.ToString() +\n              \"port: \" + (remoteIpPoint2 as IPEndPoint)?.Port.ToString() +\n              \"发来了: \" +\n              Encoding.UTF8.GetString(bytes, 0, receiveNum));\n        //释放关闭套接字\n        socket.Shutdown(SocketShutdown.Both);\n        socket.Close();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240313174602-hwbj0hu",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20240313174602-hwbj0hu",
				"updated": "20240313174606"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现一个相对完善的UDP客户端"
				}
			]
		},
		{
			"ID": "20240313174624-tz1oq35",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240313174624-tz1oq35",
				"updated": "20240313174624"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以上的代码一次只能发送和接受一条消息，随后服务端的运行就会终止"
				}
			]
		},
		{
			"ID": "20240313174624-hifj21p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240313174624-hifj21p",
				"updated": "20240313174732"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过开启一个新线程并使用循环来反复监听消息接收，同时做到不卡主线程，\n接收到消息就验证该消息是否是服务端发来的，如果不是就不处理这条消息，同时还要做到处理消息类型"
				}
			]
		},
		{
			"ID": "20240313174838-sk8pvl9",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240313174838-sk8pvl9",
				"updated": "20240313175503"
			},
			"Children": [
				{
					"ID": "20240313174838-vmf08ny",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313174838-vmf08ny",
						"updated": "20240313174838"
					},
					"Children": [
						{
							"ID": "20240313174838-ltmzi23",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313174838-ltmzi23",
								"updated": "20240313174838"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sendMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​：用于发送消息的队列，公共容器，主线程往"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sendMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​放，发送线程从"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sendMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​取"
								}
							]
						}
					]
				},
				{
					"ID": "20240313174838-s3ls8ay",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313174838-s3ls8ay",
						"updated": "20240313174838"
					},
					"Children": [
						{
							"ID": "20240313174838-z3cjmgl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313174838-z3cjmgl",
								"updated": "20240313174838"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "receiveMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​：用于接收消息的队列，公共容器，接收线程往"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "receiveMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​放，主线程从"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "receiveMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​取"
								}
							]
						}
					]
				},
				{
					"ID": "20240313174838-ql7xxzm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313174838-ql7xxzm",
						"updated": "20240313174838"
					},
					"Children": [
						{
							"ID": "20240313174838-bj5blre",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313174838-bj5blre",
								"updated": "20240313174906"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "isClose"
								},
								{
									"Type": "NodeText",
									"Data": "​：用于控制多线程循环是否结束，让多线程在socket存在时才继续执行"
								}
							]
						}
					]
				},
				{
					"ID": "20240313174838-xg4ltev",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313174838-xg4ltev",
						"updated": "20240313174838"
					},
					"Children": [
						{
							"ID": "20240313174838-df7y4g0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313174838-df7y4g0",
								"updated": "20240313174838"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Update"
								},
								{
									"Type": "NodeText",
									"Data": "​：每帧都检测"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "receiveMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​内是否存在消息，若存在，就将消息输出到控制台和屏幕上"
								}
							]
						}
					]
				},
				{
					"ID": "20240313175326-zdpizo5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313175326-zdpizo5",
						"updated": "20240313175440"
					},
					"Children": [
						{
							"ID": "20240313175326-ql16ucx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313175326-ql16ucx",
								"updated": "20240313175440"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "StartClient"
								},
								{
									"Type": "NodeText",
									"Data": "​：初始化客户端Socket，绑定本机IP和一个端口号，开始发送和接收消息的线程"
								}
							]
						}
					]
				},
				{
					"ID": "20240313174838-sr0cxpi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313174838-sr0cxpi",
						"updated": "20240313175357"
					},
					"Children": [
						{
							"ID": "20240313174838-fee9krz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313174838-fee9krz",
								"updated": "20240313175357"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "SendMsg"
								},
								{
									"Type": "NodeText",
									"Data": "​：发送消息线程主函数，循环检测"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sendMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​内是否有要发送的消息，有就转换为字节数组发送到服务端"
								}
							]
						}
					]
				},
				{
					"ID": "20240313174838-70jw2bn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313174838-70jw2bn",
						"updated": "20240313175503"
					},
					"Children": [
						{
							"ID": "20240313174838-184zj2q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313174838-184zj2q",
								"updated": "20240313175503"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ReceiveMsg"
								},
								{
									"Type": "NodeText",
									"Data": "​：接收消息线程主函数，循环检测是否有消息需要接收，有就接收，验证是否是服务端的消息，将消息传入到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "receiveMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​内"
								}
							]
						}
					]
				},
				{
					"ID": "20240313174838-3nfhu57",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313174838-3nfhu57",
						"updated": "20240313174838"
					},
					"Children": [
						{
							"ID": "20240313174838-m0jytp0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313174838-m0jytp0",
								"updated": "20240313174946"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Send"
								},
								{
									"Type": "NodeText",
									"Data": "​：将外部要发送的消息传入到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sendMessageQueue"
								},
								{
									"Type": "NodeText",
									"Data": "​内，等待发送消息线程将消息转换为字节数组发送到服务端"
								}
							]
						}
					]
				},
				{
					"ID": "20240313174838-sqpf1by",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240313174838-sqpf1by",
						"updated": "20240313174838"
					},
					"Children": [
						{
							"ID": "20240313174838-sskmq24",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240313174838-sskmq24",
								"updated": "20240313174930"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Close"
								},
								{
									"Type": "NodeText",
									"Data": "​：发送一条断联消息，然后关闭并释放客户端Socket，在管理器被销毁时会调用"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240313174733-0bg0hon",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240313174733-0bg0hon",
				"style": "line-height: 22px;",
				"updated": "20240313174811"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\nusing UnityEngine;\n\npublic class UdpNetMgr : MonoBehaviour\n{\n    private static UdpNetMgr instance;\n    public static UdpNetMgr Instance =\u003e instance;\n\n    private EndPoint serverIpPoint;\n\n    private Socket socket;\n    //客户端Socket是否关闭\n    private bool isClose = true;\n\n    //接收消息队列和发送消息队列，在多线程里面可以操作\n    private Queue\u003cBaseMessage\u003e sendQueue = new Queue\u003cBaseMessage\u003e();\n    private Queue\u003cBaseMessage\u003e receiveQueue = new Queue\u003cBaseMessage\u003e();\n\n    private byte[] cacheBytes = new byte[512];\n\n    private void Awake()\n    {\n        instance = this;\n        DontDestroyOnLoad(gameObject);\n    }\n\n    private void Update()\n    {\n        if (receiveQueue.Count \u003e 0)\n        {\n            BaseMessage baseMsg = receiveQueue.Dequeue();\n            switch (baseMsg)\n            {\n                case PlayerMessage msg:\n                    print(msg.playerID);\n                    print(msg.playerData.name);\n                    print(msg.playerData.atk);\n                    print(msg.playerData.lev);\n                    break;\n            }\n        }\n    }\n\n    private void OnDestroy()\n    {\n        Close();\n    }\n\n    // 启动客户端socket相关的方法\n    public void StartClient(string ip, int port)\n    {\n        //如果当前是开启状态就不用再开了\n        if (!isClose)\n            return;\n\n        //先记录服务器地址，一会发消息时会使用\n        serverIpPoint = new IPEndPoint(IPAddress.Parse(ip), port);\n        IPEndPoint clientIpPort = new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 8082);\n        try\n        {\n            socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);\n            socket.Bind(clientIpPort);\n            isClose = false;\n            print(\"客户端网络启动\");\n            ThreadPool.QueueUserWorkItem(ReceiveMsg);\n            ThreadPool.QueueUserWorkItem(SendMsg);\n        }\n        catch (System.Exception e)\n        {\n            print(\"启动Socket出问题：\" + e.Message);\n        }\n    }\n\n    private void ReceiveMsg(object obj)\n    {\n        EndPoint tempIpPoint = new IPEndPoint(IPAddress.Any, 0);\n        int nowIndex;\n        int msgID;\n        int msgLength;\n        while (!isClose)\n        {\n            if (socket != null \u0026\u0026 socket.Available \u003e 0)\n            {\n                try\n                {\n                    socket.ReceiveFrom(cacheBytes, ref tempIpPoint);\n                    if (!tempIpPoint.Equals(serverIpPoint))              //如果发现发消息的不是服务器，就不处理这个消息\n                        continue;\n                    //处理服务器发来的消息\n                    nowIndex = 0;\n                    msgID = BitConverter.ToInt32(cacheBytes, nowIndex);         //解析ID\n                    nowIndex += 4;\n                    msgLength = BitConverter.ToInt32(cacheBytes, nowIndex);     //解析长度\n                    nowIndex += 4;\n                    //解析消息体\n                    BaseMessage msg = null;\n                    switch (msgID)\n                    {\n                        case 1001:\n                            msg = new PlayerMessage();\n                            //反序列化消息体\n                            msg.Reading(cacheBytes, nowIndex);\n                            break;\n                    }\n                    if (msg != null)\n                        receiveQueue.Enqueue(msg);\n                }\n                catch (SocketException e)\n                {\n                    print(\"接收消息出错：\" + e.SocketErrorCode + e.Message);\n                }\n                catch (System.Exception e)\n                {\n                    print(\"接收消息出错(非网络原因)：\" + e.Message);\n                }\n            }\n        }\n    }\n\n    //发送消息\n    private void SendMsg(object obj)\n    {\n        while (!isClose)\n        {\n            lock (sendQueue)\n            {\n                if (socket != null \u0026\u0026 sendQueue.Count \u003e 0)\n                {\n                    try\n                    {\n                        socket.SendTo(sendQueue.Dequeue().Writeing(), serverIpPoint);\n                    }\n                    catch (SocketException e)\n                    {\n                        print(\"发送消息出错：\" + e.SocketErrorCode + e.Message);\n                    }\n                }\n            }\n        }\n    }\n\n    public void Send(BaseMessage msg)\n    {\n        lock (sendQueue)\n        {\n            sendQueue.Enqueue(msg);\n        }\n    }\n\n    //关闭socket\n    public void Close()\n    {\n        if (socket != null)\n        {\n            isClose = true;\n            QuitMessage msg = new QuitMessage();\n            //发送一个退出消息给服务器，让其移除记录\n            socket.SendTo(msg.Writeing(), serverIpPoint);\n            socket.Shutdown(SocketShutdown.Both);\n            socket.Close();\n            socket = null;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}