{
	"ID": "20240131155942-yevq0jr",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240131155942-yevq0jr",
		"title": "UH2S1L11——元表",
		"type": "doc",
		"updated": "20240302170420"
	},
	"Children": [
		{
			"ID": "20240131161038-kwt83h3",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240131161038-kwt83h3",
				"updated": "20240131161040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "元表"
				}
			]
		},
		{
			"ID": "20240131161043-lgav51s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131161043-lgav51s",
				"updated": "20240131174736"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "任何表变量都可以作为另一个表变量的元表，任何表变量都可以有自己的元表\n当我们"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "对有元表的表中进行一些特定操作时，会执行其元表中的内容，"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "即元表内存储的特定方法将改变其对应表的特定方法"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);\"}"
				}
			]
		},
		{
			"ID": "20240131155942-sivv5xi",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20240131155942-sivv5xi",
				"updated": "20240131183144"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20240131160833-txpx1lo",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240131160833-txpx1lo",
						"updated": "20240131161210"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在Lua的"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "table"
						},
						{
							"Type": "NodeText",
							"Data": "​中我们可以访问对应的 key 来得到 value 值，但是却无法对两个"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "table"
						},
						{
							"Type": "NodeText",
							"Data": "​进行操作(比如相加)。"
						}
					]
				},
				{
					"ID": "20240131160833-p2l17ow",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240131160833-p2l17ow",
						"updated": "20240131163331"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "因此 Lua 提供了元表(Metatable)，"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "允许我们改变 table 的行为，每个行为关联了对应的元方法。"
						}
					]
				},
				{
					"ID": "20240131160833-sffdv18",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240131160833-sffdv18",
						"updated": "20240131160833"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "例如，使用元表我们可以定义 Lua 如何计算两个 table 的相加操作 a+b。"
						}
					]
				},
				{
					"ID": "20240131160833-9zkkozn",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240131160833-9zkkozn",
						"updated": "20240131160907"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "当 Lua 试图对两个表进行相加时，先检查两者之一是否有元表，之后检查是否有一个叫 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "__add"
						},
						{
							"Type": "NodeText",
							"Data": "​ 的字段，\n若找到，则调用对应的值。 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "__add"
						},
						{
							"Type": "NodeText",
							"Data": "​ 等即时字段，其对应的值（往往是一个函数或是 table）就是\"元方法\"。"
						}
					]
				},
				{
					"ID": "20240131160921-gxq3c3c",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20240131160921-gxq3c3c",
						"style": "text-align: right;",
						"updated": "20240131162251"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"Properties": {
								"parent-style": "text-align: right;"
							},
							"TextMarkType": "a",
							"TextMarkAHref": "https://www.runoob.com/lua/lua-metatables.html",
							"TextMarkTextContent": "———— Lua 元表(Metatable) | 菜鸟教程 (runoob.com)"
						},
						{
							"Type": "NodeKramdownSpanIAL",
							"Data": "{: parent-style=\"text-align: right;\"}"
						}
					]
				}
			]
		},
		{
			"ID": "20240131183148-sb9scm9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131183148-sb9scm9",
				"updated": "20240131183200"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240131183201-bovitdm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131183201-bovitdm",
				"style": "line-height: 22px;",
				"updated": "20240131185512"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "setmetatable()\t\t--设置元表\ngetmetatable()\t\t--获取元表\n__tostring\t\t\t--设置表转字符串的关键字\n__call\t\t\t\t--设置使表能够函数一样执行的方法\n-- 运算符重载关键字请直接看相关部分\n__index\t\t\t\t--设置当外部索引某个索引查找值但表内不存在该索引时，会通过表的元表的__index指向的表继续寻找\n__newindex\t\t\t--当为表的某个索引赋值时，如果表不存在某个索引，则会将值复制到表的元表的__newindex指向的表中\nrawget()\t\t\t--无视元表的__index通过索引查找表中的值\nrawset()\t\t\t--无视元表的__newindex为表的某个索引赋值\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131160938-5hw2vfr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131160938-5hw2vfr",
				"name": "setmetatable()",
				"updated": "20240131161040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "设置元表"
				}
			]
		},
		{
			"ID": "20240131161407-495jvxm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131161407-495jvxm",
				"updated": "20240131161040"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "setmetatable(table, metatable)"
				},
				{
					"Type": "NodeText",
					"Data": "​给指定表设置元表。第一个参数是要设置元表的表，第二个参数是要作为元表的表"
				}
			]
		},
		{
			"ID": "20240131161535-2a888ln",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131161535-2a888ln",
				"style": "line-height: 22px;",
				"updated": "20240131161040"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta = {}\nlocal myTable = {}\nsetmetatable(myTable, meta)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131161628-33ut515",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131161628-33ut515",
				"updated": "20240131163257"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不过用空表设置为一个表的元表是没有作用的"
				}
			]
		},
		{
			"ID": "20240131161646-gp5beek",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131161646-gp5beek",
				"name": "__tostring",
				"updated": "20240131162822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特定操作 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__tostring"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240131162005-ht0kjcx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131162005-ht0kjcx",
				"updated": "20240131162822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当把非字符串或者数字的变量传入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "print"
				},
				{
					"Type": "NodeText",
					"Data": "​函数时，会自动将其转为字符串再输出，而没有元表的表直接转字符串会是一些列表号"
				}
			]
		},
		{
			"ID": "20240131162329-c5jn1da",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131162329-c5jn1da",
				"style": "line-height: 22px;",
				"updated": "20240131162822"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta = {}\nlocal myTable = {}\nsetmetatable(myTable, meta)\nprint(myTable)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131162351-ee78zut",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131162351-ee78zut",
				"style": "line-height: 22px;",
				"updated": "20240131162822"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "table: 00C19C40\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131162403-ngo7i3v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131162403-ngo7i3v",
				"updated": "20240131164629"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而我们为表设置元表时，可以在表的元表里实现转字符串的方法，这个方法名就是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__tostring"
				},
				{
					"Type": "NodeText",
					"Data": "​，使用它可以修改转字符串的逻辑"
				}
			]
		},
		{
			"ID": "20240131162432-kg9dgov",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131162432-kg9dgov",
				"style": "line-height: 22px;",
				"updated": "20240131162822"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"**********特定操作-__tostring************\")\nlocal meta2 = {\n    __tostring = function()\n        return \"唐老狮\"\n    end\n}\nlocal myTable2 = {}\nsetmetatable(myTable2, meta2)\nprint(myTable2)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131162449-oh8jo8l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131162449-oh8jo8l",
				"style": "line-height: 22px;",
				"updated": "20240131162822"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "**********特定操作-__tostring************\n唐老狮\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131162516-w1g4kto",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131162516-w1g4kto",
				"updated": "20240131163141"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是如果想让表转字符串的方法能够调用表内的变量的话，需要我们为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__tostring"
				},
				{
					"Type": "NodeText",
					"Data": "​函数添加一个参数，\n并默认该参数传入了调用方法的表自己，再调用传入的表中的变量"
				}
			]
		},
		{
			"ID": "20240131163145-ihrtchj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131163145-ihrtchj",
				"style": "line-height: 22px;",
				"updated": "20240131163217"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"**********特定操作-__tostring************\")\nlocal meta2 = {\n    __tostring = function(t)\n        return t.name\n    end\n}\nlocal myTable2 = {\n    name = \"唐老狮2\"\n}\nsetmetatable(myTable2, meta2)\nprint(myTable2)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131163217-egbg2h8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131163217-egbg2h8",
				"style": "line-height: 22px;",
				"updated": "20240131163221"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "**********特定操作-__tostring************\n唐老狮2\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131163421-vjt7bpf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131163421-vjt7bpf",
				"name": "__call",
				"updated": "20240131163435"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特定操作 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__call"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240131163430-e9hng59",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131163430-e9hng59",
				"updated": "20240131164553"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在表对应的元表实现"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__call"
				},
				{
					"Type": "NodeText",
					"Data": "​函数，可以让表像函数那样调用（不设置元表不实现该方法强行让表像函数那样调用会报错）"
				}
			]
		},
		{
			"ID": "20240131163648-i8l0lad",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131163648-i8l0lad",
				"style": "line-height: 22px;",
				"updated": "20240131163752"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"**********特定操作-__call************\")\nlocal meta3 = {\n    __tostring = function(t)\n        return t.name\n    end,\n    __call = function ()\n        print(\"call!\")\n    end\n}\nlocal myTable3 = {\n    name = \"唐老狮\"\n}\nsetmetatable(myTable3, meta3)\nmyTable3()\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131163753-thlsebj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131163753-thlsebj",
				"style": "line-height: 22px;",
				"updated": "20240131163800"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "**********特定操作-__call************\ncall!\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131163808-xio0997",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131163808-xio0997",
				"updated": "20240131163951"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果我们想为函数添加参数，直接在元表的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__call"
				},
				{
					"Type": "NodeText",
					"Data": "​参数列表里添加一个参数是不可行的，这个参数默认会传入元表对应的表自己"
				}
			]
		},
		{
			"ID": "20240131163944-iykcmdc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131163944-iykcmdc",
				"style": "line-height: 22px;",
				"updated": "20240131164059"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"**********特定操作-__call************\")\nlocal meta3 = {\n    __tostring = function(t)\n        return t.name\n    end,\n    __call = function(a)\n        print(a)\n        print(\"call!\")\n    end\n}\nlocal myTable3 = {\n    name = \"唐老狮\"\n}\nsetmetatable(myTable3, meta3)\nmyTable3(1)"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131164007-sdduu9i",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131164007-sdduu9i",
				"style": "line-height: 22px;",
				"updated": "20240131164139"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "**********特定操作-__call************\n唐老狮\t\t\t--很明显这里输出的是myTable3.name\ncall!\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131164140-t4btvkx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131164140-t4btvkx",
				"updated": "20240131164310"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此，我们需要在元表的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__call"
				},
				{
					"Type": "NodeText",
					"Data": "​参数列表里添加两个参数及以上，第一个参数默认会传入元表对应的表自己，第二个参数起才是外部可用的参数"
				}
			]
		},
		{
			"ID": "20240131164251-81qbsyr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131164251-81qbsyr",
				"style": "line-height: 22px;",
				"updated": "20240131164252"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"**********特定操作-__call************\")\nlocal meta3 = {\n    __tostring = function(t)\n        return t.name\n    end,\n    __call = function(self, a)\n        print(a)\n        print(\"call!\")\n    end\n}\nlocal myTable3 = {\n    name = \"唐老狮\"\n}\nsetmetatable(myTable3, meta3)\nmyTable3(1)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131164254-vjd4x1h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131164254-vjd4x1h",
				"style": "line-height: 22px;",
				"updated": "20240131164258"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "**********特定操作-__call************\n1\ncall!\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131164634-4t0uvio",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131164634-4t0uvio",
				"updated": "20240131164731"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特定操作-运算符重载"
				}
			]
		},
		{
			"ID": "20240131164650-84xmrnk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131164650-84xmrnk",
				"updated": "20240131164854"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般情况下，我们无法让两个表进行相加等运算，但是在其元表里我们可以实现运算符重载，实现相加逻辑，让两个表可以相加"
				}
			]
		},
		{
			"ID": "20240131164855-v09rqrm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131164855-v09rqrm",
				"style": "line-height: 22px;",
				"updated": "20240131165127"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"**********特定操作-运算符重载************\")\nlocal meta4 = {\n    __add = function(t1, t2)\n        return 5\n    end\n}\nlocal myTable4 = {}\nsetmetatable(myTable4, meta4)\nlocal myTable5 = {}\nprint(myTable4 + myTable5)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131165133-qlom2li",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131165133-qlom2li",
				"style": "line-height: 22px;",
				"updated": "20240131165134"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "**********特定操作-运算符重载************\n5\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131171720-zoe04c8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131171720-zoe04c8",
				"style": "line-height: 22px;",
				"updated": "20240131171820"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1\t\t--可见，是meta4的运算符重载起作用了\n25\t\t--可见，是meta5的运算符重载起作用了\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131165152-ppnrg8b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131165152-ppnrg8b",
				"updated": "20240131165221"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__add"
				},
				{
					"Type": "NodeText",
					"Data": "​方法可以需要两个参数，默认传入加号两边的内容"
				}
			]
		},
		{
			"ID": "20240131165226-j8hgzjk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131165226-j8hgzjk",
				"style": "line-height: 22px;",
				"updated": "20240131165314"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"**********特定操作-运算符重载************\")\nlocal meta4 = {\n    __add = function(t1, t2)\n        return t1.age + t2.age\n    end\n}\nlocal myTable4 = {age = 1}\nsetmetatable(myTable4, meta4)\nlocal myTable5 = {age = 2}\nprint(myTable4 + myTable5)"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131165252-dsttg5e",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131165252-dsttg5e",
				"style": "line-height: 22px;",
				"updated": "20240131165328"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "**********特定操作-运算符重载************\n3\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131165915-x5gp79v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131165915-x5gp79v",
				"updated": "20240131170050"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其他运算符的重载与上述例子差不多"
				}
			]
		},
		{
			"ID": "20240131170101-kdu5ebm",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240131170101-kdu5ebm",
				"updated": "20240131170107"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "算数运算符"
				}
			]
		},
		{
			"ID": "20240131170308-wnger38",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131170308-wnger38",
				"style": "line-height: 22px;",
				"updated": "20240131173123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta4 = {\n    -- +\n    __add = function(t1, t2)\n        return t1.age + t2.age\n    end,\n    -- -\n    __sub = function(t1, t2)\n        return t1.age - t2.age\n    end,\n    -- *\n    __mul = function(t1, t2)\n        return t1.age * t2.age\n    end,\n    -- /\n    __div = function(t1, t2)\n        return t1.age / t2.age\n    end,\n    -- %\n    __mod = function(t1, t2)\n        return t1.age % t2.age\n    end,\n    -- ^\n    __pow = function(t1, t2)\n        return t1.age ^ t2.age\n    end\n}\nlocal myTable4 = {age = 1, num = 2}\nsetmetatable(myTable4, meta4)\nlocal myTable5 = {age = 2, num = 5}\n\nprint(myTable4 + myTable5)\nprint(myTable4 - myTable5)\nprint(myTable4 * myTable5)\nprint(myTable4 / myTable5)\nprint(myTable4 % myTable5)\nprint(myTable4 ^ myTable5)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131173039-0qm2fzf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131173039-0qm2fzf",
				"style": "line-height: 22px;",
				"updated": "20240131173125"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "3\n-1\n2\n0.5\n1\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131172155-61q7yeo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131172155-61q7yeo",
				"updated": "20240131172201"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当两个表参与"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "算数运算符计算"
				},
				{
					"Type": "NodeText",
					"Data": "时，只需要有一个表的元表存在运算符重载即可进行计算（只要传入的两个表能够满足运算符重载的逻辑）\n运算符左边的表作为第一个参数传入，运算符左边的表作为第二个参数传入（条件运算符不行）"
				}
			]
		},
		{
			"ID": "20240131172155-97g9lou",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131172155-97g9lou",
				"style": "line-height: 22px;",
				"updated": "20240131172155"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta4 = {\n    __pow = function(t1, t2)\n        return t1.age ^ t2.age\n    end\n}\n\nlocal myTable4 = {age = 1, num = 2}\nsetmetatable(myTable4, meta4)\nlocal myTable5 = {age = 2, num = 5}\n\nprint(myTable4 ^ myTable5)\nprint(myTable5 ^ myTable4)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131172155-k7k9fu4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131172155-k7k9fu4",
				"style": "line-height: 22px;",
				"updated": "20240131172155"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1\n2\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131172155-c3a6s5w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131172155-c3a6s5w",
				"updated": "20240131172537"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果运算时"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "text",
					"TextMarkTextContent": "两个表的元表都存在相同算数运算符的重载且逻辑不同，则以运算符左边表的元表的运算符重载为准"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20240131172155-4nkd4g5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131172155-4nkd4g5",
				"style": "line-height: 22px;",
				"updated": "20240131172155"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta4 = {\n    __pow = function(t1, t2)\n        return t1.age ^ t2.age\n    end\n}\nlocal meta5 = {\n    __pow = function(t1, t2)\n        return t1.num ^ t2.num\n    end\n}\n\nlocal myTable4 = {age = 1, num = 2}\nsetmetatable(myTable4, meta4)\nlocal myTable5 = {age = 2, num = 5}\nsetmetatable(myTable5, meta5)\n\nprint(myTable4 ^ myTable5)\nprint(myTable5 ^ myTable4)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131170356-f5k2xav",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240131170356-f5k2xav",
				"updated": "20240131170410"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "条件运算符"
				}
			]
		},
		{
			"ID": "20240131170656-bnb1zpu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131170656-bnb1zpu",
				"updated": "20240131172648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "官方没有提供"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "~="
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;="
				},
				{
					"Type": "NodeText",
					"Data": "​的重载，需要自己取反"
				}
			]
		},
		{
			"ID": "20240131170406-ugk59nf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131170406-ugk59nf",
				"style": "line-height: 22px;",
				"updated": "20240131170410"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta4 = {\n    -- ==\n    __eq = function(t1, t2)\n        return t1.age == t2.age\n    end,\n    -- \u003c\n    __lt = function(t1, t2)\n        return t1.age \u003c t2.age\n    end,\n    -- \u003c=\n    __le = function(t1, t2)\n        return t1.age \u003c= t2.age\n    end,\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131172413-u8i8kzh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131172413-u8i8kzh",
				"updated": "20240131172523"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "与算数运算符不同，如果要用条件运算符来比较两个表，"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "则两个表的元表必须要一致！才能准确的调用方法"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20240131172215-ov2j0sp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131172215-ov2j0sp",
				"style": "line-height: 22px;",
				"updated": "20240131172333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta4 = {\n    -- ==\n    __eq = function(t1, t2)\n        return t1.age == t2.age\n    end\n}\nlocal myTable4 = {age = 1, num = 2}\nsetmetatable(myTable4, meta4)\nlocal myTable5 = {age = 1, num = 5}\n\nprint(myTable4 == myTable5)\nsetmetatable(myTable5, meta4)\nprint(myTable4 == myTable5)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131172337-0zeh5oa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131172337-0zeh5oa",
				"style": "line-height: 22px;",
				"updated": "20240131172612"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "false\t\t--添加相同元表前\ntrue\t\t--添加相同元表后\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131172613-zog0ae3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131172613-zog0ae3",
				"updated": "20240131172836"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从这里我们也可以知道为什么不需要设置"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026gt;="
				},
				{
					"Type": "NodeText",
					"Data": "​的重载，因为这两个就是调换了传入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;="
				},
				{
					"Type": "NodeText",
					"Data": "​的重载的参数顺序而已"
				}
			]
		},
		{
			"ID": "20240131172838-07gkpz8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131172838-07gkpz8",
				"style": "line-height: 22px;",
				"updated": "20240131173238"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta4 = {\n    -- ==\n    __eq = function(t1, t2)\n        return t1.age == t2.age\n    end,\n    -- \u003c\n    __lt = function(t1, t2)\n        return t1.age \u003c t2.age\n    end,\n    -- \u003c=\n    __le = function(t1, t2)\n        return t1.age \u003c= t2.age\n    end,\n}\nlocal myTable4 = {age = 1, num = 2}\nsetmetatable(myTable4, meta4)\nlocal myTable5 = {age = 2, num = 5}\n\nsetmetatable(myTable5, meta4)\nprint(myTable4 \u003e myTable5)\nprint(myTable4 \u003c myTable5)\nprint(myTable5 \u003e myTable4)\nprint(myTable5 \u003c myTable4)\nprint(myTable4 \u003e= myTable5)\nprint(myTable4 \u003c= myTable5)\nprint(myTable5 \u003e= myTable4)\nprint(myTable5 \u003c= myTable4)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131173008-5uaw6nt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131173008-5uaw6nt",
				"style": "line-height: 22px;",
				"updated": "20240131173247"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "false\ntrue\ntrue\nfalse\nfalse\ntrue\ntrue\nfalse"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131170741-inskzi2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240131170741-inskzi2",
				"updated": "20240131170748"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "拼接运算符"
				}
			]
		},
		{
			"ID": "20240131170748-96hc7jc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131170748-96hc7jc",
				"style": "line-height: 22px;",
				"updated": "20240131173407"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta4 = {\n    __concat = function(t1, t2)\n        return t1.age .. t2.age\n    end\n}\nlocal myTable4 = {age = 1, num = 2}\nsetmetatable(myTable4, meta4)\nlocal myTable5 = {age = 2, num = 5}\n\nprint(myTable4 .. myTable5)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131173015-4qqdc30",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131173015-4qqdc30",
				"style": "line-height: 22px;",
				"updated": "20240131173413"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "12\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131173418-4n8yk3q",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131173418-4n8yk3q",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特定操作 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__index"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__newindex"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240131183102-l3mptqj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240131183102-l3mptqj",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "_"
						}
					]
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "_"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "index"
				}
			]
		},
		{
			"ID": "20240131173436-es23sx8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131173436-es23sx8",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__index"
				},
				{
					"Type": "NodeText",
					"Data": "​是当元表对应的表找不到某一个索引时，会回到元表里，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__index"
				},
				{
					"Type": "NodeText",
					"Data": "​指定的表去找索引"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "（"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "__index"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "最好在外部赋值！）"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20240131173659-xf38coy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131173659-xf38coy",
				"style": "line-height: 22px;",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "-- 无__index\nlocal meta6 = {\n    age = 6\n}\nlocal myTable6 = {}\nsetmetatable(myTable6, meta6)\nprint(myTable6.age)\n\n-- __index指向自己\nlocal meta6 = {\n    age = 6\n}\nmeta6.__index = meta6\nlocal myTable6 = {}\nsetmetatable(myTable6, meta6)\nprint(myTable6.age)\n\n-- __index指向新表\nlocal meta6 = {}\nmeta6.__index = {age = 6}\nlocal myTable6 = {}\nsetmetatable(myTable6, meta6)\nprint(myTable6.age)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131173819-is8kycz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131173819-is8kycz",
				"style": "line-height: 22px;",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "nil\n6\t\t--通过元表中__index提供的表找到的age\n6\t\t--通过元表中__index提供的表找到的age\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131175002-b8k8xuw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131175002-b8k8xuw",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "注意！不建议将"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "__index"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "写在元表内部，尤其是将"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "__index"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "赋值为元表自己时，"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				},
				{
					"Type": "NodeText"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "__index"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "应当在外面进行赋值，否则会出现值错误的情况，"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "\n可能的原因是在表内为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__index"
				},
				{
					"Type": "NodeText",
					"Data": "​赋值时，元表自己还没有赋值完毕导致"
				}
			]
		},
		{
			"ID": "20240131175538-st2jxui",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131175538-st2jxui",
				"style": "line-height: 22px;",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta6 = {\n    age = 1,\n    __index = meta6\n}\nlocal myTable6 = {}\nsetmetatable(myTable6, meta6)\nprint(myTable6.age)\n\nlocal meta6 = {\n    age = 6\n}\nlocal meta6 = {\n    age = 1,\n    __index = meta6\n}\nlocal myTable6 = {}\nsetmetatable(myTable6, meta6)\nprint(myTable6.age)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131175557-immp0mn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131175557-immp0mn",
				"style": "line-height: 22px;",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "nil\t\t--原本应当是1，但是这里没有赋值\n6\t\t--原本应当是1，但是这里却是之前meta6的值\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131182407-ty8yemt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131182407-ty8yemt",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__index"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "是可以赋值元表自己的元表"
				},
				{
					"Type": "NodeText",
					"Data": "，因此当外部获取表的某个索引的值而表不存在那个索引时，外部可以找到表的元表的元表获取值"
				}
			]
		},
		{
			"ID": "20240131182532-xqzmyxq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131182532-xqzmyxq",
				"style": "line-height: 22px;",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta6Father = {\n    age = 1\n}\nmeta6Father.__index = meta6Father\n\nlocal meta6 = {}\nmeta6.__index = meta6Father\nsetmetatable(meta6, meta6Father)\n\nlocal myTable6 = {}\nsetmetatable(myTable6, meta6)\n\nprint(myTable6.age)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131183010-mcri4wn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131183010-mcri4wn",
				"style": "line-height: 22px;",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131183117-bteipbl",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240131183117-bteipbl",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "_"
						}
					]
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "_"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "newindex"
				}
			]
		},
		{
			"ID": "20240131174130-s8sreab",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131174130-s8sreab",
				"updated": "20240131184337"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__newindex"
				},
				{
					"Type": "NodeText",
					"Data": "​ 当为表的某个索引赋值时，如果表不存在某个索引，则会将值复制到表的元表的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "__newindex"
				},
				{
					"Type": "NodeText",
					"Data": "​指向的表中"
				}
			]
		},
		{
			"ID": "20240131184047-4wpl0hx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131184047-4wpl0hx",
				"style": "line-height: 22px;",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta7 = {}\nmeta7.__newindex = {}\nlocal myTable7 = {}\nsetmetatable(myTable7, meta7)\nmyTable7.age = 1\nprint(myTable7.age)"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131184126-klv4v4e",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131184126-klv4v4e",
				"style": "line-height: 22px;",
				"updated": "20240131184330"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131184105-036shb3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131184105-036shb3",
				"name": "getmetatable()",
				"updated": "20240131184116"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取元表"
				}
			]
		},
		{
			"ID": "20240131184117-rf64zxa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131184117-rf64zxa",
				"style": "line-height: 22px;",
				"updated": "20240131184531"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta = {\n    age = 1,\n}\nlocal myTable = {}\nsetmetatable(myTable, meta)\nprint(getmetatable(myTable).age)"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131184504-g7b520j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131184504-g7b520j",
				"style": "line-height: 22px;",
				"updated": "20240131184537"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131184538-xe52ze9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131184538-xe52ze9",
				"name": "rawget()",
				"updated": "20240131184828"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "无视元表"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "_"
						}
					]
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "_"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "index查找"
				}
			]
		},
		{
			"ID": "20240131184646-gx0gel1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131184646-gx0gel1",
				"style": "line-height: 22px;",
				"updated": "20240131184925"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta = {\n    age = 1,\n}\nmeta.__index = meta\nlocal myTable = {}\nlocal myTable1 = { age = 1 }\nsetmetatable(myTable, meta)\nprint(myTable.age)\nprint(rawget(myTable1, \"age\"))\nprint(rawget(myTable, \"age\"))"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131184637-plhhi96",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131184637-plhhi96",
				"style": "line-height: 22px;",
				"updated": "20240131184931"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1\n1\nnil\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131185006-w6f8ugo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131185006-w6f8ugo",
				"name": "rawset()",
				"updated": "20240131185232"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "无视元表"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "_"
						}
					]
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "_"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "newIndex赋值"
				}
			]
		},
		{
			"ID": "20240131185021-20hk63n",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131185021-20hk63n",
				"style": "line-height: 22px;",
				"updated": "20240131185324"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local meta7 = {}\nmeta7.__newindex = {}\nlocal myTable7 = {}\nsetmetatable(myTable7, meta7)\nmyTable7.age = 1\nprint(myTable7.age)\nrawset(myTable7, \"age\", 2)\nprint(myTable7.age)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131185325-blvq509",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131185325-blvq509",
				"style": "line-height: 22px;",
				"updated": "20240131185335"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "nil\n2\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}