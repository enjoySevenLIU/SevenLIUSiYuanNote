{
	"ID": "20240131132430-e1dcvs0",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240131132430-e1dcvs0",
		"title": "UH2S1L9——特殊用法",
		"updated": "20240302170415"
	},
	"Children": [
		{
			"ID": "20240131133337-pvgkvon",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131133337-pvgkvon",
				"updated": "20240131133346"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240131133346-9vyhcuz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131133346-9vyhcuz",
				"style": "line-height: 22px;",
				"updated": "20240131140742"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "... and ... or ...\t\t--使用Lua的and与or的特性，模拟的一个三目运算符\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131132430-wpm2659",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131132430-wpm2659",
				"updated": "20240131133332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多变量赋值"
				}
			]
		},
		{
			"ID": "20240131133059-iebzg4u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131133059-iebzg4u",
				"updated": "20240131133332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一行代码可以为多个变量赋值，如果后面的值不够，则后面的变量自动补空，如果后面的值过多，则多余的值被忽略"
				}
			]
		},
		{
			"ID": "20240131133147-mb9ulkp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131133147-mb9ulkp",
				"style": "line-height: 22px;",
				"updated": "20240131133332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"**********多变量赋值************\")\nlocal a, b, c = 1, 2, \"123\"\nprint(a)\nprint(b)\nprint(c)\n\nlocal a, b, c = 1, 2\nprint(a)\nprint(b)\nprint(c)    --nil\n\nlocal a, b, c = 1, 2, 3, 4, 5, 6\nprint(a)\nprint(b)\nprint(c)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131133250-rfiud92",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131133250-rfiud92",
				"style": "line-height: 22px;",
				"updated": "20240131133332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "**********多变量赋值************\n1\n2\n123\n1\n2\nnil\n1\n2\n3\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131133320-r0n7dq4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131133320-r0n7dq4",
				"updated": "20240131133326"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多返回值"
				}
			]
		},
		{
			"ID": "20240131133538-c1oc28x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131133538-c1oc28x",
				"updated": "20240131133635"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "函数可以返回多个值，用几个变量接收就有几个值，如果少了，就少接几个，如果多了就自动补空"
				}
			]
		},
		{
			"ID": "20240131133510-5mtd6d6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131133510-5mtd6d6",
				"style": "line-height: 22px;",
				"updated": "20240131133326"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"**********多返回值************\")\nfunction Test()\n    return 10, 20, 30, 40\nend\n\na, b, c = Test()\nprint(a)\nprint(b)\nprint(c)\n\na, b, c, d, e = Test()\nprint(a)\nprint(b)\nprint(c)\nprint(d)\nprint(e)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131133523-qtdm34w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131133523-qtdm34w",
				"style": "line-height: 22px;",
				"updated": "20240131133326"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "**********多返回值************\n10\n20\n30\n10\n20\n30\n40\nnil\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131134053-60hu4zf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240131134053-60hu4zf",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "and or"
				}
			]
		},
		{
			"ID": "20240131134057-zxvzpc6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131134057-zxvzpc6",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Lua中，逻辑运算符"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "and"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "or"
				},
				{
					"Type": "NodeText",
					"Data": "​不仅可以连接"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "boolean"
				},
				{
					"Type": "NodeText",
					"Data": "​值，任何值都可以用来连接\n在Lua中，只有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "nil"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "false"
				},
				{
					"Type": "NodeText",
					"Data": "​才认为是假（0也不算假）"
				}
			]
		},
		{
			"ID": "20240131134411-7zney93",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131134411-7zney93",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Lua的逻辑运算符也有短路特性，因此"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "and"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "遇到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "false"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "nil"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "，就返回"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "false"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "nil"
				},
				{
					"Type": "NodeText",
					"Data": "​\n如果"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "and"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "连接起来的值没有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "false"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "nil"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "，它就会返回"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "and"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "连接的最后一个值"
				}
			]
		},
		{
			"ID": "20240131134313-liaf552",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131134313-liaf552",
				"style": "line-height: 22px;",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print( 1 and 2 )\nprint( 0 and 1 )\nprint( nil and 1 )\nprint( false and 1 )\nprint( true and 3 )\nprint( true and 3 and 2 )\nprint( true and \"a\" and nil and 2 )"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131134407-zm22ng4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131134407-zm22ng4",
				"style": "line-height: 22px;",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "2\n1\nnil\nfalse\n3\n2\nnil"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131135007-eh9ewou",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131135007-eh9ewou",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Lua的逻辑运算符也有短路特性，因此"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "or"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "遇到非"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "false"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "nil"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "的值，就直接返回那个值"
				},
				{
					"Type": "NodeText",
					"Data": "\n如果"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "or"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "连接起来的值全部是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "false"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "nil"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "，它就会返回"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "or"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "连接的最后一个值（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "false"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "nil"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "）"
				}
			]
		},
		{
			"ID": "20240131135113-on6im6o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131135113-on6im6o",
				"style": "line-height: 22px;",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print( true or 1 )\nprint( false or 1 )\nprint( nil or 2 )\nprint( 2 or \"1\" or false or nil )\nprint( false or nil or false or nil )"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131135227-gve3us5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131135227-gve3us5",
				"style": "line-height: 22px;",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "true\n1\n2\n2\nnil"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131135353-zqgqfwn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131135353-zqgqfwn",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以，虽然Lua不支持三目运算符，但是Lua可以用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "and"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "or"
				},
				{
					"Type": "NodeText",
					"Data": "​来模拟一个三目运算符，\n即"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "(条件表达式) and 为真时返回值 or 为假时返回值"
				},
				{
					"Type": "NodeText",
					"Data": "​，对应"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "条件表达式 ? 为真时返回值 : 为假时返回值"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240131140004-39grlmk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240131140004-39grlmk",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "思路是这样的："
				}
			]
		},
		{
			"ID": "20240131140630-ukjicix",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240131140630-ukjicix",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"ID": "20240131140630-xtwpvjz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240131140630-xtwpvjz",
						"updated": "20240131140630"
					},
					"Children": [
						{
							"ID": "20240131140630-msn85nd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240131140630-msn85nd",
								"updated": "20240131140630"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当前面的条件表达式为非"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "false"
								},
								{
									"Type": "NodeText",
									"Data": "​或者"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "nil"
								},
								{
									"Type": "NodeText",
									"Data": "​时，由于无假返回真，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "(条件表达式) and 为真时返回值"
								},
								{
									"Type": "NodeText",
									"Data": "​返回"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "为真时返回值"
								},
								{
									"Type": "NodeText",
									"Data": "​，\n此时就有"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "为真时返回值 or 为假时返回值"
								},
								{
									"Type": "NodeText",
									"Data": "​，由于有真返回真，因此先返回前面的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "为真时返回值"
								},
								{
									"Type": "NodeText",
									"Data": "​\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240131140631-4xm217v",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240131140631-4xm217v"
					},
					"Children": [
						{
							"ID": "20240131140631-5yhbe32",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240131140631-5yhbe32"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当前面的条件表达式为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "false"
								},
								{
									"Type": "NodeText",
									"Data": "​或者"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "nil"
								},
								{
									"Type": "NodeText",
									"Data": "​时，由于有假返回假，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "(条件表达式) and 为真时返回值"
								},
								{
									"Type": "NodeText",
									"Data": "​返回"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "false"
								},
								{
									"Type": "NodeText",
									"Data": "​或者"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "nil"
								},
								{
									"Type": "NodeText",
									"Data": "​，\n此时就有"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "false/nil or 为假时返回值"
								},
								{
									"Type": "NodeText",
									"Data": "​，由于有真返回真，因此返回后面的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "为假时返回值"
								},
								{
									"Type": "NodeText",
									"Data": "​（即使后面也是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "false"
								},
								{
									"Type": "NodeText",
									"Data": "​或者"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "nil"
								},
								{
									"Type": "NodeText",
									"Data": "​，也是返回后面的那个）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240131135514-4x2yclh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131135514-4x2yclh",
				"style": "line-height: 22px;",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local x = 3\nlocal y = 2\nlocal result = (x \u003e y) and x or y\nprint(result)\n\nlocal x = 1\nlocal y = 2\nlocal result = (x \u003e y) and x or y\nprint(result)"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240131135731-bljrfa3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240131135731-bljrfa3",
				"style": "line-height: 22px;",
				"updated": "20240131140755"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "3\n2\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}