{
	"ID": "20240202140941-m7iuisv",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240202140941-m7iuisv",
		"title": "UH2S2L6——全局函数获取",
		"updated": "20240302170538"
	},
	"Children": [
		{
			"ID": "20240202160902-90fn0p8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240202160902-90fn0p8",
				"updated": "20240202160909"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240202160909-ak70kjd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240202160909-ak70kjd",
				"style": "line-height: 22px;",
				"updated": "20240203021154"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "[CSharpCallLua]\t\t\t//使委托可以接收Lua方法的特性，添加特性后需要使用Generate Code\nLuaFunction\t\t\t\t//xLua提供的委托，可以接收各种类型的Lua全局函数，建议少用，因为会产生垃圾\nluaFunction.Call()\t\t//执行委托，需要传入参数，会返回object数组\nluaFunction.Dispose()\t//销毁luaFunction，若不销毁，则将一直占用内存！\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240202140941-3zpj2oi",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240202140941-3zpj2oi",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "全局函数的获取"
				}
			]
		},
		{
			"ID": "20240203011151-hlpiv8l",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240203011151-hlpiv8l",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"ID": "20240203011151-q37tw46",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"fold": "1",
						"id": "20240203011151-q37tw46",
						"updated": "20240203011151"
					},
					"Children": [
						{
							"ID": "20240203011151-rfpwvzp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240203011151-rfpwvzp",
								"updated": "20240203011151"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "无参无返回"
								}
							]
						},
						{
							"ID": "20240203011151-1y6a09u",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20240203011151-1y6a09u",
								"updated": "20240203011151"
							},
							"Children": [
								{
									"ID": "20240203011151-t600br8",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240203011151-t600br8",
										"updated": "20240203011151"
									},
									"Children": [
										{
											"ID": "20240203011151-wlz672t",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240203011151-wlz672t",
												"updated": "20240203011151"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "自定义委托"
												}
											]
										}
									]
								},
								{
									"ID": "20240203011151-nyoeita",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240203011151-nyoeita",
										"updated": "20240203011151"
									},
									"Children": [
										{
											"ID": "20240203011151-h2myq7t",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240203011151-h2myq7t",
												"updated": "20240203011151"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Action"
												}
											]
										}
									]
								},
								{
									"ID": "20240203011151-zj8kcy0",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240203011151-zj8kcy0",
										"updated": "20240203011151"
									},
									"Children": [
										{
											"ID": "20240203011151-u1z54h5",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240203011151-u1z54h5",
												"updated": "20240203011151"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "UnityAction"
												}
											]
										}
									]
								},
								{
									"ID": "20240203011151-6kcnvq8",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240203011151-6kcnvq8",
										"updated": "20240203011151"
									},
									"Children": [
										{
											"ID": "20240203011151-1awfqx8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240203011151-1awfqx8",
												"updated": "20240203011151"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "LuaFunction"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240203011151-wzqdw9d",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"fold": "1",
						"id": "20240203011151-wzqdw9d",
						"updated": "20240203011151"
					},
					"Children": [
						{
							"ID": "20240203011151-f0goygd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240203011151-f0goygd",
								"updated": "20240203011151"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有参有返回"
								}
							]
						},
						{
							"ID": "20240203011151-sm01453",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20240203011151-sm01453",
								"updated": "20240203011151"
							},
							"Children": [
								{
									"ID": "20240203011151-q4v4lid",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240203011151-q4v4lid",
										"updated": "20240203011151"
									},
									"Children": [
										{
											"ID": "20240203011151-gm0cmqx",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240203011151-gm0cmqx",
												"updated": "20240203011151"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "自定义委托"
												}
											]
										}
									]
								},
								{
									"ID": "20240203011151-d2w0d4s",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240203011151-d2w0d4s",
										"updated": "20240203011151"
									},
									"Children": [
										{
											"ID": "20240203011151-98u4e9w",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240203011151-98u4e9w",
												"updated": "20240203011151"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Func"
												}
											]
										}
									]
								},
								{
									"ID": "20240203011151-8a49yob",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240203011151-8a49yob",
										"updated": "20240203011151"
									},
									"Children": [
										{
											"ID": "20240203011151-57buiad",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240203011151-57buiad",
												"updated": "20240203011151"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "LuaFunction"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240203011151-2t7ca3r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"fold": "1",
						"id": "20240203011151-2t7ca3r",
						"updated": "20240203011151"
					},
					"Children": [
						{
							"ID": "20240203011151-5rz592g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240203011151-5rz592g",
								"updated": "20240203011151"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "多返回"
								}
							]
						},
						{
							"ID": "20240203011151-92tibaf",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20240203011151-92tibaf",
								"updated": "20240203011151"
							},
							"Children": [
								{
									"ID": "20240203011151-tas09im",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240203011151-tas09im",
										"updated": "20240203011151"
									},
									"Children": [
										{
											"ID": "20240203011151-h6q3gxx",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240203011151-h6q3gxx",
												"updated": "20240203011151"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "自定义委托"
												}
											]
										},
										{
											"ID": "20240203011151-c32dyuk",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20240203011151-c32dyuk",
												"updated": "20240203011151"
											},
											"Children": [
												{
													"ID": "20240203011151-zgpp35t",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20240203011151-zgpp35t",
														"updated": "20240203011151"
													},
													"Children": [
														{
															"ID": "20240203011151-n48resa",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20240203011151-n48resa",
																"updated": "20240203011151"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "Out"
																}
															]
														}
													]
												},
												{
													"ID": "20240203011151-cl537lm",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20240203011151-cl537lm",
														"updated": "20240203011151"
													},
													"Children": [
														{
															"ID": "20240203011151-zghfi63",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20240203011151-zghfi63",
																"updated": "20240203011151"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "Ref"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20240203011151-1bfdwi7",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240203011151-1bfdwi7",
										"updated": "20240203011151"
									},
									"Children": [
										{
											"ID": "20240203011151-6xh2ezi",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240203011151-6xh2ezi",
												"updated": "20240203011151"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "LuaFunction"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20240203011151-el2c5c9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"fold": "1",
						"id": "20240203011151-el2c5c9",
						"updated": "20240203011151"
					},
					"Children": [
						{
							"ID": "20240203011151-pw64sir",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240203011151-pw64sir",
								"updated": "20240203011151"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "变长参数"
								}
							]
						},
						{
							"ID": "20240203011151-mrbda5p",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20240203011151-mrbda5p",
								"updated": "20240203011151"
							},
							"Children": [
								{
									"ID": "20240203011151-u58jurh",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240203011151-u58jurh",
										"updated": "20240203011151"
									},
									"Children": [
										{
											"ID": "20240203011151-35ec8aw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240203011151-35ec8aw",
												"updated": "20240203011151"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "自定义委托"
												}
											]
										}
									]
								},
								{
									"ID": "20240203011151-nd4t2ma",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20240203011151-nd4t2ma",
										"updated": "20240203011151"
									},
									"Children": [
										{
											"ID": "20240203011151-7v5ljox",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20240203011151-7v5ljox",
												"updated": "20240203011151"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "LuaFunction"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240202141922-ir1jv2i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202141922-ir1jv2i",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "先在Lua声明不同的函数（无参无返回，有参有返回，多返回值，变长参数）"
				}
			]
		},
		{
			"ID": "20240202141936-fu5kp4j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240202141936-fu5kp4j",
				"style": "line-height: 22px;",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "TestFun = function()\n    print(\"无参无返回\")\nend\n\nTestFun2 = function(a)\n    print(\"有参有返回\")\n    return a + 1\nend\n\nTestFun3 = function(a)\n    return 1, 2, false, \"123\", a\nend\n\nTestFun4 = function(a, ...)\n    print(\"a\")\n    arg = { ... }\n    for key, value in pairs(arg) do\n        print(key, value)\n    end\nend\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240202142440-ty9x0xy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240202142440-ty9x0xy",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "无参无返回值"
				}
			]
		},
		{
			"ID": "20240202141819-59ymag5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202141819-59ymag5",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以像调用全局变量一样调用全局方法，就是需要使用委托来接收它\n这个委托可以是我们自己声明的，也可以使用Unity提供的，也可以使用C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "提供的，\nxLua也提供了对应的变量类型接收方法，调用它需要使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Call"
				},
				{
					"Type": "NodeText",
					"Data": "​方法（官方建议少用，因为会产生垃圾，性能不佳）"
				}
			]
		},
		{
			"ID": "20240202141954-saj9sv5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240202141954-saj9sv5",
				"style": "line-height: 22px;",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//无参无返回值的委托\npublic delegate void CustomCall();\n\npublic class L5_CallFunction : MonoBehaviour\n{\n    void Start()\n    {\n        LuaManager.Instance.Init();\n        LuaManager.Instance.DoLuaFile(\"Main\");\n\n        CustomCall call = LuaManager.Instance.Global.Get\u003cCustomCall\u003e(\"TestFun\");\n        call();\n        UnityAction ua = LuaManager.Instance.Global.Get\u003cUnityAction\u003e(\"TestFun\");\n        ua();\n        Action action = LuaManager.Instance.Global.Get\u003cAction\u003e(\"TestFun\");\n        action();\n        LuaFunction lf = LuaManager.Instance.Global.Get\u003cLuaFunction\u003e(\"TestFun\");\n        lf.Call();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240202142502-ykx3161",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240202142502-ykx3161",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有参有返回值"
				}
			]
		},
		{
			"ID": "20240202142513-c7kcr5n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202142513-c7kcr5n",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "和上面的无参无返回值函数的调用大同小异，但是需要做额外的步骤\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "首先是委托需要有对应的参数与返回值类型，并且加上特性"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "[CSharpCallLua]"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "，\n并且在工具栏点击 XLua - Clear Generate Code 选项，生成对应的C#代码，该委托才能被识别！"
				}
			]
		},
		{
			"ID": "20240204164020-yay7613",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204164020-yay7613",
				"updated": "20240204164029"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[CSharpCallLua]"
				},
				{
					"Type": "NodeText",
					"Data": "​特性有不在类声明前添加也可以使用的方法，对不能直接修改代码的类也有效，详见："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240204144641-xvlyppu",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "让系统类型和Lua能互相访问"
				}
			]
		},
		{
			"ID": "20240202142632-gz8tnej",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240202142632-gz8tnej",
				"style": "line-height: 22px;",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//无参无返回值的委托\npublic delegate void CustomCall();\n\n//有参有返回值的委托\n[CSharpCallLua]\npublic delegate int CustomCall2(int a);\n\npublic class L5_CallFunction : MonoBehaviour\n{\n    void Start()\n    {\n        LuaManager.Instance.Init();\n        LuaManager.Instance.DoLuaFile(\"Main\");\n        CustomCall2 call2 = LuaManager.Instance.Global.Get\u003cCustomCall2\u003e(\"TestFun2\");\n        Debug.Log(\"有参有返回值：\" + call2(10));\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240202143628-75x61u9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202143628-75x61u9",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240202143628-hcb4o31.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240202143653-kitnv8y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202143653-kitnv8y",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C#也自带了有参有返回值的委托"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Func\u0026lt;\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​，可以直接使用，泛型参数第一个一定是返回值，后面都是参数"
				}
			]
		},
		{
			"ID": "20240202143758-nvumgq6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240202143758-nvumgq6",
				"style": "line-height: 22px;",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CustomCall2 call2 = LuaManager.Instance.Global.Get\u003cCustomCall2\u003e(\"TestFun2\");\nDebug.Log(\"有参有返回值：\" + call2(10));\nFunc\u003cint, int\u003e sFun = LuaManager.Instance.Global.Get\u003cFunc\u003cint, int\u003e\u003e(\"TestFun2\");\nDebug.Log(\"有参有返回值：\" + sFun(20));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240202143640-wnuylew",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202143640-wnuylew",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "也可以使用XLua提供的委托，执行时需要传入参数，它会返回"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object[]"
				},
				{
					"Type": "NodeText",
					"Data": "​，返回值从这个数组获取"
				}
			]
		},
		{
			"ID": "20240202144013-s752l12",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240202144013-s752l12",
				"style": "line-height: 22px;",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "LuaFunction lf2 = LuaManager.Instance.Global.Get\u003cLuaFunction\u003e(\"TestFun2\");\nDebug.Log(\"有参有返回值：\" + lf2.Call(30)[0]);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240202144238-hi39uq6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202144238-hi39uq6",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 302px;",
						"style": "width: 292px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240202144238-017gilc.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 292px;\" parent-style=\"width: 302px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240202144247-6n6a155",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240202144247-6n6a155",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多返回值"
				}
			]
		},
		{
			"ID": "20240202144311-li1de13",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202144311-li1de13",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C#不支持函数多返回值，我们需要使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "out"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ref"
				},
				{
					"Type": "NodeText",
					"Data": "​来接收，也就是通过传入的参数变量来接收返回值\n具体声明方式是，用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "out"
				},
				{
					"Type": "NodeText",
					"Data": "​修饰接收返回值参数，将接收返回值的变量传入到方法中，这些变量在这些过方法后就会接收到方法的返回值\n（同样的，这种新声明出来的委托还是需要加上特性并执行Generate Code）"
				}
			]
		},
		{
			"ID": "20240202145128-wzf0ky5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240202145128-wzf0ky5",
				"style": "line-height: 22px;",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//多返回值的委托\n[CSharpCallLua]\npublic delegate int CustomCall3(int a, out int b, out bool c, out string d, out int e);\n//前面的a是传入Lua方法的参数，后面的参数用来接收返回值的参数\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240202154025-8jozv20",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202154025-8jozv20",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "函数的第一个返回值还是通过委托本身返回出来，剩下的返回值就是通过参数传递变量来接收返回值"
				}
			]
		},
		{
			"ID": "20240202154402-wqspqf1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240202154402-wqspqf1",
				"style": "line-height: 22px;",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//多返回值的委托\n[CSharpCallLua]\npublic delegate int CustomCall3(int a, out int b, out bool c, out string d, out int e);\n\npublic class L5_CallFunction : MonoBehaviour\n{\n    void Start()\n    {\n        LuaManager.Instance.Init();\n        LuaManager.Instance.DoLuaFile(\"Main\");\n        CustomCall3 call3 = LuaManager.Instance.Global.Get\u003cCustomCall3\u003e(\"TestFun3\");\n        int b;\n        bool c;\n        string d;\n        int e;\n        Debug.Log(\"第一个返回值：\" + call3(100, out b, out c, out d, out e));\n        Debug.Log(\"剩余的返回值：\" + b + \"_\" + c + \"_\" + d + \"_\" + e);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240202154839-3kny2qt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202154839-3kny2qt",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240202154839-tb38ba7.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240202154916-9dm0ote",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202154916-9dm0ote",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ref"
				},
				{
					"Type": "NodeText",
					"Data": "​修饰参数的效果是一样的，唯一的区别是，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ref"
				},
				{
					"Type": "NodeText",
					"Data": "​传入的变量必须初始化"
				}
			]
		},
		{
			"ID": "20240202154958-vbpfqkg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240202154958-vbpfqkg",
				"style": "line-height: 22px;",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//多返回值的委托\n[CSharpCallLua]\npublic delegate int CustomCall3(int a, out int b, out bool c, out string d, out int e);\n[CSharpCallLua]\npublic delegate int CustomCall4(int a, ref int b, ref bool c, ref string d, ref int e);\n\npublic class L5_CallFunction : MonoBehaviour\n{\n    void Start()\n    {\n        LuaManager.Instance.Init();\n        LuaManager.Instance.DoLuaFile(\"Main\");\n        CustomCall3 call3 = LuaManager.Instance.Global.Get\u003cCustomCall3\u003e(\"TestFun3\");\n        int b;\n        bool c;\n        string d;\n        int e;\n        Debug.Log(\"第一个返回值：\" + call3(100, out b, out c, out d, out e));\n        Debug.Log(\"剩余的返回值：\" + b + \"_\" + c + \"_\" + d + \"_\" + e);\n\n        CustomCall4 call4 = LuaManager.Instance.Global.Get\u003cCustomCall4\u003e(\"TestFun3\");\n        int b1 = 0;\n        bool c1 = true;\n        string d1 = \"\";\n        int e1 = 0;\n        Debug.Log(\"第一个返回值：\" + call4(200, ref b1, ref c1, ref d1, ref e1));\n        Debug.Log(\"剩余的返回值：\" + b1 + \"_\" + c1 + \"_\" + d1 + \"_\" + e1);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240202155342-aloefxt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202155342-aloefxt",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240202155342-5pmqomr.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240202155417-zsmw1cp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202155417-zsmw1cp",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里同样可以使用XLua提供的委托，执行时需要传入参数，它会返回"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object[]"
				},
				{
					"Type": "NodeText",
					"Data": "​，返回值从这个数组获取（少用）"
				}
			]
		},
		{
			"ID": "20240202155604-vml39ft",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240202155604-vml39ft",
				"style": "line-height: 22px;",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "LuaFunction lf3 = LuaManager.Instance.Global.Get\u003cLuaFunction\u003e(\"TestFun3\");\nobject[] objs = lf3.Call(1000);\nfor (int i = 0; i \u003c objs.Length; i++)\n{\n    Debug.Log(\"第\" + i + \"个返回值是：\" + objs[i]);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240202155644-o4bn3bz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240202155644-o4bn3bz",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "变长参数"
				}
			]
		},
		{
			"ID": "20240202155758-j3flxrx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202155758-j3flxrx",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "调用变长参数函数的委托，我们在参数列表使用C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "提供的变长参数即可，\n只不过和Lua相比C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "的变长参数需要我们指定类型，如果类型不确定，可以使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object"
				},
				{
					"Type": "NodeText",
					"Data": "​\n如果可以确定是单一类型，就直接使用对应的类型即可\n（同样的，这种新声明出来的委托还是需要加上特性并执行Generate Code）"
				}
			]
		},
		{
			"ID": "20240202155957-ntlhdiw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240202155957-ntlhdiw",
				"style": "line-height: 22px;",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//变长参数\n[CSharpCallLua]\npublic delegate void CustomCall5(string a, params int[] args);       //变长参数的类型，是根据实际情况来决定的\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240202160224-886zay8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240202160224-886zay8",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里同样可以使用XLua提供的委托，执行时传入对应的参数即可（少用）"
				}
			]
		},
		{
			"ID": "20240202160225-5r0biol",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240202160225-5r0biol",
				"style": "line-height: 22px;",
				"updated": "20240202141808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//变长参数\n[CSharpCallLua]\npublic delegate void CustomCall5(string a, params int[] args);       //变长参数的类型，是根据实际情况来决定的\n\npublic class L5_CallFunction : MonoBehaviour\n{\n    void Start()\n    {\n        LuaManager.Instance.Init();\n        LuaManager.Instance.DoLuaFile(\"Main\");\n\n        CustomCall5 call5 = LuaManager.Instance.Global.Get\u003cCustomCall5\u003e(\"TestFun4\");\n        call5(\"传入了这些参数：\", 1, 2, 3, 4, 5, 666, 7, 88, 999);\n        LuaFunction lf4 = LuaManager.Instance.Global.Get\u003cLuaFunction\u003e(\"TestFun4\");\n        lf4.Call(\"传入了这些参数：\", 3, 4, 54321, 6666, 7, 88, 9);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240203021248-o0elnhx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240203021248-o0elnhx",
				"name": "luaFunction.Dispose()",
				"updated": "20240203021312"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​LuaFunction​的销毁"
				}
			]
		},
		{
			"ID": "20240203021259-7d1zi0n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240203021259-7d1zi0n",
				"updated": "20240203021331"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LuaFunction"
				},
				{
					"Type": "NodeText",
					"Data": "​的调用完毕时，应当手动销毁，否则将一直占用内存，造成内存泄露，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LuaTable"
				},
				{
					"Type": "NodeText",
					"Data": "​同理\nLua解析器的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "tick()"
				},
				{
					"Type": "NodeText",
					"Data": "​就是会释放我们没有手动销毁的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LuaTable"
				},
				{
					"Type": "NodeText",
					"Data": "​，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LuaFunction"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240203021332-892erdz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240203021332-892erdz",
				"style": "line-height: 22px;",
				"updated": "20240203021339"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "lf.Dispose();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}