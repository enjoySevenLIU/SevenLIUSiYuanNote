{
	"ID": "20240204144626-6rmg4ex",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240204144626-6rmg4ex",
		"title": "UH2S2L18——特殊问题",
		"updated": "20240302170619"
	},
	"Children": [
		{
			"ID": "20240204144641-x5fz3xl",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240204144641-x5fz3xl",
				"updated": "20240204144646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二维数组遍历"
				}
			]
		},
		{
			"ID": "20240204144716-kjm9npx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204144716-kjm9npx",
				"updated": "20240204144646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "先在C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "脚本内声明如下内容"
				}
			]
		},
		{
			"ID": "20240204144716-uyx7ftg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240204144716-uyx7ftg",
				"style": "line-height: 22px;",
				"updated": "20240204144646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Lesson8\n{\n    public int[,] array = new int[2, 3] { { 1, 2, 3 }, \n                                          { 4, 5, 6 } };\n\n    public void SetValue(int[,] array, int value, int index1, int index2)\n    {\n        array[index1, index2] = value;\n    }\n}"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240204145850-vblou5t",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240204145850-vblou5t",
				"updated": "20240204144646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取长度"
				}
			]
		},
		{
			"ID": "20240204145958-ixul2m7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204145958-ixul2m7",
				"updated": "20240204144646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二维数组的获取某个列或者行的长度是通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetLength()"
				},
				{
					"Type": "NodeText",
					"Data": "​来获取的，Lua中也可以调用该方法"
				}
			]
		},
		{
			"ID": "20240204145904-5gvfrgc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240204145904-5gvfrgc",
				"style": "line-height: 22px;",
				"updated": "20240204144646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local obj = CS.Lesson8()\n\n--获取长度\nprint(\"行: \" .. obj.array:GetLength(0))\nprint(\"列: \" .. obj.array:GetLength(1))\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240204145955-j4ks6si",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204145955-j4ks6si",
				"updated": "20240204144646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240204145955-zn3ji4l.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240204150124-n1bczgq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240204150124-n1bczgq",
				"updated": "20240204144646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "获取元素"
				}
			]
		},
		{
			"ID": "20240204150130-jymlryu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204150130-jymlryu",
				"updated": "20240204144646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虽然在C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "中二维数组可以使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[数字, 数字]"
				},
				{
					"Type": "NodeText",
					"Data": "​来获取某行某列的值\n但是"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "Lua中不支持这种语法，且"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "[数字][数字]"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "也是不可行的，都会报错"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				}
			]
		},
		{
			"ID": "20240204150335-rnzq78f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204150335-rnzq78f",
				"updated": "20240204144646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不过，除了通过索引器去获取值，C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "还提供了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetValue"
				},
				{
					"Type": "NodeText",
					"Data": "​这个成员方法，可以通过它来获取元素"
				}
			]
		},
		{
			"ID": "20240204150423-kr2lkht",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240204150423-kr2lkht",
				"style": "line-height: 22px;",
				"updated": "20240204144646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(obj.array:GetValue(0, 0))\nprint(obj.array:GetValue(1, 0))\n\nfor i = 0, obj.array:GetLength(0) - 1 do\n    for j = 0, obj.array:GetLength(1) - 1 do\n        print(obj.array:GetValue(i, j))\n    end\nend\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240204150723-iphcsg3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204150723-iphcsg3",
				"updated": "20240204144646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 289px;",
						"style": "width: 279px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240204150723-njiql0j.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 279px;\" parent-style=\"width: 289px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240204144641-ud0qlqj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240204144641-ud0qlqj",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "null和nil比较"
				}
			]
		},
		{
			"ID": "20240204160241-vzd2xox",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204160241-vzd2xox",
				"updated": "20240204160321"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​和Lua中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "nil"
				},
				{
					"Type": "NodeText",
					"Data": "​不能直接比较，因此有三种方法来解决这个问题"
				}
			]
		},
		{
			"ID": "20240204160321-3gy2rdh",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240204160321-3gy2rdh",
				"updated": "20240204160652"
			},
			"Children": [
				{
					"ID": "20240204160323-sbl8l16",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240204160323-sbl8l16",
						"updated": "20240204160323"
					},
					"Children": [
						{
							"ID": "20240204160323-oyh8ivk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240204160323-oyh8ivk",
								"updated": "20240204160525"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Equals判空："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "对象.Equals(nil)"
								},
								{
									"Type": "NodeText",
									"Data": "​，前提是对象是C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "object"
								},
								{
									"Type": "NodeText",
									"Data": "​而非Lua中的对象，否则会报错"
								}
							]
						}
					]
				},
				{
					"ID": "20240204160522-c84ff4q",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240204160522-c84ff4q"
					},
					"Children": [
						{
							"ID": "20240204160522-fnzkmef",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240204160522-fnzkmef",
								"updated": "20240204160616"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "全局方法判空：自行声明一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IsNull"
								},
								{
									"Type": "NodeText",
									"Data": "​方法，先判断是不是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "nil"
								},
								{
									"Type": "NodeText",
									"Data": "​在用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "对象.Equals(nil)"
								},
								{
									"Type": "NodeText",
									"Data": "​判断"
								}
							]
						}
					]
				},
				{
					"ID": "20240204160619-uc2moo6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240204160619-uc2moo6",
						"updated": "20240204160652"
					},
					"Children": [
						{
							"ID": "20240204160619-jl914tr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240204160619-jl914tr",
								"updated": "20240204160652"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "拓展方法判空：在C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "中拓展一个判空方法，让Lua调用"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240204155710-ucdrtqg",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240204155710-ucdrtqg",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Equals判空"
				}
			]
		},
		{
			"ID": "20240204151046-7zohhc0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204151046-7zohhc0",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设一个情景，我们需要往场景对象上添加一个脚本，如果存在就不加，如果不存在再加"
				}
			]
		},
		{
			"ID": "20240204154207-oyxck64",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240204154207-oyxck64",
				"style": "line-height: 22px;",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "-- 往场景对象上添加一个脚本 如果存在就不加 如果不存在再加\nGameObject = CS.UnityEngine.GameObject\nRigidbody = CS.UnityEngine.Rigidbody\n\nlocal obj = GameObject(\"测试加脚本\")\nlocal rig = obj:GetComponent(typeof(Rigidbody))\nprint(rig)\nif rig == nil then\n    print(\"进入判断内\")\n    rig = obj:AddComponent(typeof(Rigidbody))\nend\nprint(rig)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240204154231-duvwcef",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204154231-duvwcef",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然而，对象上并没有添加组件，检查输出也发现并没有进入判空逻辑"
				}
			]
		},
		{
			"ID": "20240204154227-43jk28f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204154227-43jk28f",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240204154227-i1xh6tq.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240204154303-n44plnd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204154303-n44plnd",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "这是因为，Lua中的"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "nil"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "不等同于C#的"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "，他们两个不能直接使用"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "=="
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "来比较\n因此我们需要使用C#的"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "object"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "提供的"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "Equals"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "方法，传入"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "nil"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "，使用这种方法来判空"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20240204154547-bq7zi9z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240204154547-bq7zi9z",
				"style": "line-height: 22px;",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local obj = GameObject(\"测试加脚本\")\nlocal rig = obj:GetComponent(typeof(Rigidbody))\nprint(rig)\nif rig:Equals(nil) then\n    print(\"进入判断内\")\n    rig = obj:AddComponent(typeof(Rigidbody))\nend\nprint(rig)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240204154838-k03w03t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204154838-k03w03t",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240204154838-gznwy1u.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240204155733-728356d",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240204155733-728356d",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "全局方法判空"
				}
			]
		},
		{
			"ID": "20240204155041-ir4skx3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204155041-ir4skx3",
				"updated": "20240204160354"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是以上的方法也有问题，如果"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "rig"
				},
				{
					"Type": "NodeText",
					"Data": "​是Lua里的对象而非C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "的对象，则很有可能报错，因为不能调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "object"
				},
				{
					"Type": "NodeText",
					"Data": "​提供的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Equals"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240204155242-ws8yfe9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204155242-ws8yfe9",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此，我们可以写一个全局的判空函数，写到Main脚本内，这样即可到处调用该函数用于判空"
				}
			]
		},
		{
			"ID": "20240204155251-lib5f1l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240204155251-lib5f1l",
				"style": "line-height: 22px;",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"主Lua脚本启动\")\n\n--判断对象是否为空\nfunction IsNull(obj)\n    if obj == nil or obj:Equals(nil) then\n        return false\n    end\n    return true\nend\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240204155523-st30ul3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240204155523-st30ul3",
				"style": "line-height: 22px;",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local obj = GameObject(\"测试加脚本\")\nlocal rig = obj:GetComponent(typeof(Rigidbody))\nprint(rig)\nif IsNull(rig) then\n    print(\"进入判断内\")\n    rig = obj:AddComponent(typeof(Rigidbody))\nend\nprint(rig)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240204155743-e37mf90",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240204155743-e37mf90",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C#脚本拓展方法判空"
				}
			]
		},
		{
			"ID": "20240204155640-mxn97zq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204155640-mxn97zq",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "还有第三种方法，就是在为Unity的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Object"
				},
				{
					"Type": "NodeText",
					"Data": "​拓展一个判空方法"
				}
			]
		},
		{
			"ID": "20240204155829-vlr84u8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240204155829-vlr84u8",
				"style": "line-height: 22px;",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//为Object 拓展一个方法\n[LuaCallCSharp]\npublic static class Lesson9\n{\n    //拓展一个为Object判空的方法 主要是给lua用 lua没法用null和nil比较\n    public static bool IsNull(this UnityEngine.Object obj)\n    {\n        return obj == null;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240204160221-xel3trn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240204160221-xel3trn",
				"style": "line-height: 22px;",
				"updated": "20240204144647"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "local obj = GameObject(\"测试加脚本\")\nlocal rig = obj:GetComponent(typeof(Rigidbody))\nprint(rig)\nif rig:IsNull() then\n    print(\"进入判断内\")\n    rig = obj:AddComponent(typeof(Rigidbody))\nend\nprint(rig)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240204144641-xvlyppu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240204144641-xvlyppu",
				"updated": "20240204144648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让系统类型和Lua能互相访问"
				}
			]
		},
		{
			"ID": "20240204163339-stch8nn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204163339-stch8nn",
				"updated": "20240204170652"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解决方法就是：\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "声明静态类，再声明静态"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类型列表，为其添加"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "[CSharpCallLua]"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code strong",
					"TextMarkTextContent": "[LuaCallCSharp]"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "，将想要生成代码的类的类型添加到列表即可"
				}
			]
		},
		{
			"ID": "20240204151044-3w8v52u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204151044-3w8v52u",
				"updated": "20240204144648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自己声明的委托或者接口要映射Lua中的方法或者表，需要添加"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[CSharpCallLua]"
				},
				{
					"Type": "NodeText",
					"Data": "​\n在类里声明拓展方法时，装载拓展方法的类需要添加"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[LuaCallCSharp]"
				},
				{
					"Type": "NodeText",
					"Data": "​，当然所有会被Lua调用的自定义类都可以添加该特性，可以优化性能"
				}
			]
		},
		{
			"ID": "20240204161238-e75imox",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204161238-e75imox",
				"updated": "20240204144648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是系统类和第三方库代码（例如UGUI）时，我们是无法添加这两个特性的，这可能会导致出现问题"
				}
			]
		},
		{
			"ID": "20240204161321-n8en4au",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204161321-n8en4au",
				"updated": "20240204144648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设我们要通过Lua代码来监听UI界面上一个Slider的改变"
				}
			]
		},
		{
			"ID": "20240204161852-rj8pr0l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240204161852-rj8pr0l",
				"style": "line-height: 22px;",
				"updated": "20240204144648"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "GameObject = CS.UnityEngine.GameObject\nUI = CS.UnityEngine.UI\n\nlocal slider = GameObject.Find(\"Slider\")\nprint(slider)\nlocal sliderScript = slider:GetComponent(typeof(UI.Slider))\nprint(sliderScript)\nsliderScript.onValueChanged:AddListener(function(f)\n    print(f)\nend)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240204161900-sl38s7f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204161900-sl38s7f",
				"updated": "20240204144648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以上代码直接运行就会报错，因为xLua会要求我们对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "UnityAction"
				},
				{
					"Type": "NodeText",
					"Data": "​添加"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[CSharpCallLua]"
				},
				{
					"Type": "NodeText",
					"Data": "​特性（Unity自己声明的委托）\n但是这是Unity内部的代码，我们无法为其添加特性"
				}
			]
		},
		{
			"ID": "20240204162318-z265jtx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204162318-z265jtx",
				"updated": "20240204144648"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "我们需要去声明一个静态类，在里面声明类型为"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "Type"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "的列表，添加"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "[CSharpCallLua]"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "特性\n声明时直接添加要调用Lua方法或者表的类型（如果有泛型参数则必须要提前填入），之后执行XLua的Generate Code\n这样XLua就会根据我们列表里添加的类型，自动生成对应代码，而不需要我们手动添加特性"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);\"}"
				}
			]
		},
		{
			"ID": "20240204162850-9jx9x3u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204162850-9jx9x3u",
				"updated": "20240204144648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本例我们需要监听silder的值，因此会用到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "UnityAction\u0026lt;float\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​这个委托，在声明时添加"
				}
			]
		},
		{
			"ID": "20240204162250-foaavsb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240204162250-foaavsb",
				"style": "line-height: 22px;",
				"updated": "20240204144648"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static class Lesson10\n{\n    [CSharpCallLua]\n    public static List\u003cType\u003e csharpCallLuaList = new List\u003cType\u003e() {\n        typeof(UnityAction\u003cfloat\u003e)\n    };\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240204162759-09rxmd4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204162759-09rxmd4",
				"updated": "20240204144648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时拖动silder，逻辑正常执行"
				}
			]
		},
		{
			"ID": "20240204163024-ppdkwx4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204163024-ppdkwx4",
				"updated": "20240204144648"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可见，这是一种非常好用的方法，它不仅可以为我们不能修改代码的系统类和第三方库类，\n以前自己声明的委托和接口也可以获取其类型然后添加到列表内，这样我们不必再自行添加特性"
				}
			]
		},
		{
			"ID": "20240204163328-gw93kb7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240204163328-gw93kb7",
				"style": "line-height: 22px;",
				"updated": "20240204163615"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static class Lesson10\n{\n    [CSharpCallLua]\n    public static List\u003cType\u003e csharpCallLuaList = new List\u003cType\u003e()\n    {\n        typeof(UnityAction\u003cfloat\u003e),\n        typeof(UnityAction\u003cint\u003e),\n        //... 向列表内添加想要生成代码的类的Type\n    };\n\n    public static List\u003cType\u003e luaCallCSharpList = new List\u003cType\u003e()\n    {\n        typeof(GameObject),\n        //... 向列表内添加想要生成代码的类的Type\n    };\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240204163631-n8mij1b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204163631-n8mij1b"
			}
		}
	]
}