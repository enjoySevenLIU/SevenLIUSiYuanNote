{
	"ID": "20240203005027-70irf5z",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240203005027-70irf5z",
		"title": "UH2S2L9——表映射到接口",
		"updated": "20240302170546"
	},
	"Children": [
		{
			"ID": "20240203021458-7w8134j",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240203021458-7w8134j",
				"name": "[CSharpCallLua]",
				"updated": "20240203021512"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "映射到Lua特性"
				}
			]
		},
		{
			"ID": "20240203021512-s7l44kc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240203021512-s7l44kc",
				"updated": "20240203021712"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[CSharpCallLua]"
				},
				{
					"Type": "NodeText",
					"Data": "​，当自己声明的委托要接收lua中的函数，以及自己声明的接口映射Lua中的表时，都需要加上此特性\n使用该特性后，点击Xlua中的生成代码(Generate Code)，以上声明的委托或者接口才会生效"
				}
			]
		},
		{
			"ID": "20240204164040-5v4459z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240204164040-5v4459z",
				"updated": "20240204164049"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "该特性有不在类声明前添加也可以使用的方法，对不能直接修改代码的类也有效，详见："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240204144641-xvlyppu",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "让系统类型和Lua能互相访问"
				}
			]
		},
		{
			"ID": "20240203021713-xkfn0t2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240203021713-xkfn0t2",
				"style": "line-height: 22px;",
				"updated": "20240203021743"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "[CSharpCallLua]\npublic interface ICSharpCallInterface\n{\n    public int testInt {  get; set; }\n    public bool testBool { get; set; }\n    public float testFloat { get; set; }\n    public string testString { get; set; }\n    public UnityAction testFun { get; set; }\n}\n\n[CSharpCallLua]\npublic delegate void CustomCall5(string a, params int[] args);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240203021820-8exzmwn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240203021820-8exzmwn",
				"updated": "20240203021820"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 303px;",
						"style": "width: 293px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240203021820-y5993hf.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 293px;\" parent-style=\"width: 303px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240203005100-s87v0qy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240203005100-s87v0qy",
				"updated": "20240203005104"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "表映射接口"
				}
			]
		},
		{
			"ID": "20240203011505-5g3zjqc",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240203011505-5g3zjqc",
				"updated": "20240203011652"
			},
			"Children": [
				{
					"ID": "20240203011505-8koyk5c",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240203011505-8koyk5c",
						"updated": "20240203011523"
					},
					"Children": [
						{
							"ID": "20240203011505-10r2tod",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240203011505-10r2tod",
								"updated": "20240203011523"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果要通过接口获取Lua中表的内容，就自定义一个对应的接口\n接口中的变量都用属性去声明，多了少了无所谓，会忽略"
								}
							]
						}
					]
				},
				{
					"ID": "20240203011505-5yxxh3d",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240203011505-5yxxh3d",
						"updated": "20240203011541"
					},
					"Children": [
						{
							"ID": "20240203011505-aixthwy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240203011505-aixthwy",
								"updated": "20240203011541"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "注意：接口前面一定要加上特性"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "[CSharpCallLua]"
								},
								{
									"Type": "NodeText",
									"Data": "​\n一定要点击Xlua中的生成代码，如果接口结构改了，一定要先清除再生成"
								}
							]
						}
					]
				},
				{
					"ID": "20240203011505-pctxm6l",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240203011505-pctxm6l",
						"updated": "20240203011652"
					},
					"Children": [
						{
							"ID": "20240203011505-2pqxql7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240203011505-2pqxql7",
								"updated": "20240203011652"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "引用拷贝"
								},
								{
									"Type": "NodeText",
									"Data": "，改了接口对象中的值，对应Lua表中的值也会改变"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240203005104-lwztz99",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240203005104-lwztz99",
				"updated": "20240203005104"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "先在Lua脚本声明如下内容"
				}
			]
		},
		{
			"ID": "20240203005423-2m21eeb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240203005423-2m21eeb",
				"style": "line-height: 22px;",
				"updated": "20240203005104"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bHVh"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "TestClass = {\n    testInt = 2,\n    testBool = true,\n    testFloat = 1.2,\n    testString = \"123\",\n    testFun = function()\n        print(\"123123123\")\n    end,\n}                                           -- 用表模拟的类\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240203005429-b2w3fn2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240203005429-b2w3fn2",
				"updated": "20240203005104"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "再在C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "脚本中声明对应的接口\nC"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "的接口是不能声明成员变量的，但是我们可以声明对应的属性"
				}
			]
		},
		{
			"ID": "20240203005541-yh48prb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240203005541-yh48prb",
				"updated": "20240203011600"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如同自己声明的委托接收Lua全局函数那样，"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "接口映射表同样也需要添加"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code strong text",
					"TextMarkTextContent": "[CSharpCallLua]"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "，并Generate Code"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "\n这个自定义接口中的属性可以更多也可以更少，但是"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "每次修改接口结构必须要先Clear Generate Code，再重新Generate Code！"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20240203005517-hl5eenp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240203005517-hl5eenp",
				"style": "line-height: 22px;",
				"updated": "20240203005104"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "[CSharpCallLua]\npublic interface ICSharpCallInterface\n{\n    public int testInt {  get; set; }\n    public bool testBool { get; set; }\n    public float testFloat { get; set; }\n    public string testString { get; set; }\n    public UnityAction testFun { get; set; }\n}"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240203005545-za1q71i",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240203005545-za1q71i",
				"style": "line-height: 22px;",
				"updated": "20240203005104"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class L8_CallInterface : MonoBehaviour\n{\n    void Start()\n    {\n        LuaManager.Instance.Init();\n        LuaManager.Instance.DoLuaFile(\"Main\");\n\n        ICSharpCallInterface obj = LuaManager.Instance.Global.Get\u003cICSharpCallInterface\u003e(\"TestClass\");\n        Debug.Log(obj.testInt);\n        Debug.Log(obj.testBool);\n        Debug.Log(obj.testFloat);\n        Debug.Log(obj.testString);\n        obj.testFun();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240203010058-8pj4f7n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240203010058-8pj4f7n",
				"updated": "20240203005104"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240203010058-r87zubc.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240203010305-8w0b5gr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240203010305-8w0b5gr",
				"updated": "20240203005104"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意！与以往的表映射不同，"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "表映射接口是浅拷贝！也就是引用拷贝"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "\n所有映射出来的接口都是引用Lua的表的，这意味着"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "text strong",
					"TextMarkTextContent": "通过接口的属性修改值将会影响Lua的表中的值！"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20240203010841-g0roqmw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240203010841-g0roqmw",
				"style": "line-height: 22px;",
				"updated": "20240203005104"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "LuaManager.Instance.Init();\nLuaManager.Instance.DoLuaFile(\"Main\");\n\nICSharpCallInterface obj = LuaManager.Instance.Global.Get\u003cICSharpCallInterface\u003e(\"TestClass\");\nDebug.Log(obj.testInt);\nDebug.Log(obj.testBool);\nDebug.Log(obj.testFloat);\nDebug.Log(obj.testString);\nobj.testFun();\n\nobj.testInt = 10000;\nICSharpCallInterface obj2 = LuaManager.Instance.Global.Get\u003cICSharpCallInterface\u003e(\"TestClass\");\nDebug.Log(obj2.testInt);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240203010650-jqto1vh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240203010650-jqto1vh",
				"updated": "20240203005104"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240203011002-y8cswwm.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240203011024-7jmz341",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240203011024-7jmz341",
				"updated": "20240203011647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "嵌套声明几乎和类一致，无非是要遵循接口的规则"
				}
			]
		},
		{
			"ID": "20240203011036-3z4y2v0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240203011036-3z4y2v0",
				"updated": "20240203005104"
			}
		}
	]
}