{"ID":"20240128163757-1p6b3jo","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240128163757-1p6b3jo","title":"UH1L3——AB包依赖","type":"doc","updated":"20250306191634"},"Children":[{"ID":"20240128173534-qbg846u","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240128173534-qbg846u","updated":"20240128173539"},"Children":[{"Type":"NodeText","Data":"本章代码关键字"}]},{"ID":"20240128173539-45fk6rj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240128173539-45fk6rj","style":"line-height: 22px;","updated":"20240128173753"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"AssetBundleManifest\t\t\t\t\t\t\t//主包的依赖文件\nassetBundleManifest.GetAllDependencies()\t//传入包名，得到该包依赖的所有的包名\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240128163757-6qhu4xy","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240128163757-6qhu4xy","updated":"20250306191634"},"Children":[{"Type":"NodeText","Data":"AB包依赖"}]},{"ID":"20240128165045-nad6wn3","Type":"NodeParagraph","Properties":{"id":"20240128165045-nad6wn3","updated":"20250306191429"},"Children":[{"Type":"NodeText","Data":"当某个资源使用了另外一个 AB 包内的资源，则可以说该资源对那个AB包存在依赖"}]},{"ID":"20240128164000-muth2jd","Type":"NodeParagraph","Properties":{"id":"20240128164000-muth2jd","updated":"20250306191440"},"Children":[{"Type":"NodeText","Data":"假设我们创建了一个红色材质球，让 modelAB 包中的 Cube 使用它，而不将这个材质球打包进 AB 包中\n则下次进行 AB 包打包时，该材质球将被默认的打包到 modelAB 包内"}]},{"ID":"20240128164534-c8dpyil","Type":"NodeParagraph","Properties":{"id":"20240128164534-c8dpyil","updated":"20240128165045"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"width: 810px;","style":"width: 800px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240128164533-ubgy56k.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 800px;\" parent-style=\"width: 810px;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240128164810-0evph5q","Type":"NodeParagraph","Properties":{"id":"20240128164810-0evph5q","updated":"20250306191457"},"Children":[{"Type":"NodeText","Data":"而如果将这个红色材质球打入到其他 AB 包诸如 head 内，而只加载 model 包，在加载 Cube 将会导致 Cube 的材质丢失\n因为 model 内并不存在 Cube 的材质"}]},{"ID":"20240128164955-xos3mtl","Type":"NodeParagraph","Properties":{"id":"20240128164955-xos3mtl","updated":"20240128165045"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240128164955-rzwkrhf.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240128165030-cp962gr","Type":"NodeParagraph","Properties":{"id":"20240128165030-cp962gr","updated":"20250306191501"},"Children":[{"Type":"NodeText","Data":"可见，一个资源身上用到了别的 AB 包中的资源\n如果只加载这时自己的 AB 包，通过它创建对象，将会出现资源丢失的情况\n这种时候需要把依赖包一起加载了才能正常"}]},{"ID":"20240128172149-zovq1yh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240128172149-zovq1yh","style":"line-height: 22px;","updated":"20240128172212"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":" //加载AB包\n AssetBundle assetBundle = AssetBundle.LoadFromFile(Application.streamingAssetsPath + \"/\" + \"model\");\n //加载AB包中的资源\n GameObject obj = assetBundle.LoadAsset\u003cGameObject\u003e(\"Cube\");\n //obj = assetBundle.LoadAsset(\"Cube\", typeof(GameObject)) as GameObject;\n Instantiate(obj);\n AssetBundle ab2 = AssetBundle.LoadFromFile(Application.streamingAssetsPath + \"/\" + \"head\");\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240128165334-4esny0z","Type":"NodeHeading","HeadingLevel":2,"Properties":{"alias":"assetBundleManifest.GetAllDependencies()","id":"20240128165334-4esny0z","name":"AssetBundleManifest","updated":"20250306191634"},"Children":[{"Type":"NodeText","Data":"使用主包获取依赖信息"}]},{"ID":"20240128171003-418lto5","Type":"NodeParagraph","Properties":{"id":"20240128171003-418lto5","updated":"20250306191402"},"Children":[{"Type":"NodeText","Data":"当一个游戏项目很大时，很难理清楚哪些 AB 包依赖着哪些包，因此很少会手动将某个资源所有的依赖包一起加载出来\n这时我们需要利用 "},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240128144319-0fy8kio","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"主包"},{"Type":"NodeText","Data":" 获取依赖信息"}]},{"ID":"20240128173019-tr4s6om","Type":"NodeParagraph","Properties":{"id":"20240128173019-tr4s6om","updated":"20250306191409"},"Children":[{"Type":"NodeText","Data":"首先将主包，也就是和存储 AB 包的目录名一样的包加载出来\n然后将主包的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AssetBundleManifest"},{"Type":"NodeText","Data":"​ 文件加载出来，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AssetBundleManifest"},{"Type":"NodeText","Data":"​ 文件的名字就是固定的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;AssetBundleManifest\u0026quot;"},{"Type":"NodeText","Data":"​\n然后将调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"assetBundleManifest.GetAllDependencies"},{"Type":"NodeText","Data":"​ 方法，传入包名，得到其所有的依赖的包名\n通过这些包名加载即可加载所有的依赖包"}]},{"ID":"20240128171309-ie6i45n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240128171309-ie6i45n","style":"line-height: 22px;","updated":"20240128172222"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"//加载主包\nAssetBundle abMain = AssetBundle.LoadFromFile(Application.streamingAssetsPath + \"/\" + \"PC\");\n//加载主包中的固定文件\nAssetBundleManifest assetBundleManifest = abMain.LoadAsset\u003cAssetBundleManifest\u003e(\"AssetBundleManifest\");\n//从固定文件中，得到依赖信息\nstring[] strs = assetBundleManifest.GetAllDependencies(\"model\");\n//得到依赖包的名字，将它们全部加载出来\nfor (int i = 0; i \u003c strs.Length; i++)\n{\n    AssetBundle.LoadFromFile(Application.streamingAssetsPath + \"/\" + strs[i]);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240128173440-6a4k4hz","Type":"NodeParagraph","Properties":{"id":"20240128173440-6a4k4hz","updated":"20250306191634"},"Children":[{"Type":"NodeText","Data":"这种方案的缺点是：假设 包A 依赖 包B，包C，包D，而 资源a 只依赖 包B，即使只需要加载 资源a 仍然会把 包C 与 包D 加载出来"}]},{"ID":"20240128185237-9a04qfn","Type":"NodeParagraph","Properties":{"id":"20240128185237-9a04qfn"}}]}