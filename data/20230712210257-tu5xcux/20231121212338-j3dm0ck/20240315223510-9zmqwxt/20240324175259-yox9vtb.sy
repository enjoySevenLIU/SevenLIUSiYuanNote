{
	"ID": "20240324175259-yox9vtb",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240324175259-yox9vtb",
		"title": "UH3L12——工具窗口逻辑处理",
		"type": "doc",
		"updated": "20240324191705"
	},
	"Children": [
		{
			"ID": "20240324190833-ptdagc0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240324190833-ptdagc0",
				"updated": "20240324190837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "前置知识点"
				}
			]
		},
		{
			"ID": "20240324190838-f9i1xaz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240324190838-f9i1xaz",
				"updated": "20240324190944"
			},
			"Children": [
				{
					"ID": "20240324190840-cmrxkkg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240324190840-cmrxkkg",
						"updated": "20240324190840"
					},
					"Children": [
						{
							"ID": "20240324190840-x90qu68",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240324190840-x90qu68",
								"updated": "20240324190914"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20240322130058-byaivpw",
									"TextMarkBlockRefSubtype": "d",
									"TextMarkTextContent": "UH3L3——生成AB包资源对比文件"
								}
							]
						}
					]
				},
				{
					"ID": "20240324190914-ibywlad",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240324190914-ibywlad"
					},
					"Children": [
						{
							"ID": "20240324190914-hdcfv4b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240324190914-hdcfv4b",
								"updated": "20240324190930"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20240322133347-psi71sv",
									"TextMarkBlockRefSubtype": "d",
									"TextMarkTextContent": "UH3L4——上传AB包和信息文件"
								}
							]
						}
					]
				},
				{
					"ID": "20240324190932-bni0auc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240324190932-bni0auc",
						"updated": "20240324190944"
					},
					"Children": [
						{
							"ID": "20240324190932-f79j8sv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240324190932-f79j8sv",
								"updated": "20240324190942"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20240322202911-xhgiju4",
									"TextMarkBlockRefSubtype": "d",
									"TextMarkTextContent": "UH3L8——编辑器功能—设置默认资源"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240324190758-n2p6log",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240324190758-n2p6log",
				"updated": "20240324190758"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目标"
				}
			]
		},
		{
			"ID": "20240324190758-uhhjcf9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240324190758-uhhjcf9",
				"updated": "20240324190831"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将之前的编辑器功能整合到上节课创建的窗口中"
				}
			]
		},
		{
			"ID": "20240324190951-dqnsie0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240324190951-dqnsie0",
				"updated": "20240324191358"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将之前编写的静态方法移植到窗口类，然后在对应的按钮代码块里调用即可，但是需要进行如下的修改："
				}
			]
		},
		{
			"ID": "20240324191024-5rdorf2",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240324191024-5rdorf2",
				"updated": "20240324191705"
			},
			"Children": [
				{
					"ID": "20240324191025-pztclcg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240324191025-pztclcg",
						"updated": "20240324191025"
					},
					"Children": [
						{
							"ID": "20240324191025-x8vkhty",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240324191025-x8vkhty",
								"updated": "20240324191333"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将静态方法改为私有方法"
								}
							]
						}
					]
				},
				{
					"ID": "20240324191400-897efmk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240324191400-897efmk"
					},
					"Children": [
						{
							"ID": "20240324191400-aw09avf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240324191400-aw09avf",
								"updated": "20240324191633"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "UploadABFile"
								},
								{
									"Type": "NodeText",
									"Data": "​内，读取文件夹的路径需要根据平台页签的选择而动态改变"
								}
							]
						}
					]
				},
				{
					"ID": "20240324191530-wysz3nq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240324191530-wysz3nq"
					},
					"Children": [
						{
							"ID": "20240324191530-sz83o6u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240324191530-sz83o6u",
								"updated": "20240324191638"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "FtpUploadFile"
								},
								{
									"Type": "NodeText",
									"Data": "​内，服务器的上传路径需要根据窗口输入的IP以及平台页签的选择而动态改变"
								}
							]
						}
					]
				},
				{
					"ID": "20240324191640-xw0vnz4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240324191640-xw0vnz4",
						"updated": "20240324191705"
					},
					"Children": [
						{
							"ID": "20240324191640-il3sfc6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240324191640-il3sfc6",
								"updated": "20240324191705"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CreateABCompareFile"
								},
								{
									"Type": "NodeText",
									"Data": "​，读取文件夹和生成文件夹的路径需要根据平台页签的选择而动态改变"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240324191424-xb4ok3w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240324191424-xb4ok3w",
				"style": "line-height: 22px;",
				"updated": "20240324191427"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.IO;\nusing System.Net;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Threading.Tasks;\nusing UnityEditor;\nusing UnityEngine;\n\npublic class ABTools : EditorWindow\n{\n    private int nowSelIndex = 0;\n    private string[] targetStrings = new string[] { \"PC\", \"IOS\", \"Android\" };\n    private string serverIP = \"ftp://192.168.1.101\";\n\n    [MenuItem(\"AB包工具/打开工具窗口\")]\n    private static void OpenWindow()\n    {\n        ABTools window = EditorWindow.GetWindowWithRect\u003cABTools\u003e(new Rect(0, 0, 350, 220));\n        window.Show();\n    }\n\n    private void OnGUI()\n    {\n        GUI.Label(new Rect(10, 10, 150, 15), \"平台选择\");\n        //页签显示 是从数组中取出字符串内容来显示，所以需要改变当前选中的索引\n        nowSelIndex = GUI.Toolbar(new Rect(10, 30, 330, 20), nowSelIndex, targetStrings);\n        //资源服务器IP地址设置\n        GUI.Label(new Rect(10, 60, 150, 15), \"资源服务器地址\");\n        serverIP = GUI.TextField(new Rect(10, 80, 330, 20), serverIP);\n        //创建对比文件 按钮\n        if (GUI.Button(new Rect(10, 110, 100, 40), \"创建对比文件\"))\n            CreateABCompareFile();\n        //保存默认资源到StreamingAssets按钮\n        if (GUI.Button(new Rect(115, 110, 225, 40), \"保存默认资源到StreamingAssets\"))\n            MoveABToStreamingAssets();\n        //上传AB包和对比文件按钮\n        if (GUI.Button(new Rect(10, 160, 330, 40), \"上传AB包和对比文件\"))\n            UploadABFile();\n    }\n\n    private void UploadABFile()\n    {\n        DirectoryInfo directory = new DirectoryInfo(Application.dataPath + $\"/ArtRes/AB/{targetStrings[nowSelIndex]}/\");\n        FileInfo[] fileInfos = directory.GetFiles();\n\n        foreach (FileInfo info in fileInfos)\n        {\n            //检查后缀，没有后缀的是AB包，txt后缀的是资源对比文件，这两个才是需要上传的内容\n            if (info.Extension == \"\" ||\n                info.Extension == \".txt\")\n            {\n                //上传该文件\n                FtpUploadFile(info.FullName, info.Name);\n            }\n        }\n    }\n\n    private async void FtpUploadFile(string filePath, string fileName)\n    {\n        await Task.Run(() =\u003e\n        {\n            try\n            {\n                //创建一个FTP连接 用于上传\n                FtpWebRequest request = FtpWebRequest.Create(new System.Uri($\"{serverIP}/AB/{targetStrings[nowSelIndex]}/\" + fileName)) as FtpWebRequest;\n                //设置通信凭证\n                NetworkCredential credential = new NetworkCredential(\"MrTang\", \"MrTang123\");\n                request.Credentials = credential;\n                //其他设置：代理设置为null，请求完毕后关闭控制连接，操作命令设置为上传，指定传输二进制类型数据\n                request.Proxy = null;\n                request.KeepAlive = false;\n                request.Method = WebRequestMethods.Ftp.UploadFile;\n                request.UseBinary = true;\n                //获取上传流\n                Stream upLoadStream = request.GetRequestStream();\n                //获取读取文件的流\n                using (FileStream file = File.OpenRead(filePath))\n                {\n                    //使用字节数组一点一点的从文件里读取内容，并写入到文件流内\n                    byte[] bytes = new byte[2048];\n                    int contentLength = file.Read(bytes, 0, bytes.Length);\n                    while (contentLength \u003e 0)\n                    {\n                        upLoadStream.Write(bytes, 0, contentLength);\n                        contentLength = file.Read(bytes, 0, bytes.Length);\n                    }\n                    file.Close();\n                    upLoadStream.Close();\n                }\n                Debug.Log($\"{fileName}上传成功\");\n            }\n            catch (System.Exception e)\n            {\n                Debug.Log($\"{fileName}上传失败：{e.Message}\");\n            }\n        });\n    }\n\n    //将选中的资源移动到StreamingAssets文件夹中\n    private void MoveABToStreamingAssets()\n    {\n        //通过编辑器Selection类中的方法，获取在Project窗口选中的资源\n        Object[] selectedAsset = Selection.GetFiltered(typeof(UnityEngine.Object), SelectionMode.DeepAssets);\n        if (selectedAsset.Length == 0)\n            return;\n        //用于拼接本地默认AB包资源消息的字符串\n        string abCompareInfo = \"\";\n        //遍历选中的资源对象\n        foreach (Object asset in selectedAsset)\n        {\n            //通过AssetDatabase类获取资源的路径\n            string assetPath = AssetDatabase.GetAssetPath(asset);\n            //截取路径当中的文件名，用于作为StreamingAsset中的文件名\n            string fileName = assetPath.Substring(assetPath.LastIndexOf('/'));\n            //如果文件名有'.'，说明有后缀名，也就不是AB包，因此我们需要忽略掉\n            if (fileName.IndexOf('.') != -1)\n                continue;\n            //利用AssetDatabase中的API将选中文件复制到目标路径\n            AssetDatabase.CopyAsset(assetPath, \"Assets/StreamingAssets\" + fileName);\n            //获取拷贝到StreamingAssets文件夹中的文件的全部信息\n            FileInfo fileInfo = new FileInfo(Application.streamingAssetsPath + fileName);\n            abCompareInfo += fileInfo.Name + \" \" + fileInfo.Length + \" \" + CreateABCompare.GetMD5(fileInfo.FullName);\n            abCompareInfo += \"|\";\n        }\n        //去掉最后一个|符号，为了之后拆分字符串方便\n        abCompareInfo = abCompareInfo.Substring(0, abCompareInfo.Length - 1);\n        //将本地默认资源的对比消息存入文件\n        File.WriteAllText(Application.streamingAssetsPath + \"/ABCompareInfo.txt\", abCompareInfo);\n        AssetDatabase.Refresh();\n    }\n\n    // 生成AB包对比文件\n    private void CreateABCompareFile()\n    {\n        //要根据选择的平台读取对应平台的文件夹下的内容，来进行对比文件的生成\n        DirectoryInfo directory = new DirectoryInfo(Application.dataPath + $\"/ArtRes/AB/{targetStrings[nowSelIndex]}\");\n        FileInfo[] fileInfos = directory.GetFiles();\n        string abCompareInfo = \"\";\n        foreach (FileInfo info in fileInfos)\n        {\n            //检查后缀，没有后缀的，才是AB包，我们只需要AB包的消息\n            if (info.Extension == \"\")\n            {\n                //拼接一个AB包的消息\n                abCompareInfo += info.Name + \" \" + info.Length + \" \" + GetMD5(info.FullName);\n                //用分隔符分开不同文件之间的消息\n                abCompareInfo += \"|\";\n            }\n        }\n        //删除最后一个\"|\"\n        abCompareInfo = abCompareInfo.Substring(0, abCompareInfo.Length - 1);\n        File.WriteAllText(Application.dataPath + $\"/ArtRes/AB/{targetStrings[nowSelIndex]}/ABCompareInfo.txt\", abCompareInfo);\n        Debug.Log(\"AB包对比文件生成完毕！\");\n        AssetDatabase.Refresh();            //刷新编辑器\n    }\n\n    //获取文件MD5码\n    private string GetMD5(string filePath)\n    {\n        using (FileStream file = new FileStream(filePath, FileMode.Open))\n        {\n            //声明一个MD5对象，用于生成MD5码\n            MD5 md5 = new MD5CryptoServiceProvider();\n            //利用API得到数据的MD5码 16个字节的数组\n            byte[] md5Info = md5.ComputeHash(file);\n            //把16个字节转换为16进制 拼接成字符串，为了减小md5码的长度\n            StringBuilder sb = new StringBuilder();\n            file.Close();\n            for (int i = 0; i \u003c md5Info.Length; i++)\n                //关于md5Info[i].ToString()内的参数，如果传入X2就是大写的16进制，x2就是小写的\n                sb.Append(md5Info[i].ToString(\"x2\"));\n            return sb.ToString();\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}