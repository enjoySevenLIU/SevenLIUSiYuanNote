{
	"ID": "20240208212724-6f5czwp",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240208212724-6f5czwp",
		"title": "UG1L8——窗口相关",
		"type": "doc",
		"updated": "20240406143617"
	},
	"Children": [
		{
			"ID": "20240208220026-g24gdrf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240208220026-g24gdrf",
				"updated": "20240208220031"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240208220031-xsh7jsb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240208220031-xsh7jsb",
				"style": "line-height: 22px;",
				"updated": "20240406143617"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "GUI.Window()\t\t//绘制窗口\nGUI.ModalWindow()\t//绘制模态窗口，可以让该窗口以外的其他可见控件不再有用\nGUI.DragWindow()\t//可拖动窗口\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240208212724-u9pix47",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240208212724-u9pix47",
				"name": "GUI.Window()",
				"updated": "20240208213406"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "窗口"
				}
			]
		},
		{
			"ID": "20240208213632-bp5y221",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240208213632-bp5y221",
				"updated": "20240208213848"
			},
			"Children": [
				{
					"ID": "20240208213646-vmi992d",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240208213646-vmi992d",
						"updated": "20240208213844"
					},
					"Children": [
						{
							"ID": "20240208213646-ddgrvqj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240208213646-ddgrvqj",
								"updated": "20240208213844"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第一个参数是是窗口的唯一ID，不要和别的窗口重复！如果窗口id相同，则上一个窗口会被顶掉"
								}
							]
						}
					]
				},
				{
					"ID": "20240208213710-vwnlzs3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240208213710-vwnlzs3",
						"updated": "20240208213848"
					},
					"Children": [
						{
							"ID": "20240208213710-4vaw01m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240208213710-4vaw01m",
								"updated": "20240208213848"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第二个参数是用于绘制窗口用的委托函数，要参数为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "int"
								},
								{
									"Type": "NodeText",
									"Data": "​无返回值的函数，传入的参数是窗口的ID"
								}
							]
						}
					]
				},
				{
					"ID": "20240208213710-x5uk9kt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240208213710-x5uk9kt"
					},
					"Children": [
						{
							"ID": "20240208213710-5j1b65p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240208213710-5j1b65p",
								"updated": "20240208213732"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第三个参数是窗口的标题"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240208213735-48hb79x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240208213735-48hb79x",
				"updated": "20240208213906"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不同窗口调用相同委托参数，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "委托函数可以传入窗口的id来做不同的处理"
				},
				{
					"Type": "NodeText",
					"Data": "，如果窗口id相同，则上一个窗口会被顶掉"
				}
			]
		},
		{
			"ID": "20240208213854-0m01bh8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240208213854-0m01bh8",
				"style": "line-height: 22px;",
				"updated": "20240208213950"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private void OnGUI()\n{\n    //第一个参数 id 是窗口的唯一ID 不要和别的窗口重复\n    //第二个参数 是用于 绘制窗口用的委托函数 传入即可\n    //第三个参数 是窗口的标题\n    GUI.Window(1, new Rect(100, 100, 200, 150), DrawWindow, \"测试窗口\");\n    //不同窗口调用相同委托参数 委托函数可以传入窗口的id来做不同的处理\n    //如果窗口id相同，则上一个窗口会被顶掉\n    GUI.Window(2, new Rect(100, 350, 200, 150), DrawWindow, \"测试窗口\");\n}\n\nprivate void DrawWindow(int id)\n{\n    switch (id)\n    {\n        case 1:\n            if (GUI.Button(new Rect(0, 30, 30, 20), \"1\"))\n            {\n                isModel = true;\n                break;\n            }\n            break;\n        case 2:\n            GUI.Button(new Rect(0, 30, 30, 20), \"2\");\n            break;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240208214002-9s81r5i",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240208214002-9s81r5i",
				"name": "GUI.ModalWindow()",
				"updated": "20240208214007"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模态窗口"
				}
			]
		},
		{
			"ID": "20240208214341-70j436f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240208214341-70j436f",
				"updated": "20240406143536"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模态窗口，可以让该窗口以外的其他可见控件不再有用，可以理解为该窗口在最上层，其他按钮都点不到了，只能点击该窗口的上的控件\n类似于警告窗口，或者说Windows的UAC窗口（笑）"
				}
			]
		},
		{
			"ID": "20240208214413-s9k8gxk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240208214413-s9k8gxk",
				"style": "line-height: 22px;",
				"updated": "20240208214741"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private bool isModel = false;\n\nprivate void OnGUI()\n{\n    GUI.Window(1, new Rect(100, 100, 200, 150), DrawWindow, \"测试窗口\");\n    GUI.Window(2, new Rect(100, 350, 200, 150), DrawWindow, \"测试窗口\");\n\n    /* 模态窗口 可以让该其他可见不再有用\n     * 可以理解为该窗口在最上层 其他按钮都点不到了\n     * 只能点击该窗口的上的控件\n     */\n    if (isModel)\n    {\n        GUI.ModalWindow(3, new Rect(300, 100, 200, 150), DrawWindow, \"模态窗口\");\n    }\n}\n\nprivate void DrawWindow(int id)\n{\n    switch (id)\n    {\n        case 1:\n            if (GUI.Button(new Rect(0, 30, 30, 20), \"1\"))\n            {\n                isModel = true;\n                break;\n            }\n            break;\n        case 2:\n            GUI.Button(new Rect(0, 30, 30, 20), \"2\");\n            break;\n        case 3:\n            if (GUI.Button(new Rect(0, 30, 30, 20), \"3\"))\n            {\n                isModel = false;\n                break;\n            }\n            break;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240208214619-k55i22d",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240208214619-k55i22d",
				"name": "GUI.DragWindow()",
				"updated": "20240208214623"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可拖动窗口"
				}
			]
		},
		{
			"ID": "20240208214646-ac32qy2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240208214646-ac32qy2",
				"updated": "20240208215238"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "窗口可以返回这一帧所在的位置（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Rect"
				},
				{
					"Type": "NodeText",
					"Data": "​），因此我们可以声明一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Rect"
				},
				{
					"Type": "NodeText",
					"Data": "​变量来存储窗口的位置尺寸状态\n但是位置赋值只是一个前提，可拖动窗口的窗口绘制委托函数里还需要调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GUI.DragWindow()"
				},
				{
					"Type": "NodeText",
					"Data": "​！\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GUI.DragWindow()"
				},
				{
					"Type": "NodeText",
					"Data": "​可以传入一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Rect"
				},
				{
					"Type": "NodeText",
					"Data": "​值，它将决定窗口的哪个部分可以移动"
				}
			]
		},
		{
			"ID": "20240208214634-eyreanj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240208214634-eyreanj",
				"style": "line-height: 22px;",
				"updated": "20240208215150"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private Rect dragWinPos = new Rect(400, 400, 200, 100);\nprivate bool isModel = false;\n\nprivate void OnGUI()\n{\n    GUI.Window(1, new Rect(100, 100, 200, 150), DrawWindow, \"测试窗口\");\n    GUI.Window(2, new Rect(100, 350, 200, 150), DrawWindow, \"测试窗口\");\n    //拖动窗口\n    //注意，位置赋值只是前提\n    //委托函数里需要调用GUI.DragWindow();\n    dragWinPos = GUI.Window(4, dragWinPos, DrawWindow, \"可拖动窗口\");\n}\n\nprivate void DrawWindow(int id)\n{\n    switch (id)\n    {\n        case 1:\n            if (GUI.Button(new Rect(0, 30, 30, 20), \"1\"))\n            {\n                isModel = true;\n                break;\n            }\n            break;\n        case 2:\n            GUI.Button(new Rect(0, 30, 30, 20), \"2\");\n            break;\n        case 4:\n            //该API 写在窗口函数中调用 可以让窗口被拖动\n            //传入Rect参数的重载，作用是决定窗口的哪一部分位置 可以被拖动\n            //默认不填 就是无参重载 默认窗口的所有位置都可以被拖动\n            GUI.DragWindow(new Rect(0, 0, 1000, 20));\n            break;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240208213632-g542pmn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240208213632-g542pmn",
				"updated": "20240208214631"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "窗口完整示例代码"
				}
			]
		},
		{
			"ID": "20240208213407-vkc79v2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240208213407-vkc79v2",
				"style": "line-height: 22px;",
				"updated": "20240208213931"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private Rect dragWinPos = new Rect(400, 400, 200, 100);\nprivate bool isModel = false;\n\nprivate void OnGUI()\n{\n    //第一个参数 id 是窗口的唯一ID 不要和别的窗口重复\n    //第二个参数 是用于 绘制窗口用的委托函数 传入即可\n    //第三个参数 是窗口的标题\n    GUI.Window(1, new Rect(100, 100, 200, 150), DrawWindow, \"测试窗口\");\n    //不同窗口调用相同委托参数 委托函数可以传入窗口的id来做不同的处理\n    //如果窗口id相同，则上一个窗口会被顶掉\n    GUI.Window(2, new Rect(100, 350, 200, 150), DrawWindow, \"测试窗口\");\n\n    /* 模态窗口 可以让该其他可见不再有用\n     * 可以理解为该窗口在最上层 其他按钮都点不到了\n     * 只能点击该窗口的上的控件\n     */\n    if (isModel)\n    {\n        GUI.ModalWindow(3, new Rect(300, 100, 200, 150), DrawWindow, \"模态窗口\");\n    }\n\n    //拖动窗口\n    //注意，位置赋值只是前提\n    //委托函数里需要调用GUI.DragWindow();\n    dragWinPos = GUI.Window(4, dragWinPos, DrawWindow, \"可拖动窗口\");\n}\n\nprivate void DrawWindow(int id)\n{\n    switch (id)\n    {\n        case 1:\n            if (GUI.Button(new Rect(0, 30, 30, 20), \"1\"))\n            {\n                isModel = true;\n                break;\n            }\n            break;\n        case 2:\n            GUI.Button(new Rect(0, 30, 30, 20), \"2\");\n            break;\n        case 3:\n            if (GUI.Button(new Rect(0, 30, 30, 20), \"3\"))\n            {\n                isModel = false;\n                break;\n            }\n            break;\n        case 4:\n            //该API 写在窗口函数中调用 可以让窗口被拖动\n            //传入Rect参数的重载，\n            //作用是决定窗口的哪一部分位置 可以被拖动\n            //默认不填 就是无参重载 默认窗口的所有位置都可以被拖动\n            GUI.DragWindow(new Rect(0, 0, 1000, 20));\n            break;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}