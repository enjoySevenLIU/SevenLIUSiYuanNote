{
	"ID": "20240208154255-v73fk7o",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240208154255-v73fk7o",
		"title": "UG1L4——输入框和拖动条",
		"type": "doc",
		"updated": "20241128125656"
	},
	"Children": [
		{
			"ID": "20240208160115-eafwn1d",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240208160115-eafwn1d",
				"updated": "20240208160120"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240208160120-m656u4q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240208160120-m656u4q",
				"style": "line-height: 22px;",
				"updated": "20240208162015"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "GUI.TextField()\t\t\t//绘制输入框，传入当前字符串和最大输入的字符串的长度，返回这一帧输入框内的字符串\nGUI.PasswordField()\t\t//绘制密码输入框，传入当前字符串、要用什么字符来挡住密码字符串和最大输入的字符串的长度，返回这一帧输入框内的字符串\nGUI.HorizontalSlider()\t//水平输入框，第二个参数代表当前的值，第三个和第四个分别代表最小值到最大值，返回这一帧拖动条对应的值\nGUI.VerticalSlider()\t//垂直输入框，第二个参数代表当前的值，第三个和第四个分别代表最小值到最大值，返回这一帧拖动条对应的值\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240208154255-rcm9oui",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240208154255-rcm9oui",
				"name": "GUI.TextField()",
				"updated": "20241128125634"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输入框"
				}
			]
		},
		{
			"ID": "20240208154344-ojunweb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240208154344-ojunweb",
				"updated": "20241128125634"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "普通输入"
				}
			]
		},
		{
			"ID": "20240208154526-lbu5ltj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240208154526-lbu5ltj",
				"updated": "20241128125634"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GUI.TextField"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是绘制输入框的方法，\n第二个参数传入当前的字符串，第三个参数传入最大输入字符串的长度，返回这一帧输入框内的字符串，\n因此和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GUI.Toggle"
				},
				{
					"Type": "NodeText",
					"Data": "​ 一样，必须要在外面声明一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "string"
				},
				{
					"Type": "NodeText",
					"Data": "​ 变量，用来存储当前输入框内的字符串"
				}
			]
		},
		{
			"ID": "20240208154510-qhx6a6m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240208154510-qhx6a6m",
				"style": "line-height: 22px;",
				"updated": "20240208155437"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private string inputStr = \"\";\n\nprivate void OnGUI()\n{\n    //必须要这样写！否则无法正确显示内容，需要将填写的内容实时刷新\n    //第二个参数代表当前的字符串\n    //第三个参数 是最大输入字符串的长度\n    inputStr = GUI.TextField(new Rect(0, 0, 100, 30), inputStr, 5);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240208154500-5pv8s5w",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240208154500-5pv8s5w",
				"name": "GUI.PasswordField()",
				"updated": "20241128125643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "密码输入"
				}
			]
		},
		{
			"ID": "20240208155908-zx0rw9v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240208155908-zx0rw9v",
				"updated": "20241128125643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GUI.PasswordField"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是绘制输入框的方法，\n第二个参数传入当前的字符串，第三个参数传入最大输入字符串的长度，返回这一帧输入框内的字符串，\n因此和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GUI.Toggle"
				},
				{
					"Type": "NodeText",
					"Data": "​ 一样，必须要在外面声明一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "string"
				},
				{
					"Type": "NodeText",
					"Data": "​ 变量，用来接收和传入输入框内的字符串"
				}
			]
		},
		{
			"ID": "20240208155908-ixqqq4y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240208155908-ixqqq4y",
				"style": "line-height: 22px;",
				"updated": "20240208160105"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private string inputPW = \"\";\n\nprivate void OnGUI()\n{\n\t//这里的第三个参数是char, 代表用什么字符遮住密码\n    inputPW = GUI.PasswordField(new Rect(0, 50, 100, 30), inputPW, '*');\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240208154337-k29mdj6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"alias": "GUI.VerticalSlider()",
				"id": "20240208154337-k29mdj6",
				"name": "GUI.HorizontalSlider()",
				"updated": "20241128125656"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "拖动条"
				}
			]
		},
		{
			"ID": "20240208160521-kucjjab",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240208160521-kucjjab",
				"updated": "20241128125654"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GUI.HorizontalSlider"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GUI.VerticalSlider"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是绘制拖动条的方法，区别是方向不同\n第二个参数传入当前的值，第三个参数传入拖动条最左边对应的值（通常是最小值），第四个参数传入拖动条最右边对应的值（通常是最大值），\n返回这一帧拖动条对应的值，\n因此和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GUI.Toggle"
				},
				{
					"Type": "NodeText",
					"Data": "​ 一样，必须要在外面声明一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "float"
				},
				{
					"Type": "NodeText",
					"Data": "​ 变量，用来存储当前输入框内的字符串"
				}
			]
		},
		{
			"ID": "20240208162228-kdin2bx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240208162228-kdin2bx",
				"updated": "20241128125656"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "绘制拖动条最多可以传入三个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref code",
					"TextMarkBlockRefID": "20230822150550-toyc7gg",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "GUIStyle"
				},
				{
					"Type": "NodeText",
					"Data": "​，用来分别控制条，按钮等样式"
				}
			]
		},
		{
			"ID": "20240208154409-rmis2fu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240208154409-rmis2fu",
				"style": "line-height: 22px;",
				"updated": "20240208160518"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private float nowValue = 0.5f;\n\nprivate void OnGUI()\n{\n    //必须要这样写！否则无法正确显示内容，需要将填写的内容实时刷新\n    //第二个参数代表当前的值\n    //第三个和第四个分别代表最小值到最大值\n    nowValue = GUI.HorizontalSlider(new Rect(0, 100, 100, 50), nowValue, 0.0f, 1.0f);\n    nowValue = GUI.VerticalSlider(new Rect(0, 150, 50, 100), nowValue, 0, 1);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}