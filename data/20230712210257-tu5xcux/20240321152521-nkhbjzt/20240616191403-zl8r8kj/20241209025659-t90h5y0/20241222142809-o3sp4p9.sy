{
	"ID": "20241222142809-o3sp4p9",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20241222142809-o3sp4p9",
		"title": "US3S8L9——玻璃效果",
		"type": "doc",
		"updated": "20241222171810"
	},
	"Children": [
		{
			"ID": "20241222142810-mez79xt",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20241222142810-mez79xt",
				"updated": "20241222160051"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "玻璃效果"
				}
			]
		},
		{
			"ID": "20241222142835-hp4mlfl",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241222142835-hp4mlfl",
				"updated": "20241222160051"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "玻璃效果基本原理"
				}
			]
		},
		{
			"ID": "20241222142844-3s8vufr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222142844-3s8vufr",
				"updated": "20241222142924"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "根据我们目前学习的知识，想要实现玻璃效果，可能会联想到使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240616192309-30s0xol",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "透明"
				},
				{
					"Type": "NodeText",
					"Data": "相关知识来进行制作。\n虽然透明固然可以制作出玻璃透明的效果，但是它在许多地方有所缺陷，比如："
				}
			]
		},
		{
			"ID": "20241222142911-sz7ygjd",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241222142911-sz7ygjd",
				"updated": "20241222142912"
			},
			"Children": [
				{
					"ID": "20241222142912-up8unas",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241222142912-up8unas",
						"updated": "20241222142912"
					},
					"Children": [
						{
							"ID": "20241222142912-2fxkxdc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222142912-2fxkxdc",
								"updated": "20241222142912"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "透明无法表现出复杂的光学效果\n"
								}
							]
						},
						{
							"ID": "20241222142941-8myofu4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222142941-8myofu4",
								"updated": "20241222142941"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "玻璃不仅仅是透明的，它还具有反射、折射等光学效果，使用透明无法简单的实现这些效果\n"
								}
							]
						}
					]
				},
				{
					"ID": "20241222142914-pl0lxyg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241222142914-pl0lxyg",
						"updated": "20241222142914"
					},
					"Children": [
						{
							"ID": "20241222142914-x0wpkgj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222142914-x0wpkgj",
								"updated": "20241222142914"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "透明物体往往会遇到深度排序问题\n"
								}
							]
						},
						{
							"ID": "20241222142943-4rwkcq0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222142943-4rwkcq0",
								"updated": "20241222142943"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "渲染顺序不正确时，会导致视觉错误\n"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241222142918-y3zpdtx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222142918-y3zpdtx",
				"updated": "20241222142919"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "等等"
				}
			]
		},
		{
			"ID": "20241222142909-3biuclv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222142909-3biuclv",
				"updated": "20241222142954"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此我们"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "想要实现效果更好的玻璃效果时，往往不会选择使用透明来制作"
				}
			]
		},
		{
			"ID": "20241222142954-2lkutyx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222142954-2lkutyx",
				"updated": "20241222143057"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此我们将使用渲染纹理来制作玻璃效果，基本原理是："
				}
			]
		},
		{
			"ID": "20241222143101-fqp88lv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222143101-fqp88lv",
				"updated": "20241222143156"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "渲染玻璃效果物体之前，先获取到当前屏幕图像"
				},
				{
					"Type": "NodeText",
					"Data": "，将当前屏幕图像"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "存储在渲染纹理之中"
				},
				{
					"Type": "NodeText",
					"Data": "，\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "之后在真正处理玻璃效果物体时"
				},
				{
					"Type": "NodeText",
					"Data": "，再 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "利用该渲染纹理"
				},
				{
					"Type": "NodeText",
					"Data": " 来实现 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "透明、折射"
				},
				{
					"Type": "NodeText",
					"Data": " 等等效果，\n该过程中并不会使用混合相关知识，而是直接进行颜色相乘或相加来进行颜色叠加"
				}
			]
		},
		{
			"ID": "20241222143253-w1t9ouu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222143253-w1t9ouu",
				"updated": "20241222160018"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"style": "width: 275px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20241222143253-atf1ix7.png"
						},
						{
							"Type": "NodeLinkSpace"
						},
						{
							"Type": "NodeLinkTitle",
							"Data": "这是这一帧目前要渲染的屏幕内容，将其存储到渲染纹理内"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 275px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"style": "width: 281px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20241222143410-st21ifo.png"
						},
						{
							"Type": "NodeLinkSpace"
						},
						{
							"Type": "NodeLinkTitle",
							"Data": "将玻璃的顶点坐标转换到屏幕上，然后通过屏幕坐标从存储的渲染纹理内采样，和玻璃本身颜色进行处理，得到类似的透明效果，再此基础上叠加物体本身颜色和反射等效果"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 281px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"style": "width: 276px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20241222143923-qllyes4.png"
						},
						{
							"Type": "NodeLinkSpace"
						},
						{
							"Type": "NodeLinkTitle",
							"Data": "结合法线纹理，对颜色进行偏移，实现玻璃表面凹凸不平的效果，提升玻璃效果的质感"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 276px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241222154311-juttg4a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222154311-juttg4a",
				"updated": "20241222160051"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "也就是说，这里的透明效果本质上是通过把 物体遮挡后边的屏幕内容的部分 叠加到自己身上，\n使得可以从物体身上看到被物体遮挡的后面的内容，以模拟出一种透明的效果，\n在此基础上，就可以叠加显示物体本身颜色和反射等效果"
				}
			]
		},
		{
			"ID": "20241222143157-go4rdpi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222143157-go4rdpi",
				"updated": "20241222143217"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一句话总结："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "在渲染玻璃效果之前，先捕获当前屏幕内容并保存到一张渲染纹理当中，\n在之后的 Shader 处理中利用该渲染纹理进行采样，参与最终的颜色计算，实现各种玻璃效果。"
				}
			]
		},
		{
			"ID": "20241222143252-gh81zk5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241222143252-gh81zk5",
				"updated": "20241222144825"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "玻璃效果实现使用的知识点"
				}
			]
		},
		{
			"ID": "20241222144207-ppxtcwp",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241222144207-ppxtcwp",
				"name": "GrabPass",
				"updated": "20241222144825"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特殊渲染通道 GrabPass"
				}
			]
		},
		{
			"ID": "20241222144521-a71q5nt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222144521-a71q5nt",
				"updated": "20241222144543"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GrabPass"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的作用是捕获当前屏幕上已经渲染的内容，并将其存储到一张纹理中，它需要包含在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SubShader"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语句块中"
				}
			]
		},
		{
			"ID": "20241222144548-a7ap6eg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222144548-a7ap6eg",
				"updated": "20241222144548"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它的用法有两种："
				}
			]
		},
		{
			"ID": "20241222144526-orpy230",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241222144526-orpy230",
				"updated": "20241222144805"
			},
			"Children": [
				{
					"ID": "20241222144526-n0wi20t",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241222144526-n0wi20t",
						"updated": "20241222144805"
					},
					"Children": [
						{
							"ID": "20241222144526-zc8k2xk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222144526-zc8k2xk",
								"updated": "20241222144805"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "大括号中什么都不写"
								},
								{
									"Type": "NodeText",
									"Data": "，默认会把屏幕内容写入一个叫做 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "_GrabTexture"
								},
								{
									"Type": "NodeText",
									"Data": "​ 的纹理变量中\n直接在 CG 语句中声明 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "_GrabTexture"
								},
								{
									"Type": "NodeText",
									"Data": "​ 纹理变量即可直接使用抓取的渲染纹理"
								}
							]
						},
						{
							"ID": "20241222144601-kssro4p",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241222144601-kssro4p",
								"style": "line-height: 22px;",
								"updated": "20241222144702"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "SubShader\n{\n    GrabPass {}\n\n    Pass\n    {\n        CGPROGRAM\n        #pragma vertex vert\n        #pragma fragment frag\n        #include \"UnityCG.cginc\"\n\n        sampler2D _GrabTexture;\n\t\t// ...\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20241222144527-be025eq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241222144527-be025eq",
						"updated": "20241222144757"
					},
					"Children": [
						{
							"ID": "20241222144527-5mqonu2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222144527-5mqonu2",
								"updated": "20241222144757"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "大括号中写入自定义变量名"
								},
								{
									"Type": "NodeText",
									"Data": "，会把对应屏幕内容写入该自定义纹理变量中\n在 CG 语句中声明对应纹理变量即可使用抓取的渲染纹理"
								}
							]
						},
						{
							"ID": "20241222144722-x4rxukj",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241222144722-x4rxukj",
								"style": "line-height: 22px;",
								"updated": "20241222144751"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "SubShader\n{\n    GrabPass { \"_RefractionTex\" }\n\n    Pass\n    {\n        CGPROGRAM\n        #pragma vertex vert\n        #pragma fragment frag\n        #include \"UnityCG.cginc\"\n\n        sampler2D _RefractionTex;\n\t\t// ...\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241222144825-u6yur21",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241222144825-u6yur21",
				"name": "ComputeGrabScreenPos()",
				"updated": "20241222160531"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "内置函数 ComputeGrabScreenPos"
				}
			]
		},
		{
			"ID": "20241222144838-yah3yab",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222144838-yah3yab",
				"updated": "20241222144916"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "该内置函数可以用于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "计算屏幕空间位置"
				},
				{
					"Type": "NodeText",
					"Data": "，传入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "顶点的裁剪空间位置"
				},
				{
					"Type": "NodeText",
					"Data": "\n返回一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "float4"
				},
				{
					"Type": "NodeText",
					"Data": "​ 结果，该 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "float4"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中的内容分别代表："
				}
			]
		},
		{
			"ID": "20241222144909-02ghqdu",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20241222144909-02ghqdu",
				"updated": "20241222144909"
			},
			"Children": [
				{
					"ID": "20241222144909-33b7cnx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241222144909-33b7cnx",
						"updated": "20241222144909"
					},
					"Children": [
						{
							"ID": "20241222144909-dkccue8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222144909-dkccue8",
								"updated": "20241222144927"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "X：屏幕空间 X 坐标"
								}
							]
						}
					]
				},
				{
					"ID": "20241222144910-e2c2xkd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241222144910-e2c2xkd",
						"updated": "20241222144910"
					},
					"Children": [
						{
							"ID": "20241222144910-td0gji6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222144910-td0gji6",
								"updated": "20241222144928"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Y：屏幕空间 Y 坐标"
								}
							]
						}
					]
				},
				{
					"ID": "20241222144910-fh0yr0c",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241222144910-fh0yr0c",
						"updated": "20241222144910"
					},
					"Children": [
						{
							"ID": "20241222144910-2h2wvtw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222144910-2h2wvtw",
								"updated": "20241222144910"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Z：裁剪空间深度值，一般表示顶点距离摄像机的相对深度\n"
								}
							]
						}
					]
				},
				{
					"ID": "20241222144910-1m4yfv9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20241222144910-1m4yfv9",
						"updated": "20241222144910"
					},
					"Children": [
						{
							"ID": "20241222144910-d5tz9bn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222144910-d5tz9bn",
								"updated": "20241222144935"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "W：裁剪空间的 W 分量，通常用于透视除法，即 X 或 Y/W 后 X 或 Y 的范围将在0"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "~"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "1之间"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241222155621-q3473y1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241222155621-q3473y1",
				"style": "line-height: 22px;",
				"updated": "20241222155639"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "v2f vert(appdata_base v)\n(\n    v2f data;\n    data.pos = UnityObjectToClipPos(v.vertex);                      // 顶点坐标转裁剪坐标\n    data.grabPos = ComputeScreenPos(data.pos);                      // 将裁剪坐标转换到屏幕坐标\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241222144850-gztwxcd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222144850-gztwxcd",
				"updated": "20241222145002"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "我们可以利用该函数得到顶点相对屏幕的坐标，从而从捕获的渲染纹理中进行采样"
				}
			]
		},
		{
			"ID": "20241222160302-nzxptme",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222160302-nzxptme",
				"updated": "20241222160356"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果要通过此坐标从屏幕纹理内采样得到纹理，需要先获取先进行计算："
				}
			]
		},
		{
			"ID": "20241222160353-0u1hsok",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241222160353-0u1hsok",
				"style": "line-height: 22px;",
				"updated": "20241222160531"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "fixed2 screenUV = i.grabPos.xy / i.grabPos.w;\t// 利用透视除法，将屏幕坐标转换到0~1范围内，然后再从屏幕纹理内采样\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241222145002-qzvetqy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241222145002-qzvetqy",
				"updated": "20241222163430"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模拟折射的自定义计算规则"
				}
			]
		},
		{
			"ID": "20241222145033-tb4sh1m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222145033-tb4sh1m",
				"updated": "20241222163430"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了模拟出玻璃折射的效果，我们一般不会使用之前学习的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20241221164814-jsqh7wg",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "折射"
				},
				{
					"Type": "NodeText",
					"Data": "相关知识点在立方体纹理中采样，\n我们往往会自定义一些计算规则，来模拟计算出折射的效果。\n总体的设计思路，就是在对捕获纹理进行采样时，进行一些偏移计算。\n具体的偏移计算规则，完全是可以自定义的，取决于你如何计算"
				}
			]
		},
		{
			"ID": "20241222145049-81wi7l4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241222145049-81wi7l4",
				"updated": "20241222153228"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "测试场景"
				}
			]
		},
		{
			"ID": "20241222152459-86ma2o9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222152459-86ma2o9",
				"updated": "20241222153228"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建如下的一个场景，存在六面带纹理和法线的墙包围起来的房间（墙只开单面阴影），其中包含两个立方体\n内层的立方体作为展示，外层的立方体使用玻璃效果Shader，要求外层的立方体能够看到内层立方体且实现玻璃效果"
				}
			]
		},
		{
			"ID": "20241222152751-ar6thx8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222152751-ar6thx8",
				"updated": "20241222152751"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"style": "width: 415px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20241222152751-6jfue3s.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 415px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241222153128-v911612",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241222153128-v911612",
				"updated": "20241222153409"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "玻璃效果基础实现"
				}
			]
		},
		{
			"ID": "20241222153237-bm96d5p",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241222153237-bm96d5p",
				"updated": "20241222153409"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如何让玻璃效果对象滞后渲染"
				}
			]
		},
		{
			"ID": "20241222153304-18gax7k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222153304-18gax7k",
				"updated": "20241222153351"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在实现玻璃效果之前，需要先捕获当前屏幕内容并保存到一张渲染纹理当中，\n那么要保证玻璃效果对象后面的内容正确渲染，我们必须保证玻璃对象能够滞后渲染"
				}
			]
		},
		{
			"ID": "20241222153304-xssjgpt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222153304-xssjgpt",
				"updated": "20241222153323"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "想要让一个对象滞后渲染，那么通过我们学习过的知识，自然的联想到了渲染标签 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Tags"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中的 渲染队列 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20240612194041-x2l9cdo",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "Queue"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241222153355-3wf0f7v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222153355-3wf0f7v",
				"updated": "20241222153409"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体内容详见："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240612192629-v5vifof",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "US2S2L5-1——Tags-渲染标签"
				}
			]
		},
		{
			"ID": "20241222153304-6lrb7sr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222153304-6lrb7sr",
				"updated": "20241222153347"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此对于玻璃效果对象，虽然它本质上是一个不透明物体，但是我们完全可以将它的渲染队列设置为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20240612200658-jj5spjk",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "Transparent"
				},
				{
					"Type": "NodeText",
					"Data": "​ (透明的)\n保证它晚于 背景队列、几何队列、透明测试队列 之后再进行渲染，这时我们捕获的屏幕内容，将包含这些更早渲染的内容信息\n便可以利用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GrabPass"
				},
				{
					"Type": "NodeText",
					"Data": "​ 捕获到相对正确的内容了"
				}
			]
		},
		{
			"ID": "20241222153349-w0n0zf0",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241222153349-w0n0zf0",
				"updated": "20241222163213"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基础玻璃效果实现"
				}
			]
		},
		{
			"ID": "20241222153432-bpevlro",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241222153432-bpevlro",
				"updated": "20241222162340"
			},
			"Children": [
				{
					"ID": "20241222153434-jtitvgq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241222153434-jtitvgq",
						"updated": "20241222153434"
					},
					"Children": [
						{
							"ID": "20241222153434-usb6gfa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222153434-usb6gfa",
								"updated": "20241222153451"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "新建一个Shader，复用 反射基础实现 中的代码"
								}
							]
						},
						{
							"ID": "20241222153453-rdw3mzw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222153453-rdw3mzw",
								"updated": "20241222153510"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "详见："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20241219001301-uqtlfhe",
									"TextMarkBlockRefSubtype": "d",
									"TextMarkTextContent": "US3S8L4——反射效果"
								}
							]
						}
					]
				},
				{
					"ID": "20241222153434-agiuoua",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241222153434-agiuoua",
						"updated": "20241222162340"
					},
					"Children": [
						{
							"ID": "20241222153434-wblwlt1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222153434-wblwlt1",
								"updated": "20241222153513"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "修改相关代码\n"
								}
							]
						},
						{
							"ID": "20241222153513-j8rxlql",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20241222153513-j8rxlql",
								"updated": "20241222162340"
							},
							"Children": [
								{
									"ID": "20241222153516-mh471ii",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20241222153516-mh471ii",
										"updated": "20241222153516"
									},
									"Children": [
										{
											"ID": "20241222153516-cbj5yc2",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241222153516-cbj5yc2",
												"updated": "20241222153519"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "修改属性代码（同时修改CG中的属性映射）\n"
												}
											]
										},
										{
											"ID": "20241222153536-6z63e2l",
											"Type": "NodeList",
											"ListData": {
												"Typ": 1
											},
											"Properties": {
												"id": "20241222153536-6z63e2l",
												"updated": "20241222153536"
											},
											"Children": [
												{
													"ID": "20241222153535-b3vry5e",
													"Type": "NodeListItem",
													"ListData": {
														"Typ": 1,
														"Delimiter": 46,
														"Marker": "MS4=",
														"Num": 1
													},
													"Properties": {
														"id": "20241222153535-b3vry5e",
														"updated": "20241222153535"
													},
													"Children": [
														{
															"ID": "20241222153535-whe2urh",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20241222153535-whe2urh",
																"updated": "20241222153535"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "加入主纹理属性（用于处理物体本身颜色）\n"
																}
															]
														}
													]
												},
												{
													"ID": "20241222153537-2z0jqxa",
													"Type": "NodeListItem",
													"ListData": {
														"Typ": 1,
														"Delimiter": 46,
														"Marker": "Mi4=",
														"Num": 2
													},
													"Properties": {
														"id": "20241222153537-2z0jqxa",
														"updated": "20241222153537"
													},
													"Children": [
														{
															"ID": "20241222153537-lp8imoh",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20241222153537-lp8imoh",
																"updated": "20241222153537"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "加入立方体纹理属性（用于处理反射）\n"
																}
															]
														}
													]
												},
												{
													"ID": "20241222153538-f9crafm",
													"Type": "NodeListItem",
													"ListData": {
														"Typ": 1,
														"Delimiter": 46,
														"Marker": "My4=",
														"Num": 3
													},
													"Properties": {
														"id": "20241222153538-f9crafm",
														"updated": "20241222153538"
													},
													"Children": [
														{
															"ID": "20241222153538-fuvlq9n",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20241222153538-fuvlq9n",
																"updated": "20241222153551"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "将反射率改为折射程度（用于控制折射程度：0 表示完全不折射，相当于完全反射，1 表示完全折射，相当于完全透明）"
																}
															]
														}
													]
												}
											]
										},
										{
											"ID": "20241222154918-sl6epc5",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20241222154918-sl6epc5",
												"style": "line-height: 22px;",
												"updated": "20241222154921"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "Yw=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "Properties\n{\n    _MainTex(\"MainTex\", 2D) = \"\"{}                      // 主纹理\n    _Cube(\"Cubemap\", Cube) = \"\"{}                       // 立方体纹理\n    _RefractAmount(\"RefractAmount\", Range(0, 1)) = 1    // 折射程度，0表示完全反射，1表示完全透明\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								},
								{
									"ID": "20241222153520-yooz9ci",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20241222153520-yooz9ci",
										"updated": "20241222153520"
									},
									"Children": [
										{
											"ID": "20241222153520-k0cob4a",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241222153520-k0cob4a",
												"updated": "20241222153556"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "修改渲染队列为 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Transparent"
												},
												{
													"Type": "NodeText",
													"Data": "​\n"
												}
											]
										},
										{
											"ID": "20241222153558-kodgoxt",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241222153558-kodgoxt",
												"updated": "20241222153608"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "但是 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "RenderType"
												},
												{
													"Type": "NodeText",
													"Data": "​ 渲染类型不修改，因为它本质上还是一个不透明物体，以后使用着色器替换功能时，可以再被正常渲染"
												}
											]
										},
										{
											"ID": "20241222154939-ca7fcqb",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20241222154939-ca7fcqb",
												"style": "line-height: 22px;",
												"updated": "20241222154959"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "Yw=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "SubShader\n{\n    Tags { \"RenderType\" = \"Opaque\" \"Queue\" = \"Transparent\" }\n\n    Pass { /*...*/ }\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								},
								{
									"ID": "20241222153523-xg6lxyh",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20241222153523-xg6lxyh",
										"updated": "20241222153523"
									},
									"Children": [
										{
											"ID": "20241222153523-it7zaxn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241222153523-it7zaxn",
												"updated": "20241222153612"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "加入 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "GrabPass"
												},
												{
													"Type": "NodeText",
													"Data": "​，抓取屏幕图像存储渲染纹理"
												}
											]
										},
										{
											"ID": "20241222155002-wl6edhc",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20241222155002-wl6edhc",
												"style": "line-height: 22px;",
												"updated": "20241222155105"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "Yw=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "SubShader\n{\n    Tags { \"RenderType\" = \"Opaque\" \"Queue\" = \"Transparent\" }\n    GrabPass {}     // 捕获渲染此物体之前当前的屏幕内容，并存储到默认的渲染纹理变量内\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								},
								{
									"ID": "20241222153526-cheku3i",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20241222153526-cheku3i",
										"updated": "20241222153526"
									},
									"Children": [
										{
											"ID": "20241222153526-wu7jdla",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241222153526-wu7jdla",
												"updated": "20241222153616"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "修改 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "v2f"
												},
												{
													"Type": "NodeText",
													"Data": "​ 结构体\n"
												}
											]
										},
										{
											"ID": "20241222153618-vqft155",
											"Type": "NodeList",
											"ListData": {
												"Typ": 1
											},
											"Properties": {
												"id": "20241222153618-vqft155",
												"updated": "20241222153618"
											},
											"Children": [
												{
													"ID": "20241222153617-3wowljz",
													"Type": "NodeListItem",
													"ListData": {
														"Typ": 1,
														"Delimiter": 46,
														"Marker": "MS4=",
														"Num": 1
													},
													"Properties": {
														"id": "20241222153617-3wowljz",
														"updated": "20241222153617"
													},
													"Children": [
														{
															"ID": "20241222153617-ucec61r",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20241222153617-ucec61r",
																"updated": "20241222153625"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "加入相对屏幕坐标 "
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "code",
																	"TextMarkTextContent": "float4"
																},
																{
																	"Type": "NodeText",
																	"Data": "​ 类型成员"
																}
															]
														}
													]
												},
												{
													"ID": "20241222153618-bho2ba1",
													"Type": "NodeListItem",
													"ListData": {
														"Typ": 1,
														"Delimiter": 46,
														"Marker": "Mi4=",
														"Num": 2
													},
													"Properties": {
														"id": "20241222153618-bho2ba1",
														"updated": "20241222153618"
													},
													"Children": [
														{
															"ID": "20241222153618-etph7jb",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20241222153618-etph7jb",
																"updated": "20241222153620"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "加入 "
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "code",
																	"TextMarkTextContent": "uv"
																},
																{
																	"Type": "NodeText",
																	"Data": "​，用于采样物体颜色纹理"
																}
															]
														}
													]
												}
											]
										},
										{
											"ID": "20241222155537-hicvjv4",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20241222155537-hicvjv4",
												"style": "line-height: 22px;",
												"updated": "20241222155539"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "Yw=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "sampler2D _MainTex;\nfloat4 _MainTex_ST;\nsamplerCUBE _Cube;\nfloat _RefractAmount;\nsampler2D _GrabTexture;     // GrabPass 默认存储的纹理变量\n\nstruct v2f\n{\n    float4 pos: SV_POSITION;            // 裁剪空间下的顶点坐标\n    float4 grabPos: TEXCOORD0;          // 用于存储从屏幕图像中采样的坐标\n    float2 uv: TEXCOORD1;               // 用于在颜色纹理中采样的UV坐标\n    float3 worldReflection: TEXCOORD2;  // 世界空间下的反射向量\n};\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								},
								{
									"ID": "20241222153528-tgwn7nj",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NS4=",
										"Num": 5
									},
									"Properties": {
										"id": "20241222153528-tgwn7nj",
										"updated": "20241222153528"
									},
									"Children": [
										{
											"ID": "20241222153528-7gq54hy",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241222153528-7gq54hy",
												"updated": "20241222153631"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "修改顶点着色器\n"
												}
											]
										},
										{
											"ID": "20241222153638-der507l",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241222153638-der507l",
												"updated": "20241222155555"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "使用 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "ComputeGrabScreenPos"
												},
												{
													"Type": "NodeText",
													"Data": "​ 方法，计算结构体中相对屏幕坐标，计算纹理采样 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "uv"
												},
												{
													"Type": "NodeText",
													"Data": "​ 坐标的缩放偏移"
												}
											]
										},
										{
											"ID": "20241222155556-9mbodgy",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20241222155556-9mbodgy",
												"style": "line-height: 22px;",
												"updated": "20241222155603"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "Yw=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "v2f vert(appdata_base v)\n{\n    v2f data;\n    data.pos = UnityObjectToClipPos(v.vertex);                      // 顶点坐标转裁剪坐标\n    data.grabPos = ComputeScreenPos(data.pos);                      // 将裁剪坐标转换到屏幕坐标\n    data.uv.xy = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;   // uv坐标计算\n    float3 worldNormal = UnityObjectToWorldNormal(v.normal);        // 顶点法线转世界坐标\n    fixed3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;       // 顶点坐标装世界坐标\n    fixed3 worldViewDir = UnityWorldSpaceViewDir(worldPos);         // 计算世界空间下视角所在方向\n    data.worldReflection = reflect(-worldViewDir, worldNormal);     // 通过反向视角方向得到反射方向\n\n    return data;\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								},
								{
									"ID": "20241222153531-7f409f9",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Ni4=",
										"Num": 6
									},
									"Properties": {
										"id": "20241222153531-7f409f9",
										"updated": "20241222162340"
									},
									"Children": [
										{
											"ID": "20241222153531-w5c9crj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241222153531-w5c9crj",
												"updated": "20241222153531"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "修改片元着色器\n"
												}
											]
										},
										{
											"ID": "20241222153633-z0hmp9z",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20241222153633-z0hmp9z",
												"updated": "20241222153716"
											},
											"Children": [
												{
													"ID": "20241222153716-3gu5mos",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20241222153716-3gu5mos",
														"updated": "20241222153716"
													},
													"Children": [
														{
															"ID": "20241222153716-mk5hgdy",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20241222153716-mk5hgdy",
																"updated": "20241222153716"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "用 "
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "code",
																	"TextMarkTextContent": "uv"
																},
																{
																	"Type": "NodeText",
																	"Data": "​ 采样主纹理颜色，将屏幕坐标转为裁剪坐标 0"
																},
																{
																	"Type": "NodeBackslash",
																	"Data": "span",
																	"Children": [
																		{
																			"Type": "NodeText",
																			"Data": "~"
																		}
																	]
																},
																{
																	"Type": "NodeText",
																	"Data": "1 范围内，对捕获纹理进行采样\n"
																}
															]
														}
													]
												},
												{
													"ID": "20241222153718-kthnt0z",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20241222153718-kthnt0z",
														"updated": "20241222153718"
													},
													"Children": [
														{
															"ID": "20241222153718-crf8mu8",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20241222153718-crf8mu8",
																"updated": "20241222153718"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "用反射在立方体纹理中进行采样，用结果乘以主纹理颜色，进行颜色叠加\n"
																}
															]
														}
													]
												},
												{
													"ID": "20241222153718-jpkx8xh",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20241222153718-jpkx8xh",
														"updated": "20241222153718"
													},
													"Children": [
														{
															"ID": "20241222153718-l12zurn",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20241222153718-l12zurn",
																"updated": "20241222153726"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "用折射程度参与最终的颜色计算，折射程度值的变化决定了最终表现效果在 完全反射 到 完全折射 之间变化"
																}
															]
														}
													]
												}
											]
										},
										{
											"ID": "20241222161631-80uaavg",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20241222161631-80uaavg",
												"style": "line-height: 22px;",
												"updated": "20241222162340"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "Yw=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "fixed4 frag(v2f i): SV_TARGET\n{\n    // 把立方体反射纹理采样颜色叠加到物体主纹理采样颜色上，得到反射颜色\n    fixed4 mainTex = tex2D(_MainTex, i.uv);             // 物体主纹理采样颜色\n    fixed4 reflectColor = texCUBE(_Cube, i.worldReflection) * mainTex;\n    // 折射颜色获取（即从物体遮挡的后边的屏幕内容采样，获取类似透明效果的颜色）\n    float2 screenUV = i.grabPos.xy / i.grabPos.w;       // 利用透视除法，将屏幕坐标转换到0~1范围内，然后再从屏幕纹理内采样\n    fixed4 grabColor = tex2D(_GrabTexture, screenUV);\n    // 通过折射程度，控制反射颜色和屏幕颜色的叠加，得到最终颜色\n    fixed4 color = reflectColor * (1 - _RefractAmount) + grabColor * _RefractAmount;\n    return color;\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241222161703-c7jwba6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222161703-c7jwba6",
				"updated": "20241222161715"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "显示效果（折射程度0.4）："
				}
			]
		},
		{
			"ID": "20241222161740-yj3ntar",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222161740-yj3ntar",
				"updated": "20241222161740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20241222161740-4658k8o.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241222161742-d53kp8q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222161742-d53kp8q",
				"updated": "20241222162032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到，现在的玻璃效果既有透明效果，也能看到玻璃效果物体本身的颜色和反射的颜色，\n不过目前并没有一个折射效果，因为我们还没做折射颜色的偏移，导致目前的折射颜色只有透明效果"
				}
			]
		},
		{
			"ID": "20241222161831-vk08btz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241222161831-vk08btz",
				"updated": "20241222163234"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自定义折射效果"
				}
			]
		},
		{
			"ID": "20241222161842-ljdtn5b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222161842-ljdtn5b",
				"updated": "20241222161938"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目前我们利用屏幕坐标在抓取纹理中采样并没有处理偏移，因此呈现出来的效果像是在透明和半透明之前切换\n我们可以自定义一些简单的偏移计算规则，让最终的采样位置发生偏移，模拟折射效果"
				}
			]
		},
		{
			"ID": "20241222161940-r1537d8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241222161940-r1537d8",
				"style": "line-height: 22px;",
				"updated": "20241222162903"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "fixed4 frag(v2f i): SV_TARGET\n{\n    // 把立方体反射纹理采样颜色叠加到物体主纹理采样颜色上，得到反射颜色\n    fixed4 mainTex = tex2D(_MainTex, i.uv);             // 物体主纹理采样颜色\n    fixed4 reflectColor = texCUBE(_Cube, i.worldReflection) * mainTex;\n    // 折射颜色获取（即从物体遮挡的后边的屏幕内容采样，获取类似透明效果的颜色）\n    float2 offset = (1 - _RefractAmount) / 10;          // 在采样前计算xy屏幕坐标的偏移量\n    i.grabPos.xy = i.grabPos.xy - offset;               // 对xy屏幕坐标进行偏移\n    float2 screenUV = i.grabPos.xy / i.grabPos.w;       // 利用透视除法，将屏幕坐标转换到0~1范围内，然后再从屏幕纹理内采样\n    fixed4 grabColor = tex2D(_GrabTexture, screenUV);\n    // 通过折射程度，控制反射颜色和屏幕颜色的叠加，得到最终颜色\n    fixed4 color = reflectColor * (1 - _RefractAmount) + grabColor * _RefractAmount;\n    return color;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241222162904-2ctvnpf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222162904-2ctvnpf",
				"updated": "20241222162932"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "offset"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的计算完全是可以根据自己的需要来自定义计算规则"
				}
			]
		},
		{
			"ID": "20241222162845-0un2fzb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222162845-0un2fzb",
				"updated": "20241222162943"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "显示效果（折射程度0.4）："
				}
			]
		},
		{
			"ID": "20241222162850-cwnf1fl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222162850-cwnf1fl",
				"updated": "20241222162850"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"style": "width: 345px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20241222162850-xxg0rzl.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 345px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241222162935-iaquf4y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222162935-iaquf4y",
				"updated": "20241222163023"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可见，相比刚才的玻璃效果，现在的玻璃效果具有了一定的偏移效果，模拟出了一定的折射"
				}
			]
		},
		{
			"ID": "20241222163025-tmdbiq6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222163025-tmdbiq6",
				"updated": "20241222163228"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "完整 Shader 代码如下："
				}
			]
		},
		{
			"ID": "20241222163228-19118ds",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241222163228-19118ds",
				"style": "line-height: 22px;",
				"updated": "20241222163233"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Shader \"TeachShader/Lesson85_GressBase\"\n{\n    Properties\n    {\n        _MainTex(\"MainTex\", 2D) = \"\"{}                      // 主纹理\n        _Cube(\"Cubemap\", Cube) = \"\"{}                       // 立方体纹理\n        _RefractAmount(\"RefractAmount\", Range(0, 1)) = 1    // 折射程度，0表示完全反射，1表示完全透明\n    }\n    SubShader\n    {\n        Tags { \"RenderType\" = \"Opaque\" \"Queue\" = \"Transparent\" }\n\n        GrabPass {}     // 捕获渲染此物体之前当前的屏幕内容，并存储到默认的渲染纹理变量内\n\n        Pass\n        {\n            Tags { \"LightMode\" = \"ForwardBase\" }\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n\n            #include \"UnityCG.cginc\"\n            #include \"Lighting.cginc\"\n\n            sampler2D _MainTex;\n            float4 _MainTex_ST;\n            samplerCUBE _Cube;\n            float _RefractAmount;\n            sampler2D _GrabTexture;     // GrabPass 默认存储的纹理变量\n\n            struct v2f\n            {\n                float4 pos: SV_POSITION;            // 裁剪空间下的顶点坐标\n                float4 grabPos: TEXCOORD0;          // 用于存储从屏幕图像中采样的坐标\n                float2 uv: TEXCOORD1;               // 用于在颜色纹理中采样的UV坐标\n                float3 worldReflection: TEXCOORD2;  // 世界空间下的反射向量\n            };\n\n            v2f vert(appdata_base v)\n            {\n                v2f data;\n                data.pos = UnityObjectToClipPos(v.vertex);                      // 顶点坐标转裁剪坐标\n                data.grabPos = ComputeScreenPos(data.pos);                      // 将裁剪坐标转换到屏幕坐标\n                data.uv.xy = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;   // uv坐标计算\n                float3 worldNormal = UnityObjectToWorldNormal(v.normal);        // 顶点法线转世界坐标\n                fixed3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;       // 顶点坐标装世界坐标\n                fixed3 worldViewDir = UnityWorldSpaceViewDir(worldPos);         // 计算世界空间下视角所在方向\n                data.worldReflection = reflect(-worldViewDir, worldNormal);     // 通过反向视角方向得到反射方向\n\n                return data;\n            }\n\n            fixed4 frag(v2f i): SV_TARGET\n            {\n                // 把立方体反射纹理采样颜色叠加到物体主纹理采样颜色上，得到反射颜色\n                fixed4 mainTex = tex2D(_MainTex, i.uv);             // 物体主纹理采样颜色\n                fixed4 reflectColor = texCUBE(_Cube, i.worldReflection) * mainTex;\n                // 折射颜色获取（即从物体遮挡的后边的屏幕内容采样，获取类似透明效果的颜色）\n                float2 offset = (1 - _RefractAmount) / 10;          // 在采样前计算xy屏幕坐标的偏移量\n                i.grabPos.xy = i.grabPos.xy - offset;               // 对xy屏幕坐标进行偏移\n                float2 screenUV = i.grabPos.xy / i.grabPos.w;       // 利用透视除法，将屏幕坐标转换到0~1范围内，然后再从屏幕纹理内采样\n                fixed4 grabColor = tex2D(_GrabTexture, screenUV);\n                // 通过折射程度，控制反射颜色和屏幕颜色的叠加，得到最终颜色\n                fixed4 color = reflectColor * (1 - _RefractAmount) + grabColor * _RefractAmount;\n                return color;\n            }\n            ENDCG\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241222163234-jjbpant",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241222163234-jjbpant",
				"updated": "20241222170553"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "带法线纹理的玻璃效果"
				}
			]
		},
		{
			"ID": "20241222163355-wnqb1x0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222163355-wnqb1x0",
				"updated": "20241222163845"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "顾名思义，我们希望通过玻璃透明效果带有凹凸感，就需要借助法线纹理"
				}
			]
		},
		{
			"ID": "20241222163322-1ybez09",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241222163322-1ybez09",
				"updated": "20241222170553"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "带法线纹理的玻璃效果实现"
				}
			]
		},
		{
			"ID": "20241222164105-v8llgmc",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241222164105-v8llgmc",
				"updated": "20241222164133"
			},
			"Children": [
				{
					"ID": "20241222164133-1lqmt2x",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241222164133-1lqmt2x",
						"updated": "20241222164133"
					},
					"Children": [
						{
							"ID": "20241222164133-5mgv5j8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222164133-5mgv5j8",
								"updated": "20241222164224"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建 Shader，复用上文的玻璃效果基础实现的相关代码"
								}
							]
						}
					]
				},
				{
					"ID": "20241222164133-m4q2f7r",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241222164133-m4q2f7r",
						"updated": "20241222164133"
					},
					"Children": [
						{
							"ID": "20241222164133-9q9613k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222164133-9q9613k",
								"updated": "20241222164200"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BumpedDiffuse"
								},
								{
									"Type": "NodeText",
									"Data": "​ 标准法线漫反射Shader 中关于法线相关的计算整合进来"
								}
							]
						},
						{
							"ID": "20241222164206-vec2rs4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222164206-vec2rs4",
								"updated": "20241222164220"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "标准法线漫反射 Shader 内容详见："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20241209012546-0eh5b1d",
									"TextMarkBlockRefSubtype": "d",
									"TextMarkTextContent": "US3S7L1——标准漫反射Shader"
								}
							]
						},
						{
							"ID": "20241222164143-75yuymt",
							"Type": "NodeBlockquote",
							"Properties": {
								"id": "20241222164143-75yuymt",
								"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);",
								"updated": "20241222164144"
							},
							"Children": [
								{
									"Type": "NodeBlockquoteMarker",
									"Data": "\u003e"
								},
								{
									"ID": "20241222164144-6ixoovt",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20241222164144-6ixoovt",
										"updated": "20241222164147"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "注意：不再需要 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "_BumpScale"
										},
										{
											"Type": "NodeText",
											"Data": "​ 来控制凹凸程度，我们默认法线凹凸程度最大化"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20241222164133-cypoa90",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20241222164133-cypoa90",
						"updated": "20241222164133"
					},
					"Children": [
						{
							"ID": "20241222164133-rfzycwz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222164133-rfzycwz",
								"updated": "20241222164133"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "修改反射向量计算规则\n"
								}
							]
						},
						{
							"ID": "20241222164135-f9pmg6w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222164135-f9pmg6w",
								"updated": "20241222164137"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "由于法线需要从法线纹理中获取，因此需要将反射向量的计算放入到片元着色器中"
								}
							]
						},
						{
							"ID": "20241222165736-zgjtl1l",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241222165736-zgjtl1l",
								"style": "line-height: 22px;",
								"updated": "20241222170114"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "sampler2D _MainTex;     // 颜色纹理\nfloat4 _MainTex_ST;     // 颜色纹理的缩放和平移\nsampler2D _BumpMap;     // 法线纹理\nfloat4 _BumpMap_ST;     // 法线纹理的缩放和平移\nsamplerCUBE _Cube;      // 反射用的立方体纹理\nfloat _RefractAmount;   // 折射程度\nsampler2D _GrabTexture; // GrabPass 默认存储的纹理变量\n\nstruct v2f\n{\n    float4 pos: SV_POSITION;            // 裁剪空间下的顶点坐标\n    float4 grabPos: TEXCOORD0;          // 用于存储从屏幕图像中采样的坐标\n    float4 uv: TEXCOORD1;               // 用于在颜色纹理（xy）和法线纹理（zw）中采样的UV坐标\n    float4 tangentToWorld0: TEXCOORD3;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第一行\n    float4 tangentToWorld1: TEXCOORD4;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第二行\n    float4 tangentToWorld2: TEXCOORD5;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第三行\n};\n\nv2f vert(appdata_full v)\n{\n    v2f data;\n    data.pos = UnityObjectToClipPos(v.vertex);                      // 顶点坐标转裁剪坐标\n    data.grabPos = ComputeScreenPos(data.pos);                      // 将裁剪坐标转换到屏幕坐标\n    data.uv.xy = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;   // 颜色纹理uv坐标计算\n    data.uv.zw = v.texcoord.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;   // 法线纹理uv坐标计算\n    float3 worldNormal = UnityObjectToWorldNormal(v.normal);        // 顶点法线转世界坐标\n    fixed3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;       // 顶点坐标装世界坐标\n    // 将模型空间下的切线转换到世界空间下，并计算世界空间下的副切线\n    float3 worldTangent = UnityObjectToWorldDir(v.tangent);\n    float3 worldBinormal = cross(normalize(worldTangent), normalize(worldNormal)) * v.tangent.w;\n    // 将切线空间到世界空间的转换矩阵，以及世界坐标存储到三个贴图变量内\n    data.tangentToWorld0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n    data.tangentToWorld1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n    data.tangentToWorld2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n\n    return data;\n}\n\nfixed4 frag(v2f i): SV_TARGET\n{\n    // 计算世界空间下视角方向\n    float3 worldPos = float3(i.tangentToWorld0.w, i.tangentToWorld1.w, i.tangentToWorld2.w);\n    fixed3 viewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n    // 通过法线纹理采样并解压缩，得到切线空间下法线数据\n    float4 packedNormal = tex2D(_BumpMap, i.uv.zw);\n    float3 tangentNormal = UnpackNormal(packedNormal);\n    // 将切线空间下法线数据转换到世界空间下\n    float3 worldNormal = float3(\n        dot(i.tangentToWorld0.xyz, tangentNormal),\n        dot(i.tangentToWorld1.xyz, tangentNormal),\n        dot(i.tangentToWorld2.xyz, tangentNormal)\n    );\n    // 根据逆向视角方向和法线纹理内得到的法线纹理贴图计算反射向量\n    float3 reflection = reflect(-viewDir, worldNormal);\n\n    // 把立方体反射纹理采样颜色叠加到物体主纹理采样颜色上，得到反射颜色\n    fixed4 mainTex = tex2D(_MainTex, i.uv);             // 物体主纹理采样颜色\n    fixed4 reflectColor = texCUBE(_Cube, reflection) * mainTex;\n    // 折射颜色获取（即从物体遮挡的后边的屏幕内容采样，获取类似透明效果的颜色）\n    float2 offset = (1 - _RefractAmount) / 10;          // 在采样前计算xy屏幕坐标的偏移量\n    i.grabPos.xy = i.grabPos.xy - offset;               // 对xy屏幕坐标进行偏移\n    float2 screenUV = i.grabPos.xy / i.grabPos.w;       // 利用透视除法，将屏幕坐标转换到0~1范围内，然后再从屏幕纹理内采样\n    fixed4 grabColor = tex2D(_GrabTexture, screenUV);\n    // 通过折射程度，控制反射颜色和屏幕颜色的叠加，得到最终颜色\n    fixed4 color = reflectColor * (1 - _RefractAmount) + grabColor * _RefractAmount;\n    return color;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241222170343-w1u6b6m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222170343-w1u6b6m",
				"updated": "20241222170358"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "显示效果（折射程度0.4）："
				}
			]
		},
		{
			"ID": "20241222170347-462hh0g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222170347-462hh0g",
				"updated": "20241222170347"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"style": "width: 275px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20241222170347-sn1nosk.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 275px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241222170400-87scmzn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222170400-87scmzn",
				"updated": "20241222170553"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可见，现在的玻璃效果就有凹凸感了，但是玻璃的透明效果没有受到凹凸感的影响（没有因法线贴图而扭曲），\n因此这里的玻璃效果的折射偏移还需要进一步的结合法线去处理"
				}
			]
		},
		{
			"ID": "20241222163343-xhpp76i",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20241222163343-xhpp76i",
				"updated": "20241222171810"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "利用切线空间法线来计算折射偏移"
				}
			]
		},
		{
			"ID": "20241222170643-fone3b6",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241222170643-fone3b6",
				"updated": "20241222171325"
			},
			"Children": [
				{
					"ID": "20241222170645-6rjihzn",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241222170645-6rjihzn",
						"updated": "20241222170645"
					},
					"Children": [
						{
							"ID": "20241222170645-o4f9ezw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222170645-o4f9ezw",
								"updated": "20241222170656"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加入一个控制折射扭曲程度的新属性 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "_Distortion"
								},
								{
									"Type": "NodeText",
									"Data": "​ 取值范围可以大一些"
								}
							]
						}
					]
				},
				{
					"ID": "20241222170645-lvzrq1z",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241222170645-lvzrq1z",
						"updated": "20241222171325"
					},
					"Children": [
						{
							"ID": "20241222170645-n6xsqn9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222170645-n6xsqn9",
								"updated": "20241222170645"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "利用切线空间下法线来计算偏移值\n"
								}
							]
						},
						{
							"ID": "20241222170702-h6slhnw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222170702-h6slhnw",
								"updated": "20241222171325"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在片元着色器上加入两行关键代码"
								}
							]
						},
						{
							"ID": "20241222170729-soppr3a",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20241222170729-soppr3a",
								"updated": "20241222171255"
							},
							"Children": [
								{
									"ID": "20241222170729-wks214t",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20241222170729-wks214t",
										"updated": "20241222171255"
									},
									"Children": [
										{
											"ID": "20241222170729-vuylqa3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241222170729-vuylqa3",
												"updated": "20241222170746"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "第一行："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "float2 offset = tangentNormal.xy * _Distortion;"
												},
												{
													"Type": "NodeText",
													"Data": "​\n"
												}
											]
										},
										{
											"ID": "20241222171230-mf5f3bd",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241222171230-mf5f3bd",
												"updated": "20241222171255"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "使用 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "切线空间下法线的xy * 扭曲值"
												},
												{
													"Type": "NodeText",
													"Data": "​ 得到一个偏移量\n代表光线经过法线方向扰动后的偏移程度，确定光线折射的方向和强度"
												}
											]
										}
									]
								},
								{
									"ID": "20241222170731-jq02x78",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20241222170731-jq02x78",
										"updated": "20241222170731"
									},
									"Children": [
										{
											"ID": "20241222170731-frixlr8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241222170731-frixlr8",
												"updated": "20241222170756"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "第二行："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "屏幕坐标.xy = offset * 屏幕坐标.z + 屏幕坐标.xy;"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										},
										{
											"ID": "20241222170750-1k9juni",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20241222170750-1k9juni",
												"updated": "20241222170750"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "用偏移量和屏幕空间深度值相乘，模拟出真实的折射效果\n深度值越大（即距离相机越远），折射效果越明显。\n这样可以实现近大远小的效果，使得物体在不同深度上的折射效果有所差异。"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20241222170726-1cr8ybh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241222170726-1cr8ybh",
								"updated": "20241222170727"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这种计算方式是计算机图形学前辈们通过实践总结出来的接近真实世界折射效果的方法"
								}
							]
						},
						{
							"ID": "20241222170807-tgp60uz",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241222170807-tgp60uz",
								"style": "line-height: 22px;",
								"updated": "20241222171314"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "fixed4 frag(v2f i): SV_TARGET\n{\n    // 计算世界空间下视角方向\n    float3 worldPos = float3(i.tangentToWorld0.w, i.tangentToWorld1.w, i.tangentToWorld2.w);\n    fixed3 viewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n    // 通过法线纹理采样并解压缩，得到切线空间下法线数据\n    float4 packedNormal = tex2D(_BumpMap, i.uv.zw);\n    float3 tangentNormal = UnpackNormal(packedNormal);\n    // 将切线空间下法线数据转换到世界空间下\n    float3 worldNormal = float3(\n        dot(i.tangentToWorld0.xyz, tangentNormal),\n        dot(i.tangentToWorld1.xyz, tangentNormal),\n        dot(i.tangentToWorld2.xyz, tangentNormal)\n    );\n    // 根据逆向视角方向和法线纹理内得到的法线纹理贴图计算反射向量\n    float3 reflection = reflect(-viewDir, worldNormal);\n\n    // 把立方体反射纹理采样颜色叠加到物体主纹理采样颜色上，得到反射颜色\n    fixed4 mainTex = tex2D(_MainTex, i.uv);             // 物体主纹理采样颜色\n    fixed4 reflectColor = texCUBE(_Cube, reflection) * mainTex;\n    // 折射颜色获取（即从物体遮挡的后边的屏幕内容采样，获取类似透明效果的颜色）\n    float2 offset = tangentNormal.xy * _Distortion;     // 在采样前计算xy屏幕坐标的偏移量\n    i.grabPos.xy = offset * i.grabPos.z + i.grabPos.xy; // 用偏移量和屏幕空间深度值相乘，模拟出真实的折射效果\n    float2 screenUV = i.grabPos.xy / i.grabPos.w;       // 利用透视除法，将屏幕坐标转换到0~1范围内，然后再从屏幕纹理内采样\n    fixed4 grabColor = tex2D(_GrabTexture, screenUV);\n    // 通过折射程度，控制反射颜色和屏幕颜色的叠加，得到最终颜色\n    fixed4 color = reflectColor * (1 - _RefractAmount) + grabColor * _RefractAmount;\n    return color;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241222170643-v5303t2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222170643-v5303t2",
				"updated": "20241222171713"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " 显示效果（折射程度0.5，扭曲程度3）："
				}
			]
		},
		{
			"ID": "20241222171624-248oltb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222171624-248oltb",
				"updated": "20241222171624"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"style": "width: 326px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20241222171624-5kl83pn.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 326px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241222171641-720vy14",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222171641-720vy14",
				"updated": "20241222171802"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可见，现在的玻璃效果不仅有凹凸感，其中的透明效果也能够受到法线纹理贴图的扭曲效果影响"
				}
			]
		},
		{
			"ID": "20241222171746-lwg7w5l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241222171746-lwg7w5l",
				"updated": "20241222171752"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "完整 Shader 代码如下"
				}
			]
		},
		{
			"ID": "20241222171804-uvb981w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241222171804-uvb981w",
				"style": "line-height: 22px;",
				"updated": "20241222171810"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Shader \"TeachShader/Lesson86_GressRefraction\"\n{\n    Properties\n    {\n        _MainTex(\"MainTex\", 2D) = \"\"{}                      // 主纹理\n        _BumpMap(\"BumpMap\", 2D) = \"\"{}                      // 法线纹理\n        _Cube(\"Cubemap\", Cube) = \"\"{}                       // 立方体纹理\n        _RefractAmount(\"RefractAmount\", Range(0, 1)) = 1    // 折射程度，0表示完全反射，1表示完全透明\n        _Distortion(\"Distortion\", Range(0, 10)) = 0         // 控制扭曲程度的变量\n    }\n    SubShader\n    {\n        Tags { \"RenderType\" = \"Opaque\" \"Queue\" = \"Transparent\" }\n\n        GrabPass {}     // 捕获渲染此物体之前当前的屏幕内容，并存储到默认的渲染纹理变量内\n\n        Pass\n        {\n            Tags { \"LightMode\" = \"ForwardBase\" }\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n\n            #include \"UnityCG.cginc\"\n            #include \"Lighting.cginc\"\n\n            sampler2D _MainTex;     // 颜色纹理\n            float4 _MainTex_ST;     // 颜色纹理的缩放和平移\n            sampler2D _BumpMap;     // 法线纹理\n            float4 _BumpMap_ST;     // 法线纹理的缩放和平移\n            samplerCUBE _Cube;      // 反射用的立方体纹理\n            float _RefractAmount;   // 折射程度\n            sampler2D _GrabTexture; // GrabPass 默认存储的纹理变量\n            float _Distortion;      // 扭曲程度\n\n            struct v2f\n            {\n                float4 pos: SV_POSITION;            // 裁剪空间下的顶点坐标\n                float4 grabPos: TEXCOORD0;          // 用于存储从屏幕图像中采样的坐标\n                float4 uv: TEXCOORD1;               // 用于在颜色纹理（xy）和法线纹理（zw）中采样的UV坐标\n                float4 tangentToWorld0: TEXCOORD3;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第一行\n                float4 tangentToWorld1: TEXCOORD4;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第二行\n                float4 tangentToWorld2: TEXCOORD5;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第三行\n            };\n\n            v2f vert(appdata_full v)\n            {\n                v2f data;\n                data.pos = UnityObjectToClipPos(v.vertex);                      // 顶点坐标转裁剪坐标\n                data.grabPos = ComputeScreenPos(data.pos);                      // 将裁剪坐标转换到屏幕坐标\n                data.uv.xy = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;   // 颜色纹理uv坐标计算\n                data.uv.zw = v.texcoord.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;   // 法线纹理uv坐标计算\n                float3 worldNormal = UnityObjectToWorldNormal(v.normal);        // 顶点法线转世界坐标\n                fixed3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;       // 顶点坐标装世界坐标\n                // 将模型空间下的切线转换到世界空间下，并计算世界空间下的副切线\n                float3 worldTangent = UnityObjectToWorldDir(v.tangent);\n                float3 worldBinormal = cross(normalize(worldTangent), normalize(worldNormal)) * v.tangent.w;\n                // 将切线空间到世界空间的转换矩阵，以及世界坐标存储到三个贴图变量内\n                data.tangentToWorld0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n                data.tangentToWorld1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n                data.tangentToWorld2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n\n                return data;\n            }\n\n            fixed4 frag(v2f i): SV_TARGET\n            {\n                // 计算世界空间下视角方向\n                float3 worldPos = float3(i.tangentToWorld0.w, i.tangentToWorld1.w, i.tangentToWorld2.w);\n                fixed3 viewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n                // 通过法线纹理采样并解压缩，得到切线空间下法线数据\n                float4 packedNormal = tex2D(_BumpMap, i.uv.zw);\n                float3 tangentNormal = UnpackNormal(packedNormal);\n                // 将切线空间下法线数据转换到世界空间下\n                float3 worldNormal = float3(\n                    dot(i.tangentToWorld0.xyz, tangentNormal),\n                    dot(i.tangentToWorld1.xyz, tangentNormal),\n                    dot(i.tangentToWorld2.xyz, tangentNormal)\n                );\n                // 根据逆向视角方向和法线纹理内得到的法线纹理贴图计算反射向量\n                float3 reflection = reflect(-viewDir, worldNormal);\n\n                // 把立方体反射纹理采样颜色叠加到物体主纹理采样颜色上，得到反射颜色\n                fixed4 mainTex = tex2D(_MainTex, i.uv);             // 物体主纹理采样颜色\n                fixed4 reflectColor = texCUBE(_Cube, reflection) * mainTex;\n                // 折射颜色获取（即从物体遮挡的后边的屏幕内容采样，获取类似透明效果的颜色）\n                float2 offset = tangentNormal.xy * _Distortion;     // 在采样前计算xy屏幕坐标的偏移量\n                i.grabPos.xy = offset * i.grabPos.z + i.grabPos.xy; // 用偏移量和屏幕空间深度值相乘，模拟出真实的折射效果\n                float2 screenUV = i.grabPos.xy / i.grabPos.w;       // 利用透视除法，将屏幕坐标转换到0~1范围内，然后再从屏幕纹理内采样\n                fixed4 grabColor = tex2D(_GrabTexture, screenUV);\n                // 通过折射程度，控制反射颜色和屏幕颜色的叠加，得到最终颜色\n                fixed4 color = reflectColor * (1 - _RefractAmount) + grabColor * _RefractAmount;\n                return color;\n            }\n            ENDCG\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}