{"ID":"20241121121110-xa0nvgw","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241121121110-xa0nvgw","title":"US3S3L5——透明度混合","type":"doc","updated":"20241121125514"},"Children":[{"ID":"20241121121111-01iumjd","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20241121121111-01iumjd","updated":"20241121123729"},"Children":[{"Type":"NodeText","Data":"透明度混合"}]},{"ID":"20241121121125-yiyxm5x","Type":"NodeParagraph","Properties":{"id":"20241121121125-yiyxm5x","updated":"20241121121148"},"Children":[{"Type":"NodeText","Data":"透明度测试，并不能用于实现半透明效果，\n它只存在看得见和完全看不见两种状态，一般用来处理镂空效果\n而透明度混合，主要就是用来实现半透明效果的"}]},{"ID":"20241121121143-b7uby5a","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241121121143-b7uby5a","updated":"20241121123729"},"Children":[{"Type":"NodeText","Data":"透明度混合的基本原理"}]},{"ID":"20241121121204-tql9ncp","Type":"NodeParagraph","Properties":{"id":"20241121121204-tql9ncp","updated":"20241121121208"},"Children":[{"Type":"NodeText","Data":"基本原理：关闭深度写入，开启混合，让片元颜色和颜色缓冲区中颜色进行混合计算"}]},{"ID":"20241121121204-53j19bl","Type":"NodeParagraph","Properties":{"id":"20241121121204-53j19bl","updated":"20241121121204"},"Children":[{"Type":"NodeText","Data":"具体实现："}]},{"ID":"20241121121204-ikrzdxf","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241121121204-ikrzdxf","updated":"20241121121204"},"Children":[{"ID":"20241121121204-gtgwdjd","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241121121204-gtgwdjd","updated":"20241121121204"},"Children":[{"ID":"20241121121204-0x78yhx","Type":"NodeParagraph","Properties":{"id":"20241121121204-0x78yhx","updated":"20241121121254"},"Children":[{"Type":"NodeText","Data":"采用半透明的混合因子进行混合，以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Blend SrcAlpha OneMinusSrcAlpha"},{"Type":"NodeText","Data":"​ 为例：\n"}]},{"ID":"20241121121256-s5h9zmv","Type":"NodeParagraph","Properties":{"id":"20241121121256-s5h9zmv","updated":"20241121121335"},"Children":[{"Type":"NodeText","Data":"因此：\n"}]},{"ID":"20241121121335-obw2fai","Type":"NodeMathBlock","Properties":{"id":"20241121121335-obw2fai","updated":"20241121121653"},"Children":[{"Type":"NodeMathBlockOpenMarker"},{"Type":"NodeMathBlockContent","Data":"\\begin{align*}\n输出颜色 \u0026 = SrcAlpha \\times 源颜色 + (1 - SrcAlpha) \\times 目标颜色 \\\\\n\u0026 = 源颜色透明度 \\times 源颜色 + (1 - 源颜色透明度) \\times 目标颜色 \n\\end{align*}"},{"Type":"NodeMathBlockCloseMarker"}]}]},{"ID":"20241121121204-oa3ssef","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241121121204-oa3ssef","updated":"20241121121204"},"Children":[{"ID":"20241121121204-kfyg01y","Type":"NodeParagraph","Properties":{"id":"20241121121204-kfyg01y","updated":"20241121121708"},"Children":[{"Type":"NodeText","Data":"声明一个 0~1 区间的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"_AlphaScale"},{"Type":"NodeText","Data":"​ 用于控制对象整体透明度"}]}]}]},{"ID":"20241121121712-crpdmsy","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241121121712-crpdmsy","updated":"20241121125514"},"Children":[{"Type":"NodeText","Data":"透明度混合实现"}]},{"ID":"20241121123945-du8r41t","Type":"NodeParagraph","Properties":{"id":"20241121123945-du8r41t","updated":"20241121124031"},"Children":[{"Type":"NodeText","Data":"值得一提的是，一般透明材质的 Shader 的名字后面会跟随一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"_Transparent"},{"Type":"NodeText","Data":"​ 的后缀"}]},{"ID":"20241121123735-cdh2p31","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241121123735-cdh2p31","updated":"20241121123817"},"Children":[{"ID":"20241121123817-uiwsqmt","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241121123817-uiwsqmt","updated":"20241121123817"},"Children":[{"ID":"20241121123817-p4p1v75","Type":"NodeParagraph","Properties":{"id":"20241121123817-p4p1v75","updated":"20241121123817"},"Children":[{"Type":"NodeText","Data":"复用 "},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20241028124206-ubg5xrm","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"颜色纹理结合光照模型"},{"Type":"NodeText","Data":" 的Shader"}]},{"ID":"20241121123819-yrdtzyl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241121123819-yrdtzyl","updated":"20241121123940"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"Shader \"TeachShader/Lesson57_Transparent\"\n{\n    Properties\n    {\n        _MainTex(\"MainTex\", 2D) = \"\"{}                          // 纹理贴图\n        _MainColor(\"MainColor\", Color) = (1, 1, 1, 1)           // 漫反射颜色\n        _SpecularColor(\"SpecularColor\", Color) = (1, 1, 1, 1)   // 高光反射颜色\n        _SpecularNum(\"SpecularNum\", Range(0, 20)) = 15          // 光泽度\n    }\n    SubShader\n    {\n        Pass\n        {\n            Tags { \"LightMode\" = \"ForwardBase\" }\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n            #include \"UnityCG.cginc\"\n            #include \"Lighting.cginc\"\n\n            // 贴图纹理对应的映射成员\n            sampler2D _MainTex;\n            float4 _MainTex_ST;\n            // 漫反射颜色、高光反射颜色、光泽度\n            fixed4 _MainColor;\n            fixed4 _SpecularColor;\n            float _SpecularNum;\n\n            struct v2f\n            {\n                float4 pos: SV_POSITION;    // 裁剪空间下的顶点坐标\n                float2 uv: TEXCOORD0;       // 纹理UV坐标\n                float3 wNormal: NORMAL;     // 世界空间下的法线\n                float3 wPos: TEXCOORD1;     // 世界空间下的顶点坐标\n            };\n\n            v2f vert (appdata_base v)\n            {\n                v2f data;\n                data.pos = UnityObjectToClipPos(v.vertex);                  // 将模型空间下的法线转换到世界空间下\n                data.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;  // 计算UV\n                data.wNormal = UnityObjectToWorldNormal(v.normal);          // 法线转换到世界空间\n                data.wPos = mul(unity_ObjectToWorld, v.vertex);             // 顶点转换到世界空间\n\n                return data;\n            }\n\n            fixed4 frag (v2f i) : SV_Target\n            {\n                fixed3 albedo = tex2D(_MainTex, i.uv).rgb * _MainColor.rgb; // 反射率，即纹理颜色和漫反射材质颜色乘法叠加共同决定的颜色\n        \n                // 漫反射颜色\n                float3 lightDir = normalize(_WorldSpaceLightPos0.xyz);      // 指向光源的方向\n                fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(i.wNormal, lightDir));\n        \n                // 高光反射颜色\n                float3 viewDir = normalize(UnityWorldSpaceViewDir(i.wPos)); // 视角方向\n                float3 halfA = normalize(viewDir + lightDir);               // 半角向量\n                fixed3 specularColor = _LightColor0.rgb * _SpecularColor.rgb * pow(max(0, dot(i.wNormal, halfA)), _SpecularNum);\n\n                // 最终颜色 = 环境光 * 反射颜色 + 漫反射颜色 + 高光反射颜色\n                fixed3 color = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo + lambertColor + specularColor;\n\n                return fixed4(color.rgb, 1);\n            }\n            ENDCG\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20241121123817-3ury7a8","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241121123817-3ury7a8","updated":"20241121123817"},"Children":[{"ID":"20241121123817-wa0sbw9","Type":"NodeParagraph","Properties":{"id":"20241121123817-wa0sbw9","updated":"20241121124348"},"Children":[{"Type":"NodeText","Data":"在属性中加一个透明值 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"_AlphaScale"},{"Type":"NodeText","Data":"​，取值范围为 0~1，用来设定对象整体透明度。并在CG中添加属性的映射成员（使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"fixed"},{"Type":"NodeText","Data":"​）"}]},{"ID":"20241121124059-98pi7gp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241121124059-98pi7gp","updated":"20241121124157"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"Properties\n{\n    _MainTex(\"MainTex\", 2D) = \"\"{}                          // 纹理贴图\n    _MainColor(\"MainColor\", Color) = (1, 1, 1, 1)           // 漫反射颜色\n    _SpecularColor(\"SpecularColor\", Color) = (1, 1, 1, 1)   // 高光反射颜色\n    _SpecularNum(\"SpecularNum\", Range(0, 20)) = 15          // 光泽度\n    _AlphaScale(\"AlphaScale\", Range(0, 1)) = 1              // 对象总体透明度\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241121124153-1xcj3k2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241121124153-1xcj3k2","updated":"20241121124411"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"// 贴图纹理对应的映射成员\nsampler2D _MainTex;\nfloat4 _MainTex_ST;\n// 漫反射颜色、高光反射颜色、光泽度\nfixed4 _MainColor;\nfixed4 _SpecularColor;\nfloat _SpecularNum;\n// 对象整体透明度\nfixed _AlphaScale;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20241121123817-pxo65j5","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20241121123817-pxo65j5","updated":"20241121123817"},"Children":[{"ID":"20241121123817-znviion","Type":"NodeParagraph","Properties":{"id":"20241121123817-znviion","updated":"20241121124430"},"Children":[{"Type":"NodeText","Data":"将渲染队列设置为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Transparent"},{"Type":"NodeText","Data":"​，并配合 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"IgnoreProjector"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"RenderType"},{"Type":"NodeText","Data":"​ 一起设置"}]},{"ID":"20241121124440-kp8c8li","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241121124440-kp8c8li","updated":"20241121124638"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"SubShader\n{\n    Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\" }\n    Pass { /*...*/ }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20241121123817-64cfgbe","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20241121123817-64cfgbe","updated":"20241121123817"},"Children":[{"ID":"20241121123817-vwqizz4","Type":"NodeParagraph","Properties":{"id":"20241121123817-vwqizz4","updated":"20241121124437"},"Children":[{"Type":"NodeText","Data":"关闭深度写入 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Zwrite off"},{"Type":"NodeText","Data":"​，设置混合因子 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Blend SrcAlpha OneMinusSrcAlpha"},{"Type":"NodeText","Data":"​"}]},{"ID":"20241121124644-4vahs6v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241121124644-4vahs6v","updated":"20241121124848"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"SubShader\n{\n    Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\" }\n\n    Pass\n    {\n        Tags { \"LightMode\" = \"ForwardBase\" }\n        ZWrite Off\t\t\t\t\t\t\t//半透明效果关闭深度写入\n        Blend SrcAlpha OneMinusSrcAlpha\t\t//设置混合因子\n\n        CGPROGRAM\n        // ...\n        ENDCG\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20241121123817-gvigigq","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20241121123817-gvigigq","updated":"20241121123817"},"Children":[{"ID":"20241121123817-4lfm5xu","Type":"NodeParagraph","Properties":{"id":"20241121123817-4lfm5xu","updated":"20241121124834"},"Children":[{"Type":"NodeText","Data":"在片元着色器中获取了颜色贴图颜色后，修改最后返回颜色的 A 值为："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"纹理.a * _AlphaScale"},{"Type":"NodeText","Data":"​"}]},{"ID":"20241121124854-3jlluw6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241121124854-3jlluw6","updated":"20241121125122"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"fixed4 frag (v2f i) : SV_Target\n{\n    fixed4 texColor = tex2D(_MainTex, i.uv);                    // 取出纹理的颜色\n    fixed3 albedo = texColor.rgb * _MainColor.rgb;              // 反射率，即纹理颜色和漫反射材质颜色乘法叠加共同决定的颜色\n\n    // 漫反射颜色\n    float3 lightDir = normalize(_WorldSpaceLightPos0.xyz);      // 指向光源的方向\n    fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(i.wNormal, lightDir));\n\n    // 高光反射颜色\n    float3 viewDir = normalize(UnityWorldSpaceViewDir(i.wPos)); // 视角方向\n    float3 halfA = normalize(viewDir + lightDir);               // 半角向量\n    fixed3 specularColor = _LightColor0.rgb * _SpecularColor.rgb * pow(max(0, dot(i.wNormal, halfA)), _SpecularNum);\n\n    // 最终颜色 = 环境光 * 反射颜色 + 漫反射颜色 + 高光反射颜色\n    fixed3 color = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo + lambertColor + specularColor;\n    // 最终透明度 = A通道值 * 整体透明度\n    return fixed4(color.rgb, texColor.a * _AlphaScale);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20241121125433-3lzlbmj","Type":"NodeParagraph","Properties":{"id":"20241121125433-3lzlbmj","updated":"20241121125450"},"Children":[{"Type":"NodeText","Data":"完整 Shader 实现如下："}]},{"ID":"20241121125450-redovwj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241121125450-redovwj","updated":"20241121125455"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"Shader \"TeachShader/Lesson57_Transparent\"\n{\n    Properties\n    {\n        _MainTex(\"MainTex\", 2D) = \"\"{}                          // 纹理贴图\n        _MainColor(\"MainColor\", Color) = (1, 1, 1, 1)           // 漫反射颜色\n        _SpecularColor(\"SpecularColor\", Color) = (1, 1, 1, 1)   // 高光反射颜色\n        _SpecularNum(\"SpecularNum\", Range(0, 20)) = 15          // 光泽度\n        _AlphaScale(\"AlphaScale\", Range(0, 1)) = 1              // 对象总体透明度\n    }\n    SubShader\n    {\n        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\" }\n\n        Pass\n        {\n            Tags { \"LightMode\" = \"ForwardBase\" }\n            ZWrite Off                          //半透明效果关闭深度写入\n            Blend SrcAlpha OneMinusSrcAlpha     //设置混合因子\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n            #include \"UnityCG.cginc\"\n            #include \"Lighting.cginc\"\n\n            // 贴图纹理对应的映射成员\n            sampler2D _MainTex;\n            float4 _MainTex_ST;\n            // 漫反射颜色、高光反射颜色、光泽度\n            fixed4 _MainColor;\n            fixed4 _SpecularColor;\n            float _SpecularNum;\n            // 对象整体透明度\n            fixed _AlphaScale;\n\n            struct v2f\n            {\n                float4 pos: SV_POSITION;    // 裁剪空间下的顶点坐标\n                float2 uv: TEXCOORD0;       // 纹理UV坐标\n                float3 wNormal: NORMAL;     // 世界空间下的法线\n                float3 wPos: TEXCOORD1;     // 世界空间下的顶点坐标\n            };\n\n            v2f vert (appdata_base v)\n            {\n                v2f data;\n                data.pos = UnityObjectToClipPos(v.vertex);                  // 将模型空间下的法线转换到世界空间下\n                data.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;  // 计算UV\n                data.wNormal = UnityObjectToWorldNormal(v.normal);          // 法线转换到世界空间\n                data.wPos = mul(unity_ObjectToWorld, v.vertex);             // 顶点转换到世界空间\n\n                return data;\n            }\n\n            fixed4 frag (v2f i) : SV_Target\n            {\n                fixed4 texColor = tex2D(_MainTex, i.uv);                    // 取出纹理的颜色\n                fixed3 albedo = texColor.rgb * _MainColor.rgb;              // 反射率，即纹理颜色和漫反射材质颜色乘法叠加共同决定的颜色\n        \n                // 漫反射颜色\n                float3 lightDir = normalize(_WorldSpaceLightPos0.xyz);      // 指向光源的方向\n                fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(i.wNormal, lightDir));\n        \n                // 高光反射颜色\n                float3 viewDir = normalize(UnityWorldSpaceViewDir(i.wPos)); // 视角方向\n                float3 halfA = normalize(viewDir + lightDir);               // 半角向量\n                fixed3 specularColor = _LightColor0.rgb * _SpecularColor.rgb * pow(max(0, dot(i.wNormal, halfA)), _SpecularNum);\n\n                // 最终颜色 = 环境光 * 反射颜色 + 漫反射颜色 + 高光反射颜色\n                fixed3 color = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo + lambertColor + specularColor;\n                // 最终透明度 = A通道值 * 整体透明度\n                return fixed4(color.rgb, texColor.a * _AlphaScale);\n            }\n            ENDCG\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241121125457-21x0bro","Type":"NodeParagraph","Properties":{"id":"20241121125457-21x0bro","updated":"20241121125514"},"Children":[{"Type":"NodeText","Data":"效果展示："}]},{"ID":"20241121125430-qc2fsfu","Type":"NodeParagraph","Properties":{"id":"20241121125430-qc2fsfu","updated":"20241121125430"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241121125430-rk6sw97.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]}]}