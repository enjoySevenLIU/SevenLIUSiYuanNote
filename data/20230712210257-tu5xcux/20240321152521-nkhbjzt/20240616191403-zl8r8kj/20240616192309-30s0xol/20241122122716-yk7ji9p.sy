{"ID":"20241122122716-yk7ji9p","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241122122716-yk7ji9p","title":"US3S3L6——开启深度写入的半透明","type":"doc","updated":"20241122130322"},"Children":[{"ID":"20241122122716-f6obflh","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241122122716-f6obflh","updated":"20241122124842"},"Children":[{"Type":"NodeText","Data":"开启深度写入的半透明效果用来处理的需求"}]},{"ID":"20241122123553-z06ar9m","Type":"NodeParagraph","Properties":{"id":"20241122123553-z06ar9m","updated":"20241122123606"},"Children":[{"Type":"NodeText","Data":"对于本身结构较为复杂的模型，使用之前的透明度混合Shader会由于关闭了深度写入，会产生错误的渲染效果\n虽然我们可以通过拆分模型的方式解决部分问题，但是对于一些结构复杂的模型，拆分模型的方式会增加工作量"}]},{"ID":"20241122123719-e4wtouo","Type":"NodeParagraph","Properties":{"id":"20241122123719-e4wtouo","updated":"20241122124842"},"Children":[{"Type":"NodeText","Data":"以下面的模型为例，左边不使用 半透明Shader 的材质，右边使用了 关闭深度写入的半透明Shader 的材质"}]},{"ID":"20241122124259-r8eukwy","Type":"NodeParagraph","Properties":{"id":"20241122124259-r8eukwy","updated":"20241122124259"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241122124259-klj9sh8.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241122124346-5t3pgwa","Type":"NodeParagraph","Properties":{"id":"20241122124346-5t3pgwa","updated":"20241122124459"},"Children":[{"Type":"NodeText","Data":"可以看到，对于这种自带遮挡关系的复杂模型，关闭深度写入会出现遮挡关系错误的渲染问题"}]},{"ID":"20241122123553-vc5g6km","Type":"NodeParagraph","Properties":{"id":"20241122123553-vc5g6km","updated":"20241122124545"},"Children":[{"Type":"NodeText","Data":"对于这种情况，我们可以采用 开启深度写入的半透明 Shader 来优化效果"}]},{"ID":"20241122123609-kwdjf5l","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241122123609-kwdjf5l","name":"ColorMask","updated":"20241122130322"},"Children":[{"Type":"NodeText","Data":"开启深度写入的半透明效果的基本原理"}]},{"ID":"20241122124645-o9mpkfo","Type":"NodeParagraph","Properties":{"id":"20241122124645-o9mpkfo","updated":"20241122124651"},"Children":[{"Type":"NodeText","Data":"基本原理：使用两个Pass渲染通道来处理渲染逻辑"}]},{"ID":"20241122124656-ks5rv86","Type":"NodeList","ListData":{},"Properties":{"id":"20241122124656-ks5rv86","updated":"20241122124703"},"Children":[{"ID":"20241122124658-2l9tzp7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241122124658-2l9tzp7","updated":"20241122124703"},"Children":[{"ID":"20241122124658-6eac4lg","Type":"NodeParagraph","Properties":{"id":"20241122124658-6eac4lg","updated":"20241122124703"},"Children":[{"Type":"NodeText","Data":"第一个Pass：开启深度写入，不输出颜色，目的是让该模型各片元的深度值能写入深度缓冲"}]}]},{"ID":"20241122124700-7qs1xe8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241122124700-7qs1xe8","updated":"20241122124700"},"Children":[{"ID":"20241122124700-9i1sy6k","Type":"NodeParagraph","Properties":{"id":"20241122124700-9i1sy6k","updated":"20241122124700"},"Children":[{"Type":"NodeText","Data":"第二个Pass：进行正常的透明度混合（和上节课一样）"}]}]}]},{"ID":"20241122124645-goeqwvg","Type":"NodeParagraph","Properties":{"id":"20241122124645-goeqwvg","updated":"20241122124715"},"Children":[{"Type":"NodeText","Data":"这样做的话，当执行第一个Pass时，会执行深度测试，并进行深度写入\n如果此时该片元没有通过深度测试会直接丢弃，不会再执行第二个Pass\n对于同一个模型中处于屏幕同一位置的片元们，会进行该位置的深度测试再决定渲染哪个片元"}]},{"ID":"20241122124645-naer100","Type":"NodeParagraph","Properties":{"id":"20241122124645-naer100","updated":"20241122124921"},"Children":[{"Type":"NodeText","Data":"如何做到不输出颜色？使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ColorMask"},{"Type":"NodeText","Data":"​ 颜色遮罩 渲染状态(命令)"}]},{"ID":"20241122124925-gxyrtaf","Type":"NodeParagraph","Properties":{"id":"20241122124925-gxyrtaf","updated":"20241122124925"},"Children":[{"Type":"NodeText","Data":"它主要用于控制颜色分量是否写入到颜色缓冲区中"}]},{"ID":"20241122124927-hfwaftj","Type":"NodeList","ListData":{},"Properties":{"id":"20241122124927-hfwaftj","updated":"20241122124952"},"Children":[{"ID":"20241122124928-6zziw68","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241122124928-6zziw68","updated":"20241122124947"},"Children":[{"ID":"20241122124928-uyevtyv","Type":"NodeParagraph","Properties":{"id":"20241122124928-uyevtyv","updated":"20241122124947"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ColorMask RGBA"},{"Type":"NodeText","Data":"​ —— 表示写入颜色的RGBA通道"}]}]},{"ID":"20241122124929-8j5te0y","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241122124929-8j5te0y","updated":"20241122124950"},"Children":[{"ID":"20241122124929-9f1eifq","Type":"NodeParagraph","Properties":{"id":"20241122124929-9f1eifq","updated":"20241122124950"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ColorMask 0"},{"Type":"NodeText","Data":"​ —— 表示不写入颜色"}]}]},{"ID":"20241122124929-txhbdg4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241122124929-txhbdg4","updated":"20241122124952"},"Children":[{"ID":"20241122124929-3yn1g90","Type":"NodeParagraph","Properties":{"id":"20241122124929-3yn1g90","updated":"20241122124952"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ColorMask RB"},{"Type":"NodeText","Data":"​ —— 表示只写入红色和蓝色通道"}]}]}]},{"ID":"20241122125028-55nzlwy","Type":"NodeBlockquote","Properties":{"id":"20241122125028-55nzlwy","style":"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);","updated":"20241122125028"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20241122125008-rhqfc9r","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241122125008-rhqfc9r","updated":"20241122125025"},"Children":[{"Type":"NodeText","Data":"注意！"}]},{"ID":"20241122125018-lm18hmt","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241122125018-lm18hmt","updated":"20241122125018"},"Children":[{"ID":"20241122125018-kd7m46s","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241122125018-kd7m46s","updated":"20241122125018"},"Children":[{"ID":"20241122125018-e677ifo","Type":"NodeParagraph","Properties":{"id":"20241122125018-e677ifo","updated":"20241122125018"},"Children":[{"Type":"NodeText","Data":"开启深度写入的半透明效果，模型内部之间不会有任何半透明效果（因为模型内部深度较大的片元会被丢弃掉）"}]}]},{"ID":"20241122125018-d2aezcr","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241122125018-d2aezcr","updated":"20241122125018"},"Children":[{"ID":"20241122125018-nuo22he","Type":"NodeParagraph","Properties":{"id":"20241122125018-nuo22he","updated":"20241122125018"},"Children":[{"Type":"NodeText","Data":"由于有两个Pass渲染通道，因此它会带来一定的性能开销"}]}]}]}]},{"ID":"20241122125057-2vc7vto","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241122125057-2vc7vto","updated":"20241122130322"},"Children":[{"Type":"NodeText","Data":"实现开启深度写入的半透明效果"}]},{"ID":"20241122125106-fmdtr5l","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241122125106-fmdtr5l","updated":"20241122125118"},"Children":[{"ID":"20241122125118-76kkobo","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241122125118-76kkobo","updated":"20241122125118"},"Children":[{"ID":"20241122125118-xrogdxj","Type":"NodeParagraph","Properties":{"id":"20241122125118-xrogdxj","updated":"20241122125148"},"Children":[{"Type":"NodeText","Data":"复用之前的不开启深度写入的 "},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20241121121110-xa0nvgw","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"透明度混合"},{"Type":"NodeText","Data":" 的Shader代码"}]},{"ID":"20241122125209-dm3x0lz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241122125209-dm3x0lz","updated":"20241122125312"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"Shader \"TeachShader/Lesson58_Transparent\"\n{\n    Properties\n    {\n        _MainTex(\"MainTex\", 2D) = \"\"{}                          // 纹理贴图\n        _MainColor(\"MainColor\", Color) = (1, 1, 1, 1)           // 漫反射颜色\n        _SpecularColor(\"SpecularColor\", Color) = (1, 1, 1, 1)   // 高光反射颜色\n        _SpecularNum(\"SpecularNum\", Range(0, 20)) = 15          // 光泽度\n        _AlphaScale(\"AlphaScale\", Range(0, 1)) = 1              // 对象总体透明度\n    }\n    SubShader\n    {\n        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\" }\n\n        Pass\n        {\n            Tags { \"LightMode\" = \"ForwardBase\" }\n            ZWrite Off                          //半透明效果关闭深度写入\n            Blend SrcAlpha OneMinusSrcAlpha     //设置混合因子\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n            #include \"UnityCG.cginc\"\n            #include \"Lighting.cginc\"\n\n            // 贴图纹理对应的映射成员\n            sampler2D _MainTex;\n            float4 _MainTex_ST;\n            // 漫反射颜色、高光反射颜色、光泽度\n            fixed4 _MainColor;\n            fixed4 _SpecularColor;\n            float _SpecularNum;\n            // 对象整体透明度\n            fixed _AlphaScale;\n\n            struct v2f\n            {\n                float4 pos: SV_POSITION;    // 裁剪空间下的顶点坐标\n                float2 uv: TEXCOORD0;       // 纹理UV坐标\n                float3 wNormal: NORMAL;     // 世界空间下的法线\n                float3 wPos: TEXCOORD1;     // 世界空间下的顶点坐标\n            };\n\n            v2f vert (appdata_base v)\n            {\n                v2f data;\n                data.pos = UnityObjectToClipPos(v.vertex);                  // 将模型空间下的法线转换到世界空间下\n                data.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;  // 计算UV\n                data.wNormal = UnityObjectToWorldNormal(v.normal);          // 法线转换到世界空间\n                data.wPos = mul(unity_ObjectToWorld, v.vertex);             // 顶点转换到世界空间\n\n                return data;\n            }\n\n            fixed4 frag (v2f i) : SV_Target\n            {\n                fixed4 texColor = tex2D(_MainTex, i.uv);                    // 取出纹理的颜色\n                fixed3 albedo = texColor.rgb * _MainColor.rgb;              // 反射率，即纹理颜色和漫反射材质颜色乘法叠加共同决定的颜色\n        \n                // 漫反射颜色\n                float3 lightDir = normalize(_WorldSpaceLightPos0.xyz);      // 指向光源的方向\n                fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(i.wNormal, lightDir));\n        \n                // 高光反射颜色\n                float3 viewDir = normalize(UnityWorldSpaceViewDir(i.wPos)); // 视角方向\n                float3 halfA = normalize(viewDir + lightDir);               // 半角向量\n                fixed3 specularColor = _LightColor0.rgb * _SpecularColor.rgb * pow(max(0, dot(i.wNormal, halfA)), _SpecularNum);\n\n                // 最终颜色 = 环境光 * 反射颜色 + 漫反射颜色 + 高光反射颜色\n                fixed3 color = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo + lambertColor + specularColor;\n                // 最终透明度 = A通道值 * 整体透明度\n                return fixed4(color.rgb, texColor.a * _AlphaScale);\n            }\n            ENDCG\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20241122125118-tjfl12f","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241122125118-tjfl12f","updated":"20241122125118"},"Children":[{"ID":"20241122125118-tgnxl4h","Type":"NodeParagraph","Properties":{"id":"20241122125118-tgnxl4h","updated":"20241122125159"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SubShader"},{"Type":"NodeText","Data":"​ 中之前的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Pass"},{"Type":"NodeText","Data":"​ 渲染通道前面加一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Pass"},{"Type":"NodeText","Data":"​ 渲染通道"}]}]},{"ID":"20241122125118-lltfbrz","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20241122125118-lltfbrz","updated":"20241122125118"},"Children":[{"ID":"20241122125118-nrp93fg","Type":"NodeParagraph","Properties":{"id":"20241122125118-nrp93fg","updated":"20241122125205"},"Children":[{"Type":"NodeText","Data":"在新加 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Pass"},{"Type":"NodeText","Data":"​ 渲染通道中开启深度写入，并且使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ColorMask 0"},{"Type":"NodeText","Data":"​ 颜色遮罩 渲染命令，不输出颜色"}]},{"ID":"20241122125404-x9p0f0r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241122125404-x9p0f0r","updated":"20241122125602"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"SubShader\n{\n    Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\" }\n\n    // 进行深度写入，不输出颜色，如果此片元后续在深度测试中被丢弃，后面渲染颜色的Pass是不会输出的\n    Pass\n    {\n        ZWrite On\n        ColorMask 0\n    }\n\n    Pass { /* 渲染并混合颜色的Pass */ }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20241122130155-3067oxp","Type":"NodeParagraph","Properties":{"id":"20241122130155-3067oxp","updated":"20241122130208"},"Children":[{"Type":"NodeText","Data":"完整 Shader 实现如下："}]},{"ID":"20241122130209-nol61dj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241122130209-nol61dj","updated":"20241122130213"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"Shader \"TeachShader/Lesson58_Transparent\"\n{\n    Properties\n    {\n        _MainTex(\"MainTex\", 2D) = \"\"{}                          // 纹理贴图\n        _MainColor(\"MainColor\", Color) = (1, 1, 1, 1)           // 漫反射颜色\n        _SpecularColor(\"SpecularColor\", Color) = (1, 1, 1, 1)   // 高光反射颜色\n        _SpecularNum(\"SpecularNum\", Range(0, 20)) = 15          // 光泽度\n        _AlphaScale(\"AlphaScale\", Range(0, 1)) = 1              // 对象总体透明度\n    }\n    SubShader\n    {\n        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\" }\n\n        // 进行深度写入，不输出颜色，如果此片元后续在深度测试中被丢弃，后面渲染颜色的Pass是不会输出的\n        Pass\n        {\n            ZWrite On\n            ColorMask 0\n        }\n\n        Pass\n        {\n            Tags { \"LightMode\" = \"ForwardBase\" }\n            ZWrite Off                          //半透明效果关闭深度写入\n            Blend SrcAlpha OneMinusSrcAlpha     //设置混合因子\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n            #include \"UnityCG.cginc\"\n            #include \"Lighting.cginc\"\n\n            // 贴图纹理对应的映射成员\n            sampler2D _MainTex;\n            float4 _MainTex_ST;\n            // 漫反射颜色、高光反射颜色、光泽度\n            fixed4 _MainColor;\n            fixed4 _SpecularColor;\n            float _SpecularNum;\n            // 对象整体透明度\n            fixed _AlphaScale;\n\n            struct v2f\n            {\n                float4 pos: SV_POSITION;    // 裁剪空间下的顶点坐标\n                float2 uv: TEXCOORD0;       // 纹理UV坐标\n                float3 wNormal: NORMAL;     // 世界空间下的法线\n                float3 wPos: TEXCOORD1;     // 世界空间下的顶点坐标\n            };\n\n            v2f vert (appdata_base v)\n            {\n                v2f data;\n                data.pos = UnityObjectToClipPos(v.vertex);                  // 将模型空间下的法线转换到世界空间下\n                data.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;  // 计算UV\n                data.wNormal = UnityObjectToWorldNormal(v.normal);          // 法线转换到世界空间\n                data.wPos = mul(unity_ObjectToWorld, v.vertex);             // 顶点转换到世界空间\n\n                return data;\n            }\n\n            fixed4 frag (v2f i) : SV_Target\n            {\n                fixed4 texColor = tex2D(_MainTex, i.uv);                    // 取出纹理的颜色\n                fixed3 albedo = texColor.rgb * _MainColor.rgb;              // 反射率，即纹理颜色和漫反射材质颜色乘法叠加共同决定的颜色\n        \n                // 漫反射颜色\n                float3 lightDir = normalize(_WorldSpaceLightPos0.xyz);      // 指向光源的方向\n                fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(i.wNormal, lightDir));\n        \n                // 高光反射颜色\n                float3 viewDir = normalize(UnityWorldSpaceViewDir(i.wPos)); // 视角方向\n                float3 halfA = normalize(viewDir + lightDir);               // 半角向量\n                fixed3 specularColor = _LightColor0.rgb * _SpecularColor.rgb * pow(max(0, dot(i.wNormal, halfA)), _SpecularNum);\n\n                // 最终颜色 = 环境光 * 反射颜色 + 漫反射颜色 + 高光反射颜色\n                fixed3 color = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo + lambertColor + specularColor;\n                // 最终透明度 = A通道值 * 整体透明度\n                return fixed4(color.rgb, texColor.a * _AlphaScale);\n            }\n            ENDCG\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241122130216-0x845hl","Type":"NodeParagraph","Properties":{"id":"20241122130216-0x845hl","updated":"20241122130258"},"Children":[{"Type":"NodeText","Data":"显示效果（左为不使用半透明，中间为关闭深度写入的半透明，右为开启深度写入的半透明）："}]},{"ID":"20241122130139-lpberfi","Type":"NodeParagraph","Properties":{"id":"20241122130139-lpberfi","updated":"20241122130139"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241122130139-qjge9pj.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241122130259-1c6ikmk","Type":"NodeParagraph","Properties":{"id":"20241122130259-1c6ikmk","updated":"20241122130318"},"Children":[{"Type":"NodeText","Data":"可以看见，使用开启深度写入的半透明的遮挡关系是正确的"}]},{"ID":"20241122130322-ut31rqh","Type":"NodeParagraph","Properties":{"id":"20241122130322-ut31rqh","updated":"20241122130322"}}]}