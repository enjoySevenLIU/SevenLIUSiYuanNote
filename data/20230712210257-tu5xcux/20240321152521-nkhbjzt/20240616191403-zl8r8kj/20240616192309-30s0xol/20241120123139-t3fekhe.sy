{"ID":"20241120123139-t3fekhe","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241120123139-t3fekhe","title":"US3S3L4——透明度测试","type":"doc","updated":"20250227145139"},"Children":[{"ID":"20241120123139-akw3b29","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20241120123139-akw3b29","name":"clip()","updated":"20241120130522"},"Children":[{"Type":"NodeText","Data":"透明测试"}]},{"ID":"20241120123213-flcmae8","Type":"NodeParagraph","Properties":{"id":"20241120123213-flcmae8","updated":"20241120123336"},"Children":[{"Type":"NodeText","Data":"在游戏开发中，对象的某些部位完全透明而其他部位完全不透明\n这种透明需求往往不需要半透明效果，相对比较极端，只有看得见和看不见之分\n比如树叶、草、栅栏等等，如下图："}]},{"ID":"20241120123250-8hs71ro","Type":"NodeParagraph","Properties":{"id":"20241120123250-8hs71ro","updated":"20241120123329"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"style":"width: 352px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241120123250-7471hql.png"},{"Type":"NodeLinkSpace"},{"Type":"NodeLinkTitle","Data":"白色部分就要求是透明的，其他的地方则是不透明的"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 352px;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20241120130337-19scshu","Type":"NodeParagraph","Properties":{"id":"20241120130337-19scshu","updated":"20241120130343"},"Children":[{"Type":"NodeText","Data":"因为单纯的透明测试是不需要进行混合操作的，因此无需去关闭深度写入"}]},{"ID":"20241120123329-wmw2l11","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241120123329-wmw2l11","updated":"20241120130401"},"Children":[{"Type":"NodeText","Data":"透明测试的基本原理"}]},{"ID":"20241120123354-3tladw8","Type":"NodeParagraph","Properties":{"id":"20241120123354-3tladw8","updated":"20241120123428"},"Children":[{"Type":"NodeText","Data":"基本原理：通过一个阈值来决定哪些像素应该被保留，哪些应该被丢弃\n具体实现：通过片元携带的颜色信息中的透明度（A值）来计算"}]},{"ID":"20241120123409-xqtqd8x","Type":"NodeList","ListData":{},"Properties":{"id":"20241120123409-xqtqd8x","updated":"20241120123431"},"Children":[{"ID":"20241120123431-bxf2vzl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241120123431-bxf2vzl","updated":"20241120123431"},"Children":[{"ID":"20241120123431-p5yb6uq","Type":"NodeParagraph","Properties":{"id":"20241120123431-p5yb6uq","updated":"20241120123431"},"Children":[{"Type":"NodeText","Data":"不满足条件时（通常是小于某个阈值）\n"}]},{"ID":"20241120123434-tz9xtyh","Type":"NodeParagraph","Properties":{"id":"20241120123434-tz9xtyh","updated":"20241120123434"},"Children":[{"Type":"NodeText","Data":"该片元就会被舍弃，被舍弃的片元不会在进行任何处理，不会对颜色缓冲区产生任何影响\n"}]}]},{"ID":"20241120123433-qvzm92e","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241120123433-qvzm92e","updated":"20241120123433"},"Children":[{"ID":"20241120123433-qdc4jc1","Type":"NodeParagraph","Properties":{"id":"20241120123433-qdc4jc1","updated":"20241120123433"},"Children":[{"Type":"NodeText","Data":"满足条件时（通常是大于等于某个阈值）\n"}]},{"ID":"20241120123435-7f3o3es","Type":"NodeParagraph","Properties":{"id":"20241120123435-7f3o3es","updated":"20241120123435"},"Children":[{"Type":"NodeText","Data":"该片元会按照不透明物体的处理方式来处理"}]}]}]},{"ID":"20241120123403-futr327","Type":"NodeParagraph","Properties":{"id":"20241120123403-futr327","updated":"20241120123538"},"Children":[{"Type":"NodeText","Data":"阈值判断使用的方法：利用 CG 中的内置函数："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"clip()"},{"Type":"NodeText","Data":"​"}]},{"ID":"20241120123547-3c47msh","Type":"NodeParagraph","Properties":{"id":"20241120123547-3c47msh","updated":"20241120123547"},"Children":[{"Type":"NodeText","Data":"该函数有重载，参数类型可以是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"float4"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"float3"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"float2"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"float"},{"Type":"NodeText","Data":"​ 等等\n如果"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"传入的参数任何一个分量是负数就会舍弃当前片元"},{"Type":"NodeText","Data":"\n它的内部实现会用到一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"discard"},{"Type":"NodeText","Data":"​ 指令，代表剔除该片元 不再参与渲染"}]},{"ID":"20241120123601-weeb1ql","Type":"NodeParagraph","Properties":{"id":"20241120123601-weeb1ql","updated":"20241120123610"},"Children":[{"Type":"NodeText","Data":"它的实现大致为："}]},{"ID":"20241120123611-6a7boom","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241120123611-6a7boom","updated":"20241120123658"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"void clip(float4 x)\n{\n    if (any(x \u003c 0))\n        discard;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241120123702-fytntr7","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241120123702-fytntr7","updated":"20250227145139"},"Children":[{"Type":"NodeText","Data":"透明测试实现"}]},{"ID":"20241120123721-v5ic5dy","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241120123721-v5ic5dy","updated":"20250227145139"},"Children":[{"ID":"20241120123724-t4z7jcy","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241120123724-t4z7jcy","updated":"20241120123724"},"Children":[{"ID":"20241120123724-mb9zxhw","Type":"NodeParagraph","Properties":{"id":"20241120123724-mb9zxhw","updated":"20241120123858"},"Children":[{"Type":"NodeText","Data":"复用 "},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20241028124206-ubg5xrm","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"颜色纹理结合光照模型"},{"Type":"NodeText","Data":" 的Shader"}]},{"ID":"20241120123859-p3575di","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241120123859-p3575di","updated":"20241120123914"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"Shader \"TeachShader/Lesson56\"\n{\n    Properties\n    {\n        _MainTex(\"MainTex\", 2D) = \"\"{}                          // 纹理贴图\n        _MainColor(\"MainColor\", Color) = (1, 1, 1, 1)           // 漫反射颜色\n        _SpecularColor(\"SpecularColor\", Color) = (1, 1, 1, 1)   // 高光反射颜色\n        _SpecularNum(\"SpecularNum\", Range(0, 20)) = 15          // 光泽度\n    }\n    SubShader\n    {\n        Pass\n        {\n            Tags { \"LightMode\" = \"ForwardBase\" }\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n            #include \"UnityCG.cginc\"\n            #include \"Lighting.cginc\"\n\n            // 贴图纹理对应的映射成员\n            sampler2D _MainTex;\n            float4 _MainTex_ST;\n            // 漫反射颜色、高光反射颜色、光泽度\n            fixed4 _MainColor;\n            fixed4 _SpecularColor;\n            float _SpecularNum;\n\n            struct v2f\n            {\n                float4 pos: SV_POSITION;    // 裁剪空间下的顶点坐标\n                float2 uv: TEXCOORD0;       // 纹理UV坐标\n                float3 wNormal: NORMAL;     // 世界空间下的法线\n                float3 wPos: TEXCOORD1;     // 世界空间下的顶点坐标\n            };\n\n            v2f vert (appdata_base v)\n            {\n                v2f data;\n                data.pos = UnityObjectToClipPos(v.vertex);                  // 将模型空间下的法线转换到世界空间下\n                data.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;  // 计算UV\n                data.wNormal = UnityObjectToWorldNormal(v.normal);          // 法线转换到世界空间\n                data.wPos = mul(unity_ObjectToWorld, v.vertex);             // 顶点转换到世界空间\n\n                return data;\n            }\n\n            fixed4 frag (v2f i) : SV_Target\n            {\n                fixed3 albedo = tex2D(_MainTex, i.uv).rgb * _MainColor.rgb; // 反射率，即纹理颜色和漫反射材质颜色乘法叠加共同决定的颜色\n          \n                // 漫反射颜色\n                float3 lightDir = normalize(_WorldSpaceLightPos0.xyz);      // 指向光源的方向\n                fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(i.wNormal, lightDir));\n          \n                // 高光反射颜色\n                float3 viewDir = normalize(UnityWorldSpaceViewDir(i.wPos)); // 视角方向\n                float3 halfA = normalize(viewDir + lightDir);               // 半角向量\n                fixed3 specularColor = _LightColor0.rgb * _SpecularColor.rgb * pow(max(0, dot(i.wNormal, halfA)), _SpecularNum);\n\n                // 最终颜色 = 环境光 * 反射颜色 + 漫反射颜色 + 高光反射颜色\n                fixed3 color = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo + lambertColor + specularColor;\n\n                return fixed4(color.rgb, 1);\n            }\n            ENDCG\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20241120123724-nkoz14n","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241120123724-nkoz14n","updated":"20250227145139"},"Children":[{"ID":"20241120123724-t2x85cc","Type":"NodeParagraph","Properties":{"id":"20241120123724-t2x85cc","updated":"20241121124341"},"Children":[{"Type":"NodeText","Data":"在属性中加一个阈值 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"_Cutoff"},{"Type":"NodeText","Data":"​，取值范围为 0"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"~"}]},{"Type":"NodeText","Data":"1，用来设定用来判断的阈值。并在CG中添加属性的映射成员（使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"fixed"},{"Type":"NodeText","Data":"​）"}]},{"ID":"20241120124039-ah7x6qi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241120124039-ah7x6qi","updated":"20250227145139"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"Properties\n{\n    _MainTex(\"MainTex\", 2D) = \"\"{}                          // 纹理贴图\n    _MainColor(\"MainColor\", Color) = (1, 1, 1, 1)           // 漫反射颜色\n    _SpecularColor(\"SpecularColor\", Color) = (1, 1, 1, 1)   // 高光反射颜色\n    _SpecularNum(\"SpecularNum\", Range(0, 20)) = 15          // 光泽度\n    _Cutoff(\"Cutoff\", Range(0, 1)) = 0                      // 透明测试阈值\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241120124129-2j32c26","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241120124129-2j32c26","updated":"20241121124330"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"// 贴图纹理对应的映射成员\nsampler2D _MainTex;\nfloat4 _MainTex_ST;\n// 漫反射颜色、高光反射颜色、光泽度\nfixed4 _MainColor;\nfixed4 _SpecularColor;\nfloat _SpecularNum;\n// 透明测试阈值\nfixed _Cutoff;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20241120123724-qotr74z","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20241120123724-qotr74z","updated":"20241120130315"},"Children":[{"ID":"20241120123724-woql74v","Type":"NodeParagraph","Properties":{"id":"20241120123724-woql74v","updated":"20241120124017"},"Children":[{"Type":"NodeText","Data":"将渲染队列设置为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AlphaTest"},{"Type":"NodeText","Data":"​，并配合 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"IgnoreProjector"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"RenderType"},{"Type":"NodeText","Data":"​ 一起设置"}]},{"ID":"20241120124229-ngc63cn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241120124229-ngc63cn","updated":"20241120124402"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"SubShader\n{\n    Tags { \"Queue\"=\"AlphaTest\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"TransparentCutout\"}\n    Pass {/*...*/}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241120130233-jr0g8jr","Type":"NodeParagraph","Properties":{"id":"20241120130233-jr0g8jr","updated":"20241120130315"},"Children":[{"Type":"NodeText","Data":"指的一提的是，仅进行透明测试是不需要进行混合操作的，因此无需去关闭深度写入"}]}]},{"ID":"20241120123724-lgztd9r","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20241120123724-lgztd9r","updated":"20241120123724"},"Children":[{"ID":"20241120123724-0sxyom3","Type":"NodeParagraph","Properties":{"id":"20241120123724-0sxyom3","updated":"20241120123724"},"Children":[{"Type":"NodeText","Data":"在片元着色器中获取了颜色贴图颜色后，就进行阈值判断"}]},{"ID":"20241120124409-2c6h3ve","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241120124409-2c6h3ve","updated":"20241120124733"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"fixed4 frag (v2f i) : SV_Target\n{\n    fixed4 texColor = tex2D(_MainTex, i.uv);                    // 颜色纹理的颜色信息\n    clip(texColor.a - _Cutoff);                                 // A通道减去阈值传入到Clip函数内，若A值小于阈值就会被裁剪\n\n    fixed3 albedo = texColor.rgb * _MainColor.rgb;              // 反射率，即纹理颜色和漫反射材质颜色乘法叠加共同决定的颜色\n  \n    // 漫反射颜色\n    float3 lightDir = normalize(_WorldSpaceLightPos0.xyz);      // 指向光源的方向\n    fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(i.wNormal, lightDir));\n  \n    // 高光反射颜色\n    float3 viewDir = normalize(UnityWorldSpaceViewDir(i.wPos)); // 视角方向\n    float3 halfA = normalize(viewDir + lightDir);               // 半角向量\n    fixed3 specularColor = _LightColor0.rgb * _SpecularColor.rgb * pow(max(0, dot(i.wNormal, halfA)), _SpecularNum);\n\n    // 最终颜色 = 环境光 * 反射颜色 + 漫反射颜色 + 高光反射颜色\n    fixed3 color = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo + lambertColor + specularColor;\n\n    return fixed4(color.rgb, 1);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241120124810-gw7pga3","Type":"NodeParagraph","Properties":{"id":"20241120124810-gw7pga3","updated":"20241120124828"},"Children":[{"Type":"NodeText","Data":"其中 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"clip(texColor.a - _Cutoff)"},{"Type":"NodeText","Data":"​ 写法等同于："}]},{"ID":"20241120124829-0uhbz0l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241120124829-0uhbz0l","updated":"20241120131408"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"if (​texColor.a - _Cutoff​ \u003c 0)\n    discard;\n// 或者\nif (texColor.a \u003c _Cutoff)\n    discard;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20241120131409-5qb9hi1","Type":"NodeParagraph","Properties":{"id":"20241120131409-5qb9hi1","updated":"20241121123800"},"Children":[{"Type":"NodeText","Data":"完整 Shader 实现如下："}]},{"ID":"20241120131423-jy8bed7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241120131423-jy8bed7","updated":"20250227145135"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"Shader \"TeachShader/Lesson56\"\n{\n    Properties\n    {\n        _MainTex(\"MainTex\", 2D) = \"\"{}                          // 纹理贴图\n        _MainColor(\"MainColor\", Color) = (1, 1, 1, 1)           // 漫反射颜色\n        _SpecularColor(\"SpecularColor\", Color) = (1, 1, 1, 1)   // 高光反射颜色\n        _SpecularNum(\"SpecularNum\", Range(0, 20)) = 15          // 光泽度\n        _Cutoff(\"Cutoff\", Range(0, 1)) = 0                      // 透明测试阈值\n    }\n    SubShader\n    {\n        Tags { \"Queue\"=\"AlphaTest\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"TransparentCutout\"}\n\n        Pass\n        {\n            Tags { \"LightMode\" = \"ForwardBase\" }\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n            #include \"UnityCG.cginc\"\n            #include \"Lighting.cginc\"\n\n            // 贴图纹理对应的映射成员\n            sampler2D _MainTex;\n            float4 _MainTex_ST;\n            // 漫反射颜色、高光反射颜色、光泽度\n            fixed4 _MainColor;\n            fixed4 _SpecularColor;\n            float _SpecularNum;\n            // 透明测试阈值\n            fixed _Cutoff;\n\n            struct v2f\n            {\n                float4 pos: SV_POSITION;    // 裁剪空间下的顶点坐标\n                float2 uv: TEXCOORD0;       // 纹理UV坐标\n                float3 wNormal: NORMAL;     // 世界空间下的法线\n                float3 wPos: TEXCOORD1;     // 世界空间下的顶点坐标\n            };\n\n            v2f vert (appdata_base v)\n            {\n                v2f data;\n                data.pos = UnityObjectToClipPos(v.vertex);                  // 将模型空间下的法线转换到世界空间下\n                data.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;  // 计算UV\n                data.wNormal = UnityObjectToWorldNormal(v.normal);          // 法线转换到世界空间\n                data.wPos = mul(unity_ObjectToWorld, v.vertex);             // 顶点转换到世界空间\n\n                return data;\n            }\n\n            fixed4 frag (v2f i) : SV_Target\n            {\n                fixed4 texColor = tex2D(_MainTex, i.uv);                    // 颜色纹理的颜色信息\n                clip(texColor.a - _Cutoff);                                 // A通道减去阈值传入到Clip函数内，若A值小于阈值就会被裁剪\n\n                fixed3 albedo = texColor.rgb * _MainColor.rgb;              // 反射率，即纹理颜色和漫反射材质颜色乘法叠加共同决定的颜色\n        \n                // 漫反射颜色\n                float3 lightDir = normalize(_WorldSpaceLightPos0.xyz);      // 指向光源的方向\n                fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(i.wNormal, lightDir));\n        \n                // 高光反射颜色\n                float3 viewDir = normalize(UnityWorldSpaceViewDir(i.wPos)); // 视角方向\n                float3 halfA = normalize(viewDir + lightDir);               // 半角向量\n                fixed3 specularColor = _LightColor0.rgb * _SpecularColor.rgb * pow(max(0, dot(i.wNormal, halfA)), _SpecularNum);\n\n                // 最终颜色 = 环境光 * 反射颜色 + 漫反射颜色 + 高光反射颜色\n                fixed3 color = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo + lambertColor + specularColor;\n\n                return fixed4(color.rgb, 1);\n            }\n            ENDCG\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241120125400-nlh0k7j","Type":"NodeParagraph","Properties":{"id":"20241120125400-nlh0k7j","updated":"20241120125623"},"Children":[{"Type":"NodeText","Data":"以下图作为示例（下图的四个色块透明度各不相同，其中左上角A值为80"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"%"}]},{"Type":"NodeText","Data":"，右上角A值为70"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"%"}]},{"Type":"NodeText","Data":"，左下角A值为60"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"%"}]},{"Type":"NodeText","Data":"，右下角A值为50"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"%"}]},{"Type":"NodeText","Data":"）"}]},{"ID":"20241120125357-9tihwkw","Type":"NodeParagraph","Properties":{"id":"20241120125357-9tihwkw","updated":"20241120125458"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"transparent_texture_small"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/transparent_texture_small-20241120125357-axp0fmo.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241120125154-eivlwy8","Type":"NodeParagraph","Properties":{"id":"20241120125154-eivlwy8","updated":"20241120130109"},"Children":[{"Type":"NodeText","Data":"分别调节使用此 Shader 的材质的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Cutoff"},{"Type":"NodeText","Data":"​ 值为 0，0.55，0.65，0.75，0.85，得到效果如下："}]},{"ID":"20241120125924-x0mcnjq","Type":"NodeParagraph","Properties":{"id":"20241120125924-x0mcnjq","updated":"20241120130053"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241120125924-9rssi5p.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241120125946-64qn582.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241120130004-32jvtk4.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241120130030-kdvmotj.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241120130053-92xf4g1.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241120130054-novcp9k","Type":"NodeParagraph","Properties":{"id":"20241120130054-novcp9k","updated":"20241120130204"},"Children":[{"Type":"NodeText","Data":"可以看到，随着 阈值 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Cutoff"},{"Type":"NodeText","Data":"​ 值越来越高，A值低于阈值的像素会被丢弃不被渲染"}]},{"ID":"20241120131111-psgk7mh","Type":"NodeParagraph","Properties":{"id":"20241120131111-psgk7mh","updated":"20241120131111"}}]}