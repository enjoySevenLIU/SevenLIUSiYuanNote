{"ID":"20241028124206-ubg5xrm","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241028124206-ubg5xrm","title":"US3S2L3——纹理结合光照模型","type":"doc","updated":"20241028141922"},"Children":[{"ID":"20241028124206-9u99hap","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241028124206-9u99hap","updated":"20241028141922"},"Children":[{"Type":"NodeText","Data":"单张纹理结合 BlinnPhong 光照模型"}]},{"ID":"20241028141404-rzse8mf","Type":"NodeParagraph","Properties":{"id":"20241028141404-rzse8mf","updated":"20241028141732"},"Children":[{"Type":"NodeText","Data":"如果要让有纹理的模型受到光照影响，就需要让纹理颜色结合光照模型计算出来的颜色，计算出模型显示在屏幕上的最终颜色"}]},{"ID":"20241028124226-uw77l0c","Type":"NodeParagraph","Properties":{"id":"20241028124226-uw77l0c","updated":"20241028141652"},"Children":[{"Type":"NodeText","Data":"体现在 Shader 计算中，有以下的三点注意点："}]},{"ID":"20241028124228-g8e6qpu","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241028124228-g8e6qpu","updated":"20241028141002"},"Children":[{"ID":"20241028124228-57cgenw","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241028124228-57cgenw","updated":"20241028124228"},"Children":[{"ID":"20241028124228-a9794nj","Type":"NodeParagraph","Properties":{"id":"20241028124228-a9794nj","updated":"20241028135840"},"Children":[{"Type":"NodeText","Data":"纹理颜色 需要和 漫反射颜色 进行乘法叠加，它们两共同影响最终的颜色，也就是需要计算反射颜色"}]},{"ID":"20241028135546-43gzfrt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241028135546-43gzfrt","updated":"20241028135813"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"sampler2D _MainTex;\t\t// 贴图纹理对应的映射成员\nfixed4 _MainColor;\t\t// 漫反射颜色\n\nstruct v2f\n{\n    float4 pos: SV_POSITION;    //裁剪空间下的顶点坐标\n    float2 uv: TEXCOORD0;       //纹理UV坐标\n    float3 wNormal: NORMAL;     //世界空间下的法线\n    float3 wPos: TEXCOORD1;     //世界空间下的顶点坐标\n};\n\nfixed4 frag (v2f i) : SV_Target\n{\n    fixed3 albedo = tex2D(_MainTex, i.uv).rgb * _MainColor.rgb; // 反射率，即纹理颜色和漫反射材质颜色乘法叠加共同决定的颜色\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20241028124228-nat6n4z","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241028124228-nat6n4z","updated":"20241028124228"},"Children":[{"ID":"20241028124228-j1zqu7y","Type":"NodeParagraph","Properties":{"id":"20241028124228-j1zqu7y","updated":"20241028135640"},"Children":[{"Type":"NodeText","Data":"兰伯特光照模型计算时，漫反射材质颜色使用第一步计算出来的颜色计算"}]},{"ID":"20241028135619-cpualg4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241028135619-cpualg4","updated":"20241028135907"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"sampler2D _MainTex;\t\t// 贴图纹理对应的映射成员\nfixed4 _MainColor;\t\t// 漫反射颜色\n\nstruct v2f\n{\n    float4 pos: SV_POSITION;    //裁剪空间下的顶点坐标\n    float2 uv: TEXCOORD0;       //纹理UV坐标\n    float3 wNormal: NORMAL;     //世界空间下的法线\n    float3 wPos: TEXCOORD1;     //世界空间下的顶点坐标\n};\n\nfixed4 frag (v2f i) : SV_Target\n{\n    fixed3 albedo = tex2D(_MainTex, i.uv).rgb * _MainColor.rgb; // 反射率，即纹理颜色和漫反射材质颜色乘法叠加共同决定的颜色\n    // 漫反射颜色\n    float3 lightDir = normalize(_WorldSpaceLightPos0.xyz);      // 指向光源的方向\n    fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(i.wNormal, lightDir));\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20241028124228-fjjytfx","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20241028124228-fjjytfx","updated":"20241028141002"},"Children":[{"ID":"20241028124228-688t8ph","Type":"NodeParagraph","Properties":{"id":"20241028124228-688t8ph","updated":"20241028124257"},"Children":[{"Type":"NodeText","Data":"最终使用的环境光叠加时，环境光变量 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UNITY_LIGHTMODEL_AMBIENT"},{"Type":"NodeText","Data":"​ 需要和第一步计算出来的颜色进行乘法叠加，为了避免最终的渲染效果偏灰"}]},{"ID":"20241028135646-ibeu9y8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241028135646-ibeu9y8","updated":"20241028140232"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"sampler2D _MainTex;\t\t// 贴图纹理对应的映射成员\n// 漫反射颜色、高光反射颜色、光泽度\nfixed4 _MainColor;\nfixed4 _SpecularColor;\nfloat _SpecularNum;\n\nstruct v2f\n{\n    float4 pos: SV_POSITION;    //裁剪空间下的顶点坐标\n    float2 uv: TEXCOORD0;       //纹理UV坐标\n    float3 wNormal: NORMAL;     //世界空间下的法线\n    float3 wPos: TEXCOORD1;     //世界空间下的顶点坐标\n};\n\nfixed4 frag (v2f i) : SV_Target\n{\n    fixed3 albedo = tex2D(_MainTex, i.uv).rgb * _MainColor.rgb; // 反射率，即纹理颜色和漫反射材质颜色乘法叠加共同决定的颜色\n  \n    // 漫反射颜色\n    float3 lightDir = normalize(_WorldSpaceLightPos0.xyz);      // 指向光源的方向\n    fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(i.wNormal, lightDir));\n  \n    // 高光反射颜色\n    float3 viewDir = normalize(UnityWorldSpaceViewDir(i.wPos)); // 视角方向\n    float3 halfA = normalize(viewDir + lightDir);               // 半角向量\n    fixed3 specularColor = _LightColor0.rgb * _SpecularColor.rgb * pow(max(0, dot(i.wNormal, halfA)), _SpecularNum);\n\n    // 最终颜色，环境光需要和乘法叠加反射颜色\n    fixed3 color = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo + lambertColor + specularColor;\n\n    return fixed4(color.rgb, 1);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241028140238-602llio","Type":"NodeParagraph","Properties":{"id":"20241028140238-602llio","updated":"20241028140949"},"Children":[{"Type":"NodeText","Data":"效果对比（左图为不叠加 albedo，右图为叠加 albedo）："}]},{"ID":"20241028140852-z1c3rra","Type":"NodeParagraph","Properties":{"id":"20241028140852-z1c3rra","updated":"20241028141002"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241028140852-rn5befb.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"style":"width: 190px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241028141002-e1wu2dw.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 190px;\"}"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20241028124226-9nrh64g","Type":"NodeParagraph","Properties":{"id":"20241028124226-9nrh64g","updated":"20241028125224"},"Children":[{"Type":"NodeText","Data":"其他的计算步骤同 "},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240707130106-869nhts","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"BlinnPhong 的逐片元光照"},{"Type":"NodeText","Data":" 实现"}]},{"ID":"20241028135323-ce44pbr","Type":"NodeParagraph","Properties":{"id":"20241028135323-ce44pbr","updated":"20241028135523"},"Children":[{"Type":"NodeText","Data":"完整 Shader 代码如下："}]},{"ID":"20241028135524-b06pheq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241028135524-b06pheq","updated":"20241028141321"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"Shader \"TeachShader/Lesson50\"\n{\n    Properties\n    {\n        _MainTex(\"MainTex\", 2D) = \"\"{}                          // 纹理贴图\n        _MainColor(\"MainColor\", Color) = (1, 1, 1, 1)           // 漫反射颜色\n        _SpecularColor(\"SpecularColor\", Color) = (1, 1, 1, 1)   // 高光反射颜色\n        _SpecularNum(\"SpecularNum\", Range(0, 20)) = 15          // 光泽度\n    }\n    SubShader\n    {\n        Pass\n        {\n            Tags { \"LightMode\" = \"ForwardBase\" }\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n            #include \"UnityCG.cginc\"\n            #include \"Lighting.cginc\"\n\n            // 贴图纹理对应的映射成员\n            sampler2D _MainTex;\n            float4 _MainTex_ST;\n            // 漫反射颜色、高光反射颜色、光泽度\n            fixed4 _MainColor;\n            fixed4 _SpecularColor;\n            float _SpecularNum;\n\n            struct v2f\n            {\n                float4 pos: SV_POSITION;    // 裁剪空间下的顶点坐标\n                float2 uv: TEXCOORD0;       // 纹理UV坐标\n                float3 wNormal: NORMAL;     // 世界空间下的法线\n                float3 wPos: TEXCOORD1;     // 世界空间下的顶点坐标\n            };\n\n            v2f vert (appdata_base v)\n            {\n                v2f data;\n                data.pos = UnityObjectToClipPos(v.vertex);                  // 将模型空间下的法线转换到世界空间下\n                data.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;  // 计算UV\n                data.wNormal = UnityObjectToWorldNormal(v.normal);          // 法线转换到世界空间\n                data.wPos = mul(unity_ObjectToWorld, v.vertex);             // 顶点转换到世界空间\n\n                return data;\n            }\n\n            fixed4 frag (v2f i) : SV_Target\n            {\n                fixed3 albedo = tex2D(_MainTex, i.uv).rgb * _MainColor.rgb; // 反射率，即纹理颜色和漫反射材质颜色乘法叠加共同决定的颜色\n              \n                // 漫反射颜色\n                float3 lightDir = normalize(_WorldSpaceLightPos0.xyz);      // 指向光源的方向\n                fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(i.wNormal, lightDir));\n              \n                // 高光反射颜色\n                float3 viewDir = normalize(UnityWorldSpaceViewDir(i.wPos)); // 视角方向\n                float3 halfA = normalize(viewDir + lightDir);               // 半角向量\n                fixed3 specularColor = _LightColor0.rgb * _SpecularColor.rgb * pow(max(0, dot(i.wNormal, halfA)), _SpecularNum);\n\n                // 最终颜色 = 环境光 * 反射颜色 + 漫反射颜色 + 高光反射颜色\n                fixed3 color = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo + lambertColor + specularColor;\n\n                return fixed4(color.rgb, 1);\n            }\n            ENDCG\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241028135317-nnrw17h","Type":"NodeParagraph","Properties":{"id":"20241028135317-nnrw17h","updated":"20241028135509"},"Children":[{"Type":"NodeText","Data":"显示效果（左边是不计算光照效果的 Shader，右边是使用 BlinnPhong 逐片元光照的 Shader）："}]},{"ID":"20241028135315-56ua2kn","Type":"NodeParagraph","Properties":{"id":"20241028135315-56ua2kn","updated":"20241028135315"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241028135315-s70ays7.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241028141542-76cjbua","Type":"NodeParagraph","Properties":{"id":"20241028141542-76cjbua","updated":"20241028141922"},"Children":[{"Type":"NodeText","Data":"可见，结合了光照模型计算结果的模型能够收到光照的影响，出现背光变暗的效果"}]},{"ID":"20241028141838-yyroha4","Type":"NodeParagraph","Properties":{"id":"20241028141838-yyroha4","updated":"20241028141838"}}]}