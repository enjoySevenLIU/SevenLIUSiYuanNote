{
	"ID": "20241209012546-0eh5b1d",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20241209012546-0eh5b1d",
		"title": "US3S7L1——标准漫反射Shader",
		"type": "doc",
		"updated": "20241209025532"
	},
	"Children": [
		{
			"ID": "20241209012546-05zifr2",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20241209012546-05zifr2",
				"updated": "20241209025532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "标准漫反射Shader"
				}
			]
		},
		{
			"ID": "20241209012614-99u58lo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209012614-99u58lo",
				"updated": "20241209012737"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目前我们已经完成了光源和阴影的主要知识点学习，包括多光源、阴影、光照衰减等等知识\n已经可以在 Shader 中处理光和阴影相关的效果了，那么我们将结合所学的知识实现一个标准的漫反射 Shader\n该 Shader 其实就是一个带有法线（世界空间中计算，因为全局效果的表现更准确，详见："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20241102133758-wvftu7z",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "US3S2L7——世界空间下计算法线纹理贴图"
				},
				{
					"Type": "NodeText",
					"Data": "）\n的基于 Phong 光照模型（去掉高光反射）的支持多光源和阴影的Shader"
				}
			]
		},
		{
			"ID": "20241209012707-77x1v89",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209012707-77x1v89",
				"updated": "20241209012710"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "说是标准，其实就是一个常用 Shader 而已"
				}
			]
		},
		{
			"ID": "20241209012809-u5s6rws",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20241209012809-u5s6rws",
				"updated": "20241209025532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "制作常用漫反射Shader"
				}
			]
		},
		{
			"ID": "20241209012817-4sq9kf3",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20241209012817-4sq9kf3",
				"updated": "20241209025105"
			},
			"Children": [
				{
					"ID": "20241209012823-5cj11wx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20241209012823-5cj11wx",
						"updated": "20241209012823"
					},
					"Children": [
						{
							"ID": "20241209012823-am1zt4m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209012823-am1zt4m",
								"updated": "20241209012832"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "新建一个 Shader，取名叫 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BumpedDiffuse"
								},
								{
									"Type": "NodeText",
									"Data": "​（凹凸漫反射）"
								}
							]
						}
					]
				},
				{
					"ID": "20241209012823-b5fpr0q",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20241209012823-b5fpr0q",
						"updated": "20241209012823"
					},
					"Children": [
						{
							"ID": "20241209012823-1zve6g5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209012823-1zve6g5",
								"updated": "20241209012905"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "复用 世界空间下计算法线纹理贴图的 中 Shader 代码，粘贴到新建文件中"
								}
							]
						},
						{
							"ID": "20241209012908-fuks7md",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209012908-fuks7md",
								"updated": "20241209012935"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "具体代码，详见："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20241102133758-wvftu7z",
									"TextMarkBlockRefSubtype": "d",
									"TextMarkTextContent": "US3S2L7——世界空间下计算法线纹理贴图"
								}
							]
						}
					]
				},
				{
					"ID": "20241209012823-1fghqpj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20241209012823-1fghqpj",
						"updated": "20241209012823"
					},
					"Children": [
						{
							"ID": "20241209012823-ej0ugo8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209012823-ej0ugo8",
								"updated": "20241209012940"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加入渲染标签 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Tags { \u0026quot;RenderType\u0026quot;=\u0026quot;Opaque\u0026quot; \u0026quot;Queue\u0026quot;=\u0026quot;Geometry\u0026quot;}"
								},
								{
									"Type": "NodeText",
									"Data": "​\n"
								}
							]
						},
						{
							"ID": "20241209012943-b37cok3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209012943-b37cok3",
								"updated": "20241209012943"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "渲染类型设置为不透明的、渲染队列设置为几何队列（不透明的几何体通常使用该队列）"
								}
							]
						},
						{
							"ID": "20241209013229-kcbzfqn",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209013229-kcbzfqn",
								"style": "line-height: 22px;",
								"updated": "20241209013255"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "SubShader\n{\n    Tags { \"RenderType\" = \"Opaque\" \"Queue\" = \"Geometry\" }\n    Pass {/*...*/}\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20241209012823-ngz8g0p",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20241209012823-ngz8g0p",
						"updated": "20241209012823"
					},
					"Children": [
						{
							"ID": "20241209012823-wn6g2hq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209012823-wn6g2hq",
								"updated": "20241209012823"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "删除高光反射相关代码"
								}
							]
						}
					]
				},
				{
					"ID": "20241209012823-h59njok",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20241209012823-h59njok",
						"updated": "20241209012823"
					},
					"Children": [
						{
							"ID": "20241209012823-ca7ynpk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209012823-ca7ynpk",
								"updated": "20241209012823"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加入阴影、衰减相关代码"
								}
							]
						},
						{
							"ID": "20241209014927-mpu2w0c",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209014927-mpu2w0c",
								"style": "line-height: 22px;",
								"updated": "20241209014937"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "struct v2f\n{\n    float4 pos: SV_POSITION;\n    float4 uv: TEXCOORD0;               // 使用float4同时存储主要纹理的uv（xy存储）和法线纹理的uv（zw存储）\n    float4 tangentToWorld0: TEXCOORD1;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第一行\n    float4 tangentToWorld1: TEXCOORD2;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第二行\n    float4 tangentToWorld2: TEXCOORD3;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第三行\n    SHADOW_COORDS(4)                    // 阴影坐标变量宏，因为前面有4个TEXCOORD变量，故这里参数填写4\n};\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241209014938-yhcbwo4",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209014938-yhcbwo4",
								"style": "line-height: 22px;",
								"updated": "20241209014948"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "v2f vert (appdata_full v)\n{\n    v2f data;\n  \n    data.pos = UnityObjectToClipPos(v.vertex);  //计算裁剪空间下顶点坐标\n    // 分别计算主纹理和法线纹理的缩放平移\n    data.uv.xy = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    data.uv.zw = v.texcoord.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;\n    // 得到世界空间下的顶点位置，用于之后在片元中计算视角方向（基于世界空间下）\n    float3 worldPos = mul(unity_ObjectToWorld, v.vertex);\n  \n    // 将模型空间下的法线、切线转换到世界空间下，并计算世界空间下的副切线\n    float3 worldNormal = UnityObjectToWorldNormal(v.normal);\n    float3 worldTangent = UnityObjectToWorldDir(v.tangent);\n    float3 worldBinormal = cross(normalize(worldTangent), normalize(worldNormal)) * v.tangent.w;\n    // 将切线空间到世界空间的转换矩阵，以及世界坐标存储到三个贴图变量内\n    data.tangentToWorld0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n    data.tangentToWorld1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n    data.tangentToWorld2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n    // 阴影坐标转换宏\n    TRANSFER_SHADOW(data)\n\n    return data;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241209014949-a4hq27i",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209014949-a4hq27i",
								"style": "line-height: 22px;",
								"updated": "20241209015001"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "fixed4 frag (v2f i) : SV_Target\n{\n    // 计算世界空间下光的方向和视角方向\n    fixed3 lightDir = normalize(_WorldSpaceLightPos0.xyz);\n    float3 worldPos = float3(i.tangentToWorld0.w, i.tangentToWorld1.w, i.tangentToWorld2.w);\n    fixed3 viewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n    // 通过法线纹理采样并解压缩，再乘以凹凸系数，得到切线空间下法线数据\n    float4 packedNormal = tex2D(_BumpMap, i.uv.zw);\n    float3 tangentNormal = UnpackNormal(packedNormal);\n    tangentNormal.xy *= _BumpScale;\n    tangentNormal.z = sqrt(1.0 - saturate(dot(tangentNormal.xy, tangentNormal.xy)));\n    // 将切线空间下法线数据转换到世界空间下\n    float3 worldNormal = float3(\n        dot(i.tangentToWorld0.xyz, tangentNormal),\n        dot(i.tangentToWorld1.xyz, tangentNormal),\n        dot(i.tangentToWorld2.xyz, tangentNormal)\n    );\n\n    // 根据以上数据计算光照模型颜色\n    fixed3 albedo = tex2D(_MainTex, i.uv.xy) * _MainColor.rgb;  //反射率\n    // 漫反射光照计算：这里需要使用已经计算完毕的切线数据和光照方向\n    fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(worldNormal, lightDir));\n    // 计算光照和阴影综合衰减值\n    UNITY_LIGHT_ATTENUATION(atten, i, worldPos);\n    // 最终颜色\n    fixed3 color = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo + lambertColor * atten;\n\n    return fixed4(color.rgb, 1);\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20241209012823-uh9y84q",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20241209012823-uh9y84q",
						"updated": "20241209025105"
					},
					"Children": [
						{
							"ID": "20241209012823-6l4z6ou",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209012823-6l4z6ou",
								"updated": "20241209013003"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加入附加渲染通道，实现多光源效果"
								}
							]
						},
						{
							"ID": "20241209015007-7dhcmx6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209015007-7dhcmx6",
								"updated": "20241209025105"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可以直接复用 Bass Pass 的内容，只是需要修改 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "LightMode"
								},
								{
									"Type": "NodeText",
									"Data": "​ 和编译指令，再加上线性混合，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "同时注意修改光源方向相关计算代码并删除环境光的叠加"
								}
							]
						},
						{
							"ID": "20241209015105-tbo19gw",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209015105-tbo19gw",
								"style": "line-height: 22px;",
								"updated": "20241209015135"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "// 附加渲染通道 Additional Pass\nPass\n{\n    Tags { \"LightMode\" = \"ForwardAdd\" }\n    Blend One One\n\n    CGPROGRAM\n    #pragma vertex vert\n    #pragma fragment frag\n    #pragma multi_compile_fwdadd\n    //...\n    ENDCG\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20241209020720-aor3qnw",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209020720-aor3qnw",
								"style": "line-height: 22px;",
								"updated": "20241209025052"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "fixed4 frag (v2f i) : SV_Target\n{\n    // 计算世界空间下光的方向和视角方向\n    float3 worldPos = float3(i.tangentToWorld0.w, i.tangentToWorld1.w, i.tangentToWorld2.w);\n#if defined(_DIRECTIONAL_LIGHT)\n    fixed3 lightDir = normalize(_WorldSpaceLightPos0.xyz);              // 平行光的光源方向\n#else\n    fixed3 lightDir = normalize(_WorldSpaceLightPos0.xyz - worldPos);   // 非平行光的光源方向\n#endif\n    fixed3 viewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n    // 通过法线纹理采样并解压缩，再乘以凹凸系数，得到切线空间下法线数据\n    float4 packedNormal = tex2D(_BumpMap, i.uv.zw);\n    float3 tangentNormal = UnpackNormal(packedNormal);\n    tangentNormal.xy *= _BumpScale;\n    tangentNormal.z = sqrt(1.0 - saturate(dot(tangentNormal.xy, tangentNormal.xy)));\n    // 将切线空间下法线数据转换到世界空间下\n    float3 worldNormal = float3(\n        dot(i.tangentToWorld0.xyz, tangentNormal),\n        dot(i.tangentToWorld1.xyz, tangentNormal),\n        dot(i.tangentToWorld2.xyz, tangentNormal)\n    );\n\n    // 根据以上数据计算光照模型颜色\n    fixed3 albedo = tex2D(_MainTex, i.uv.xy) * _Color.rgb;  //反射率\n    // 漫反射光照计算：这里需要使用已经计算完毕的切线数据和光照方向\n    fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(worldNormal, lightDir));\n    // 计算光照和阴影综合衰减值\n    UNITY_LIGHT_ATTENUATION(atten, i, worldPos);\n    // 最终颜色\n    fixed3 color = lambertColor * atten;\n\n    return fixed4(color.rgb, 1);\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20241209012823-ukwv2f6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20241209012823-ukwv2f6",
						"updated": "20241209021253"
					},
					"Children": [
						{
							"ID": "20241209012823-hfqan4h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20241209012823-hfqan4h",
								"updated": "20241209014910"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "加入 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "FallBack \u0026quot;Diffuse\u0026quot;"
								},
								{
									"Type": "NodeText",
									"Data": "​，实现阴影投射"
								}
							]
						},
						{
							"ID": "20241209021243-p21losg",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20241209021243-p21losg",
								"style": "line-height: 22px;",
								"updated": "20241209021253"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Fallback \"Diffuse\"\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20241209021242-uox7h7s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209021242-uox7h7s",
				"updated": "20241209021354"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "显示效果："
				}
			]
		},
		{
			"ID": "20241209025342-jl46ysc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209025342-jl46ysc",
				"updated": "20241209025342"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"style": "width: 476px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20241209025342-yaiindv.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 476px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20241209021500-n1vgh43",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209021500-n1vgh43",
				"updated": "20241209021616"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到，这个 Shader 拥有法线带来的凹凸效果，拥有多光源的光照效果，同时可以接收并投射阴影"
				}
			]
		},
		{
			"ID": "20241209021617-iw42v0c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209021617-iw42v0c",
				"updated": "20241209021626"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "完整 Shader 代码如下："
				}
			]
		},
		{
			"ID": "20241209021627-0xn5ouy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241209021627-0xn5ouy",
				"style": "line-height: 22px;",
				"updated": "20241209025532"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Shader \"TeachShader/BumpedDiffuse\"\n{\n    Properties\n    {\n        _Color(\"MainColor\", Color) = (1, 1, 1, 1)\n        _MainTex(\"MainTex\", 2D) = \"\"{}\n        _BumpMap(\"BumpMap\", 2D) = \"\"{}\n        _BumpScale(\"BumpScale\", Range(0, 1)) = 1\n    }\n    SubShader\n    {\n        Tags { \"RenderType\" = \"Opaque\" \"Queue\" = \"Geometry\" }\n\n        // 基础渲染通道 Base Pass\n        Pass\n        {\n            Tags { \"LightMode\" = \"ForwardBase\" }\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n            #pragma multi_compile_fwdbase\n\n            #include \"UnityCG.cginc\"\n            #include \"Lighting.cginc\"\n            #include \"AutoLight.cginc\"\n\n            struct v2f\n            {\n                float4 pos: SV_POSITION;\n                float4 uv: TEXCOORD0;               // 使用float4同时存储主要纹理的uv（xy存储）和法线纹理的uv（zw存储）\n                float4 tangentToWorld0: TEXCOORD1;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第一行\n                float4 tangentToWorld1: TEXCOORD2;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第二行\n                float4 tangentToWorld2: TEXCOORD3;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第三行\n                SHADOW_COORDS(4)                    // 阴影坐标变量宏，因为前面有4个TEXCOORD变量，故这里参数填写4\n            };\n\n            float4 _Color;      //漫反射颜色\n            sampler2D _MainTex;     //颜色纹理\n            float4 _MainTex_ST;     //颜色纹理的缩放和平移\n            sampler2D _BumpMap;     //法线纹理\n            float4 _BumpMap_ST;     //法线纹理的缩放和平移\n            float _BumpScale;       //凹凸程度\n\n            v2f vert (appdata_full v)\n            {\n                v2f data;\n            \n                data.pos = UnityObjectToClipPos(v.vertex);  //计算裁剪空间下顶点坐标\n                // 分别计算主纹理和法线纹理的缩放平移\n                data.uv.xy = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n                data.uv.zw = v.texcoord.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;\n                // 得到世界空间下的顶点位置，用于之后在片元中计算视角方向（基于世界空间下）\n                float3 worldPos = mul(unity_ObjectToWorld, v.vertex);\n            \n                // 将模型空间下的法线、切线转换到世界空间下，并计算世界空间下的副切线\n                float3 worldNormal = UnityObjectToWorldNormal(v.normal);\n                float3 worldTangent = UnityObjectToWorldDir(v.tangent);\n                float3 worldBinormal = cross(normalize(worldTangent), normalize(worldNormal)) * v.tangent.w;\n                // 将切线空间到世界空间的转换矩阵，以及世界坐标存储到三个贴图变量内\n                data.tangentToWorld0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n                data.tangentToWorld1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n                data.tangentToWorld2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n                // 阴影坐标转换宏\n                TRANSFER_SHADOW(data)\n\n                return data;\n            }\n\n            fixed4 frag (v2f i) : SV_Target\n            {\n                // 计算世界空间下光的方向和视角方向\n                fixed3 lightDir = normalize(_WorldSpaceLightPos0.xyz);\n                float3 worldPos = float3(i.tangentToWorld0.w, i.tangentToWorld1.w, i.tangentToWorld2.w);\n                fixed3 viewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n                // 通过法线纹理采样并解压缩，再乘以凹凸系数，得到切线空间下法线数据\n                float4 packedNormal = tex2D(_BumpMap, i.uv.zw);\n                float3 tangentNormal = UnpackNormal(packedNormal);\n                tangentNormal.xy *= _BumpScale;\n                tangentNormal.z = sqrt(1.0 - saturate(dot(tangentNormal.xy, tangentNormal.xy)));\n                // 将切线空间下法线数据转换到世界空间下\n                float3 worldNormal = float3(\n                    dot(i.tangentToWorld0.xyz, tangentNormal),\n                    dot(i.tangentToWorld1.xyz, tangentNormal),\n                    dot(i.tangentToWorld2.xyz, tangentNormal)\n                );\n\n                // 根据以上数据计算光照模型颜色\n                fixed3 albedo = tex2D(_MainTex, i.uv.xy) * _Color.rgb;  //反射率\n                // 漫反射光照计算：这里需要使用已经计算完毕的切线数据和光照方向\n                fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(worldNormal, lightDir));\n                // 计算光照和阴影综合衰减值\n                UNITY_LIGHT_ATTENUATION(atten, i, worldPos);\n                // 最终颜色\n                fixed3 color = UNITY_LIGHTMODEL_AMBIENT.rgb * albedo + lambertColor * atten;\n\n                return fixed4(color.rgb, 1);\n            }\n            ENDCG\n        }\n\n        // 附加渲染通道 Additional Pass\n        Pass\n        {\n            Tags { \"LightMode\" = \"ForwardAdd\" }\n            Blend One One\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n            #pragma multi_compile_fwdadd\n\n            #include \"UnityCG.cginc\"\n            #include \"Lighting.cginc\"\n            #include \"AutoLight.cginc\"\n\n            struct v2f\n            {\n                float4 pos: SV_POSITION;\n                float4 uv: TEXCOORD0;               // 使用float4同时存储主要纹理的uv（xy存储）和法线纹理的uv（zw存储）\n                float4 tangentToWorld0: TEXCOORD1;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第一行\n                float4 tangentToWorld1: TEXCOORD2;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第二行\n                float4 tangentToWorld2: TEXCOORD3;  // 它用来存储变换矩阵和顶点相对于世界坐标的位置的第三行\n                SHADOW_COORDS(4)                    // 阴影坐标变量宏，因为前面有4个TEXCOORD变量，故这里参数填写4\n            };\n\n            float4 _Color;      //漫反射颜色\n            sampler2D _MainTex;     //颜色纹理\n            float4 _MainTex_ST;     //颜色纹理的缩放和平移\n            sampler2D _BumpMap;     //法线纹理\n            float4 _BumpMap_ST;     //法线纹理的缩放和平移\n            float _BumpScale;       //凹凸程度\n\n            v2f vert (appdata_full v)\n            {\n                v2f data;\n            \n                data.pos = UnityObjectToClipPos(v.vertex);  //计算裁剪空间下顶点坐标\n                // 分别计算主纹理和法线纹理的缩放平移\n                data.uv.xy = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n                data.uv.zw = v.texcoord.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;\n                // 得到世界空间下的顶点位置，用于之后在片元中计算视角方向（基于世界空间下）\n                float3 worldPos = mul(unity_ObjectToWorld, v.vertex);\n            \n                // 将模型空间下的法线、切线转换到世界空间下，并计算世界空间下的副切线\n                float3 worldNormal = UnityObjectToWorldNormal(v.normal);\n                float3 worldTangent = UnityObjectToWorldDir(v.tangent);\n                float3 worldBinormal = cross(normalize(worldTangent), normalize(worldNormal)) * v.tangent.w;\n                // 将切线空间到世界空间的转换矩阵，以及世界坐标存储到三个贴图变量内\n                data.tangentToWorld0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n                data.tangentToWorld1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n                data.tangentToWorld2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n                // 阴影坐标转换宏\n                TRANSFER_SHADOW(data)\n\n                return data;\n            }\n\n            fixed4 frag (v2f i) : SV_Target\n            {\n                // 计算世界空间下光的方向和视角方向\n                float3 worldPos = float3(i.tangentToWorld0.w, i.tangentToWorld1.w, i.tangentToWorld2.w);\n            #if defined(_DIRECTIONAL_LIGHT)\n                fixed3 lightDir = normalize(_WorldSpaceLightPos0.xyz);              // 平行光的光源方向\n            #else\n                fixed3 lightDir = normalize(_WorldSpaceLightPos0.xyz - worldPos);   // 非平行光的光源方向\n            #endif\n                fixed3 viewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n                // 通过法线纹理采样并解压缩，再乘以凹凸系数，得到切线空间下法线数据\n                float4 packedNormal = tex2D(_BumpMap, i.uv.zw);\n                float3 tangentNormal = UnpackNormal(packedNormal);\n                tangentNormal.xy *= _BumpScale;\n                tangentNormal.z = sqrt(1.0 - saturate(dot(tangentNormal.xy, tangentNormal.xy)));\n                // 将切线空间下法线数据转换到世界空间下\n                float3 worldNormal = float3(\n                    dot(i.tangentToWorld0.xyz, tangentNormal),\n                    dot(i.tangentToWorld1.xyz, tangentNormal),\n                    dot(i.tangentToWorld2.xyz, tangentNormal)\n                );\n\n                // 根据以上数据计算光照模型颜色\n                fixed3 albedo = tex2D(_MainTex, i.uv.xy) * _Color.rgb;  //反射率\n                // 漫反射光照计算：这里需要使用已经计算完毕的切线数据和光照方向\n                fixed3 lambertColor = _LightColor0.rgb * albedo.rgb * max(0, dot(worldNormal, lightDir));\n                // 计算光照和阴影综合衰减值\n                UNITY_LIGHT_ATTENUATION(atten, i, worldPos);\n                // 最终颜色\n                fixed3 color = lambertColor * atten;\n\n                return fixed4(color.rgb, 1);\n            }\n            ENDCG\n        }\n    }\n\n    Fallback \"Diffuse\"\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}