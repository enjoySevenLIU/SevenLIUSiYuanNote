{
	"ID": "20240616161810-ann78ms",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240616161810-ann78ms",
		"title": "US2S3L10——顶点-片元着色器传递更多参数",
		"type": "doc",
		"updated": "20240616184106"
	},
	"Children": [
		{
			"ID": "20240616164500-qkn7nbt",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240616164500-qkn7nbt",
				"updated": "20240616184106"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "顶点/片元着色器传递更多参数"
				}
			]
		},
		{
			"ID": "20240616164508-x1t233t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616164508-x1t233t",
				"updated": "20240616164536"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果顶点/片元着色器想要传递更多参数，我们需要通过结构体进行封装，用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240616154520-ywczbd8",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "语义"
				},
				{
					"Type": "NodeText",
					"Data": "修饰结构体成员变量来达到目的"
				}
			]
		},
		{
			"ID": "20240616164518-lhoymq2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616164518-lhoymq2",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240616164552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意："
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"parent-style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong u",
					"TextMarkTextContent": "只有顶点/片元着色器的回调函数相关参数和返回值才需要通过语义修饰"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: parent-style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "\n一般的自定义函数是不需要语义的，因为我们自己调用自己的自定义函数是可以明确知道每个参数的作用的"
				}
			]
		},
		{
			"ID": "20240616161810-193damo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240616161810-193damo",
				"updated": "20240616184106"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "顶点着色器获取更多数据信息"
				}
			]
		},
		{
			"ID": "20240616162200-4f30l84",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616162200-4f30l84",
				"updated": "20240616164504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当我们在顶点着色器当中想要获取更多模型相关信息时，可以使用结构体对数据进行封装\n通过"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "对结构体中成员变量加"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-font-background2);"
					},
					"TextMarkType": "strong block-ref text",
					"TextMarkBlockRefID": "20240616154520-ywczbd8",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "语义"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-font-background2);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "的方式来定义想要获取的信息"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20240616162523-v6e7d6u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616162523-v6e7d6u",
				"updated": "20240616164504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用结构体作为参数和返回值类型后，函数的参数和返回值就不需要再使用语义进行修饰了"
				}
			]
		},
		{
			"ID": "20240616184032-qhzjcbh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616184032-qhzjcbh",
				"updated": "20240616184106"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们也可以不用自己声明结构体，而使用Unity定义好的结构体，详见："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240616182535-7f64z2u",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "结构体（UnityCG.cginc中）"
				}
			]
		},
		{
			"ID": "20240616163853-12ay5s1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616163853-12ay5s1",
				"updated": "20240616164504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设顶点着色器需要接收来自应用阶段的更多语义的参数，如：模型空间下的顶点坐标，顶点法线，uv坐标\n这时我们需要声明一个结构体，其中的成员使用对应的语义修饰，然后将其作为顶点着色器的参数"
				}
			]
		},
		{
			"ID": "20240616163847-udjeizg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616163847-udjeizg",
				"style": "line-height: 22px;",
				"updated": "20240616164504"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#pragma vertex myVert\n\n//从应用阶段获取对应语义数据后，传递给顶点着色器的回调函数的结构体\nstruct a2v\n{\n    float4 vertex : POSITION;   //顶点坐标（基于模型空间）\n    float3 normal : NORMAL;     //顶点法线（基于模型空间）\n    float2 uv : TEXCOORD0;      //纹理坐标(uv)\n};\n\nfloat4 myVert(a2v data) : SV_POSITION\n{\n    v2f v2fData;                    //需要传递给片元着色器的数据\n    v2fData.postion = UnityObjectToClipPos(data.vertex);\n    v2fData.normal = data.normal;   //以后学习了相关内容再去处理它，目前暂时直接赋值\n    v2fData.uv = data.uv;           //以后学习了相关内容再去处理它，目前暂时直接赋值\n\n    return UnityObjectToClipPos(data.vertex);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616161853-i2v1gtd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240616161853-i2v1gtd",
				"updated": "20240616164504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "片元着色器获取更多数据信息"
				}
			]
		},
		{
			"ID": "20240616162148-zzi7oow",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616162148-zzi7oow",
				"updated": "20240616164504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当我们在片元着色器当中想要获取更多信息时，采用的方式还是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong u",
					"TextMarkTextContent": "封装结构体的方式"
				}
			]
		},
		{
			"ID": "20240616162221-d6d3r0j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616162221-d6d3r0j",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240616164504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：片元着色器中获取的数据基本上都是由顶点着色器传递过来的\n所以我们封装的结构体还需要作为顶点着色器的返回值类型"
				}
			]
		},
		{
			"ID": "20240616162236-tkr6wj7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616162236-tkr6wj7",
				"updated": "20240616164504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设片元着色器需要接收顶点着色器的输出的裁剪空间的坐标，还需要顶点法线和uv坐标，\n这时我们也需要声明一个结构体，其中的成员使用对应的语义修饰，\n然后将其作为顶点着色器的返回值，片元着色器的参数"
				}
			]
		},
		{
			"ID": "20240616164423-at1qr91",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616164423-at1qr91",
				"style": "line-height: 22px;",
				"updated": "20240616164504"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#pragma vertex myVert\n#pragma fragment myFrag\n\n//从应用阶段获取对应语义数据后，传递给顶点着色器的回调函数的结构体\nstruct a2v\n{\n    float4 vertex : POSITION;   //顶点坐标（基于模型空间）\n    float3 normal : NORMAL;     //顶点法线（基于模型空间）\n    float2 uv : TEXCOORD0;      //纹理坐标(uv)\n};\n\n//从顶点着色器传递给片元着色器的结构体数据，同样这里的成员也需要用语义去进行修饰\nstruct v2f\n{\n    float4 postion : SV_POSITION;   //裁剪空间下的坐标\n    float3 normal : NORMAL;         //顶点法线（基于模型空间）\n    float2 uv : TEXCOORD0;          //纹理坐标(uv)\n};\n\nv2f myVert(a2v data)\n{\n    v2f v2fData;                    //需要传递给片元着色器的数据\n    v2fData.postion = UnityObjectToClipPos(data.vertex);\n    v2fData.normal = data.normal;   //以后学习了相关内容再去处理它，目前暂时直接赋值\n    v2fData.uv = data.uv;           //以后学习了相关内容再去处理它，目前暂时直接赋值\n\n    return v2fData;\n}\n\nfixed4 myFrag(v2f data) : SV_Target\n{\n    //得到顶点着色器传递过来的data，经过处理后输出片元颜色\n    return fixed4(1, 0, 0, 1);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616164441-wkspvxm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616164441-wkspvxm",
				"updated": "20240616164504"
			}
		}
	]
}