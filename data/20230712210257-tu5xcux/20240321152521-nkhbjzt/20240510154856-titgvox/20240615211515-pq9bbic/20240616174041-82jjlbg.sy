{
	"ID": "20240616174041-82jjlbg",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240616174041-82jjlbg",
		"title": "US2S3L12——CG内置函数",
		"type": "doc",
		"updated": "20241221155829"
	},
	"Children": [
		{
			"ID": "20240616174041-ymcbrym",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240616174041-ymcbrym",
				"updated": "20240710212438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CG内置函数"
				}
			]
		},
		{
			"ID": "20240616174136-t2py2yw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616174136-t2py2yw",
				"updated": "20240616174145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Unity Shader中的CG语言提供了各种用于图形编程的函数\n这些函数是CG为我们封装好的逻辑，我们可以使用它们来编写Unity Shader"
				}
			]
		},
		{
			"ID": "20240616180911-bgdixt7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616180911-bgdixt7",
				"updated": "20240616181117"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以通过以下链接来查看更多的相关函数："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://learn.microsoft.com/zh-cn/windows/win32/direct3dhlsl/dx-graphics-hlsl-intrinsic-functions",
					"TextMarkTextContent": "内部函数 - Win32 apps | Microsoft Learn"
				},
				{
					"Type": "NodeText",
					"Data": "\n这是HLSL对应的内置函数，CG和它类似"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "（注意：不是所有函数都在Unity中被支持）"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				}
			]
		},
		{
			"ID": "20240616174151-53rt1fk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240616174151-53rt1fk",
				"updated": "20240710212438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数学函数"
				}
			]
		},
		{
			"ID": "20240616174216-6zk7aib",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240616174216-6zk7aib",
				"updated": "20240710212438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三角函数相关"
				}
			]
		},
		{
			"ID": "20240616174229-rte74ts",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616174229-rte74ts",
				"style": "line-height: 22px;",
				"updated": "20240616174520"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "sincos(float x, out s, out c)     //该函数同时计算x的sin值和cos值通过s和c进行返回（比分别运算快很多）\nsin(x)                            //正弦函数\ncos(x)                            //余弦函数\ntan(x)                            //正切函数\nsinh(x)                           //双曲正弦函数\ncosh(x)                           //双曲余弦函数\ntanh(x)                           //双曲正切函数\nasin(x)                           //反正弦函数，输入参数范围[-1,1]，返回[-π/2,π/2]区间的角度值\nacos(x)                           //反余弦函数，输入参数范围[-1,1]，返回[0,π]区间的角度值\natan(x)                           //反正切函数，输入参数范围[-1,1]，返回[-π/2,π/2]区间的角度值\natan2(y,x)                        //计算y/x的反正切值。和atan功能一样，只是输入参数不同。atan(x)=atan2(x,1)   \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616174316-mpcp7iu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240616174316-mpcp7iu",
				"updated": "20240710212438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "向量、矩阵相关"
				}
			]
		},
		{
			"ID": "20240616174340-ww06n4a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616174340-ww06n4a",
				"style": "line-height: 22px;",
				"updated": "20240616174343"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "cross(A,B)                        //叉乘（注意：传入向量必须是三维向量）\ndot(A,B)                          //点乘（注意：传入向量必须是三维向量）\nmul(M,N)                          //计算两个矩阵相乘\nmul(M,v)                          //计算矩阵和向量相乘\nmul(v,M)                          //计算向量和矩阵相乘\ntranspose(M)                      //M为矩阵，计算M的转置矩阵\ndeterminant(m)                    //计算矩阵的行列式因子\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616174343-yakpcxo",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240616174343-yakpcxo",
				"updated": "20241221155829"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数值相关"
				}
			]
		},
		{
			"ID": "20240616174702-rnj70hh",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20240616174702-rnj70hh",
				"updated": "20241221155829"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "常用"
				}
			]
		},
		{
			"ID": "20240616174415-7zc2mnn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616174415-7zc2mnn",
				"style": "line-height: 22px;",
				"updated": "20240616174723"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "abs(x)                            //返回输入参数的绝对值\nceil(x)                           //对输入参数向上取整\nfloor(x)                          //对输入参数向下取整\nclamp(x,a,b)                      //如果x小于a，则返回a；x大于b，则返回b；否则，返回x（\"夹紧\"函数）\nradians(x)                        //角度转弧度\ndegrees(x)                        //弧度转角度\nmax(a,b)                          //返回最大值\nmin(a,b)                          //返回最小值\nsqrt(x)                           //求x的平方根，x必须大于0\npow(x,y)                          //x的y次方的值\nround(x)                          //对x四舍五入\nrsqrt(x)                          //x的反平方根，x必须大于0\nlerp(a,b,f)                       //差值函数，计算(1-f)*a + b*f 或者 a + f*(b-a)的值\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616174712-b44a18a",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20240616174712-b44a18a",
				"updated": "20240710212438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不常用"
				}
			]
		},
		{
			"ID": "20240616174715-v21cwf0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616174715-v21cwf0",
				"style": "line-height: 22px;",
				"updated": "20240616174937"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "exp(x)                            //计算e的x次方的值，e=2.71828182845904523536\nexp2(x)                           //计算2的x次方的值\nfmod(x,y)                         //返回x/y的余数，y不为0\nfrac(x)                           //返回标量或每个矢量分量的小数部分\nfrexp(x,out exp)                  //将浮点数x分解为尾数和直属，即 x = m * 2的exp次方，返回m，将指数存储exp中\nisfinite(x)                       //判断标量或者向量中的每个数据是否是有限数，如果是返回true，否则返回false\nisinf(x)                          //判断标量或者向量中的每个数据是否是无限，如果是返回true，否则返回false\nisnan(x)                          //判断标量或者向量中的每个数据是否是非数据，如果是返回true，否则返回false\nldexp(x,n)                        //计算x * 2的n次方 的值\nlog(x)                            //计算ln(x)的值，x必须大于0\nlog2(x)                           //计算log2(x次方)的值，x必须大于0\nlog10(x)                          //计算log2(x次方)的值，x必须大于0\nsaturate(x)                       //如果x小于0，返回0；如果x大于1，返回1；否则，返回x\nsign(x)                           //如果x大于0，返回1；如果x小于0，返回-1；否则，返回0\nsmoothstep(min,max,x)             /*值x位于min、max区间内，\n\t\t\t\t\t\t\t\t\t如果x=min，返回0；\n\t\t\t\t\t\t\t\t\t如果x=max，返回1；\n\t\t\t\t\t\t\t\t\t如果在两者之间，返回-2*((x-min)/(max - min))的三次方 + 3* ((x - min)/(max - min))的2次方*/\nstep(a,x)                         //如果x\u003ca,返回0；否则，返回1\nall(x)                            //输入参数均不为0，则返回true;否则返回False。相当于逻辑与\u0026\u0026\nany(x)                            //输入参数只要有其中一个不为0，则返回true。相当于逻辑或||\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616174720-mav36t4",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240616174720-mav36t4",
				"updated": "20240710212438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其他"
				}
			]
		},
		{
			"ID": "20240616175007-kr15rzn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616175007-kr15rzn",
				"style": "line-height: 22px;",
				"updated": "20240616175036"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "lit(NdotL,NdotH,m)                /*N表示法向量；L表示入射光向量；H表示半角向量；m表示高光系数\n                                 \t该函数计算环境光、散射光、镜面光的贡献，返回4维向量；\n                                  \tx位表示环境光贡献；y位表示散射光贡献；z位表示镜面光贡献；w始终为1*/\nnoise(x)                          //噪声函数，返回值始终是0~1之间；对于相同的输入，始终返回相同值，不是真正意义的随机噪声\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616175114-dacx6fu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240616175114-dacx6fu",
				"updated": "20240710212438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "几何函数"
				}
			]
		},
		{
			"ID": "20240616175140-dp35ky0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616175140-dp35ky0",
				"style": "line-height: 22px;",
				"updated": "20240616175156"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "length(v)                     //返回一个向量的模长\nnormalize(v)                  //归一化向量\ndistance(p1,p2)               //计算两点之间的距离\nreflect(I,N)                  //计算反射光方向向量，I为入射光，N为顶点法向量。I是指向顶点的，I和N必须被归一化，必须是3维向量\nrefract(I,N,eta)              //计算折射向量，I为入射光，N为顶点法向量，eta为折射系数。I是指向顶点的，I和N必须被归一化，必须是3维向量\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616175213-dzh67qz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240616175213-dzh67qz",
				"updated": "20240710212438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "纹理函数"
				}
			]
		},
		{
			"ID": "20240616175231-cempl4r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616175231-cempl4r",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240616175235"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：这些纹理采样函数返回值为 "
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"parent-style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "fixed4"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: parent-style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​ 类型的颜色值"
				}
			]
		},
		{
			"ID": "20240616175246-8lvxeqz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240616175246-8lvxeqz",
				"updated": "20240710212438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二维纹理"
				}
			]
		},
		{
			"ID": "20240616175316-u4k5lni",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616175316-u4k5lni",
				"style": "line-height: 22px;",
				"updated": "20240616175319"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "tex2D(sampler2D tex, float2 s)                                    //二维纹理查询\ntex2D(sampler2D tex, float2 s, float2 dsdx, float2 dsdy)          //使用导数值查询二维纹理\ntex2D(sampler2D tex, float3 sz)                                   //二维纹理查询，并进行深度值比较\ntex2D(sampler2D tex, float3 sz, float2 dsdx, float2 dsdy)         //使用导数值查询二维纹理，并进行深度值比较\ntex2Dproj(sampler2D tex, float3 sq)                               //二维投影纹理查询\ntex2Dproj(sampler2D tex, float4 szq)                              //二维投影纹理查询，并进行深度值比较\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616175909-rwnovje",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20240616175909-rwnovje",
				"name": "tex2D()",
				"updated": "20240710212438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用二维纹理查询将贴图映射到纹理上"
				}
			]
		},
		{
			"ID": "20240616175708-1po5i6z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616175708-1po5i6z",
				"updated": "20240616180724"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过2D纹理查询 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "tex2D()"
				},
				{
					"Type": "NodeText",
					"Data": "​ ，可以获取贴图的某个坐标上的颜色，将该颜色在片元着色器回调函数中返回出去，即可让贴图映射到纹理上\n需要在外部关联一张2D贴图并获取到贴图对应的UV坐标，在片元着色器使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "tex2D()"
				},
				{
					"Type": "NodeText",
					"Data": "​并返回出其返回的颜色值："
				}
			]
		},
		{
			"ID": "20240616175751-t4tj54l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616175751-t4tj54l",
				"style": "line-height: 22px;",
				"updated": "20240616180521"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Shader \"TeachShader/Lesson24\"\n{\n    Properties \n    {\n        _My2D(\"My2D\", 2D) = \"\"{}\n    }\n\n    SubShader\n    {\n        Pass\n        {\n            CGPROGRAM\n            #pragma vertex myVert\n            #pragma fragment myFrag\n\n            sampler2D _My2D;\n\n            //从应用阶段获取对应语义数据后，传递给顶点着色器的回调函数的结构体\n            struct a2v\n            {\n                float4 vertex : POSITION;   //顶点坐标（基于模型空间）\n                float2 uv : TEXCOORD0;      //纹理坐标(uv)\n            };\n\n            //从顶点着色器传递给片元着色器的结构体数据，同样这里的成员也需要用语义去进行修饰\n            struct v2f\n            {\n                float4 postion : SV_POSITION;   //裁剪空间下的坐标\n                float2 uv : TEXCOORD0;          //纹理坐标(uv)\n            };\n        \n            v2f myVert(a2v data)\n            {\n                v2f v2fData;                    //需要传递给片元着色器的数据\n                v2fData.postion = UnityObjectToClipPos(data.vertex);\n                v2fData.uv = data.uv;           //以后学习了相关内容再去处理它，目前暂时直接赋值\n\n                return v2fData;\n            }\n\n            fixed4 myFrag(v2f data) : SV_Target\n            {\n                fixed4 color = tex2D(_My2D, data.uv);\n                return color;\n            }\n            ENDCG\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616175900-5ypxlyw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616175900-5ypxlyw",
				"updated": "20240616180639"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "纹理预览效果及使用该纹理的模型效果："
				}
			]
		},
		{
			"ID": "20240616180623-x3cxftv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616180623-x3cxftv",
				"updated": "20240616180651"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 255px;",
						"style": "width: 245px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240616180623-6rjkjno.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 245px;\" parent-style=\"width: 255px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 283px;",
						"style": "width: 273px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240616180651-5plaae6.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 273px;\" parent-style=\"width: 283px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240710212416-fulkjuq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240710212416-fulkjuq",
				"updated": "20240710212438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "纹理相关内容，详见："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20240616192201-r36ifbo",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "US3S2——Shader入门-纹理效果"
				}
			]
		},
		{
			"ID": "20240616175319-dnvqux2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240616175319-dnvqux2",
				"updated": "20241209030336"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "立方体纹理"
				}
			]
		},
		{
			"ID": "20240616175326-i4vjmyu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616175326-i4vjmyu",
				"style": "line-height: 22px;",
				"updated": "20240616175346"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "texCUBE(samplerCUBE tex, float3 s)                                //查询立方体纹理\ntexCUBE(samplerCUBE tex, float3 s, float3 dsdx, float3 dsdy)      //结合导数值查询立方体纹理\ntexCUBEDproj(samplerCUBE tex, float4 sq)                          //查询立方体投影纹理，并进行深度值比较\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20241209030335-qvpk3jl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20241209030335-qvpk3jl",
				"updated": "20241209030336"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于立方体纹理，详见："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20241209025905-i5ffu4e",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "US3S8L1——立方体纹理"
				}
			]
		},
		{
			"ID": "20240616180737-lzwoe3h",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240616180737-lzwoe3h",
				"updated": "20240616180850"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其他纹理"
				}
			]
		},
		{
			"ID": "20240616180751-2bcmlyy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240616180751-2bcmlyy",
				"style": "line-height: 22px;",
				"updated": "20240616180850"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//一维纹理\ntex1D(sampler1D tex, float s)                                     //一维纹理查询\ntex1D(sampler1D tex, float s, float dsdx, float dsdy)             //使用导数值查询一维纹理\ntex1D(sampler1D tex, float2 sz)                                   //一维纹理查询，并进行深度值比较\ntex1D(sampler1D tex, float2 sz, float dsdx, float dsdy)           //使用导数值查询一维纹理，并进行深度值比较\ntex1Dproj(sampler1D tex, float2 sq)                               //一维投影纹理查询\ntex1Dproj(sampler1D tex, float3 szq)                              //一维投影纹理查询，并进行深度值比较\n//二维纹理\ntexRECT(samplerRECT tex, float2 s)                                //矩形纹理查询\ntexRECT(samplerRECT tex, float2 s, float2 dsdx, float2 dsdy)      //使用导数值查询矩形纹理\ntexRECT(samplerRECT tex, float3 sz)                               //矩形纹理查询，并进行深度值比较\ntexRECT(samplerRECT tex, float3 sz, float2 dsdx, float2 dsdy)     //使用导数值查询矩形纹理，并进行深度值比较\ntexRECTproj(samplerRECT tex, float3 sq)                           //矩形投影纹理查询\ntexRECTproj(samplerRECT tex, float3 szq)                          //矩形投影纹理查询，并进行深度值比较\n//三维纹理\ntex3D(sampler3D tex, float3 s)                                    //查询三维纹理\ntex3D(sampler3D tex, float3 s, float3 dsdx, float3 dsdy)          //结合导数值查询三维纹理\ntex3DDproj(sampler3D tex, float4 sq)                              //查询三维投影纹理，并进行深度值比较\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240616180838-6ei97k1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240616180838-6ei97k1"
			}
		}
	]
}