{
	"ID": "20250128143729-v8q9nvq",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20250128143729-v8q9nvq",
		"title": "US5L2——MaterialPropertyDrawer类",
		"type": "doc",
		"updated": "20250128183629"
	},
	"Children": [
		{
			"ID": "20250128143729-giuh2z1",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20250128143729-giuh2z1",
				"name": "MaterialPropertyDrawer",
				"updated": "20250128144046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MaterialPropertyDrawer"
				}
			]
		},
		{
			"ID": "20250128143832-jglm48a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250128143832-jglm48a",
				"updated": "20250128143951"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MaterialPropertyDrawer"
				},
				{
					"Type": "NodeText",
					"Data": "​（材质属性绘制器）用于自定义材质属性在材质面板中的显示和交互方式的\n材质属性通常在 Shader 中通过属性语句块定义。默认情况下，Unity 提供了一些基础的控件（如滑块、颜色选择器等）\n通过继承 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MaterialPropertyDrawer"
				},
				{
					"Type": "NodeText",
					"Data": "​（材质属性绘制器)，你可以为自定义 Shader 属性创建更加灵活和直观的控件"
				}
			]
		},
		{
			"ID": "20250128143952-k4kttii",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20250128143952-k4kttii",
				"updated": "20250128144046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MaterialPropertyDrawer 和 ShaderGUI 的区别"
				}
			]
		},
		{
			"ID": "20250128144010-15osznp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250128144010-15osznp",
				"updated": "20250128144046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ShaderGUI"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是用来自定义整个材质面板的，\n而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MaterialPropertyDrawer"
				},
				{
					"Type": "NodeText",
					"Data": "​（材质属性绘制器）是用来自定义某一个属性的\n相当于可以更加精细的来进行属性自定义显示封装"
				}
			]
		},
		{
			"ID": "20250128144045-xl37607",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20250128144045-xl37607",
				"updated": "20250128160957"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MaterialPropertyDrawer 类的声明"
				}
			]
		},
		{
			"ID": "20250128144114-xnkkio6",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20250128144114-xnkkio6",
				"updated": "20250128160957"
			},
			"Children": [
				{
					"ID": "20250128144117-7ibhbaf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20250128144117-7ibhbaf",
						"updated": "20250128160957"
					},
					"Children": [
						{
							"ID": "20250128144117-770z76v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128144117-770z76v",
								"updated": "20250128160957"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "新建一个 C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 脚本，继承自 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MaterialPropertyDrawer"
								},
								{
									"Type": "NodeText",
									"Data": "​ 类，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "类名最好以"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code strong",
									"TextMarkTextContent": "Drawer"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "结尾"
								}
							]
						}
					]
				},
				{
					"ID": "20250128144117-itoyysd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20250128144117-itoyysd",
						"updated": "20250128150524"
					},
					"Children": [
						{
							"ID": "20250128144117-taohlr0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128144117-taohlr0",
								"updated": "20250128144131"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "重写 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "void OnGUI(Rect position, MaterialProperty prop, string label, MaterialEditor editor)"
								},
								{
									"Type": "NodeText",
									"Data": "​ 方法"
								}
							]
						},
						{
							"ID": "20250128150343-t2vuzcb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128150343-t2vuzcb",
								"updated": "20250128150524"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "也可以重写 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "void OnGUI(Rect position, MaterialProperty prop, GUIContent label, MaterialEditor editor)"
								},
								{
									"Type": "NodeText",
									"Data": "​ 方法\n区别只在于是否想让控件标签的又要显示字符串又要显示图片，详见："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref code",
									"TextMarkBlockRefID": "20230822150550-zadawnu",
									"TextMarkBlockRefSubtype": "d",
									"TextMarkTextContent": "GUIContent"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20250128144117-qe0rxkq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20250128144117-qe0rxkq",
						"updated": "20250128144117"
					},
					"Children": [
						{
							"ID": "20250128144117-p390lf9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128144117-p390lf9",
								"updated": "20250128144134"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在其中实现 UI 自定义布局"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20250128145024-x021ya5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20250128145024-x021ya5",
				"style": "line-height: 22px;",
				"updated": "20250128145033"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEditor;\nusing UnityEngine;\n\npublic class Lesson128 : MaterialPropertyDrawer\n{\n    public override void OnGUI(Rect position, MaterialProperty prop, string label, MaterialEditor editor)\n    {\n        base.OnGUI(position, prop, label, editor);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20250128144105-44hd43j",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20250128144105-44hd43j",
				"updated": "20250128183629"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MaterialPropertyDrawer 类的使用"
				}
			]
		},
		{
			"ID": "20250128145931-o9j2rg4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250128145931-o9j2rg4",
				"updated": "20250128150005"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设我们要实现一个自带最大值和最小值的滑动条，最大值和最小值通过构造函数由外部提供："
				}
			]
		},
		{
			"ID": "20250128150005-6653p8e",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20250128150005-6653p8e",
				"style": "line-height: 22px;",
				"updated": "20250128163624"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEditor;\nusing UnityEngine;\n\npublic class Lesson128_FloatPropertyDrawer : MaterialPropertyDrawer\n{\n    private float _min;\n    private float _max;\n\n    // 使用构造函数初始化自定义的一些变量\n    public Lesson128_FloatPropertyDrawer(float min, float max)\n    {\n        _min = min;\n        _max = max;\n    }\n\n    public override void OnGUI(Rect position, MaterialProperty prop, string label, MaterialEditor editor)\n    {\n        if (prop.type != MaterialProperty.PropType.Float)\n        {\n            EditorGUILayout.LabelField(label, \"请使用float或者数值，否则无法使用此控件\");\n            return;\n        }\n        EditorGUILayout.LabelField($\"{label} ({_min}~{_max})\");\n        prop.floatValue = EditorGUILayout.Slider(prop.floatValue, _min, _max);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20250128144205-pl1v5h1",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20250128144205-pl1v5h1",
				"updated": "20250128163642"
			},
			"Children": [
				{
					"ID": "20250128144207-p3itrx0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20250128144207-p3itrx0",
						"updated": "20250128170053"
					},
					"Children": [
						{
							"ID": "20250128144207-9cfvgiz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128144207-9cfvgiz",
								"updated": "20250128144210"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "配合 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ShaderGUI"
								},
								{
									"Type": "NodeText",
									"Data": "​ 使用"
								}
							]
						},
						{
							"ID": "20250128153209-rodmj9b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128153209-rodmj9b",
								"updated": "20250128153209"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "假设要对下面的 Shader 自定义材质 Inspector 界面，并且要自定义 Shader 的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "float"
								},
								{
									"Type": "NodeText",
									"Data": "​ 类型的属性的绘制方法："
								}
							]
						},
						{
							"ID": "20250128153209-u1qxubn",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20250128153209-u1qxubn",
								"style": "line-height: 22px;",
								"updated": "20250128153209"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Shader \"Unlit/CustomInspectorTest\"\n{\n    Properties\n    {\n        _MainTex(\"Texture\", 2D) = \"white\"{}\n        _TestFloat(\"TestFloat\", Float) = 1\n    }\n    SubShader {/*...*/}\n\n    CustomEditor \"Lesson127_CustomShaderInspector\"\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20250128145559-x0iujbn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128145559-x0iujbn",
								"updated": "20250128150336"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "以上节课实现的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ShaderGUI"
								},
								{
									"Type": "NodeText",
									"Data": "​ 派生类为例，代码详见："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20250128125522-ns3joff",
									"TextMarkBlockRefSubtype": "d",
									"TextMarkTextContent": "US5L1——ShaderGUI类"
								},
								{
									"Type": "NodeText",
									"Data": "\n要使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MaterialPropertyDrawer"
								},
								{
									"Type": "NodeText",
									"Data": "​ 派生类，需要在类内部声明相应变量并实例化，\n然后再 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ShaderGUI"
								},
								{
									"Type": "NodeText",
									"Data": "​ 派生类的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OnGUI"
								},
								{
									"Type": "NodeText",
									"Data": "​ 方法内调用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MaterialPropertyDrawer"
								},
								{
									"Type": "NodeText",
									"Data": "​ 派生类的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OnGUI"
								},
								{
									"Type": "NodeText",
									"Data": "​ 方法\n其中 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MaterialPropertyDrawer"
								},
								{
									"Type": "NodeText",
									"Data": "​ 派生类的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OnGUI"
								},
								{
									"Type": "NodeText",
									"Data": "​ 需要传入绘制位置，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MaterialProperty"
								},
								{
									"Type": "NodeText",
									"Data": "​ 属性，控件名，以及 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MaterialEditor"
								},
								{
									"Type": "NodeText",
									"Data": "​ 参数"
								}
							]
						},
						{
							"ID": "20250128150539-fpbd3j2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128150539-fpbd3j2",
								"updated": "20250128152150"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "关于绘制位置参数，如果是自动布局，可以直接使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code block-ref",
									"TextMarkBlockRefID": "20240325172814-6dsd7ci",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "EditorGUILayout.GetControlRect()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"ID": "20250128145557-qsshwvd",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20250128145557-qsshwvd",
								"style": "line-height: 22px;",
								"updated": "20250128150025"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YyM="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "using UnityEditor;\nusing UnityEngine;\n\npublic class Lesson127_CustomShaderInspector : ShaderGUI\n{\n    private bool isShow;\n    private Lesson128 floatDrawer = new(-2, 2);\n\n    public override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] properties)\n    {\n        if (GUILayout.Button(isShow ? \"隐藏所有属性设置\" : \"显示所有属性设置\"))\n        {\n            isShow = !isShow;\n        }\n\n        // 获取当前材质球\n        Material material = materialEditor.target as Material;\n\n        if (GUILayout.Button(\"重置材质球属性\"))\n        {\n            material.SetTexture(\"_MainTex\", null);\n            material.SetFloat(\"_TestFloat\", 0);\n        }\n\n        if (isShow)\n        {\n            MaterialProperty property = FindProperty(\"_MainTex\", properties);\n            materialEditor.ShaderProperty(property, property.displayName);\n            // 使用自定义的控件去设置TestFloat属性\n            property = FindProperty(\"_TestFloat\", properties);\n            floatDrawer.OnGUI(EditorGUILayout.GetControlRect(), property, property.displayName, materialEditor);\n            // 绘制渲染队列控件\n            material.renderQueue = EditorGUILayout.IntField(\"渲染队列\", material.renderQueue);\n        }\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20250128152438-vus4gbo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128152438-vus4gbo",
								"updated": "20250128152443"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "显示效果："
								}
							]
						},
						{
							"ID": "20250128170053-8cxgzlu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128170053-8cxgzlu",
								"updated": "20250128170053"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Properties": {
										"style": "width: 319px;"
									},
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "image"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/image-20250128170053-crkoesh.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"width: 319px;\"}"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20250128144207-g8f62wl",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20250128144207-g8f62wl",
						"updated": "20250128163642"
					},
					"Children": [
						{
							"ID": "20250128144207-qpjjfzc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128144207-qpjjfzc",
								"updated": "20250128144207"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "独立使用"
								}
							]
						},
						{
							"ID": "20250128163214-1s93bwv",
							"Type": "NodeBlockquote",
							"Properties": {
								"id": "20250128163214-1s93bwv",
								"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);",
								"updated": "20250128163515"
							},
							"Children": [
								{
									"Type": "NodeBlockquoteMarker",
									"Data": "\u003e"
								},
								{
									"ID": "20250128163215-pmzd8qx",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20250128163215-pmzd8qx",
										"updated": "20250128163238"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "注意！这个功能的 BUG 比较多，可能需要多调整以解决问题"
										}
									]
								}
							]
						},
						{
							"ID": "20250128152716-pay07x6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128152716-pay07x6",
								"updated": "20250128153300"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们往往不会让 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MaterialPropertyDrawer"
								},
								{
									"Type": "NodeText",
									"Data": "​ 派生类只配合 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ShaderGUI"
								},
								{
									"Type": "NodeText",
									"Data": "​ 类使用，因为这些逻辑也可以在 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ShaderGUI"
								},
								{
									"Type": "NodeText",
									"Data": "​ 类实现\n​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MaterialPropertyDrawer"
								},
								{
									"Type": "NodeText",
									"Data": "​ 派生类更多的时候会单独使用，我们可以直接在 Shader 内让某个特定属性使用这个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MaterialPropertyDrawer"
								},
								{
									"Type": "NodeText",
									"Data": "​ 派生类"
								}
							]
						},
						{
							"ID": "20250128153227-n2bn3ia",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128153227-n2bn3ia",
								"updated": "20250128153515"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "假设要对下面的 Shader 自定义 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "float"
								},
								{
									"Type": "NodeText",
									"Data": "​ 类型的属性的绘制方法："
								}
							]
						},
						{
							"ID": "20250128153304-izvl1wk",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20250128153304-izvl1wk",
								"style": "line-height: 22px;",
								"updated": "20250128153444"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Shader \"Unlit/CustomInspectorTest\"\n{\n    Properties\n    {\n        _MainTex(\"Texture\", 2D) = \"white\"{}\n        _TestFloat(\"TestFloat\", Float) = 1\n        _TestFloat2(\"TestFloat2\", Float) = 1\n    }\n    SubShader {/*...*/}\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20250128153457-1ywpqq7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128153457-1ywpqq7",
								"updated": "20250128161052"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "假设要让 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "_TestFloat2"
								},
								{
									"Type": "NodeText",
									"Data": "​ 这个属性使用自定义的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MaterialPropertyDrawer"
								},
								{
									"Type": "NodeText",
									"Data": "​ 派生类，\n直接在 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "_TestFloat2"
								},
								{
									"Type": "NodeText",
									"Data": "​ 使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "[MaterialPropertyDrawer派生类名(构造函数参数)]"
								},
								{
									"Type": "NodeText",
									"Data": "​ 即可，它的使用方法类似于 C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 的特性："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20240905135633-odvd8tj",
									"TextMarkBlockRefSubtype": "d",
									"TextMarkTextContent": "CS4L21——特性"
								},
								{
									"Type": "NodeText",
									"Data": "，\n如果 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MaterialPropertyDrawer"
								},
								{
									"Type": "NodeText",
									"Data": "​ 派生类类名由 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Drawer"
								},
								{
									"Type": "NodeText",
									"Data": "​ 后缀，在 Shader 中使用是可以忽略的，就如同 C"
								},
								{
									"Type": "NodeBackslash",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "#"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 特性的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Attribute"
								},
								{
									"Type": "NodeText",
									"Data": "​ 后缀那样\n如果 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MaterialPropertyDrawer"
								},
								{
									"Type": "NodeText",
									"Data": "​ 派生类拥有有参构造参数，则可以通过类名后边填入参数。"
								}
							]
						},
						{
							"ID": "20250128160927-64sd0ym",
							"Type": "NodeBlockquote",
							"Properties": {
								"id": "20250128160927-64sd0ym",
								"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color); --b3-parent-background: var(--b3-card-error-background);",
								"updated": "20250128160928"
							},
							"Children": [
								{
									"Type": "NodeBlockquoteMarker",
									"Data": "\u003e"
								},
								{
									"ID": "20250128160928-5xj530k",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20250128160928-5xj530k",
										"updated": "20250128162012"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "警告！参数内不要填入 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "-"
										},
										{
											"Type": "NodeText",
											"Data": "​ ，即使要传递负数也不能这么填，如果要传递负数，可能需要寻求其他方式解决\nUnity Shader 会在例如 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "[Lesson128_FloatProperty(-3, 3)]"
										},
										{
											"Type": "NodeText",
											"Data": "​ 的语句上报错，报错原因不明！"
										}
									]
								}
							]
						},
						{
							"ID": "20250128153821-lrjvyr7",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20250128153821-lrjvyr7",
								"style": "line-height: 22px;",
								"updated": "20250128170139"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "Yw=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Shader \"Unlit/CustomInspectorTest\"\n{\n    Properties\n    {\n        _MainTex(\"Texture\", 2D) = \"white\"{}\n        _TestFloat(\"TestFloat\", Float) = 1\n        // [Lesson128_FloatProperty(-3.0, 3,0)] _TestFloat2(\"TestFloat2\", Float) = 1\t// 不能使用'-'，否则会报错，原因不明\n        [Lesson128_FloatProperty(0.0, 3.0)] _TestFloat2(\"TestFloat2\", Float) = 1\n    }\n    SubShader {/*...*/}\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20250128162021-s0bah3p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128162021-s0bah3p",
								"updated": "20250128162024"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "显示效果："
								}
							]
						},
						{
							"ID": "20250128163642-54i2594",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20250128163642-54i2594",
								"updated": "20250128163642"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Properties": {
										"style": "width: 396px;"
									},
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "image"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/image-20250128163642-gzhz9bn.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"width: 396px;\"}"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20250128183629-i0hunl7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250128183629-i0hunl7",
				"updated": "20250128183629"
			}
		}
	]
}