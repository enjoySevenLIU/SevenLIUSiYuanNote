{"ID":"20250227151340-wr9h8i1","Spec":"1","Type":"NodeDocument","Properties":{"id":"20250227151340-wr9h8i1","title":"US5L11——表面着色器结构体","type":"doc","updated":"20250227191453"},"Children":[{"ID":"20250227153921-zytvq6e","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20250227153921-zytvq6e","updated":"20250227154147"},"Children":[{"Type":"NodeText","Data":"表面着色器结构体"}]},{"ID":"20250227153939-sc40dy8","Type":"NodeParagraph","Properties":{"id":"20250227153939-sc40dy8","updated":"20250227154003"},"Children":[{"Type":"NodeText","Data":"表面着色器结构体主要分为两类：一是输入结构体、二是输出结构体"}]},{"ID":"20250227153932-85xnehk","Type":"NodeParagraph","Properties":{"id":"20250227153932-85xnehk","updated":"20250227153932"},"Children":[{"Type":"NodeText","Data":"表面着色器函数的参数有三种固定格式："}]},{"ID":"20250227153932-pdrjyg5","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20250227153932-pdrjyg5","updated":"20250227153932"},"Children":[{"ID":"20250227153932-h696ngb","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20250227153932-h696ngb","updated":"20250227153932"},"Children":[{"ID":"20250227153932-xb6np24","Type":"NodeParagraph","Properties":{"id":"20250227153932-xb6np24","updated":"20250227153932"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"void 表面函数名(Input IN, inout SurfaceOutput o)"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20250227153932-te7tcq6","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20250227153932-te7tcq6","updated":"20250227153932"},"Children":[{"ID":"20250227153932-3yd3shn","Type":"NodeParagraph","Properties":{"id":"20250227153932-3yd3shn","updated":"20250227153932"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"void 表面函数名(Input IN, inout SurfaceOutputStandard o)"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20250227153932-msjo1tp","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20250227153932-msjo1tp","updated":"20250227153932"},"Children":[{"ID":"20250227153932-luub5z0","Type":"NodeParagraph","Properties":{"id":"20250227153932-luub5z0","updated":"20250227153932"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"void 表面函数名(Input IN, inout SurfaceOutputStandardSpecular o)"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20250227153934-ru1h1l6","Type":"NodeParagraph","Properties":{"id":"20250227153934-ru1h1l6","updated":"20250227154045"},"Children":[{"Type":"NodeText","Data":"其中 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Input"},{"Type":"NodeText","Data":"​ 结构体，就是输入结构体，而 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SurfaceOutput"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SurfaceOutputStandard"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SurfaceOutputStandardSpecular"},{"Type":"NodeText","Data":"​ 结构体，就是输出结构体"}]},{"ID":"20250227151340-j2qkx4i","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250227151340-j2qkx4i","updated":"20250227154147"},"Children":[{"Type":"NodeText","Data":"表面着色器输入结构体"}]},{"ID":"20250227151607-njivwxt","Type":"NodeParagraph","Properties":{"id":"20250227151607-njivwxt","updated":"20250227154147"},"Children":[{"Type":"NodeText","Data":"表面着色器函数的参数列表中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Input"},{"Type":"NodeText","Data":"​ 结构体，就是输入结构体，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"它是由我们自己声明的"},{"Type":"NodeText","Data":"，是数据的来源，我们需要用到这些数据进行逻辑处理"}]},{"ID":"20250227151626-khnbzhj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250227151626-khnbzhj","updated":"20250227153618"},"Children":[{"Type":"NodeText","Data":"输入结构体中我们能声明哪些成员"}]},{"ID":"20250227151641-o5iq3fs","Type":"NodeParagraph","Properties":{"id":"20250227151641-o5iq3fs","updated":"20250227151652"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Input"},{"Type":"NodeText","Data":"​ 结构体虽然是需要我们自己声明的结构体，但是我们只要在其中按照规定声明成员变量，便能获取到指定的表面属性"}]},{"ID":"20250227151708-vu7v77l","Type":"NodeBlockquote","Properties":{"id":"20250227151708-vu7v77l","style":"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);","updated":"20250227151658"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20250227151655-vsskig5","Type":"NodeParagraph","Properties":{"id":"20250227151655-vsskig5","updated":"20250227151658"},"Children":[{"Type":"NodeText","Data":"注意："}]},{"ID":"20250227151658-n86ymbo","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20250227151658-n86ymbo","updated":"20250227151658"},"Children":[{"ID":"20250227151658-ovxwvpq","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20250227151658-ovxwvpq","updated":"20250227151658"},"Children":[{"ID":"20250227151658-rj3gytv","Type":"NodeParagraph","Properties":{"id":"20250227151658-rj3gytv","updated":"20250227151920"},"Children":[{"Type":"NodeText","Data":"如果我们在可选额外参数中使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"vertex"},{"Type":"NodeText","Data":"​ 自定义了"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20250225130656-7bms6n7","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"顶点修改函数"},{"Type":"NodeText","Data":"，该结构体还会是顶点修改函数的输出结构体"}]}]},{"ID":"20250227151658-n1p3jmk","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20250227151658-n1p3jmk","updated":"20250227151658"},"Children":[{"ID":"20250227151658-pfctc9c","Type":"NodeParagraph","Properties":{"id":"20250227151658-pfctc9c","updated":"20250227151658"},"Children":[{"Type":"NodeText","Data":"除了规范好的参数，我们还可以自己添加自定义参数，比如在自定义顶点修改函数中进行赋值"}]}]},{"ID":"20250227151658-rbtnk5u","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20250227151658-rbtnk5u","updated":"20250227151658"},"Children":[{"ID":"20250227151658-2uojoop","Type":"NodeParagraph","Properties":{"id":"20250227151658-2uojoop","updated":"20250227151944"},"Children":[{"Type":"NodeText","Data":"在顶点 / 片元着色器中，这些参数往往需要我们手动计算，而在表面着色器中你可以理解为 Unity 内部已经帮助我们计算好了，直接拿来用即可"}]}]}]}]},{"ID":"20250227152136-vsu3rr4","Type":"NodeParagraph","Properties":{"id":"20250227152136-vsu3rr4","updated":"20250227153618"},"Children":[{"Type":"NodeText","Data":"输入结构体的成员命名规定如下，只要按照规定声明成员，Unity 会内部自己计算并赋值给对应的成员："}]},{"ID":"20250227152223-ng9is2j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250227152223-ng9is2j","updated":"20250227153542"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"struct Input\n{\n    // UV相关\n    float2 uv_MainTex;          // UV纹理变量名\n    float2 uv_BumpMap;          // UV法线纹理变量名\n    // 如果存在对应的次纹理，还可以以uv2为前缀命名，例如uv2_MainTex，uv2_BumpMap\n    \n    float3 viewDir;             // 视角方向（可以用于处理边缘光照）\n    float4 screenPos;           // 屏幕空间坐标（可以用于处理反射或者屏幕特效等等）\n    float3 worldPos;            // 世界空间下的位置\n    \n    float3 worldRefl;           // 世界空间下的反射方向（在没有修改o.normal的情况下才可以直接使用）\n    // 如果修改了o.normal，则在表面函数中需要调用WorldReflectionVector(IN, o.Normal)来得到正确的世界空间下的反射方向\n\n    float3 worldNormal;         // 世界空间下的法线方向（在没有修改o.normal的情况下才可以直接使用）\n    // 如果修改了o.normal，则在表面函数中需要调用WorldNormalVector(IN, o.Normal)来得到正确的世界空间下的法线方向\n    \n    float4 vertexColor: COLOR;  // 使用COLOR语义定义的float4变量，表示插值后的逐顶点颜色\n};\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250227151406-968rgp7","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250227151406-968rgp7","updated":"20250227190608"},"Children":[{"Type":"NodeText","Data":"表面着色器输出结构体"}]},{"ID":"20250227153845-tx5ijra","Type":"NodeParagraph","Properties":{"id":"20250227153845-tx5ijra","updated":"20250227154113"},"Children":[{"Type":"NodeText","Data":"表面着色器函数的参数列表中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SurfaceOutput"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SurfaceOutputStandard"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SurfaceOutputStandardSpecular"},{"Type":"NodeText","Data":"​ 结构体，就是输出结构体"}]},{"ID":"20250227154159-3syo8ae","Type":"NodeParagraph","Properties":{"id":"20250227154159-3syo8ae","updated":"20250227154239"},"Children":[{"Type":"NodeText","Data":"我们可以利用上文的输入结构体 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Input"},{"Type":"NodeText","Data":"​ 中的数据在表面函数中进行计算后，将计算结果赋值存储在输出结构体中，\n之后 Unity 会利用我们输出的数据作为光照模型函数的输入来进行各种光照相关的计算，\n这三个输出结构体是由 Unity 提前声明好的，不能自己增加和减少，如果我们没有对其中的某些变量赋值，会使用默认值"}]},{"ID":"20250227154248-bmi1fhq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250227154248-bmi1fhq","name":"SurfaceOutput","updated":"20250227190608"},"Children":[{"Type":"NodeText","Data":"SurfaceOutput"}]},{"ID":"20250227154259-g804mxt","Type":"NodeParagraph","Properties":{"id":"20250227154259-g804mxt","updated":"20250227154412"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SurfaceOutput"},{"Type":"NodeText","Data":"​ 结构体（在 Unity 内置文件 "},{"Type":"NodeTextMark","TextMarkType":"code block-ref","TextMarkBlockRefID":"20240616181725-xg1ty8y","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"Lighting.cginc"},{"Type":"NodeText","Data":"​ 中声明），当我们在编译指令中使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Lambert"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BlinnPhong"},{"Type":"NodeText","Data":"​ 光照模型时，就需要使用该结构体"}]},{"ID":"20250227184234-zs8n9xq","Type":"NodeParagraph","Properties":{"id":"20250227184234-zs8n9xq","updated":"20250227184244"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SurfaceOutput"},{"Type":"NodeText","Data":"​ 的定义如下："}]},{"ID":"20250227154404-rdvgerg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250227154404-rdvgerg","updated":"20250227184818"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"// Lighting.cginc\n\nstruct SurfaceOutput \n{\n    fixed3 Albedo;\t\t// 漫反射颜色\n    fixed3 Normal;\t\t// 切线空间法线\n    fixed3 Emission;\t// 自发光：一般Unity会在片元着色器最后输出前，在输出颜色上直接叠加自发光颜色\n    half Specular;\t\t// 镜面反射指数，范围0~1\n    fixed Gloss;\t\t// 镜面反射强度\n    fixed Alpha;\t\t// 透明通道：如果开启了透明度的话，会用该值和颜色进行混合\n};\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250227184413-goeeobu","Type":"NodeParagraph","Properties":{"id":"20250227184413-goeeobu","updated":"20250227184444"},"Children":[{"Type":"NodeText","Data":"其中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Specular"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Gloss"},{"Type":"NodeText","Data":"​ 镜面相关的两个参数，如果使用了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BlinnPhong"},{"Type":"NodeText","Data":"​ 光照模型，会使用该公式计算高光反射强度："}]},{"ID":"20250227184445-lkcyp1i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250227184445-lkcyp1i","updated":"20250227184450"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"float spec = pow(nh, s.Specular * 128) * s.Gloss;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250227184451-uy1tkf3","Type":"NodeParagraph","Properties":{"id":"20250227184451-uy1tkf3","updated":"20250227185401"},"Children":[{"Type":"NodeText","Data":"其中 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"nh"},{"Type":"NodeText","Data":"​ 是法线向量与半角向量点积值，即 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"max(0, dot(wNormal, halfA))"},{"Type":"NodeText","Data":"​ 的值，具体计算方法详见："},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240706214436-vaa7be1","TextMarkBlockRefSubtype":"d","TextMarkTextContent":"US3S1L6——Blinn-Phong式高光反射光照模型"}]},{"ID":"20250227185327-g173jrr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250227185327-g173jrr","name":"SurfaceOutputStandard","updated":"20250227190611"},"Children":[{"Type":"NodeText","Data":"SurfaceOutputStandard"}]},{"ID":"20250227185546-y97z0vr","Type":"NodeParagraph","Properties":{"id":"20250227185546-y97z0vr","updated":"20250227185713"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SurfaceOutputStandard"},{"Type":"NodeText","Data":"​ 结构体（在 Unity 内置文件 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UnityPBSLighting.cginc"},{"Type":"NodeText","Data":"​ 中声明），\n当我们在编译指令中使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Standard"},{"Type":"NodeText","Data":"​ 光照模型时，就需要使用该结构体，我们一般称它为金属工作流输出结构体"}]},{"ID":"20250227185508-nzikv95","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250227185508-nzikv95","updated":"20250227190345"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"// UnityPBSLighting.cginc\n\nstruct SurfaceOutputStandard\n{\n    fixed3 Albedo;      // 漫反射颜色\n    float3 Normal;      // 切线空间法线\n    half3 Emission;\t\t// 自发光：一般Unity会在片元着色器最后输出前，在输出颜色上直接叠加自发光颜色\n    half Metallic;      // 0表示非金属, 1表示金属\n    half Smoothness;    // 感知光滑度，0表示最粗糙，1表示最光滑（不是直接的物理光滑度）\n    half Occlusion;     // 环境光遮蔽（默认为1）\n    fixed Alpha;        // 透明通道：如果开启了透明度的话，会用该值和颜色进行混合\n};\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250227190132-pvl758y","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250227190132-pvl758y","updated":"20250227191038"},"Children":[{"Type":"NodeText","Data":"SurfaceOutputStandardSpecular"}]},{"ID":"20250227190637-nsjpv2l","Type":"NodeParagraph","Properties":{"id":"20250227190637-nsjpv2l","updated":"20250227190735"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SurfaceOutputStandardSpecular"},{"Type":"NodeText","Data":"​ 结构体（在 Unity 内置文件 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UnityPBSLighting.cginc"},{"Type":"NodeText","Data":"​ 中声明）\n当我们在编译指令中使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"StandardSpecular"},{"Type":"NodeText","Data":"​ 光照模型时，就需要使用该结构体，我们一般称它为高光工作流输出结构体"}]},{"ID":"20250227190633-r19wb8v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250227190633-r19wb8v","updated":"20250227190953"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"// UnityPBSLighting.cginc\n\nstruct SurfaceOutputStandardSpecular\n{\n    fixed3 Albedo;      // 漫反射颜色\n    fixed3 Specular;    // 高光反射颜色\n    float3 Normal;      // 切线空间法线\n    half3 Emission;\t\t// 自发光：一般Unity会在片元着色器最后输出前，在输出颜色上直接叠加自发光颜色\n    half Smoothness;    // 感知光滑度，0表示最粗糙，1表示最光滑（不是直接的物理光滑度）\n    half Occlusion;     // 环境光遮蔽（默认为1）\n    fixed Alpha;        // 透明通道：如果开启了透明度的话，会用该值和颜色进行混合\n};\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250227191038-arz4tqw","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250227191038-arz4tqw","updated":"20250227191453"},"Children":[{"Type":"NodeText","Data":"表面着色器的渲染流程"}]},{"ID":"20250227191056-zf906gs","Type":"NodeParagraph","Properties":{"id":"20250227191056-zf906gs","updated":"20250227191232"},"Children":[{"Type":"NodeText","Data":"目前我们已经了解了：编译指令、结构体、自定义函数（编译指令中的表面函数、光照模型、顶点函数、最终颜色修改函数）"}]},{"ID":"20250227191235-aenfexs","Type":"NodeParagraph","Properties":{"id":"20250227191235-aenfexs","updated":"20250227191235"},"Children":[{"Type":"NodeText","Data":"我们只需要了解他们的具体作用便可以知道如何编写表面着色器，下图显式了表面着色器最终的渲染流程是如何把他们串联起来的"}]},{"ID":"20250227191137-b6150ta","Type":"NodeParagraph","Properties":{"id":"20250227191137-b6150ta","updated":"20250227191137"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"style":"width: 669px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20250227191137-uuxnf6t.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 669px;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20250227191351-7ehe821","Type":"NodeParagraph","Properties":{"id":"20250227191351-7ehe821","updated":"20250227191437"},"Children":[{"Type":"NodeText","Data":"其中，黄色的步骤就是我们可以编辑修改的逻辑，灰色的是 Unity 自动生成的计算步骤"}]},{"ID":"20250227191453-dbceova","Type":"NodeParagraph","Properties":{"id":"20250227191453-dbceova","updated":"20250227191453"}}]}