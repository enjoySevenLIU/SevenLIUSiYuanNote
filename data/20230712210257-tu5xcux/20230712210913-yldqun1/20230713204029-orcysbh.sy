{
	"ID": "20230713204029-orcysbh",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230713204029-orcysbh",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230713204029-orcysbh\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230713230852-r6896aj\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230713225153-8fekjsg\u0026quot;,\u0026quot;scrollTop\u0026quot;:344,\u0026quot;focusId\u0026quot;:\u0026quot;20230713210337-zd48rr3\u0026quot;,\u0026quot;focusStart\u0026quot;:188,\u0026quot;focusEnd\u0026quot;:188\u0026#125;",
		"title": "U2L11——场景异步切换",
		"type": "doc",
		"updated": "20240321172759"
	},
	"Children": [
		{
			"ID": "20230713230852-r6896aj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230713230852-r6896aj",
				"updated": "20230713230859"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20230713230859-0gkz4ys",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230713230859-0gkz4ys",
				"updated": "20230713230959"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SceneManager.LoadSceneAsync()\t//异步加载场景的方法，返回一个AsyncOperation，可以用回调函数或者协程来操作\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230713204057-bs6lo6m",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230713204057-bs6lo6m",
				"updated": "20230713204618"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "场景同步切换"
				}
			]
		},
		{
			"ID": "20230713204618-e3lqaf2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230713204618-e3lqaf2",
				"updated": "20230713204730"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在入门的实践已经过同步切换了——\u003e"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230710015753-ive5x18",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "场景同步切换"
				}
			]
		},
		{
			"ID": "20230713204753-5oj4pry",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230713204753-5oj4pry",
				"updated": "20230713204800"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SceneManager.LoadScene(\"Lesson20\");\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230713204047-kze3jri",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230713204047-kze3jri",
				"updated": "20230713204817"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "场景同步切换的缺点"
				}
			]
		},
		{
			"ID": "20230713204817-80qbymd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230713204817-80qbymd",
				"updated": "20230713205039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在切换场景时Unity会删除当前场景上的所有对象，并且去加载下一个场景的相关消息\n如果当前场景对象过多或者下一个场景对象过多，这个过程会非常的耗时，且会让玩家感受到卡顿\n所以异步切换就是来解决该问题的"
				}
			]
		},
		{
			"ID": "20230713204029-ww1i75q",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230713204029-ww1i75q",
				"name": "SceneManager.LoadSceneAsync()",
				"updated": "20230713223620"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "场景异步切换"
				}
			]
		},
		{
			"ID": "20230713210337-zd48rr3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230713210337-zd48rr3",
				"updated": "20240321172713"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "场景异步加载和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230713170940-saon1ju",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "Resources资源异步加载"
				},
				{
					"Type": "NodeText",
					"Data": "，几乎一致，有两种方式"
				}
			]
		},
		{
			"ID": "20240321172713-ay7xi16",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240321172713-ay7xi16",
				"updated": "20240321172713"
			},
			"Children": [
				{
					"ID": "20240321172713-n8bngrs",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240321172713-n8bngrs",
						"updated": "20240321172713"
					},
					"Children": [
						{
							"ID": "20240321172713-djxofzk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240321172713-djxofzk",
								"updated": "20240321172713"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过事件回调函数"
								}
							]
						}
					]
				},
				{
					"ID": "20240321172713-owijw4a",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240321172713-owijw4a",
						"updated": "20240321172713"
					},
					"Children": [
						{
							"ID": "20240321172713-0eeps45",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240321172713-0eeps45",
								"updated": "20240321172716"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "协程异步加载\n"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240321172717-0yqoiwb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240321172717-0yqoiwb",
				"updated": "20240321172723"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它们的优缺点表现和资源异步加载 也是一样的\n不同的点在于，只要执行了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SceneManager.LoadSceneAsync()"
				},
				{
					"Type": "NodeText",
					"Data": "​，就算不使用回调函数或者协程都会在加载完成后自动切换场景\n由于场景异步切换方法返回的是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AsyncOperation"
				},
				{
					"Type": "NodeText",
					"Data": "​，因此它的成员都可以如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230713170940-saon1ju",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "Resources资源异步加载"
				},
				{
					"Type": "NodeText",
					"Data": "一样使用，使用方法参考资源异步加载，这里不再记录"
				}
			]
		},
		{
			"ID": "20230713210404-kyczjyy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230713210404-kyczjyy",
				"updated": "20230713210420"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过事件回调函数异步加载"
				}
			]
		},
		{
			"ID": "20230713223650-dn3uogp",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230713223650-dn3uogp",
				"updated": "20240321172732"
			},
			"Children": [
				{
					"ID": "20240321172732-z5wpnms",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240321172732-z5wpnms",
						"updated": "20240321172732"
					},
					"Children": [
						{
							"ID": "20240321172732-p7o70up",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240321172732-p7o70up",
								"updated": "20240321172732"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "优点：写法简单，逻辑清晰，不需要担心切换场景后能否运行\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240321172733-n3rmpcj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240321172733-n3rmpcj"
					},
					"Children": [
						{
							"ID": "20240321172733-uf21w3t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240321172733-uf21w3t"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缺点：只能加载完场景后做一些事情不能在加载过程中更新逻辑"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230713211112-ws0loto",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230713211112-ws0loto",
				"updated": "20230713223648"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//通过事件回调函数 异步加载\nAsyncOperation ao = SceneManager.LoadSceneAsync(\"Lesson20\");\n//当场景异步加载结束后 就会自动调用该事件函数 我们如果希望在加载结束后 做一些事情 就可以在该函数中写处理逻辑\nao.completed += (a) =\u003e\n{\n\n};\nao.completed += LoadOver;\n\nprivate void LoadOver(AsyncOperation a)\n{\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230713210424-zffuwqq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230713210424-zffuwqq",
				"updated": "20230713224107"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过协程异步加载"
				}
			]
		},
		{
			"ID": "20230713224107-iq8tr3s",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230713224107-iq8tr3s",
				"updated": "20240321172736"
			},
			"Children": [
				{
					"ID": "20240321172736-opwe8li",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240321172736-opwe8li",
						"updated": "20240321172736"
					},
					"Children": [
						{
							"ID": "20240321172736-bh2stzo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240321172736-bh2stzo",
								"updated": "20240321172736"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "优点：可以在加载过程中处理逻辑，比如进度条更新等\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240321172736-g11j5w4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240321172736-g11j5w4"
					},
					"Children": [
						{
							"ID": "20240321172736-efesra7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240321172736-efesra7"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缺点：写法较为麻烦，要通过协程，"
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
									},
									"TextMarkType": "strong text",
									"TextMarkTextContent": "需要注意如果协程依附的对象在切换场景途中被移除，后面的内容将不会被执行"
								},
								{
									"Type": "NodeKramdownSpanIAL",
									"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230713224911-8wv9k1j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230713224911-8wv9k1j",
				"updated": "20230713225142"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要注意的是 加载场景会把当前场景上 没有特别处理的对象 都删除了\n所以 协程中的部分逻辑 可能是执行不了的\n解决思路："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "让处理场景加载的脚本依附的对象 过场景时 不被移除"
				}
			]
		},
		{
			"ID": "20230713225056-qrr8iyd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230713225056-qrr8iyd",
				"updated": "20230713225056"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "协程的好处 是异步加载场景时 可以在加载的同时 做一些别的逻辑"
				}
			]
		},
		{
			"ID": "20230713225056-mxiy42z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230713225056-mxiy42z",
				"updated": "20230713225113"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如我们可以在异步加载过程中去更新进度条"
				}
			]
		},
		{
			"ID": "20240321172749-g2e6usd",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240321172749-g2e6usd",
				"updated": "20240321172759"
			},
			"Children": [
				{
					"ID": "20240321172749-e8drrln",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240321172749-e8drrln"
					},
					"Children": [
						{
							"ID": "20240321172746-rdgwtut",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240321172746-rdgwtut",
								"updated": "20240321172755"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第一种：就是利用 场景异步加载 的进度去更新 但是 不是特别明确 一般也不会直接用"
								}
							]
						}
					]
				},
				{
					"ID": "20240321172749-chobctc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240321172749-chobctc",
						"updated": "20240321172759"
					},
					"Children": [
						{
							"ID": "20230713225056-crh8mrw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230713225056-crh8mrw",
								"updated": "20230713225124"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第二种：\n"
								}
							]
						},
						{
							"ID": "20240321172759-ru9y1gf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240321172759-ru9y1gf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "就是根据你游戏的规则 自己定义 进度条变化的条件\n场景加载结束 更新20%的进度\n接着去加载场景中的其他消息，比如动态加载怪物，动态加载物品，这时 进度条 再更新20%\n动态加载 场景模型\n这时 就认为 加载结束了 进度条顶满，隐藏进度条"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230713224916-3wks4km",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230713224916-3wks4km",
				"updated": "20230713224950"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DontDestroyOnLoad(this.gameObject);\t//这样过场景时，此对象不会被移除\nStartCoroutine(LoadScene(\"Lesson20\"));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230713223915-8dimbq9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230713223915-8dimbq9",
				"updated": "20230713225154"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "IEnumerator LoadScene(string name)\n{\n    //第一步\n    //异步加载场景\n    AsyncOperation ao = SceneManager.LoadSceneAsync(name);\n    //向Unity协程调度器返回异步加载类型的返回对象，\n    //Unity就会等待异步加载结束 才会继续执行 迭代器函数中后面的步骤\n    print(\"异步加载中\");\n    //协程的好处 是异步加载场景时 可以在加载的同时 做一些别的逻辑\n    //比如我们可以在异步加载过程中去更新进度条\n    //第一种 就是利用 场景异步加载 的进度 去更新 但是 不是特别明确 一般也不会直接用\n    while (!ao.isDone)\n    {\n        print(ao.progress);\n        yield return null;\n    }\n    yield return ao;\n    //第二步\n    //注意！如果协程依附的对象在切换场景途中被移除，后面的内容是不会被执行的！\n    print(\"异步记载后\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230713225153-8fekjsg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230713225153-8fekjsg"
			}
		}
	]
}