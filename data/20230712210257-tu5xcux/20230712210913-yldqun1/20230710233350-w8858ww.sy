{
	"ID": "20230710233350-w8858ww",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230710233350-w8858ww",
		"name": "Mathf",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230710233350-w8858ww\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230710233350-8diil73\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230711003003-4h8ebn8\u0026quot;,\u0026quot;scrollTop\u0026quot;:128,\u0026quot;focusId\u0026quot;:\u0026quot;20230710233541-yfge9jy\u0026quot;,\u0026quot;focusStart\u0026quot;:47,\u0026quot;focusEnd\u0026quot;:47\u0026#125;",
		"title": "U2L1——Mathf",
		"type": "doc",
		"updated": "20240321170649"
	},
	"Children": [
		{
			"ID": "20230710233350-8diil73",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230710233350-8diil73",
				"updated": "20230710233512"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Mathf"
				}
			]
		},
		{
			"ID": "20230710233513-rpp8lbz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230710233513-rpp8lbz",
				"updated": "20240321170612"
			},
			"Children": [
				{
					"ID": "20240321170612-kn78xkd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240321170612-kn78xkd",
						"updated": "20240321170612"
					},
					"Children": [
						{
							"ID": "20240321170612-44v0e7h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240321170612-44v0e7h",
								"updated": "20240321170618"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Math"
								},
								{
									"Type": "NodeText",
									"Data": "​ 是 C# 封装好的用于数学计算的工具类 —— 位与 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "System"
								},
								{
									"Type": "NodeText",
									"Data": "​ 命名空间中，即："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "System.Math"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240321170612-727sx3f",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240321170612-727sx3f"
					},
					"Children": [
						{
							"ID": "20240321170612-xwlppul",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240321170612-xwlppul",
								"updated": "20240321170622"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Mathf"
								},
								{
									"Type": "NodeText",
									"Data": "​ 是 Unity 中封装好的用于数学计算的工具结构体 —— 位于 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "UnityEngine"
								},
								{
									"Type": "NodeText",
									"Data": "​ 命名空间中\n"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240321170622-nhslxkg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240321170622-nhslxkg",
				"updated": "20240321170623"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "他们都是提供来用于进行数学计算的"
				}
			]
		},
		{
			"ID": "20230710233541-yfge9jy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230710233541-yfge9jy",
				"updated": "20240321170638"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "区别在于："
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mathf"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Math"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中的相关方法几乎一样\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Math"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是 C# 自带的工具类 提供一些数学相关的计算方法\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mathf"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是 Unity 专门封装的，不仅包含 Math 中的方法 还多了一些适用于游戏开发的方法\n所以在 Unity 开发里，使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mathf"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中的方法用于数学计算即可"
				}
			]
		},
		{
			"ID": "20230710233642-c03pnqh",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230710233642-c03pnqh",
				"updated": "20230710233649"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20230710233650-lmiiwyg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710233650-lmiiwyg",
				"updated": "20230912182126"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Mathf.PI\t\t\t\t\t    //π\nMathf.Abs()\t\t\t\t\t    //绝对值\nMathf.CeilToInt()\t\t\t\t//向上取整，直接加一\nMathf.FloorToInt()\t\t\t\t//向下取整，直接抛弃小数部分\nMathf.Clamp(, , )\t\t\t\t//钳制函数，使输出值限定在一个范围内，小于最小值输出最小值，大于最大值输出最大值，介于两数之间输出比较值\nMathf.Max(...)\t\t\t\t\t//获取最大值\nMathf.Min(...)\t\t\t\t\t//获取最小值\nMathf.Pow(, )\t\t\t\t\t//一个数的n次幂\nMathf.RoundToInt()\t\t\t\t//四舍五入\nMathf.Sqrt()\t\t\t\t\t//返回一个数的平方根\nMathf.IsPowerOfTwo()\t\t\t//判断一个数是否是2的n次方\nMathf.Sign()\t\t\t\t\t//判断正负数\nMathf.Lerp(, , )\t\t\t\t//插值运算函数，参数为开始值，结束值，插值系数（只能是0到1，使用了Clamp(0,t,1)）\n{\t\t\n    return start + (end - start) * t;\t\t//插值运算计算公式\n}\t\t\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710235414-5xknu39",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230710235414-5xknu39",
				"updated": "20230710235445"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Mathf一般计算一次的常用方法"
				}
			]
		},
		{
			"ID": "20230710235447-5znn0aq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230710235447-5znn0aq",
				"name": "Mathf.PI",
				"updated": "20230710235514"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "π"
				}
			]
		},
		{
			"ID": "20230710235516-wvo5x69",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710235516-wvo5x69",
				"updated": "20230710235522"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(Mathf.PI);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710235522-8pq7q3q",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230710235522-8pq7q3q",
				"name": "Mathf.Abs()",
				"updated": "20230711000412"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "绝对值"
				}
			]
		},
		{
			"ID": "20230710235758-zs4puc7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710235758-zs4puc7",
				"updated": "20230710235847"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(Mathf.Abs(-10));\nprint(Mathf.Abs(-20));\nprint(Mathf.Abs(-1.1f));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710235529-g8k5esd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230710235529-g8k5esd",
				"name": "Mathf.CeilToInt()",
				"updated": "20230711000425"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "向上取整"
				}
			]
		},
		{
			"ID": "20230710235950-l8u3xya",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230710235950-l8u3xya",
				"updated": "20230711000014"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只要有小数部分就加一的取整，无论小数部分有多小"
				}
			]
		},
		{
			"ID": "20230710235801-rjx4z4v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710235801-rjx4z4v",
				"updated": "20230710235904"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "float f = 1.3f;\nint i = (int)f;\nprint(i);\nprint(Mathf.CeilToInt(f));  //向上取整，直接加一\nprint(Mathf.CeilToInt(1.000001f));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710235535-otpt4dh",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230710235535-otpt4dh",
				"name": "Mathf.FloorToInt()",
				"updated": "20230711000435"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "向下取整"
				}
			]
		},
		{
			"ID": "20230710235935-mwvxtbe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230710235935-mwvxtbe",
				"updated": "20230711000026"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "直接抛弃小数部分的取整，无论小数部分有多大"
				}
			]
		},
		{
			"ID": "20230710235804-1xn22ib",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710235804-1xn22ib",
				"updated": "20230710235917"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(Mathf.FloorToInt(9.6f));  //向下取整，直接抛弃小数部分\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710235540-a3esuhh",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230710235540-a3esuhh",
				"name": "Mathf.Clamp()",
				"updated": "20230711000446"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "钳制函数"
				}
			]
		},
		{
			"ID": "20230712202936-y3a4z7j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712202936-y3a4z7j",
				"updated": "20230712203007"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "第一个参数是比较值，第二个参数是最小值，第三个参数是最大值"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				}
			]
		},
		{
			"ID": "20230710235926-pkxrjd0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230710235926-pkxrjd0",
				"updated": "20230710235933"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使输出值限定在一个范围内，小于最小值输出最小值，大于最大值输出最大值，介于两数之间输出比较值"
				}
			]
		},
		{
			"ID": "20230710235806-tmzsl6x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710235806-tmzsl6x",
				"updated": "20230710235924"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(Mathf.Clamp(10, 11, 20)); //比最小值还小，输出最小值\nprint(Mathf.Clamp(21, 11, 20)); //比最大值还大，输出最大值\nprint(Mathf.Clamp(15, 11, 20)); //介于两数之间，输出比较值\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710235552-hn0abn2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230710235552-hn0abn2",
				"name": "Mathf.Max()",
				"updated": "20230711000458"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最大值"
				}
			]
		},
		{
			"ID": "20230711000050-xvhb8dn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230711000050-xvhb8dn",
				"updated": "20230711000103"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可传入多个值，取其中最大值"
				}
			]
		},
		{
			"ID": "20230710235809-95uqbwa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710235809-95uqbwa",
				"updated": "20230711000044"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(Mathf.Max(1, 2, 3, 4, 5));\nprint(Mathf.Max(1, 2));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710235557-4bak4na",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230710235557-4bak4na",
				"name": "Mathf.Min()",
				"updated": "20230711000511"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最小值"
				}
			]
		},
		{
			"ID": "20230711000051-7e6g5o1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230711000051-7e6g5o1",
				"updated": "20230711000111"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可传入多个值，取其中最小值"
				}
			]
		},
		{
			"ID": "20230710235811-dj5b7zw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710235811-dj5b7zw",
				"updated": "20230711000117"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(Mathf.Min(1.1f, 2, 3, 4, 5));\nprint(Mathf.Min(1.1f, 2.2f));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710235600-4y1p922",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230710235600-4y1p922",
				"name": "Mathf.Pow()",
				"updated": "20230711000523"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个数的n次方"
				}
			]
		},
		{
			"ID": "20230711000129-4dik6zp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230711000129-4dik6zp",
				"updated": "20240321170649"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Mathf.Pow(a, b)"
				},
				{
					"Type": "NodeText",
					"Data": "​ 相当于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "inline-math",
					"TextMarkInlineMathContent": "a^b"
				},
				{
					"Type": "NodeText"
				}
			]
		},
		{
			"ID": "20230710235824-v8c9yyh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710235824-v8c9yyh",
				"updated": "20230711000127"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"一个数的n次方\" + Mathf.Pow(4, 2));\nprint(\"一个数的n次方\" + Mathf.Pow(2, 3));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710235651-e0wv8pk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230710235651-e0wv8pk",
				"name": "Mathf.RoundToInt()",
				"updated": "20230711000532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "四舍五入"
				}
			]
		},
		{
			"ID": "20230710235826-n7tp79j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710235826-n7tp79j",
				"updated": "20230711000246"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"四舍五入\" + Mathf.RoundToInt(1.3f));\nprint(\"四舍五入\" + Mathf.RoundToInt(1.6f));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710235657-04rvssm",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230710235657-04rvssm",
				"name": "Mathf.Sqrt()",
				"updated": "20230711000539"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个数的平方根"
				}
			]
		},
		{
			"ID": "20230710235815-r3m872c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710235815-r3m872c",
				"updated": "20230711000253"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"返回一个数的平方根\" + Mathf.Sqrt(4));\nprint(\"返回一个数的平方根\" + Mathf.Sqrt(16));\nprint(\"返回一个数的平方根\" + Mathf.Sqrt(64));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710235731-k713ipx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230710235731-k713ipx",
				"name": "Mathf.IsPowerOfTwo()",
				"updated": "20230711000548"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "判断一个数是否是2的n次方"
				}
			]
		},
		{
			"ID": "20230710235818-4z01r0h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710235818-4z01r0h",
				"updated": "20230711000301"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"判断一个数是否是2的n次方\" + Mathf.IsPowerOfTwo(4));\nprint(\"判断一个数是否是2的n次方\" + Mathf.IsPowerOfTwo(8));\nprint(\"判断一个数是否是2的n次方\" + Mathf.IsPowerOfTwo(3));\nprint(\"判断一个数是否是2的n次方\" + Mathf.IsPowerOfTwo(1));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230710235746-2qevwrh",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230710235746-2qevwrh",
				"name": "Mathf.Sign()",
				"updated": "20230711000555"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "判断正负数"
				}
			]
		},
		{
			"ID": "20230711000313-nxwkx7f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230711000313-nxwkx7f",
				"updated": "20230711000357"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "text",
					"TextMarkTextContent": "注意！返回值是-1f和1f，而不是bool值"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				}
			]
		},
		{
			"ID": "20230710235820-8m2rklq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230710235820-8m2rklq",
				"updated": "20230711000308"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "print(\"判断正负数\" + Mathf.Sign(0));\nprint(\"判断正负数\" + Mathf.Sign(10));\nprint(\"判断正负数\" + Mathf.Sign(-10));\nprint(\"判断正负数\" + Mathf.Sign(3));\nprint(\"判断正负数\" + Mathf.Sign(-2));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230711000621-q4tokhk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230711000621-q4tokhk",
				"updated": "20230711000634"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Mathf一般要不停计算的常用方法"
				}
			]
		},
		{
			"ID": "20230711000636-wm2luaa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230711000636-wm2luaa",
				"name": "Mathf.Lerp()",
				"updated": "20230711000706"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "插值运算"
				}
			]
		},
		{
			"ID": "20230711000647-awhqdl7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230711000647-awhqdl7",
				"updated": "20230711001417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "inline-math",
					"TextMarkInlineMathContent": "start"
				},
				{
					"Type": "NodeText",
					"Data": "是开始值，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "inline-math",
					"TextMarkInlineMathContent": "end"
				},
				{
					"Type": "NodeText",
					"Data": "是目标值，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "inline-math",
					"TextMarkInlineMathContent": "t"
				},
				{
					"Type": "NodeText",
					"Data": "是插值系数（这个系数必须是0~1），这Mathf中的每一次插值运算公式如下："
				}
			]
		},
		{
			"ID": "20230711000902-r8ibc8e",
			"Type": "NodeMathBlock",
			"Properties": {
				"id": "20230711000902-r8ibc8e",
				"updated": "20230711211445"
			},
			"Children": [
				{
					"Type": "NodeMathBlockOpenMarker"
				},
				{
					"Type": "NodeMathBlockContent",
					"Data": "result = start + (end - start) * t"
				},
				{
					"Type": "NodeMathBlockCloseMarker"
				}
			]
		},
		{
			"ID": "20230711001157-ar4p6kb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230711001157-ar4p6kb",
				"updated": "20230711001751"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每次计算改变"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "inline-math",
					"TextMarkInlineMathContent": "start"
				},
				{
					"Type": "NodeText",
					"Data": "值或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "inline-math",
					"TextMarkInlineMathContent": "t"
				},
				{
					"Type": "NodeText",
					"Data": "值（改变不同的数，接近效果是不同的），最终会使"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "inline-math",
					"TextMarkInlineMathContent": "start"
				},
				{
					"Type": "NodeText",
					"Data": "值不断趋近于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "inline-math",
					"TextMarkInlineMathContent": "end"
				},
				{
					"Type": "NodeText",
					"Data": "值"
				}
			]
		},
		{
			"ID": "20230711001754-ixtnq8j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230711001754-ixtnq8j",
				"updated": "20230711001814"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Mathf里这个函数的定义如下："
				}
			]
		},
		{
			"ID": "20230711001814-rh70m37",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230711001814-rh70m37",
				"updated": "20230711002140"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static float Lerp(float a, float b, float t)\n{\n    return a + (b - a) * Clamp01(t);\t//Clamp01(t)等效于Mathf.Clamp(0, t, 1)，是使t限定在0到1的函数\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230711001949-0idi47z",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230711001949-0idi47z",
				"updated": "20230711002214"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "插值运算用法1——先快后慢趋近"
				}
			]
		},
		{
			"ID": "20230711002242-jp14uk9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230711002242-jp14uk9",
				"updated": "20230711002748"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "每帧改变start的值"
				},
				{
					"Type": "NodeText",
					"Data": "——变化速度是先快后慢，位置无限接近，但是不会得到end位置"
				}
			]
		},
		{
			"ID": "20230711002249-cstc2om",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230711002249-cstc2om",
				"updated": "20230711002737"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "float start = 0;\nvoid Update()\n{\n    start = Mathf.Lerp(start, 10, Time.deltaTime);\t//start会先快后慢的不断趋近10\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230711002215-cohh6qc",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230711002215-cohh6qc",
				"updated": "20230711002240"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "插值运算用法2——匀速接近"
				}
			]
		},
		{
			"ID": "20230711002251-nk7llf4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230711002251-nk7llf4",
				"updated": "20230711002746"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "每帧改变t的值"
				},
				{
					"Type": "NodeText",
					"Data": "——变化速度是匀速，位置每帧接近，当t \u003e= 1时，得到结果"
				}
			]
		},
		{
			"ID": "20230711002323-tysreu9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230711002323-tysreu9",
				"updated": "20230711002731"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "float start2 = 0;\nfloat time = 0;\nvoid Update()\n{\n    time += Time.deltaTime;\n    result = Mathf.Lerp(start2, 10, time);\t\t//result会匀速变成10\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230711002235-35qtcy9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230711002235-35qtcy9",
				"updated": "20230711003000"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Mathf的三角函数"
				}
			]
		},
		{
			"ID": "20230711003003-4h8ebn8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230711003003-4h8ebn8",
				"updated": "20230711003023"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230711002757-j4bube6",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "Mathf三角函数"
				}
			]
		}
	]
}