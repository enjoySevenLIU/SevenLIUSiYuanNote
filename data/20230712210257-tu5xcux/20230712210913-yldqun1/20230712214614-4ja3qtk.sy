{
	"ID": "20230712214614-4ja3qtk",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230712214614-4ja3qtk",
		"name": "协同程序",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230712214614-4ja3qtk\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230712214614-j7hqjxs\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230820221328-k1j49sv\u0026quot;,\u0026quot;scrollTop\u0026quot;:4800,\u0026quot;focusId\u0026quot;:\u0026quot;20230712230436-3tc5cqw\u0026quot;,\u0026quot;focusStart\u0026quot;:6,\u0026quot;focusEnd\u0026quot;:6\u0026#125;",
		"title": "U2L7——协同程序",
		"type": "doc",
		"updated": "20240423144002"
	},
	"Children": [
		{
			"ID": "20230712214614-j7hqjxs",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230712214614-j7hqjxs",
				"name": "Coroutine",
				"updated": "20230712230601"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "协同程序"
				}
			]
		},
		{
			"ID": "20230712214636-h1793zi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712214636-h1793zi",
				"updated": "20230712214647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "协同程序简称协程，它是“假”的多线程，它不是多线程"
				}
			]
		},
		{
			"ID": "20230712215203-fokqoar",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712215203-fokqoar",
				"updated": "20230712215341"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "它的主要作用：\n将代码分时执行，不卡主线程\n简单理解，是把可以会让主线程卡顿的耗时的逻辑分时分步执行"
				}
			]
		},
		{
			"ID": "20230712215215-09pnytx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712215215-09pnytx",
				"updated": "20230712215341"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主要使用场景：\n异步加载文件，异步下载文件，场景异步加载，批量创建时防止卡顿"
				}
			]
		},
		{
			"ID": "20230712215314-wgsconv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712215314-wgsconv",
				"updated": "20230712215324"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Unity支持多线程，只是新开线程无法访问主线程中Unity相关内容\n一般主要用于进行复杂逻辑运算或者网络消息接收等等\n"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "text",
					"TextMarkTextContent": "注意：Unity中的多线程一定要记得关闭！！！"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				}
			]
		},
		{
			"ID": "20230713001342-8itnipj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230713001342-8itnipj",
				"updated": "20230713001359"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于协程的原理，请看"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230712231445-ihyij81",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "协同程序原理"
				}
			]
		},
		{
			"ID": "20230712215314-wuf6h0m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712215314-wuf6h0m",
				"updated": "20240321172206"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "总结：\n协同程序（协程）不是多线程，它是将线程中逻辑进行分时执行，避免卡顿，继承"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MonoBehaviour"
				},
				{
					"Type": "NodeText",
					"Data": "​的类都可以使用协程\n协程只有当组件单独失活时不受影响 其他情况下协程会停止\n这个属于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MonoBehaviour"
				},
				{
					"Type": "NodeText",
					"Data": "​基类的重要方法，之前的重要方法看这里 -\u003e "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref code",
					"TextMarkBlockRefID": "20230708163049-sje2nzo",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "MonoBehaviour"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230712215454-8u9t4w5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230712215454-8u9t4w5",
				"updated": "20230712215500"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20230712215500-gjyqkpf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230712215500-gjyqkpf",
				"style": "line-height: 22px;",
				"updated": "20240423143918"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "IEnumerator\t\t\t\t                \t//本质实现是迭代器所需的接口，在这里只有返回值为该接口的函数，才能成为协程的函数\nCoroutine\t\t\t\t                \t//协程类，开启协程后可以用这种变量类型装载，以管理线程\nStartCoroutine()\t\t\t            \t//将返回值为迭代器接口的函数或迭代器接口的变量填入，即可开启线程，可以用Coroutine来装载其返回的协程\nStopAllCoroutines()\t\t\t            \t//会停止自己类里所有还在执行的协程（不影响其它类的协程）\nStopCoroutine()\t\t\t\t            \t//用协程变量来指定关闭其中存放的协程\nyield return\t\t\t\t            \t//在迭代器里这个是返回但不结束函数的语法糖，但在协程yield return是协程函数的分界点\nyield return null;\t\t\t            \t//挂起协程，直到下一帧再执行协程后续逻辑\nyield return 数字;\t\t\t            \t//挂起协程，指定几帧后再执行协程后续逻辑\nyield return new WaitForSeconds();\t    \t//挂起协程，等待指定秒后执行协程后续逻辑\nyield return new WaitForFixedUpdate();\t\t//挂起协程，等待下一个固定物理帧更新时执行协程后续逻辑\nyield return new WaitForEndOfFrame();\t\t//挂起协程，等待摄像机和GUI渲染完成后执行协程后续逻辑\nyield break;\t\t\t\t            \t//跳出协程\nyield return new WaitForSecondsRealtime();\t//挂起协程，等待指定秒后执行，不受Time.timeScale影响的\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230712214648-lceyid0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230712214648-lceyid0",
				"updated": "20230712214700"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Unity是否支持多线程"
				}
			]
		},
		{
			"ID": "20230712214702-lo0rib9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712214702-lo0rib9",
				"updated": "20230712214745"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先明确，Unity支持多线程\n但是新开线程无法访问Unity对象相关的内容\n多线程的意义在于，可以将复杂逻辑的计算放进多线程的计算\n"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "注意：Unity中的多线程 要记住关闭（不关闭会导致线程与编辑器共生）"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"
				}
			]
		},
		{
			"ID": "20230712214717-2d4h6pr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230712214717-2d4h6pr",
				"updated": "20230712215114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "t = new Thread(Test);\n//t.Start();\n//注意：Unity中的多线程 要记住关闭（不关闭会导致线程与编辑器共生）\nprivate void Test()\n{\n    while (true)\n    {\n        Thread.Sleep(1000);\n        //相当于模拟 复杂算法 算出了一个结果 然后放入公共容器中\n        System.Random r = new System.Random();\n        queue.Enqueue(new Vector3(r.Next(-10, 10), r.Next(-10, 10), r.Next(-10, 10)));\n        print(\"123\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230712215116-mdwe1sv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230712215116-mdwe1sv",
				"updated": "20230712215143"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "协同程序和线程的区别"
				}
			]
		},
		{
			"ID": "20230712215144-vclxnc7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712215144-vclxnc7",
				"updated": "20230712215150"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "新开一个线程是独立一个管道，和主线程并行执行\n新开一个协程是在原线程之上开启，进行逻辑分时分步执行"
				}
			]
		},
		{
			"ID": "20230712215152-xly4eh4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230712215152-xly4eh4",
				"updated": "20230712230108"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "协程的使用"
				}
			]
		},
		{
			"ID": "20230712230108-nqdgpyl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712230108-nqdgpyl",
				"updated": "20240321172212"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MonoBehaviour"
				},
				{
					"Type": "NodeText",
					"Data": "​的类 都可以开启 协程函数\n"
				}
			]
		},
		{
			"ID": "20230712230243-46ipw3k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230712230243-46ipw3k",
				"name": "协程的IEnumerator",
				"updated": "20230712230622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "声明协程函数"
				}
			]
		},
		{
			"ID": "20230712230146-apjbx9s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712230146-apjbx9s",
				"updated": "20240321172214"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "协程函数有两个关键点"
				}
			]
		},
		{
			"ID": "20240321172214-2afxisg",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240321172214-2afxisg",
				"updated": "20240321172227"
			},
			"Children": [
				{
					"ID": "20240321172214-istjb49",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240321172214-istjb49",
						"updated": "20240321172216"
					},
					"Children": [
						{
							"ID": "20240321172214-m4m3dtn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240321172214-m4m3dtn",
								"updated": "20240321172216"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回值为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IEnumerator"
								},
								{
									"Type": "NodeText",
									"Data": "​类型及其子类"
								}
							]
						}
					]
				},
				{
					"ID": "20240321172214-t66ypm5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240321172214-t66ypm5",
						"updated": "20240321172227"
					},
					"Children": [
						{
							"ID": "20240321172214-bf0mp14",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240321172214-bf0mp14",
								"updated": "20240321172227"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "函数中通过 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "yield return 返回值;"
								},
								{
									"Type": "NodeText",
									"Data": "​ 进行返回"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230712230154-xahumsr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230712230154-xahumsr",
				"updated": "20230712230212"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//关键点一：协同程序（协程）函数 返回值 必须是 IEnumerator或者继承它的类型\nIEnumerator MyCoroutine(int i, string str)\n{\n    print(i);\n    //关键点二：协程函数当中 必须使用yield return 来进行返回\n    yield return new WaitForSeconds(5f);    //相当于等五秒再执行\n    print(str);\n    yield return new WaitForSeconds(1f);    //yield return是函数的分界点，n个yield return就把函数分为n+1个部分\n    print(\"2\");\n    yield return new WaitForSeconds(1f);    //遇到yield return就会将函数挂起，根据yield return后面的内容来决定什么时候再开始执行\n    print(\"3\");\n\n    while (true)\n    {\n        print(5);\n        yield return new WaitForSeconds(5f);    //可以在协程内写死循环，让协程被分为无数步，这样不会卡死程序\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230712230221-geg3psa",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230712230221-geg3psa",
				"name": "StartCoroutine()",
				"updated": "20230712230615"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "开启协程函数"
				}
			]
		},
		{
			"ID": "20230712230245-dr7fsud",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712230245-dr7fsud",
				"updated": "20240321172234"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "text",
					"TextMarkTextContent": "协程函数是不能这样直接执行的！！！这样执行没有任何效果："
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"
					},
					"TextMarkType": "text code",
					"TextMarkTextContent": "MyCoroutine(1, \u0026quot;123\u0026quot;);"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230712230326-jokq8wg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712230326-jokq8wg",
				"updated": "20230712230334"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "常用开启方式："
				}
			]
		},
		{
			"ID": "20230712230257-4t8doq1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230712230257-4t8doq1",
				"updated": "20230712230320"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Coroutine c1 = StartCoroutine(MyCoroutine(1, \"123\"));\nCoroutine c2 = StartCoroutine(MyCoroutine(1, \"123\"));\nCoroutine c3 = StartCoroutine(MyCoroutine(1, \"123\"));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230712230423-rehtbif",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712230423-rehtbif",
				"updated": "20230712230423"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "或者这样开启"
				}
			]
		},
		{
			"ID": "20230712230411-nitbx2i",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230712230411-nitbx2i",
				"style": "line-height: 22px;",
				"updated": "20231121160440"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "IEnumerator ie = MyCoroutine(1, \"123\");\nStartCoroutine(ie);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230712230428-qzmchy7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230712230428-qzmchy7",
				"updated": "20230712230617"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关闭协程"
				}
			]
		},
		{
			"ID": "20230712230436-3tc5cqw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230712230436-3tc5cqw",
				"name": "StopAllCoroutines();",
				"updated": "20230712230523"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关闭所有协程"
				}
			]
		},
		{
			"ID": "20230830133934-34ny721",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230830133934-34ny721",
				"updated": "20230830133934"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "会停止自己类里所有还在执行的协程（不影响其它类的协程）"
				}
			]
		},
		{
			"ID": "20230712230456-bphr743",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230712230456-bphr743",
				"updated": "20230830133940"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "StopAllCoroutines();    //会停止自己类里所有还在执行的协程（不影响其它类的协程）\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230712230448-04r6em3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230712230448-04r6em3",
				"name": "StopCoroutine();",
				"updated": "20230712230533"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关闭指定协程"
				}
			]
		},
		{
			"ID": "20230712230458-nl7o2lx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230712230458-nl7o2lx",
				"updated": "20230712230517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "StopCoroutine(c1);  //用协程变量来指定关闭其中存放的协程\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230712230604-inguwo8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230712230604-inguwo8",
				"name": "yield return",
				"updated": "20230712231015"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "yield return"
				}
			]
		},
		{
			"ID": "20230712231015-pta8ikh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712231015-pta8ikh",
				"updated": "20240321172248"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "yield return"
				},
				{
					"Type": "NodeText",
					"Data": "​是函数的分界点，n个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "yield return"
				},
				{
					"Type": "NodeText",
					"Data": "​就把函数分为n+1个部分\n遇到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "yield return"
				},
				{
					"Type": "NodeText",
					"Data": "​就会将函数挂起，根据"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "yield return"
				},
				{
					"Type": "NodeText",
					"Data": "​后面的内容来决定什么时候再开始执行\n可以在协程内写死循环，让协程被分为无数步，这样不会卡死程序\n"
				}
			]
		},
		{
			"ID": "20230712230638-z2rftwi",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230712230638-z2rftwi",
				"name": "yield return 数字",
				"updated": "20230712230946"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下一帧或者等待指定帧后执行"
				}
			]
		},
		{
			"ID": "20230712230703-aqyscvz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712230703-aqyscvz",
				"updated": "20240321172253"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Update"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LateUpdate"
				},
				{
					"Type": "NodeText",
					"Data": "​之间执行"
				}
			]
		},
		{
			"ID": "20230712230645-slh1m8k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230712230645-slh1m8k",
				"updated": "20230712230653"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "yield return 数字;\nyield return null;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230712230706-omwx9al",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230712230706-omwx9al",
				"name": "yield return new WaitForSeconds()",
				"updated": "20230712230932"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "等待指定秒后执行"
				}
			]
		},
		{
			"ID": "20230712230740-n73bwcl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712230740-n73bwcl",
				"updated": "20240423143608"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Update"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LateUpdate"
				},
				{
					"Type": "NodeText",
					"Data": "​之间执行，它受 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20230708212115-p37ztsr",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "Time.timeScale"
				},
				{
					"Type": "NodeText",
					"Data": "​ 影响"
				}
			]
		},
		{
			"ID": "20230712230734-gandyg6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230712230734-gandyg6",
				"updated": "20230712230747"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "yield return new WaitForSeconds(秒数);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230712230743-agl095r",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230712230743-agl095r",
				"name": "yield return new WaitForFixedUpdate()",
				"updated": "20230712230921"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "等待下一个固定物理帧更新时执行"
				}
			]
		},
		{
			"ID": "20230712230811-i9fdxcj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712230811-i9fdxcj",
				"updated": "20240321172300"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FixedUpdate"
				},
				{
					"Type": "NodeText",
					"Data": "​和碰撞检测相关函数之后执行"
				}
			]
		},
		{
			"ID": "20230712230802-l49iqpo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230712230802-l49iqpo",
				"updated": "20230712230806"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "yield return new WaitForFixedUpdate();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230712230816-74o3qm5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230712230816-74o3qm5",
				"name": "yield return new WaitForEndOfFrame()",
				"updated": "20230712230915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "等待摄像机和GUI渲染完成后执行"
				}
			]
		},
		{
			"ID": "20230712230836-he0839s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712230836-he0839s",
				"updated": "20240321172302"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LateUpdate"
				},
				{
					"Type": "NodeText",
					"Data": "​之后的渲染相关处理完毕后之后"
				}
			]
		},
		{
			"ID": "20230712230821-1u6celn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230712230821-1u6celn",
				"style": "line-height: 22px;",
				"updated": "20240423143400"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "yield return new WaitForEndOfFrame();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230712230638-twwneax",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712230638-twwneax",
				"updated": "20240321172307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一些特殊类型的对象 比如异步加载相关函数返回的对象\n之后讲解 异步加载资源 异步加载场景 网络加载时再讲解\n一般在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Update"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LateUpdate"
				},
				{
					"Type": "NodeText",
					"Data": "​之间执行"
				}
			]
		},
		{
			"ID": "20230712230853-qlebw0h",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230712230853-qlebw0h",
				"name": "yield break",
				"updated": "20230712230906"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "跳出协程"
				}
			]
		},
		{
			"ID": "20230712230638-0pknoge",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230712230638-0pknoge",
				"style": "line-height: 22px;",
				"updated": "20240423143357"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "yield break;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240423143406-o6o2vqy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240423143406-o6o2vqy",
				"name": "yield return new WaitForSecondsRealtime()",
				"updated": "20240423143442"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不受"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Time.timeScale"
				},
				{
					"Type": "NodeText",
					"Data": "​影响的等待指定秒后执行"
				}
			]
		},
		{
			"ID": "20240423143444-4scc39s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240423143444-4scc39s",
				"updated": "20240423143600"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Update"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LateUpdate"
				},
				{
					"Type": "NodeText",
					"Data": "​之间执行，顾名思义，相对于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref code",
					"TextMarkBlockRefID": "20230712230706-omwx9al",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "yield return new WaitForSeconds()"
				},
				{
					"Type": "NodeText",
					"Data": "​，它不受 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code block-ref",
					"TextMarkBlockRefID": "20230708212115-p37ztsr",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "Time.timeScale"
				},
				{
					"Type": "NodeText",
					"Data": "​ 影响"
				}
			]
		},
		{
			"ID": "20240423143622-e6drnce",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240423143622-e6drnce",
				"style": "line-height: 22px;",
				"updated": "20240423143805"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "yield return new WaitForSecondsRealtime();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230712231812-wybvsmb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230712231812-wybvsmb",
				"updated": "20230712231818"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "协程受对象和组件失活销毁的影响"
				}
			]
		},
		{
			"ID": "20230712231817-xcs4l63",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230712231817-xcs4l63",
				"updated": "20240423143935"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "协程开始后："
				}
			]
		},
		{
			"ID": "20240423143935-nrssfhz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240423143935-nrssfhz",
				"updated": "20240423144002"
			},
			"Children": [
				{
					"ID": "20240423143935-kf58bg7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240423143935-kf58bg7",
						"updated": "20240423143958"
					},
					"Children": [
						{
							"ID": "20240423143935-i6908qg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240423143935-i6908qg",
								"updated": "20240423143958"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "组件或者物体销毁，协程无法执行"
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240423143936-g4icxkh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240423143936-g4icxkh",
						"updated": "20240423144002"
					},
					"Children": [
						{
							"ID": "20240423143936-adxpayt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240423143936-adxpayt",
								"updated": "20240423144002"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "物体失活协程不执行，组件失活协程执行"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230820221233-zgn524k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230820221233-zgn524k",
				"updated": "20230820221451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于Unity协程内的泛型方法"
				}
			]
		},
		{
			"ID": "20230820221313-drde0ra",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230820221313-drde0ra",
				"updated": "20240423143642"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的泛型方法，一定要传型参调用，因为这是编译检查的规划。不然编译就通不过。但unity的协程中就有例外呢？\nUnity 的协程是特定于 Unity 引擎的功能，与 C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 泛型方法的编译时类型检查是不同的概念。在其他 C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 应用程序中，需要遵循泛型方法的规则。"
				}
			]
		},
		{
			"ID": "20230820221328-k1j49sv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230820221328-k1j49sv",
				"updated": "20230820221349"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Collections;\nusing UnityEngine;\n\npublic class L14Try : MonoBehaviour\n{\n    private void Start()\n    {\n        StartCoroutine(MyCoroutine());\n    }\n\n    private IEnumerator MyCoroutine()\n    {\n        Debug.Log(\"协程开始\");\n        yield return new WaitForSeconds(2.0f);\n        CallGenericMethod(\"你好协程\");\n        Debug.Log(\"可见，Unity的协程里的泛型方法不需要传入形参\");\n    }\n\n    private void CallGenericMethod\u003cT\u003e(T value)\n    {\n        Debug.Log(\"泛型方法传入的参数是\" + value.ToString());\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}