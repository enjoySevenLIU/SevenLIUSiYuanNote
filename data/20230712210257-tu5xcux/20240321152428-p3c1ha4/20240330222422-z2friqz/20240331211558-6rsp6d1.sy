{
	"ID": "20240331211558-6rsp6d1",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240331211558-6rsp6d1",
		"title": "UM2L8——面向对象",
		"type": "doc",
		"updated": "20240401114428"
	},
	"Children": [
		{
			"ID": "20240331214924-pvzpjzd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240331214924-pvzpjzd",
				"updated": "20240331214931"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本章代码关键字"
				}
			]
		},
		{
			"ID": "20240331214932-scl7kyo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331214932-scl7kyo",
				"style": "line-height: 22px;",
				"updated": "20240401114329"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class\t\t\t\t//类的声明关键字\nfinalize() { }\t\t//在对象成为垃圾后，开始GC时，如果对象存在finalize()方法，会先执行一次该方法，下次GC才会回收该方法\nextends\t\t\t\t//类的继承关键字\ninstanceof\t\t\t//判断某个对象是否是某个类型，类似于C#的is关键字\nfinal\t\t\t\t//此关键字修饰的类不能再被继承，修饰的方法不能再被重写，修饰的变量不能修改（等同于常量）\nsuper\t\t\t\t//调用父类的方法的关键字\nabstract\t\t\t//抽象类和抽象方法关键字\ninterface\t\t\t//接口声明关键字\nimplements\t\t\t//类继承接口关键字\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331212111-tie2uj8",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240331212111-tie2uj8",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "面向对象"
				}
			]
		},
		{
			"ID": "20240331211558-ybw9p8h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240331211558-ybw9p8h",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "面向对象回顾"
				}
			]
		},
		{
			"ID": "20240331211627-gmo5vg8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331211627-gmo5vg8",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "概念：万物皆对象\n用程序来抽象（形容）对象，用面向对象的思想来编程"
				}
			]
		},
		{
			"ID": "20240331211640-7sljwl8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331211640-7sljwl8",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "面向对象三大特性是封装、继承、多态"
				}
			]
		},
		{
			"ID": "20240331211651-qsqdttz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331211651-qsqdttz",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：\n面向对象是一种编程范式，面向对象编程语言的编程思想和使用几乎是一致的\n使用C#中的面向对象编程思想去写Java即可，Java中也是通过class类去封装对象的"
				}
			]
		},
		{
			"ID": "20240331211704-nuqovry",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240331211704-nuqovry",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中类的封装（声明）"
				}
			]
		},
		{
			"ID": "20240401114038-rpvoz5u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240401114038-rpvoz5u",
				"updated": "20240401114038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中类的封装规则和C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "基本一致\n相对C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "来说还少了不少功能，使用起来更加"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "s",
					"TextMarkTextContent": "（残废）"
				},
				{
					"Type": "NodeText",
					"Data": "简单"
				}
			]
		},
		{
			"ID": "20240331212637-zig9wrw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331212637-zig9wrw",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要注意，对于公开的枚举或者类来说，它们必须要单独一个代码文件编写而不能在同一个文件内声明"
				}
			]
		},
		{
			"ID": "20240331211746-xwi8hfc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331211746-xwi8hfc",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中的类声明和使用和C#中基本一模一样，声明格式是："
				}
			]
		},
		{
			"ID": "20240331211919-hyp8tr9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331211919-hyp8tr9",
				"style": "line-height: 22px;",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class 类名\n{\n    特征——成员变量\n    行为——成员方法\n    构造函数\t\t\t//和C#一样，默认会有一个无参的构造函数，如果声明了新的构造函数，原有的默认无参构造函数就会被顶替掉\n    finalize函数\t\t//作用类似于析构函数，但不是析构函数\n    静态函数\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331211800-9zypp3l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331211800-9zypp3l",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意！Java中没有C#中的："
				}
			]
		},
		{
			"ID": "20240331212026-3yxj72k",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240331212026-3yxj72k",
				"style": "background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"ID": "20240331212026-vbxqdjd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240331212026-vbxqdjd",
						"updated": "20240331212026"
					},
					"Children": [
						{
							"ID": "20240331212026-fxvm5q7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331212026-fxvm5q7",
								"updated": "20240331212047"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "成员属性（有类似自动生成的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "get"
								},
								{
									"Type": "NodeText",
									"Data": "​、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "set"
								},
								{
									"Type": "NodeText",
									"Data": "​方法）"
								}
							]
						}
					]
				},
				{
					"ID": "20240331212026-ebh5a7k",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240331212026-ebh5a7k",
						"updated": "20240331212026"
					},
					"Children": [
						{
							"ID": "20240331212026-sp362lx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331212026-sp362lx",
								"updated": "20240331213500"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "析构函数（有类似的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "finalize"
								},
								{
									"Type": "NodeText",
									"Data": "​函数，当对象变成垃圾，然后GC时会调用该函数，但不会回收对象，直到下一次垃圾回收时，才会回收该对象）"
								}
							]
						}
					]
				},
				{
					"ID": "20240331212026-chn43i1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240331212026-chn43i1",
						"updated": "20240331212026"
					},
					"Children": [
						{
							"ID": "20240331212026-0wx69n0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331212026-0wx69n0",
								"updated": "20240331212026"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "索引器"
								}
							]
						}
					]
				},
				{
					"ID": "20240331212026-yn1tmuh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240331212026-yn1tmuh",
						"updated": "20240331212026"
					},
					"Children": [
						{
							"ID": "20240331212026-r2ypoi1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331212026-r2ypoi1",
								"updated": "20240331212026"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "运算符重载"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240331214426-a781q11",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240331214426-a781q11",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java类的声明的示例"
				}
			]
		},
		{
			"ID": "20240331214440-u1dnb57",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331214440-u1dnb57",
				"style": "line-height: 22px;",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Person {\n    //静态成员\n    //静态变量\n    public static int testStatic = 1;\n    //静态方法\n    public static void test() {\n        System.out.println(testStatic);\n    }\n\n    // 成员变量\n    public String name = \"唐老狮\";\n    private String secret = \"秘密\";\n    private int age = 18;\n\n    public Person girlFriend;\n    public Person[] boyFriend;\n\n    public E_Sex sex = E_Sex.Man;\n\n    //构造函数\n    //如果声明了有参构造函数，则默认的无参构造函数将不可用，\n    //如果想要保留，需要自己实现\n    public Person() { }\n\n    public Person(String name) {\n        this.name = name;\n    }\n\n    //finalize函数\n    //当对象变成垃圾，然后GC时会先调用该函数，然后该垃圾将不被回收\n    //直到下一次垃圾回收时，才会回收该对象\n    protected void finalize() {\n        System.out.println(\"回收\");\n    }\n\n    //成员方法\n    public void Speak(String str) {\n        System.out.println(str);\n    }\n\n    public enum E_Sex {\n        Man,\n        Woman,\n    }\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331212057-ewiulgu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240331212057-ewiulgu",
				"name": "finalize()",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "finalize方法"
				}
			]
		},
		{
			"ID": "20240331213729-abbz5qi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331213729-abbz5qi",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "finalize()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法，需要使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "protect"
				},
				{
					"Type": "NodeText",
					"Data": "​修饰符，是在对象成为垃圾后，开始GC时，\n如果对象存在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "finalize()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法，会先执行一次该方法，本次垃圾回收会先不回收此对象\n直到下一次垃圾回收时，才会回收该对象"
				}
			]
		},
		{
			"ID": "20240331213917-6fzslj9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331213917-6fzslj9",
				"style": "line-height: 22px;",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Person {\n    //finalize函数\n    //当对象变成垃圾，然后GC时会先调用该函数，然后该垃圾将不被回收\n    //直到下一次垃圾回收时，才会回收该对象\n    protected void finalize() {\n        System.out.println(\"回收\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331214049-0n6xzte",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331214049-0n6xzte",
				"style": "line-height: 22px;",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Lesson9 {\n    public static void main(String[] args) {\n        Person p = new Person();\n        p = null;\n        System.gc();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331214100-dkvvp6f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331214100-dkvvp6f",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240331214104-g7pfsjz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331214104-g7pfsjz",
				"style": "line-height: 22px;",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "回收\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331214057-w67xjbk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240331214057-w67xjbk",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "IDEA的自动生成类似属性的方法"
				}
			]
		},
		{
			"ID": "20240331214520-kvo74ib",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331214520-kvo74ib",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "IDEA提供了对成员变量自动生成类似于C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "属性的方法的选项，\n对要生成属性的变量按下右键，点击生成，选择"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "getter"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "setter"
				},
				{
					"Type": "NodeText",
					"Data": "​即可"
				}
			]
		},
		{
			"ID": "20240331214704-hz9vc4r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331214704-hz9vc4r",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 491px;",
						"style": "width: 481px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240331214704-wi47y24.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 481px;\" parent-style=\"width: 491px;\"}"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 465px;",
						"style": "width: 455px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240331214752-m9wr2au.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 455px;\" parent-style=\"width: 465px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240331214755-8ntl2w5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331214755-8ntl2w5",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后IDEA就会为我们自动生成方法"
				}
			]
		},
		{
			"ID": "20240331214813-nf0vk3a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331214813-nf0vk3a",
				"style": "line-height: 22px;",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public String getSecret() {\n    return secret;\n}\npublic void setSecret(String secret) {\n    this.secret = secret;\n}\nprivate String secret = \"秘密\";\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331214842-armovdo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331214842-armovdo",
				"updated": "20240331212632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "值得一提的是，它本质就是方法，和C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "的属性有本质的区别"
				}
			]
		},
		{
			"ID": "20240331214954-bebo2hf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240331214954-bebo2hf",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中类的继承"
				}
			]
		},
		{
			"ID": "20240331221544-xm1rr6g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331221544-xm1rr6g",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中继承使用和C#基本一致，只是有一些关键字和小规则不同而已"
				}
			]
		},
		{
			"ID": "20240331215122-apaqpg7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331215122-apaqpg7",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java的继承和C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "的相同点如下："
				}
			]
		},
		{
			"ID": "20240331215157-204rwkz",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240331215157-204rwkz",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"ID": "20240331215207-3ryi3xu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240331215207-3ryi3xu",
						"updated": "20240331215207"
					},
					"Children": [
						{
							"ID": "20240331215207-woe0ot0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331215207-woe0ot0",
								"updated": "20240331215207"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类与类之间只能单继承"
								}
							]
						}
					]
				},
				{
					"ID": "20240331215207-rptgmm7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240331215207-rptgmm7",
						"updated": "20240331215211"
					},
					"Children": [
						{
							"ID": "20240331215207-zlk5tu6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331215207-zlk5tu6",
								"updated": "20240331215211"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "万物之父都是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Object"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240331215207-rkic2fh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240331215207-rkic2fh",
						"updated": "20240331215207"
					},
					"Children": [
						{
							"ID": "20240331215207-i2euzcv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331215207-i2euzcv",
								"updated": "20240331215207"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "遵循里氏替换原则(可以父类装子类对象)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240331215220-6fsys3k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331215220-6fsys3k",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中继承的写法如下，需要加上"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "extends"
				},
				{
					"Type": "NodeText",
					"Data": "​，而不是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ":"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240331215534-8yb4zgp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331215534-8yb4zgp",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Father { }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331215522-b7kv9ei",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331215522-b7kv9ei",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Son extends Father { }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331215228-w35ppig",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240331215228-w35ppig",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "万物之父Object中的关键方法"
				}
			]
		},
		{
			"ID": "20240331215641-i2mid58",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240331215641-i2mid58",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"ID": "20240331215712-lx23kf1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240331215712-lx23kf1",
						"name": "getClass()",
						"updated": "20240331220037"
					},
					"Children": [
						{
							"ID": "20240331215712-3lp8p4i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331215712-3lp8p4i",
								"updated": "20240331215731"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "getClass()"
								},
								{
									"Type": "NodeText",
									"Data": "​：类似C#中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "getType()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"ID": "20240331215938-yo5dsw6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331215938-yo5dsw6",
								"updated": "20240331220006"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "下面的逻辑就可以输出对象的类名"
								}
							]
						},
						{
							"ID": "20240331215934-j583mnm",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240331215934-j583mnm",
								"style": "line-height: 22px;",
								"updated": "20240331220037"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class Lesson10 {\n    public static void main(String[] args) {\n        Father f = new Father();\n        System.out.println(f.getClass());\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240331220008-099ozvs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331220008-099ozvs",
								"updated": "20240331220010"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240331220010-i7274mc",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240331220010-i7274mc",
								"style": "line-height: 22px;",
								"updated": "20240331220016"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "class Father\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240331215712-l7abesz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240331215712-l7abesz",
						"updated": "20240331215712"
					},
					"Children": [
						{
							"ID": "20240331215712-tkbs28k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331215712-tkbs28k",
								"updated": "20240331215726"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "toString()"
								},
								{
									"Type": "NodeText",
									"Data": "​：将对象以字符串形式返回"
								}
							]
						},
						{
							"ID": "20240331220105-0kb4ryd",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240331220105-0kb4ryd",
								"style": "line-height: 22px;",
								"updated": "20240331220152"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Father f = new Father();\nSystem.out.println(f.toString());\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20240331220154-sy8u5ja",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331220154-sy8u5ja",
								"updated": "20240331220159"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输出："
								}
							]
						},
						{
							"ID": "20240331220159-rhtcmud",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240331220159-rhtcmud",
								"style": "line-height: 22px;",
								"updated": "20240331220206"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Father@4eec7777\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240331215712-56t1rsw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240331215712-56t1rsw",
						"updated": "20240331220429"
					},
					"Children": [
						{
							"ID": "20240331215712-r4bdb8u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331215712-r4bdb8u",
								"updated": "20240331220429"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "equals()"
								},
								{
									"Type": "NodeText",
									"Data": "​：比较两个对象的内部内容，而"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "=="
								},
								{
									"Type": "NodeText",
									"Data": "​是判断引用地址是否相等（或者说判断变量是否指向一个对象）"
								}
							]
						},
						{
							"ID": "20240331220320-paha578",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331220320-paha578",
								"updated": "20240331220344"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们可以自己重写"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "equals()"
								},
								{
									"Type": "NodeText",
									"Data": "​方法来自定义两个对象的比较方法"
								}
							]
						},
						{
							"ID": "20240331220354-kuwoe2v",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240331220354-kuwoe2v",
								"style": "line-height: 22px;",
								"updated": "20240331220358"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class Father {\n    @Override\n    public boolean equals(Object obj) {\n        return super.equals(obj);\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240331215738-b114nyi",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240331215738-b114nyi",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "父子类的上下转换（里氏替换原则）"
				}
			]
		},
		{
			"ID": "20240331220504-g2atd9f",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240331220504-g2atd9f",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"ID": "20240331220635-8weaanj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240331220635-8weaanj",
						"updated": "20240331220635"
					},
					"Children": [
						{
							"ID": "20240331220635-naqayew",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331220635-naqayew",
								"updated": "20240331220645"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "子类自动向上转换"
								}
							]
						},
						{
							"ID": "20240331220704-qdylw66",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240331220704-qdylw66",
								"style": "line-height: 22px;",
								"updated": "20240331220709"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Father f2 = new Son();\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20240331220645-tes4btf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240331220645-tes4btf",
						"updated": "20240331220718"
					},
					"Children": [
						{
							"ID": "20240331220645-iihpc8s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331220645-iihpc8s",
								"updated": "20240331220711"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "父类强制向下转换（括号强转）"
								}
							]
						},
						{
							"ID": "20240331220711-lwmg838",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20240331220711-lwmg838",
								"style": "line-height: 22px;",
								"updated": "20240331220718"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "Son s = (Son) f2;\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240331220728-1zpbdi6",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240331220728-1zpbdi6",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "instanceof"
				}
			]
		},
		{
			"ID": "20240331220739-p2qcc6p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331220739-p2qcc6p",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用于判断对象类型，类似C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "is"
				},
				{
					"Type": "NodeText",
					"Data": "​关键字"
				}
			]
		},
		{
			"ID": "20240331220755-1p252az",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331220755-1p252az",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "if (f2 instanceof Father) {\n    System.out.println(\"是Father类\");\n}\n\nif (f2 instanceof Son) {\n    Son s2 = (Son) f2;\n    System.out.println(\"是Son类\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331220918-lzpiwbu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331220918-lzpiwbu",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240331220922-hwdq91v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331220922-hwdq91v",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "是Father类\n是Son类"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331220959-hqqpmk5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240331220959-hqqpmk5",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "final"
				}
			]
		},
		{
			"ID": "20240331221022-q9k77bl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331221022-q9k77bl",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类似C#中的密封关键字"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "sealed"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240331221118-tukbk9f",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240331221118-tukbk9f",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"ID": "20240331221118-b2p3k1s",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240331221118-b2p3k1s",
						"updated": "20240331221135"
					},
					"Children": [
						{
							"ID": "20240331221118-zo5iw8z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331221118-zo5iw8z",
								"updated": "20240331221135"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "让变量无法被修改（变成常量）"
								}
							]
						}
					]
				},
				{
					"ID": "20240331221119-jms2nh6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240331221119-jms2nh6"
					},
					"Children": [
						{
							"ID": "20240331221119-4ywgs9c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331221119-4ywgs9c"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "让函数无法被重写\n"
								}
							]
						}
					]
				},
				{
					"ID": "20240331221123-cwvp347",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240331221123-cwvp347"
					},
					"Children": [
						{
							"ID": "20240331221123-pso7zgo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331221123-pso7zgo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "让类无法被继承"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240331221137-f0w1jxq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20240331221137-f0w1jxq",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中类的多态"
				}
			]
		},
		{
			"ID": "20240331222759-lajll4a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331222759-lajll4a",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中多态相关知识点和C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "中基本一致，相对C"
				},
				{
					"Type": "NodeBackslash",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeText",
							"Data": "#"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "更简单"
				}
			]
		},
		{
			"ID": "20240331222832-knq257w",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240331222832-knq257w",
				"updated": "20240401114138"
			},
			"Children": [
				{
					"ID": "20240331222832-h6bxyvl",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240331222832-h6bxyvl",
						"updated": "20240401114138"
					},
					"Children": [
						{
							"ID": "20240331222832-adftw6j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331222832-adftw6j",
								"updated": "20240401114138"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "没有vo关键字，有类似b的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "super"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240331222832-uklqxn9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240331222832-uklqxn9",
						"updated": "20240401114135"
					},
					"Children": [
						{
							"ID": "20240331222832-z9poy3e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331222832-z9poy3e",
								"updated": "20240401114135"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "继承接口用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "implements"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240331222832-5emau5v",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240331222832-5emau5v",
						"updated": "20240331222832"
					},
					"Children": [
						{
							"ID": "20240331222832-cud5swp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331222832-cud5swp",
								"updated": "20240331222832"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "接口中可以声明变量，但是是静态常量"
								}
							]
						}
					]
				},
				{
					"ID": "20240331222832-jrtdz66",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240331222832-jrtdz66",
						"updated": "20240331222832"
					},
					"Children": [
						{
							"ID": "20240331222832-w6armx0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331222832-w6armx0",
								"updated": "20240331222832"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不存在显示实现接口（多个接口存在同名方法，实现一次即可）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240331222913-vv2wugi",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240331222913-vv2wugi",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中的vob"
				}
			]
		},
		{
			"ID": "20240331222928-69nec0k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331222928-69nec0k",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中没有vo关键字，也就是virtual(虚函数)和override(重写)\n我们如果要重写基类的方法，直接在子类中实现同名方法即可，它会直接覆盖父类方法！！\nJava中有类似 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "base"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的关键字 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "super"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240331223326-6blnf72",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331223326-6blnf72",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：重写是Java会自动补全一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@Override"
				},
				{
					"Type": "NodeText",
					"Data": "​，它类似于注释，可有可无，主要是用来帮助我们阅读代码"
				}
			]
		},
		{
			"ID": "20240331223356-6c2i7tq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331223356-6c2i7tq",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "java重写的写法如下："
				}
			]
		},
		{
			"ID": "20240331223341-f70to9x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331223341-f70to9x",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Father {\n    public void Eat() {\n        System.out.println(\"父亲吃东西\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331223440-a95zxam",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331223440-a95zxam",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Son extends Father {\n    @Override\n    public void Eat() {\n        super.Eat();\n        System.out.println(\"儿子吃东西\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331223805-b9hzrqx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331223805-b9hzrqx",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Lesson11 {\n    public static void main(String[] args) {\n        Father s = new Son();\n        s.Eat();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331223810-tw7ep50",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331223810-tw7ep50",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240331223812-maw5lv0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331223812-maw5lv0",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "父亲吃东西\n儿子吃东西"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331224123-gcci930",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240331224123-gcci930",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抽象类和抽象方法"
				}
			]
		},
		{
			"ID": "20240331224149-jeh2b7y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331224149-jeh2b7y",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中的抽象类和抽象方法使用和C#中基本一致\n关键字："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "abstract"
				},
				{
					"Type": "NodeText",
					"Data": "​\n抽象类不能被实例化，抽象方法在抽象类中声明，必须被实现"
				}
			]
		},
		{
			"ID": "20240331224814-9r7bvvk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331224814-9r7bvvk",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public abstract class Animal {\n    public int age;\n    public abstract void Eat();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331224826-pu4ljcf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20240331224826-pu4ljcf",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接口"
				}
			]
		},
		{
			"ID": "20240331224829-zu3sw5p",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20240331224829-zu3sw5p",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"ID": "20240331224848-onia3we",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20240331224848-onia3we",
						"updated": "20240331224851"
					},
					"Children": [
						{
							"ID": "20240331224848-bhuesrl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331224848-bhuesrl",
								"updated": "20240331224851"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java中接口中方法默认(只能)为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "public"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240331224848-l61cg54",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20240331224848-l61cg54",
						"updated": "20240331224856"
					},
					"Children": [
						{
							"ID": "20240331224848-lcessjx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331224848-lcessjx",
								"updated": "20240331224856"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java中接口可以声明字段，但是默认(只能)是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "static"
								},
								{
									"Type": "NodeText",
									"Data": "​和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "final"
								},
								{
									"Type": "NodeText",
									"Data": "​的，也就是静态常量"
								}
							]
						}
					]
				},
				{
					"ID": "20240331224848-cl7djhe",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20240331224848-cl7djhe",
						"updated": "20240331224900"
					},
					"Children": [
						{
							"ID": "20240331224848-ylrcyzz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331224848-ylrcyzz",
								"updated": "20240331224900"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java中继承接口的关键字是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "implements"
								},
								{
									"Type": "NodeText",
									"Data": "​，一般写在继承类之后"
								}
							]
						}
					]
				},
				{
					"ID": "20240331224848-yjh8p5f",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20240331224848-yjh8p5f",
						"updated": "20240331224848"
					},
					"Children": [
						{
							"ID": "20240331224848-8fz1rea",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331224848-8fz1rea",
								"updated": "20240331224848"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "继承多个接口用逗号分隔"
								}
							]
						}
					]
				},
				{
					"ID": "20240331224848-o148oed",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20240331224848-o148oed",
						"updated": "20240331225205"
					},
					"Children": [
						{
							"ID": "20240331224848-ciedgp9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240331224848-ciedgp9",
								"updated": "20240331225205"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java中不存在显式实现接口，重写不同接口的同名方式时，\"两个接口共享\""
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240331225429-srr4dav",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331225429-srr4dav",
				"style": "line-height: 22px;",
				"updated": "20240401114428"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface IFly {\n    int speed = 10;\t\t\t//默认只能是static final的\n    void Fly();\t\t\t\t//默认是public的\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331225647-ialgodq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331225647-ialgodq",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface IBird {\n    void Fly();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331225444-wjvm7u6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331225444-wjvm7u6",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Son extends Father implements IFly, IBird {\n    @Override\n    public void Eat() {\n        super.Eat();\n        System.out.println(\"儿子吃东西\");\n    }\n\n    @Override\n    public void Fly() {\n        System.out.println(\"飞行\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331225707-rkzkf0m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331225707-rkzkf0m",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Lesson11 {\n    public static void main(String[] args) {\n        System.out.println(IFly.speed);\n        IFly s2 = new Son();\n        s2.Fly();\n        IBird s3 = (IBird) s2;\n        s3.Fly();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331225823-tmjsrz3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331225823-tmjsrz3",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出："
				}
			]
		},
		{
			"ID": "20240331225827-vc1x4ji",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240331225827-vc1x4ji",
				"style": "line-height: 22px;",
				"updated": "20240331212114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "10\n飞行\n飞行\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240331225821-nx97if7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240331225821-nx97if7",
				"updated": "20240331212114"
			}
		}
	]
}