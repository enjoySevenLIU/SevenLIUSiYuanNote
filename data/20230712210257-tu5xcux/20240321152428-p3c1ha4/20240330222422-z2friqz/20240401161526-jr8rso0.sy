{"ID":"20240401161526-jr8rso0","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240401161526-jr8rso0","title":"UM2L13——Java泛型","type":"doc","updated":"20250303185230"},"Children":[{"ID":"20240401161526-ow2o7dt","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401161526-ow2o7dt","updated":"20250303185230"},"Children":[{"Type":"NodeText","Data":"Java泛型"}]},{"ID":"20240401161546-59satr5","Type":"NodeParagraph","Properties":{"id":"20240401161546-59satr5","updated":"20250303185146"},"Children":[{"Type":"NodeText","Data":"Java 中泛型使用的基本规则和 C# 中一致"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"（注意！泛型在 java 底层的实现和 C# 完全不同）"},{"Type":"NodeText","Data":"，\n泛型可以代表一切类型，主要使用上就是泛型类和泛型方法，主要区别如下："}]},{"ID":"20240401161710-v03rvzw","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240401161710-v03rvzw","updated":"20250303185151"},"Children":[{"ID":"20240401161714-3y797gf","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240401161714-3y797gf","updated":"20240401161714"},"Children":[{"ID":"20240401161714-j6k4wmn","Type":"NodeParagraph","Properties":{"id":"20240401161714-j6k4wmn","updated":"20240401161714"},"Children":[{"Type":"NodeText","Data":"泛型方法写法和使用不同"}]}]},{"ID":"20240401161714-80q0fpy","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240401161714-80q0fpy","updated":"20240401161714"},"Children":[{"ID":"20240401161714-hgt719p","Type":"NodeParagraph","Properties":{"id":"20240401161714-hgt719p","updated":"20240401161714"},"Children":[{"Type":"NodeText","Data":"泛型约束不同"}]}]},{"ID":"20240401161714-cppexun","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240401161714-cppexun","updated":"20240401161717"},"Children":[{"ID":"20240401161714-fnsul83","Type":"NodeParagraph","Properties":{"id":"20240401161714-fnsul83","updated":"20240401161717"},"Children":[{"Type":"NodeText","Data":"泛型类型通配符 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"?"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240401161714-t69qfpy","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240401161714-t69qfpy","updated":"20250303185151"},"Children":[{"ID":"20240401161714-j26r2z0","Type":"NodeParagraph","Properties":{"id":"20240401161714-j26r2z0","updated":"20250303185151"},"Children":[{"Type":"NodeText","Data":"一些基础类型必须写他们的包装类名，不能写变量类型（例如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"int"},{"Type":"NodeText","Data":"​ 就需要写 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Integer"},{"Type":"NodeText","Data":"​）"}]}]}]},{"ID":"20240401161629-jw25epc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401161629-jw25epc","updated":"20250303185230"},"Children":[{"Type":"NodeText","Data":"泛型基本用法"}]},{"ID":"20240401161639-w18krle","Type":"NodeParagraph","Properties":{"id":"20240401161639-w18krle","updated":"20240401162254"},"Children":[{"Type":"NodeText","Data":"泛型类的声明和使用如下："}]},{"ID":"20240401162128-kyyrna6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401162128-kyyrna6","style":"line-height: 22px;","updated":"20240401162527"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class TestT\u003cT\u003e {\n    public T testValue;\n\n    public T testFun(T t) {\n        return t;\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401162214-8s4v6l1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401162214-8s4v6l1","style":"line-height: 22px;","updated":"20240401162532"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class Lesson16 {\n    public static void main(String[] args) {\n        TestT\u003cFloat\u003e obj = new TestT\u003c\u003e();\n        obj.testValue = 11f;\n        System.out.println(obj.testFun(15f));\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401162218-tw6gp2p","Type":"NodeParagraph","Properties":{"id":"20240401162218-tw6gp2p","updated":"20240401162220"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240401162220-qwbe33q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401162220-qwbe33q","style":"line-height: 22px;","updated":"20240401162231"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"15.0\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401162216-van4ecz","Type":"NodeBlockquote","Properties":{"id":"20240401162216-van4ecz","style":"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);","updated":"20250303185204"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20250303185204-17k2629","Type":"NodeParagraph","Properties":{"id":"20250303185204-17k2629","updated":"20250303185211"},"Children":[{"Type":"NodeText","Data":"注意！Java 中的泛型方法声明与 C"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"#"}]},{"Type":"NodeText","Data":" 不同，Java 的泛型方法的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026lt;\u0026gt;"},{"Type":"NodeText","Data":"​ 是写到访问修饰符后面的！"}]}]},{"ID":"20240401162332-qoap115","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401162332-qoap115","style":"line-height: 22px;","updated":"20240401162608"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class TestT\u003cT\u003e {\n    public\u003cK\u003e void testFun2(K k) {\n        System.out.println(k);\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401162625-h0zunws","Type":"NodeParagraph","Properties":{"id":"20240401162625-h0zunws","updated":"20250303185225"},"Children":[{"Type":"NodeText","Data":"而调用泛型方法时，Java 是不能传入泛型参数的，因此直接传入参数即可"}]},{"ID":"20240401162714-67y6ugd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401162714-67y6ugd","style":"line-height: 22px;","updated":"20240401162801"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class Lesson16 {\n    public static void main(String[] args) {\n        obj.testFun2(\"123\");\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401162802-olabvm9","Type":"NodeParagraph","Properties":{"id":"20240401162802-olabvm9","updated":"20240401162805"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240401162805-6c0py0s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401162805-6c0py0s","style":"line-height: 22px;","updated":"20240401162814"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"123\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401163003-wo8adsr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240401163003-wo8adsr","updated":"20250303185230"},"Children":[{"Type":"NodeText","Data":"Java 的泛型限制（泛型约束）"}]},{"ID":"20240401163015-87wgust","Type":"NodeParagraph","Properties":{"id":"20240401163015-87wgust","updated":"20250303185230"},"Children":[{"Type":"NodeText","Data":"泛型限制写法："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"泛型类名称\u0026lt;T extends 类名或接口名\u0026gt;"},{"Type":"NodeText","Data":"​\nJava 的泛型限制只能表示泛型类型必须是或者继承某一个类或接口"}]},{"ID":"20240401163208-6uefhp2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401163208-6uefhp2","style":"line-height: 22px;","updated":"20240401163757"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class TestT\u003cT extends Father\u003e {\n    public T testValue;\n\n    public T testFun(T t) {\n        return t;\n    }\n\n    public\u003cK\u003e void testFun2(K k) {\n        System.out.println(k);\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401163758-l2yh1xe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401163758-l2yh1xe","style":"line-height: 22px;","updated":"20240401163813"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class Lesson16 {\n    public static void main(String[] args) {\n        TestT\u003cSon\u003e obj = new TestT\u003c\u003e();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401164156-c69bd8k","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240401164156-c69bd8k","updated":"20240401164212"},"Children":[{"Type":"NodeText","Data":"泛型中的类型通配符 ？"}]},{"ID":"20240401164213-zgt36ah","Type":"NodeParagraph","Properties":{"id":"20240401164213-zgt36ah","updated":"20240401164246"},"Children":[{"Type":"NodeText","Data":"泛型中的类型通配符写法："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"泛型类名称\u0026lt;? extends 类名\u0026gt; 变量名 = null;"},{"Type":"NodeText","Data":"​\n"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"? extends 类名"},{"Type":"NodeText","Data":"​，表示类未知，需要使用该泛型对象时，可以单独实例化"}]},{"ID":"20240401163143-i204std","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401163143-i204std","style":"line-height: 22px;","updated":"20240401164548"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class Lesson16 {\n    public static void main(String[] args) {\n        TestT\u003c?\u003e obj2 = null;\n        obj2 = new TestT\u003cSon\u003e();\n        obj2 = new TestT\u003cFather\u003e();\n\n        TestT\u003c? extends IFly\u003e obj3 = null;\n        obj3 = new TestT\u003cSon\u003e();\n        //obj3 = new TestT\u003cFather\u003e();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401164559-7hsn4bl","Type":"NodeParagraph","Properties":{"id":"20240401164559-7hsn4bl"}}]}