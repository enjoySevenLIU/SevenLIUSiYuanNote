{
	"ID": "20240220212858-j5qicrx",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20240220212858-j5qicrx",
		"title": "P1L1——路点和寻路",
		"updated": "20240220215353"
	},
	"Children": [
		{
			"ID": "20240220212858-rfr5ajj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240220212858-rfr5ajj",
				"updated": "20240220213201"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "塔防游戏的敌人需要沿着固定的路线行走，因此敌人需要沿着"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "路点"
				},
				{
					"Type": "NodeText",
					"Data": "进行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "寻路"
				},
				{
					"Type": "NodeText",
					"Data": "\n在场景上设置一些路点，敌人会主动向路点直线移动，走到路点后就转向另一个路点移动，直到遍历所有路点"
				}
			]
		},
		{
			"ID": "20240220213205-9xcz5is",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240220213205-9xcz5is",
				"updated": "20240220213255"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如下面的场景，Cube需要沿着这几个路点依次进行移动："
				}
			]
		},
		{
			"ID": "20240220213252-x1jp20c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240220213252-x1jp20c",
				"updated": "20240220213252"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "width: 508px;",
						"style": "width: 498px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20240220213252-1t7vcwx.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 498px;\" parent-style=\"width: 508px;\"}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20240220213048-nweuldq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240220213048-nweuldq",
				"updated": "20240220213453"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里的实现思路是："
				}
			]
		},
		{
			"ID": "20240220213453-maoy9sv",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20240220213453-maoy9sv",
				"updated": "20240220213453"
			},
			"Children": [
				{
					"ID": "20240220213453-7v4hjsp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240220213453-7v4hjsp",
						"updated": "20240220213453"
					},
					"Children": [
						{
							"ID": "20240220213453-2dxb2yd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240220213453-2dxb2yd",
								"updated": "20240220213619"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "所有的路点被一个父对象管理，路点父对象挂载一个获取节点位置和节点数量的脚本"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Path"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20240220213455-o7hhewe",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20240220213455-o7hhewe"
					},
					"Children": [
						{
							"ID": "20240220213455-dp755vs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20240220213455-dp755vs",
								"updated": "20240220213644"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Cube挂载寻路脚本"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "PathFind"
								},
								{
									"Type": "NodeText",
									"Data": "​，寻路脚本和路点父对象的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Path"
								},
								{
									"Type": "NodeText",
									"Data": "​关联，\n通过得到的路点位置移动，到达点就切换到下一个路点，直至遍历所有路点"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20240220213645-fgnwg1j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240220213645-fgnwg1j",
				"updated": "20240220213650"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Path.cs"
				}
			]
		},
		{
			"ID": "20240220213650-dit9kge",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240220213650-dit9kge",
				"style": "line-height: 22px;",
				"updated": "20240220213947"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Collections.Generic;\nusing UnityEngine;\n\n//管理所有路点，对外提供其位置，以及管理的路点数量\npublic class Path : MonoBehaviour\n{\n\t//通过列表管理各个路点\n    List\u003cTransform\u003e nodeList = new List\u003cTransform\u003e();\n\n    void Start()\n    {\n\t\t//遍历子对象，将所有的路点加入到列表\n        foreach (Transform node in transform)\n        {\n            nodeList.Add(node);\n        }\n    }\n\n\t//通过索引获取某个路点位置的方法，供PathFind移动使用\n    public Vector3 GetNodePos(int i)\n    {\n        return nodeList[i].position;\n    }\n\n\t//获取管理的所有的路点数量，供PathFind确认是否已经走完所有的路点\n    public int GetMaxNodeNum()\n    {\n        return nodeList.Count;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240220213948-63du4pt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240220213948-63du4pt",
				"updated": "20240220213956"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "PathFind.cs"
				}
			]
		},
		{
			"ID": "20240220213956-3k9krmw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240220213956-3k9krmw",
				"style": "line-height: 22px;",
				"updated": "20240220215353"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine;\n\npublic class PathFind : MonoBehaviour\n{\n    public Path path;\t\t\t\t\t//当前寻路所用的父对象的Path脚本，通过它获取路点信息\n    public int curPathNodeIndex = 0;\t//当前寻路目标路点的索引\n\n    void Update()\n    {\n\t\t//通过当前索引与Path路点数量比较确认是否到达终点\n        if (curPathNodeIndex \u003e= path.GetMaxNodeNum())\n        {\n            print(\"到达终点\");\n            return;\n        }\n\t\t//获取当前寻路的目标位置\n        Vector3 curNodePos = path.GetNodePos(curPathNodeIndex);\n        float dis = Vector3.Distance(curNodePos, transform.position);\n\t\t//当距离小于一定值时，认为到达了路点，切换下一个路点\n        if (dis \u003c 0.1f)\n            curPathNodeIndex++;\n\t\t//获取方向\n        Vector3 dir = (curNodePos - transform.position).normalized;\n\t\t//位移，假设速度是6\n        transform.position += dir * 6 * Time.deltaTime;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}