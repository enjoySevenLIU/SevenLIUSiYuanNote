{"ID":"20240517223205-b5ofnf8","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240517223205-b5ofnf8","title":"U4S4L16——关于Async Operation Handle","type":"doc","updated":"20250116105330"},"Children":[{"ID":"20240518202211-qso285h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240518202211-qso285h","updated":"20240518203429"},"Children":[{"Type":"NodeText","Data":"本章代码关键字"}]},{"ID":"20240518195343-tgg0qw6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240518195343-tgg0qw6","style":"line-height: 22px;","updated":"20240518202511"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"asyncOperationHandle\u003c\u003e.GetDownloadStatus()\t//获取当前下载状态的结构体\nDownloadStatus\t\t\t\t\t\t\t\t//加载状态结构体，获取到加载进度，加载字节数，总字节数\nAsyncOperationHandle\t\t\t\t\t\t//无类型的异步操作处理类，AsyncOperationHandle\u003c\u003e可隐式转换为它，也可以转换回去\nasyncOperationHandle.Convert\u003c\u003e()\t\t\t//将无类型的异步操作处理类转换为有类型的\nasyncOperationHandle\u003c\u003e.WaitForCompletion()\t//强制同步加载资源\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240517223205-yho7g63","Type":"NodeHeading","HeadingLevel":2,"Properties":{"alias":"DownloadStatus","id":"20240517223205-yho7g63","name":"asyncOperationHandle\u0026lt;\u0026gt;.GetDownloadStatus()","updated":"20250114152845"},"Children":[{"Type":"NodeText","Data":"获取加载进度"}]},{"ID":"20240518195004-usvz3y5","Type":"NodeParagraph","Properties":{"id":"20240518195004-usvz3y5","updated":"20250114152634"},"Children":[{"Type":"NodeText","Data":"我们通过调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle\u0026lt;\u0026gt;.GetDownloadStatus()"},{"Type":"NodeText","Data":"​ 来获取当前打印状态，返回的是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"DownloadStatus"},{"Type":"NodeText","Data":"​ 结构体数据\n通过该结构体我们可以获取到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Percent"},{"Type":"NodeText","Data":"​ 加载进度（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"0~1"},{"Type":"NodeText","Data":"​），"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"DownloadedBytes"},{"Type":"NodeText","Data":"​ 加载字节数，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TotalBytes"},{"Type":"NodeText","Data":"​ 总字节数"}]},{"ID":"20240518194938-ks2of2t","Type":"NodeParagraph","Properties":{"id":"20240518194938-ks2of2t","style":"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);","updated":"20250114152845"},"Children":[{"Type":"NodeText","Data":"注意：如果该资源相关的 AB 包已经加载过了，那么只会打印 0"}]},{"ID":"20240517223343-3rziuj4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240517223343-3rziuj4","style":"line-height: 22px;","updated":"20240517223343"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"void Start()\n{\n    StartCoroutine(LoadAsset());\n}\n\nIEnumerator LoadAsset()\n{\n    AsyncOperationHandle\u003cGameObject\u003e handle = Addressables.LoadAssetAsync\u003cGameObject\u003e(\"Cube\");\n    //注意：如果该资源相关的AB包 已经加载过了 那么 只会打印0\n    while (!handle.IsDone)\n    {\n        DownloadStatus info = handle.GetDownloadStatus();\n        //加载进度\n        print(\"下载进度：\" + info.Percent);\n        //字节加载进度 代表 AB包 加载了多少：当前下载字节数 / 文件总字节数\n        print(\"下载字节数：\" + info.DownloadedBytes + \"/\" + info.TotalBytes);\n        yield return 0;\n    }\n    //加载成功后即可使用\n    if (handle.Status == AsyncOperationStatus.Succeeded)\n    {\n        Instantiate(handle.Result);\n    }\n    else\n        Addressables.Release(handle);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240518194957-g5ujg8p","Type":"NodeHeading","HeadingLevel":2,"Properties":{"alias":"asyncOperationHandle.Convert\u0026lt;\u0026gt;()","id":"20240518194957-g5ujg8p","name":"AsyncOperationHandle","updated":"20250114152711"},"Children":[{"Type":"NodeText","Data":"无类型句柄转换"}]},{"ID":"20240518195504-7bzgr9l","Type":"NodeParagraph","Properties":{"id":"20240518195504-7bzgr9l","updated":"20250114152644"},"Children":[{"Type":"NodeText","Data":"无类型句柄指的是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle"},{"Type":"NodeText","Data":"​，它不携带类型信息\n它在内部通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"implicit operator"},{"Type":"NodeText","Data":"​ 重载了隐式转换，使得 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle\u0026lt;\u0026gt;"},{"Type":"NodeText","Data":"​ 可以隐式转换为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240518200503-3171twr","Type":"NodeParagraph","Properties":{"id":"20240518200503-3171twr","updated":"20240518200522"},"Children":[{"Type":"NodeText","Data":"重载了隐式转换运算符的具体用法详见："},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/user-defined-conversion-operators","TextMarkTextContent":"用户定义的显式和隐式转换运算符 - 提供对不同类型的转换 - C# reference | Microsoft Learn"}]},{"ID":"20240518200241-uqr243v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240518200241-uqr243v","style":"line-height: 22px;","updated":"20240518200433"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"//AsyncOperationHandle内部\nstatic public implicit operator AsyncOperationHandle(AsyncOperationHandle\u003cTObject\u003e obj)\n{\n    return new AsyncOperationHandle(obj.m_InternalOp, obj.m_Version, obj.m_LocationName);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240518200445-x1cfciq","Type":"NodeParagraph","Properties":{"id":"20240518200445-x1cfciq","updated":"20250114152655"},"Children":[{"Type":"NodeText","Data":"我们可以将异步加载方法 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Addressables.LoadAssetAsync\u0026lt;\u0026gt;()"},{"Type":"NodeText","Data":"​ 返回的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle\u0026lt;\u0026gt;"},{"Type":"NodeText","Data":"​ 隐式转换为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle"},{"Type":"NodeText","Data":"​\n之后在将无类型的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle"},{"Type":"NodeText","Data":"​ 转换为有类型的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle\u0026lt;\u0026gt;"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240518200619-22gr9d5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240518200619-22gr9d5","style":"line-height: 22px;","updated":"20240518200942"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"void Start()\n{\n    AsyncOperationHandle tempHandle = Addressables.LoadAssetAsync\u003cTexture2D\u003e(\"Cube\");\n    //将 无类型句柄 转换为 有类型的泛型对象\n    AsyncOperationHandle\u003cTexture2D\u003e handle = tempHandle.Convert\u003cTexture2D\u003e();\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240518200943-1h3bk8b","Type":"NodeParagraph","Properties":{"id":"20240518200943-1h3bk8b","updated":"20240518202707"},"Children":[{"Type":"NodeText","Data":"这种有类型句柄可转换为无类型句柄的特性，可用于统一管理加载出来的不同资源"}]},{"ID":"20240518202709-vhe9zha","Type":"NodeParagraph","Properties":{"id":"20240518202709-vhe9zha","updated":"20250114152704"},"Children":[{"Type":"NodeText","Data":"我们可以使用无类型的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle"},{"Type":"NodeText","Data":"​ 容器来装载不同泛型类型的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle\u0026lt;\u0026gt;"},{"Type":"NodeText","Data":"​ 数据"}]},{"ID":"20240518202825-riqi0f0","Type":"NodeParagraph","Properties":{"id":"20240518202825-riqi0f0","updated":"20250114152711"},"Children":[{"Type":"NodeText","Data":"这样，我们不需要使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle\u0026lt;\u0026gt;"},{"Type":"NodeText","Data":"​ 的父类或者接口的容器去统一的装载 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle\u0026lt;\u0026gt;"},{"Type":"NodeText","Data":"​ 数据\n方便我们对各种 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AsyncOperationHandle\u0026lt;\u0026gt;"},{"Type":"NodeText","Data":"​ 数据执行一些不涉及资源类型信息的操作，例如卸载等"}]},{"ID":"20240518201138-9frid0m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240518201138-9frid0m","style":"line-height: 22px;","updated":"20240518203429"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"public Dictionary\u003cstring, AsyncOperationHandle\u003e resDic = new Dictionary\u003cstring, AsyncOperationHandle\u003e();\n\npublic void Clear()\n{\n    foreach (var handle in resDic.Values)\n    {\n\t\t//对不同类型的AsyncOperationHandle\u003c\u003e完成了统一的卸载\n        Addressables.Release(handle);\n    }\n    resDic.Clear();\n    AssetBundle.UnloadAllAssetBundles(true);\n    Resources.UnloadUnusedAssets();\n    GC.Collect();\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240518201450-yzonl7k","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240518201450-yzonl7k","name":"asyncOperationHandle\u0026lt;\u0026gt;.WaitForCompletion()","updated":"20250116105330"},"Children":[{"Type":"NodeText","Data":"强制同步加载资源"}]},{"ID":"20250114152213-m87hdkm","Type":"NodeBlockquote","Properties":{"id":"20250114152213-m87hdkm","style":"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color); --b3-parent-background: var(--b3-card-error-background);","updated":"20250116105324"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20250114152214-rtmyhyn","Type":"NodeParagraph","Properties":{"id":"20250114152214-rtmyhyn","updated":"20250116105324"},"Children":[{"Type":"NodeText","Data":"警告！如果项目最终是导出到 WebGL 的，切勿使用此方法，此方法不支持 WebGL 平台上执行！"}]}]},{"ID":"20240518201655-eqjq7ae","Type":"NodeParagraph","Properties":{"id":"20240518201655-eqjq7ae","updated":"20250116105330"},"Children":[{"Type":"NodeText","Data":"如果执行了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"WaitForCompletion()"},{"Type":"NodeText","Data":"​，那么会阻塞主线程，一定要当资源加载结束后，才会继续往下执行"}]},{"ID":"20240518202021-c1sl66z","Type":"NodeBlockquote","Properties":{"id":"20240518202021-c1sl66z","style":"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);","updated":"20250114152207"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20250114152207-a5ik5h1","Type":"NodeParagraph","Properties":{"id":"20250114152207-a5ik5h1","updated":"20250114152207"},"Children":[{"Type":"NodeText","Data":"注意：如无特殊需求，不建议使用该方法"}]}]},{"ID":"20240518201838-2y8rcbl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240518201838-2y8rcbl","style":"line-height: 22px;","updated":"20240518201951"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YyM="},{"Type":"NodeCodeBlockCode","Data":"void Start()\n{\n    AsyncOperationHandle\u003cGameObject\u003e handle = Addressables.LoadAssetAsync\u003cGameObject\u003e(\"Cube\");\n    handle.WaitForCompletion();\n    Instantiate(handle.Result);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250114152318-cqqtrzh","Type":"NodeBlockquote","Properties":{"id":"20250114152318-cqqtrzh","style":"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color); --b3-parent-background: var(--b3-card-warning-background);","updated":"20250114152736"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240518201943-gov6nh4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240518201943-gov6nh4","updated":"20250114152736"},"Children":[{"Type":"NodeText","Data":"注意！"}]},{"ID":"20250114152147-f8v6tf1","Type":"NodeList","ListData":{},"Properties":{"id":"20250114152147-f8v6tf1","updated":"20250114152736"},"Children":[{"ID":"20250114152736-ycdinik","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250114152736-ycdinik","updated":"20250114152736"},"Children":[{"ID":"20250114152736-o7xdubm","Type":"NodeParagraph","Properties":{"id":"20250114152736-o7xdubm","updated":"20250114152736"},"Children":[{"Type":"NodeText","Data":"Unity 2020.1 版本或者之前，执行该句代码不仅会等待该资源，他会等待所有没有加载完成的异步加载加载完后才会继续往下执行\n"}]}]},{"ID":"20250114152737-z7qak4g","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250114152737-z7qak4g","updated":"20250114152737"},"Children":[{"ID":"20250114152737-potdo9d","Type":"NodeParagraph","Properties":{"id":"20250114152737-potdo9d","updated":"20250114152737"},"Children":[{"Type":"NodeText","Data":"Unity 2020.2 版本或以上版本，在加载已经下载的资源时性能影响会好一些"}]}]}]},{"ID":"20250114152728-180znq5","Type":"NodeParagraph","Properties":{"id":"20250114152728-180znq5","updated":"20250114152728"},"Children":[{"Type":"NodeText","Data":"所以，总体来说不建议大家使用这种方式加载资源"}]}]},{"ID":"20250114152303-hfbea88","Type":"NodeParagraph","Properties":{"id":"20250114152303-hfbea88","updated":"20250114152303"}}]}