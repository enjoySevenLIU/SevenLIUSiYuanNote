{
	"ID": "20231116225317-95bo7dx",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20231116225317-95bo7dx",
		"scroll": "\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231116225317-95bo7dx\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231116225317-d7a5xl8\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231116232241-xly55p7\u0026quot;,\u0026quot;scrollTop\u0026quot;:0\u0026#125;",
		"title": "U4S2SL4——单例模式化的获取数据",
		"type": "doc",
		"updated": "20250216183805"
	},
	"Children": [
		{
			"ID": "20231116225317-d7a5xl8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231116225317-d7a5xl8",
				"updated": "20240228230846"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为什么要单例模式化的获取数据"
				}
			]
		},
		{
			"ID": "20231116225724-14lgihg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231116225724-14lgihg",
				"updated": "20240228230846"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于只用不变并且要复用的数据，比如配置文件中的数据，我们往往需要在很多地方获取他们\n如果我们直接通过在脚本中"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": "​关联 或者 动态加载，如果在多处使用，会存在很多重复代码，效率较低\n如果我们将此类数据通过单例模式化的去获取，可以提升效率，减少代码量"
				}
			]
		},
		{
			"ID": "20231116225930-u3ihfa9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20231116225930-u3ihfa9",
				"updated": "20250216183805"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现单例模式化获取数据"
				}
			]
		},
		{
			"ID": "20231116230148-1hlqetx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231116230148-1hlqetx",
				"updated": "20250216183805"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "知识点：面向对象、单例模式、泛型等等"
				}
			]
		},
		{
			"ID": "20231116230148-bqt43yj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231116230148-bqt43yj",
				"updated": "20240228230846"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以实现一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ScriptableObject"
				},
				{
					"Type": "NodeText",
					"Data": "​数据单例模式基类，让我们只需要让子类继承该基类，就可以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "直接获取到数据"
				},
				{
					"Type": "NodeText",
					"Data": "\n而不再需要去通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": "​关联 和 资源动态加载"
				}
			]
		},
		{
			"ID": "20231116230319-gzs7vy7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231116230319-gzs7vy7",
				"updated": "20240228230846"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种基类"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "比较适合配置数据的管理和获取"
				},
				{
					"Type": "NodeText"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "当我们的数据是只用不变，并且是唯一的时候，可以使用该方式提高我们的开发效率"
				},
				{
					"Type": "NodeText",
					"Data": "\n在此基础上你也可以根据自己的需求进行变形，比如添加数据持久化的功能，将数据从json中读取，并提供保存数据的方法\n但是不建议大家用ScriptableObject来制作数据持久化功能，除非你有这方面的特殊需求"
				}
			]
		},
		{
			"ID": "20231116231111-4a5f6qx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231116231111-4a5f6qx",
				"updated": "20240228230846"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先实现​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ScriptableObject"
				},
				{
					"Type": "NodeText",
					"Data": "​数据单例模式基类"
				}
			]
		},
		{
			"ID": "20231116231619-0ph81r2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231116231619-0ph81r2",
				"style": "line-height: 22px;",
				"updated": "20240228230846"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine;\n//这里的T是继承该基类的类，T用于根据子类类型来实例化派生类\npublic class SingleScriptableObject\u003cT\u003e : ScriptableObject where T : ScriptableObject\n{\n    private static T instance;\n\n    //如果为空 首先应该去资源路径下加载对于的数据资源文件\n    public static T Instance\n    {\n        get\n        {\n            //下面这句代码的含义是，如果instance为null就通过Resources加载配置文件\n            instance ??= Resources.Load\u003cT\u003e(\"ScriptableObject/\" + typeof(T).Name);\n            //如果还是为空，就创建一个默认的空配置对象\n            if (instance == null)\n                instance = CreateInstance\u003cT\u003e();\n            return instance;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231116231618-99ph8cl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231116231618-99ph8cl",
				"updated": "20240228230846"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之后让一个继承"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ScriptableObject"
				},
				{
					"Type": "NodeText",
					"Data": "​的类改为去继承它"
				}
			]
		},
		{
			"ID": "20231116231931-n70u92l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231116231931-n70u92l",
				"style": "line-height: 22px;",
				"updated": "20240228230846"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using System.Collections.Generic;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"RoleInfo\", menuName = \"ScriptableObject/角色信息\")]\npublic class RoleInfo : SingleScriptableObject\u003cRoleInfo\u003e\n{\n    [System.Serializable]\n    public class RoleData\n    {\n        public int id;\n        public string res;\n        public int atk;\n        public string tips;\n        public int lockMoney;\n        public int type;\n        public string hitEff;\n\n        public void Print()\n        {\n            Debug.Log(this.id);\n            Debug.Log(this.res);\n            Debug.Log(this.atk);\n            Debug.Log(this.tips);\n            Debug.Log(this.lockMoney);\n            Debug.Log(this.type);\n            Debug.Log(this.hitEff);\n        }\n    }\n\n    public List\u003cRoleData\u003e data;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231116231958-ekmke6y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231116231958-ekmke6y",
				"updated": "20240228230846"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之后我们就可以随时调用这个派生类了"
				}
			]
		},
		{
			"ID": "20231116232016-xvrosxr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20231116232016-xvrosxr",
				"style": "line-height: 22px;",
				"updated": "20240228230846"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YyM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "using UnityEngine;\n\npublic class Lesson8 : MonoBehaviour\n{\n    void Start()\n    {\n        print(RoleInfo.Instance.data[0].id);\n        print(RoleInfo.Instance.data[1].tips);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20231116232241-xly55p7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20231116232241-xly55p7",
				"updated": "20240228230846"
			}
		}
	]
}